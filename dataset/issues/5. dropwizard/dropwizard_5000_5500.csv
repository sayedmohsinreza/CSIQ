"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","227","Adding a sub-module to support Guice","You simply need to add a bundle during the initialize phase and you are ready to go.  ```     bootstrap.addBundle(new GuiceBundle() {         @Override         protected Collection configureModules(                 HelloWorldConfiguration configuration) {             return Lists.newArrayList(new HelloWorldModule(configuration));         }     }); ```","closed","","eliast","2012-11-30T01:57:07Z","2014-07-02T20:18:23Z"
"","248","Split out json package into separate module","Would you be interested in splitting out the ""json"" package currently residing in dropwizard-core into a separate dropwizard-json module?  Per the Dropwizard recommended package structure, I'm creating separate ""helloworld-api"", ""helloworld-client"" and ""helloworld-service"" modules.  In the api module, I'm using the JsonSnakeCase annotation which requires me to specify dropwizard-core as a maven dependency when all I'm really using in this case is the json package.  In my client module, I'm relying on the api module for my JSON structures.  The client module doesn't necessarily need the entire core of Dropwizard as its just an HTTP client that needs to know the JSON structures.  I can submit a pull request for this, but I wanted to check with you first.  Thanks a lot.","closed","","jplock","2013-01-18T17:28:50Z","2013-01-18T19:31:03Z"
"","45","Add JDBI and an embedded db to the dropwizard example","Would be cool to have JDBI and SQL in the example project.  I would be happy to push the changes using an embedded H2 database if you like.","closed","documentation,","wolfeidau","2012-03-07T08:00:14Z","2012-03-12T04:40:07Z"
"","61","Replaces Logula dependency with Log wrapper trait.","While Logula works well enough, it doesn't integrate with Dropwizards' logging (e.g. it's configuration). This especially stands out in mixed Scala/Java projects.  Since Dropwizards' logging does nearly everything Logula does for us, lets use that and provide a simple Logging implementation to make it available via mix-in composition.  Note: adds new findbugs exclusion because the trait generates an inner-class name that disagrees with findbugs.","closed","","nicktelford","2012-03-21T12:51:46Z","2014-07-09T20:03:50Z"
"","119","Add jersey-test-framework-core to POM","While jersey-test-framework-inmemory seems to depend on jersey-test-framework-core Gradle (and probably some other build tools) doesn't add it to the list of dependencies. The dependency list on http://mvnrepository.com/artifact/com.sun.jersey.jersey-test-framework/jersey-test-framework-inmemory/1.12 also doesn't list jersey-test-framework-core.  This problem can easily be fixed by adding the dependency on jersey-test-framework-core to dropwizard-testing's POM file.","closed","","joschi","2012-06-28T10:59:27Z","2014-07-09T19:34:01Z"
"","246","Make logging work properly when using Scala","When using the dropwizard logging trait with scala, I pretty much immediately encounter this:  ``` ambiguous reference to overloaded definition, both method warn in trait Logger of type (x$1: java.lang.String, x$2: Any, x$3: Any)Unit and  method warn in trait Logger of type (x$1: java.lang.String, x$2: [java.lang.Object])Unit match argument types (java.lang.String,String,String) [ERROR]             logger.warn(""Foo {}: {}"", bar, baz) ```  See https://groups.google.com/forum/?fromgroups=#!topic/scala-language/ms4IVIu-xGw for a discussion of this problem.  A simple fix would be to have a Logging trait for scala that wraps the slf4j methods like so:  ```     def info(msg: String, params: Any*) {       logger.info(msg, params.map(_.asInstanceOf[Object]).toArray)     } ```  Alternatively, the scala module could use https://github.com/weiglewilczek/slf4s/ or http://software.clapper.org/grizzled-slf4j/.","closed","","tomdz","2013-01-17T20:46:29Z","2013-02-03T17:16:00Z"
"","311","HTML resources not served (404) in Fat Jar created via OneJar","When using Spring with Dropwizard, it is not possible to use the regular Maven Shade plugin for fat jars, one has to use One Jar because Spring libs do not support being embedded in a different JAR:  The app works great in OneJar but all HTML resources are not found (you get a 404). My colleague Tommy Schmal has dug into this and found a possible cause:  https://groups.google.com/forum/#!searchin/dropwizard-user/onejar/dropwizard-user/MSp3RjtJy1o/RKjve1YKLYoJ  I have created a full-blown sample to reproduce this:  https://github.com/jacek99/dropwizard-spring-di-security-onejar-example  Do    gradle run  and open the browser at http://localhost:8080/ You should see a webpage with an image.  Now do    gradle runOneJar  and do the same thing. You will get a 404 instead. This issue is currently blocking us from deploying any HTML5 UI frontends with our Dropwizard backends.","closed","bug,","jacek99","2013-04-24T16:00:35Z","2014-11-19T21:21:26Z"
"","353","Add %app and %pid patterns for syslog appenders.","When present (including by default) the tokens `%app` and `%pid` will be replaced with the name of the Dropwizard application and PID of the process respectively.  This is in line with the convention for many Linux processes to prefix their log messages with: ""ApplicationName[PID]: "".  The PID can only be determined automatically for some UNIX JVMs (including HotSpot). For others, it will be omitted entirely.","closed","","nicktelford","2013-06-18T14:38:02Z","2014-07-09T17:32:40Z"
"","281","JSON body in POST method","When i try to post the json {""id"":1,""content"":""exp""} for the /hello-world i get 415 unsupported media type. Can you please help me resolve this.  Thanks in advance.","closed","","vivekvenkatachari","2013-03-11T03:22:40Z","2013-03-11T04:05:23Z"
"","255","adminPort doesn't listen on bindHost","When I have a different port and adminPort specified, the port will bind to bindHost, but adminPort still binds to all addresses.  The problem seems to be in ServerFactory.java.  The createInternalConnector() does not set the host on the SocketConnector.","closed","","JonMR","2013-02-01T20:15:04Z","2014-07-09T18:37:53Z"
"","340","Allow permissive deserialization of all enums","When deserializing enum types, we should allow: - Whitespace in the value, which should be stripped out for parsing. - Lower-case characters, which should be converted to upper-case.  This makes using enum type in Configuration files more permissive and less confusing.","closed","","nicktelford","2013-05-31T18:16:33Z","2014-06-25T15:24:07Z"
"","499","Multiple AssetsBundle","When defining multiple asset bundles, only the last one is working.  ``` @Override public void initialize(Bootstrap bootstrap) {     bootstrap.addBundle(new AssetsBundle(""/assets/css"", ""/css""));     bootstrap.addBundle(new AssetsBundle(""/assets/fonts"", ""/fonts""));     bootstrap.addBundle(new AssetsBundle(""/assets/js"", ""/js""));      bootstrap.addBundle(new ViewBundle()); } ```  In this case, only `/js` is accessible.  A simple workaround is to give a different assetsName in the AssetsBundle constructor.   ``` @Override public void initialize(Bootstrap bootstrap) {     bootstrap.addBundle(new AssetsBundle(""/assets/css"", ""/css"", null, ""css""));     bootstrap.addBundle(new AssetsBundle(""/assets/js"", ""/js"", null, ""js""));     bootstrap.addBundle(new AssetsBundle(""/assets/fonts"", ""/fonts"", null, ""fonts""));      bootstrap.addBundle(new ViewBundle()); } ```  Dropwizard should take care of this by default ... Or at least display a warning message at init time.","closed","","Toilal","2014-03-19T08:11:32Z","2014-10-02T04:03:44Z"
"","396","Log nested Exception traces in a sane order.","When an Exception is wrapped by another Exception, Java and Logback format the traces such that the root cause is the last trace output:  ``` ! java.lang.RuntimeException: Very general error doing something ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwOuterWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:48) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.getException(PrefixedRootCauseFirstThrowableProxyConverterTest.java:24) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.(PrefixedRootCauseFirstThrowableProxyConverterTest.java:20) ! at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)  ! at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68) Caused by: ! java.io.IOException: Fairly general error doing some IO ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwInnerWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:40) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwOuterWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:46) !... 30 common frames omitted Caused by: ! java.net.SocketTimeoutException: Timed-out reading from socket ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwRoot(PrefixedRootCauseFirstThrowableProxyConverterTest.java:33) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwInnerWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:38) !... 31 common frames omitted ```  Instead, the root cause should be the first Exception, with the trace ascending up through the wrapping exceptions.  This makes identifying the root cause of a problem simpler, because it's usually described in more detail by the root cause. Also, the stack trace now ascends linearly, in one pass, without the need for any messy ""N common frames omitted""; the first frame is the frame where the error occurred, and the last is the `main` entry-point to the program.  ``` ! java.net.SocketTimeoutException: Timed-out reading from socket ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwRoot(PrefixedRootCauseFirstThrowableProxyConverterTest.java:32) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwInnerWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:37) ! Causing: java.io.IOException: Fairly general error doing some IO ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwInnerWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:39) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwOuterWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:45) ! Causing: java.lang.RuntimeException: Very general error doing something ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.throwOuterWrapper(PrefixedRootCauseFirstThrowableProxyConverterTest.java:47) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.getException(PrefixedRootCauseFirstThrowableProxyConverterTest.java:23) ! at io.dropwizard.logging.PrefixedRootCauseFirstThrowableProxyConverterTest.(PrefixedRootCauseFirstThrowableProxyConverterTest.java:19) ! at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)  ! at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:68) ```  Since Logback provides this functionality via the `%rEx` pattern (instead of `%ex` or `%xEx`), users may enable/disable this behaviour by configuring `logFormat`.","closed","","nicktelford","2013-09-23T17:45:12Z","2014-07-09T17:26:05Z"
"","122","Support finer grained control of security over the admin servlet","We'd like to be able to a) Enforce SSL for admin servlet requests in addition to basic auth b) Be more selective about which admin features are protected at all  Being able to add a servlet filter to the admin handler would be adequate for this.  Happy to submit a patch for this if it's likely to be included.","closed","feature,","tomakehurst","2012-06-29T16:09:16Z","2013-05-07T21:45:17Z"
"","125","Support multiple config files","We'd find it really useful to be able to specify two config files at startup, one for defaults, one for environment-specific overrides.  Would you be interested in including this if we supply a patch?","closed","","tomakehurst","2012-07-02T12:08:52Z","2021-04-27T08:19:03Z"
"","141","Allow disabling log rotation for file appender.","We use the system log rotate to manage log rotation so we need the application to not do its own log rotate. This patch adds a new boolean setting ""archive"" that if false, disable rotation.","closed","","deverton","2012-07-24T05:08:55Z","2014-06-26T23:27:37Z"
"","544","DropwizardAppRule should not require a configPath to operate.","We use dropwizard with no configuration file (no *.yml files). So the DropwizardAppRule integration testing helper should allow the same. ImmutableMap does not accept null values, so it had to be converted to a builder and the `file` entry wrapped with a conditional.  I'm not sure if there are any other assumptions around this. So far it ""just works"" for us to pass `null` as the `configPath` argument with this change in the DropwizardAppRule.","closed","","dirkraft","2014-04-16T16:21:40Z","2014-06-18T06:20:57Z"
"","121","Support DNS overrides via HttpClient 4.2's DnsResolver","We have a service our app connects to which is exposed via HTTPS. The cert contains the same host name for every environment (internally we use DNS switching to move between environments). In order to support connecting to this externally (where we don't control DNS) it would be great to have some config exposed that allows setting of name overrides by providing a DnsResolver to the apache http client.  I'm happy to write the code for this if it's likely to get merged.","closed","feature,","tomakehurst","2012-06-29T16:05:51Z","2012-08-03T17:33:03Z"
"","500","Create CONTRIBUTORS file","Want to start capturing all contributors to the project to be updated regularly (at every release?)","closed","","skamille","2014-03-19T20:55:33Z","2014-09-30T17:09:54Z"
"","210","Environment.getServlets() throws NPE if no servlet registered","Version 0.6.0-SNAPSHOT  I'm attempting to use the same configuration for Dropwizard and Jersey unit tests, so ResourceConfig is configured using filter parameters instead of Dropwizard's environment.  I invoke setJerseyServletContainer(null) to indicate I don't want Dropwizard to configure a container for me. It does not throw an exception so I assume this is legal but later on Dropwizard invokes Environment.getServlets() which throws the following exception:  ``` at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:191) at com.yammer.dropwizard.config.Environment.addServlet(Environment.java:205) at com.yammer.dropwizard.config.Environment.getServlets(Environment.java:382) at com.yammer.dropwizard.config.ServerFactory.createExternalServlet(ServerFactory.java:296) at com.yammer.dropwizard.config.ServerFactory.createHandler(ServerFactory.java:238) at com.yammer.dropwizard.config.ServerFactory.buildServer(ServerFactory.java:86) at com.yammer.dropwizard.cli.ServerCommand.run(ServerCommand.java:42) at com.yammer.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:37) at com.yammer.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:59) at com.yammer.dropwizard.cli.Cli.run(Cli.java:53) at com.yammer.dropwizard.Service.run(Service.java:86) ```  I am expecting to be able to configure ResourceConfig either through Environment or servlet parameters or both.","closed","","cowwoc","2012-11-08T22:53:27Z","2012-11-09T17:01:03Z"
"","455","Failed to parse configuration at: server.applicationConnectors; Could not resolve type id 'http' into a subtype of [simple type, class io.dropwizard.jetty.ConnectorFactory]","Using the example config in 0.7-rc1 I receive the following  ``` example.yml has an error:   * Failed to parse configuration at: server.applicationConnectors; Could not resolve type id 'http' into a subtype of [simple type, class io.dropwizard.jetty.ConnectorFactory]  at [Source: N/A; line: -1, column: -1] (through reference chain: com.massrel.twitterproxy.ProxyConfig[""server""]->io.dropwizard.server.DefaultServerFactory[""applicationConnectors""]) ```  Using this config:  ``` server: #  softNofileLimit: 1000 #  hardNofileLimit: 1000   applicationConnectors:     - type: http       port: 8080     - type: https       port: 8443       keyStorePath: example.keystore       keyStorePassword: example       validateCerts: false # this requires the npn-boot library on the JVM's boot classpath #    - type: spdy #      port: 8445 #      keyStore: example.keystore #      keyStorePassword: example #      validateCerts: false   adminConnectors:     - type: http       port: 8081     - type: https       port: 8444       keyStorePath: example.keystore       keyStorePassword: example       validateCerts: false  # Logging settings. logging:    # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.   level: INFO    # Logger-specific levels.   loggers:      # Sets the level for 'com.example.app' to DEBUG.     com.example.app: DEBUG      org.hibernate.SQL: ALL    appenders:     - type: console ```  I'm guessing it's a config or documentation issue, but I'm having no luck finding the root cause as I see the HTTP type declared here https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java#L164 but I'll admit to not being very fluent at Java. :)","closed","","bretthoerner","2014-02-03T17:19:55Z","2018-08-29T17:45:06Z"
"","160","Fix for #159","using getPathInfo() rather than getServletPath() for finding registered task","closed","","jaredstehler","2012-08-03T22:44:05Z","2014-07-09T19:17:49Z"
"","476","""db dump --data"" doesn't dump the data","using 0.7.0-rc1 - seems to be a liquibase/CLI regression:  ``` java -jar ./target/dw-1.0.0.jar db dump -o ./changeset.xml --data  ./my.yml                          ```  Should write the liquibase changeset including the data, (useful for reference data dump), but it doesn't.","closed","bug,","ghost","2014-02-20T19:56:07Z","2014-05-26T16:16:05Z"
"","129","Update pom.xml plugins and add versions plugin","Use:  mvn versions:display-dependency-updates versions:display-plugin-updates  To report dependecy & plugin updates. Note that I only updated plugin dependencies (have been using these versiosn for a few weeks on other DW projects as well.)  There are also dependency updates, but did NOT changes those (Jersey is now on 1.13, httpclient on 4.2.1, etc.)","closed","","asinger","2012-07-03T22:30:24Z","2014-06-18T07:49:46Z"
"","537","Upgrade to use Jackson 2.3.3","Upgrading the Jackson libraries to 2.3.3. This is in reference to an issue seen during an upgrade to 0.7.0: https://github.com/FasterXML/jackson-module-afterburner/issues/28.  One of the tests was failing due to the error message being different due to the change in Jackson 2.3.3. Should the tests be relying on a specific error message? Isn't it good enough to know that a ConfigurationParsingException was thrown?","closed","","mveitas","2014-04-12T13:18:20Z","2014-07-09T16:24:20Z"
"","199","Upgrade to JDBI 2.41","Upgrade to JDBI 2.41","closed","","cemo","2012-10-29T07:50:57Z","2014-07-09T19:00:38Z"
"","487","configuration reference does not match 0.7 configs","updating to 0.7 rc2 recently i found my 0.6.2 configs did not work.  this lead me to https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/configuration.rst which hasnt been updated to reflect new config structure","closed","","jasond","2014-03-06T22:32:57Z","2014-03-07T11:39:52Z"
"","472","Updating information about @Rule annotation in Resources testing","Updating information about @Rule annotation in Resources testing","closed","","airborn","2014-02-16T16:01:02Z","2014-07-04T01:15:18Z"
"","59","Updated README and documentation to reflect switch to Logback","Updates some docs that were missed in the first pass.  I noticed that the change to Logback hasn't been reflected in: - dropwizard-db - Constructs a log4j Logger for SQL trace logging, as the DBI API requires it. Will this cause SQL logging to be logged independently of configuration? - dropwizard-scala - Examples all use Logula, wouldn't they be better of just using com.yammer.dropwizard.logging.Log instead?","closed","","nicktelford","2012-03-21T11:56:13Z","2014-07-09T20:04:20Z"
"","321","Local tests for example application","updated to master","closed","","barinek","2013-05-05T02:29:25Z","2014-06-12T10:30:45Z"
"","58","dropwizard-views instead of dropwizard-view","Updated the Maven module name in the documentation.","closed","","collinvandyck","2012-03-20T21:44:52Z","2014-07-09T20:05:21Z"
"","224","Example config SSL keyStorePath updated","updated the config file to have the proper config property of ""keyStore"" vs the 0.5.1 ""keyStorePath""","closed","","kvanvranken","2012-11-28T17:38:49Z","2014-06-14T03:48:00Z"
"","269","Updated testing docs to reflect usage of FEST over Hamcrest","Updated testing docs to reflect usage of FEST over Hamcrest","closed","","jplock","2013-02-20T03:29:50Z","2014-06-29T09:20:53Z"
"","240","Documentation fix","Updated docs to new Servce 0.6 api. Removed AssetBundle cache example: cache has been removed","closed","","iliasbartolini","2012-12-19T00:28:01Z","2014-07-09T18:42:26Z"
"","429","Dependency updates","Update all dependencies and Maven plugins used by Dropwizard.","closed","","joschi","2013-12-01T16:14:55Z","2014-06-15T10:15:56Z"
"","167","Command help printing to stdout","Typically, its considered good etiquette to print help to stderr but UsagePrinter.java prints to stdout. In addition, when the help task is invoked, the return code for the process is zero, so its impossible to tell whether the invocation of the script was successful without parsing the output. This limits the ability to compose Command tasks in other scripts.","closed","","stevvooe","2012-08-20T22:53:34Z","2012-08-24T09:00:42Z"
"","216","Fix AssetServlet trimming of '/', add ability to optionally specify a charset in the response's content-type","Two changes to AssetServlet 1. Responses can now optionally include a charset for all text/\* types. 2. Cleaned up the error-prone logic involving slash-trimming. Also fixed handling of the root uri path and resource paths (was broken before this) and added an explicit test case.","closed","","fleaflicker","2012-11-15T22:54:35Z","2014-07-09T18:52:02Z"
"","295","Fix href to manual in javadoc (Dropwizard Client)","Trivial javadoc fix.","closed","","kashyapp","2013-04-01T08:32:52Z","2014-07-09T17:49:51Z"
"","282","Add AfterBurner support","Totally ruins configuration file parsing, but works just fine once the YAML's done.","closed","improvement,","codahale","2013-03-13T21:10:37Z","2013-05-02T19:10:18Z"
"","55","Fixing a build issue in Scala example","To be honest I have absolutely no idea what I am doing. I watched a video by @tnm at Basho, played around with maven and tried the ""Getting Started"" section of dropwizard's manual. It was in Java but @tnm was talking about Scala. I searched and found this example in dropwizard's repo, and tried run it using ""mvn scala:run"", but it just failed. Made this changes, and it started working.  Sorry for the trouble if it makes no sense, and I'm missing something obvious.","closed","","amir","2012-03-18T12:19:43Z","2014-07-09T20:06:22Z"
"","433","Throw a ConstraintViolationException for empty resources","Throw a `ConstraintViolationException` (although with no `ConstraintViolation<>` at all) if an empty resource is being validated. At least a response with status 422 (Unprocessable Entity) is being generated by `ConstraintViolationExceptionMapper`. This kind of fixes #431.  Unfortunately it seems to be very hard to create proper `ConstraintViolation` instances without rewriting half of the validation framework.","closed","","joschi","2013-12-08T00:50:23Z","2014-06-25T20:39:41Z"
"","128","Don't throw NPE for anonymous HealthChecks","This would fail:  ``` java  /** Anyonymous Healthchecks don't work because dropwizard tries to add it's null canonical class name to Immutable list for debug logging */  environment.addHealthCheck(new HealthCheck(""Foo"") {     @Override protected Result check() throws Exception {         final int status = jerseyClient.resource(resource).path(myPath).post(ClientResponse.class).getStatus();         if (status != 200) {             return Result.unhealthy(""Foo should have returned 200"");         }         return Result.healthy();     } }); ```  These are put into an ImmutableList for debug logging. 1. Only do the list building stuff for logResources, logProviders, etc    if LOG.isDebugEnabled() 2. Handle null canonical names by logging this instead:  com.yammer.metrics.core.HealthCheck(""Foo"")  With the name of the healtcheck in parens.","closed","","asinger","2012-07-03T22:02:23Z","2014-07-01T14:36:00Z"
"","510","Add ability to black list cipher suites","This would close #489 (or at least it satisfies my constraints)  Allows a configuration such as the following contrived example  ``` yaml  server:   applicationConnectors:     - type: https       port: 8443       # [snip]       supportedCipherSuites: ['.*NULL.*']       excludedCipherSuites: ['TLS_ECDHE_RSA_WITH_NULL_SHA']  ```  And using [sslyze](https://github.com/iSECPartners/sslyze), I was able to verify that excluded cipher suite was actually excluded. This means that I decided, arbitrarily, to have exclusion have the higher precedence, so if a suite is both supported and excluded, it will be excluded.","closed","improvement,","nickbabcock","2014-03-25T20:38:16Z","2014-06-12T16:10:42Z"
"","226","Hardcoding locale to US in AsyncRequestLogTest.java","This tests fails on machines with other locales than US/UK","closed","","olvesh","2012-11-29T20:08:52Z","2014-07-09T18:46:28Z"
"","258","Line ending cleanup to help Windows","This request has a couple of commits to address log messages that use '\n' for line endings, instead of the system line separator.  I found most of these by way of `git grep '\\n'`, though that also comes up with some exception messages and some HTML output that I left alone. I tried to keep the change focused on log files, which are awkward to read on managed servers that might not have tools that can handle Unix-style line endings installed.","closed","","christophercurrie","2013-02-11T20:14:09Z","2014-07-09T16:18:15Z"
"","102","Fix Command to accept multiple options","This pull request is fixing Command.getOptionsWithHelp. It doesn't make sense to make all the new options defined by subclasses part of the same OptionGroup because an OptionGroup is designed to store a list of  mutually exclusive options.","closed","","andreisavu","2012-05-28T17:08:29Z","2014-07-09T19:42:37Z"
"","213","Adding client cert support","this pull request fixes issue #87","closed","","andershedstrom","2012-11-12T15:58:10Z","2014-06-16T06:42:46Z"
"","103","Added tests for ConfiguredCommand","This pull request assumes #102 was already merged.","closed","","andreisavu","2012-05-28T21:46:07Z","2014-07-09T19:42:07Z"
"","501","Mavenize Sphinx docs","This PR mavenizes the Sphinx documentation of Dropwizard and adds the Maven GitHub Site plugin to generate and publish Dropwizard documentation (as well as the Maven sites) automatically.  I've added a POM file to the `docs/` subdirectory containing the Sphinx documentation and included the [sphinx-maven plugin](http://tomdz.github.io/sphinx-maven/) to build the actual documentation. I've also added the [GitHub Site plugin](http://github.github.com/maven-plugins/site-plugin/) to automate publishing the generated documentation and Maven sites.  The result of a test run can be found at: - Contents of the `gh-pages` branch: https://github.com/joschi/dropwizard/tree/gh-pages - Rendered docs: http://joschi.github.io/dropwizard/0.7.0-SNAPSHOT/docs/ - Maven site for `dropwizard-core`: http://joschi.github.io/dropwizard/0.7.0-SNAPSHOT/dropwizard-core/  Current short-comings: - ~~Upload of the Maven sites and the documentation is implicitly run during the `site` phase. To disable the upload you have to add `-Dgithub.site.dryRun=true` to your Maven run.~~ - ~~Hyperlinks of the Maven sites are incorrect. This might be fixed with the [relativizeDecorationLinks](https://maven.apache.org/plugins/maven-site-plugin/run-mojo.html#relativizeDecorationLinks) parameter of the maven-site-plugin.~~ - ~~Project reports like the generated Javadoc and FindBugs results are missing. Those can and should be activated in the parent POM.~~ - The ugly standard skin is being used for the Maven sites. Instead we should use the [Fluido skin](https://maven.apache.org/skins/maven-fluido-skin/). :wink:","closed","documentation,","joschi","2014-03-19T23:12:01Z","2014-06-18T10:31:19Z"
"","531","Dropwizard 0.6.2 documentation","This PR adds the Dropwizard 0.6.2 documentation and Maven sites to the `gh-pages` branch into the directory `0.6.2`.  The docs have been generated from the `v0.6.2` tag, the URL will be http://dropwizard.github.io/dropwizard/0.6.2 for the documentation and http://dropwizard.github.io/dropwizard/0.6.2/maven for the Maven sites. A fully rendered GH page can be viewed at http://joschi.github.io/dropwizard/0.6.2/ (until it's available under the canonical URL).  This will close #529.","closed","","joschi","2014-04-07T22:25:34Z","2014-06-19T09:22:59Z"
"","518","Log a warning message if a servlet or filter is added with the same name","This PR adds a warning message to the logs if a servlet or a filter is added with the same name of an existing registered servlet and some documentation to in regards to adding multiple instances of an `AssetBundle`.  This is in reference to #499 and at least now give feedback regarding an `AssetBundle` being overwritten.","closed","","mveitas","2014-03-29T18:01:13Z","2014-06-13T10:48:15Z"
"","305","Fix indentation in pom.xml","This patch fixes a small indentation issue in pom.xml  Issue: 305","closed","","sslavic","2013-04-12T12:22:14Z","2014-07-09T18:16:08Z"
"","201","Dynamic port configuration for both admin and main ports","This patch allows either or both of the http ports to be configured to 0, which means that Jetty will dynamically allocate the configured port.  If the configured port is not 0, the previous port range constraints apply (i.e. 1025 <= port <= 65536).  Additionally, the service has the running Jetty server injected into it, so the service can query the server for the dynamically allocated ports, or whatever else it may wish to do with the server instance.","closed","","Hellblazer","2012-11-01T01:15:27Z","2014-06-13T16:31:48Z"
"","184","SSL improvements to allow Windows key stores.","This patch allows dropwizard to be configured to use Windows certificate stores accessed by the `SunMSCAPI` provider introduced in Java 6. The `KeyStore` has to be loaded manually, as Jetty's `SslContextFactory` doesn't properly load the `KeyStore` just based on type.  Also, in a development environment the Windows certificate store will often contain many private keys, and it's necessary to let Jetty know which one to use. This patch adds configuration for the `certAlias` parameter of Jetty's `SslContextFactory`.","closed","","christophercurrie","2012-10-05T16:25:24Z","2014-06-19T22:35:44Z"
"","176","Support for alternate database connection pools","This minor change removes the Tomcat DBCP dependency from the Database class without losing any functionality. This will allow users to substitute another database pooling provider if they chose to do so. #### Background  DBCP is causing problems in our staging environments at Gilt since it doesn't seem to be gracefully handling the instability (database, network, etc) in our test systems. We use C3P0 for all of our services here, and it seems to be working far better with dropwizard-db and our systems compared to DBCP.  I also have a C3P0DatabaseFactory class which is able to fully configure an instance of a C3P0 pool – using the existing DatabaseConfiguration class – suitable for passing to new Database(). I can provide that factory as a helpful alternative and companion to this change if you'd like.","closed","","adamkaplan","2012-09-06T17:18:26Z","2014-07-01T04:57:04Z"
"","186","Remove getParentLogger from ClosablePooledDataSource","This method is never used (no references) and @Overrides nothing, causing a build error.  Looks like something that was mistakenly added during the refactoring, so lets kill it with fire.","closed","","nicktelford","2012-10-08T14:57:18Z","2014-07-09T19:06:42Z"
"","95","Move registration of jackson modules into ResourceTest.getJson()","This makes ResourceTest behave more like AbstractService and makes it easier to test with custom providers that need a fully-initialized Json instance.","closed","","christierney","2012-05-21T18:07:18Z","2014-07-09T19:46:09Z"
"","29","Can't add more than one filter for the same URL pattern","This limitation is required for servlets but filters can and will be mapped to the same URL.","closed","","tinkerware","2012-02-10T18:42:10Z","2012-02-10T18:46:27Z"
"","185","Allow JerseyClientFactory to build clients without an Environment","This lets non-Dropwizard JVM apps more easily use dropwizard-client clients.","closed","","michaelfairley","2012-10-07T04:09:18Z","2014-06-17T03:17:02Z"
"","189","Singleton Validation Constraints","This is the last but the most powerful part of validation process.   Dropwizard currently is using  [ConstraintValidatorFactoryImpl](https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/engine/constraintvalidation/ConstraintValidatorFactoryImpl.java) which is pretty restrictive for real world examples.  Consider User Registration Service with email validation from database. In this case you have to connect database to validate uniqueness of an email.   I have done a [preliminary implementation](https://gist.github.com/3854759) for it. If it makes sense, I would be happy to complete it.","closed","","cemo","2012-10-08T21:15:28Z","2012-11-23T14:11:41Z"
"","133","Add session support, by adding a session handler to Environment.","This is one way to solve this problem, which I thought of, there might, however, be a better way.","closed","","dwijnand","2012-07-10T06:10:22Z","2014-06-22T14:13:37Z"
"","485","No validity check at the creation time of graphite reporter","This is not a bug, but an improvement suggestion. If i am creating a metrics registry with a server address which does not run Graphite server, an exception is thrown at every attempt to poll which is flooding my log. It would be nice if the connection is checked when creating the metrics and exception is thrown only once.  The exception I am getting is  WARN  [2014-03-04 12:05:32,139] com.codahale.metrics.graphite.GraphiteReporter: Unable to report to Graphite ! java.net.NoRouteToHostException: No route to host ! at java.net.PlainSocketImpl.socketConnect(Native Method) ~[na:1.7.0_45] ! at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339) ~[na:1.7.0_45] ! at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200) ~[na:1.7.0_45] ! at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182) ~[na:1.7.0_45] ! at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[na:1.7.0_45] ! at java.net.Socket.connect(Socket.java:579) ~[na:1.7.0_45] ! at java.net.Socket.connect(Socket.java:528) ~[na:1.7.0_45] ! at java.net.Socket.(Socket.java:425) ~[na:1.7.0_45] ! at java.net.Socket.(Socket.java:241) ~[na:1.7.0_45] ! at javax.net.DefaultSocketFactory.createSocket(SocketFactory.java:277) ~[na:1.7.0_45] ! at com.codahale.metrics.graphite.Graphite.connect(Graphite.java:71) ~[metrics-graphite-3.0.1.jar:3.0.1] ! at com.codahale.metrics.graphite.GraphiteReporter.report(GraphiteReporter.java:153) ~[metrics-graphite-3.0.1.jar:3.0.1] ! at com.codahale.metrics.ScheduledReporter.report(ScheduledReporter.java:116) [metrics-core-3.0.1.jar:3.0.1] ! at com.codahale.metrics.ScheduledReporter$1.run(ScheduledReporter.java:87) [metrics-core-3.0.1.jar:3.0.1] ! at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [na:1.7.0_45] ! at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304) [na:1.7.0_45] ! at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178) [na:1.7.0_45] ! at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.7.0_45] ! at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_45] ! at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_45] ! at java.lang.Thread.run(Thread.java:744) [na:1.7.0_45]  And the configuration settings i am using is  metrics:   reporters:     - type: graphite       host: localhost       port: 2003       prefix: ""sample""  while there is no graphite server running on localhost.","closed","","manuviswam","2014-03-04T06:48:29Z","2014-03-07T11:40:39Z"
"","52","Use Logback instead of log4j","This is more a suggestion than a bug, but I've been using [Logback](http://logback.qos.ch/) for my logging, and was curious if this was on the horizon or worth switching to?  It is positioned to be the successor to log4j, and as such, they even provide a pretty lengthy explanation on [why you should switch](http://logback.qos.ch/reasonsToSwitch.html).  Anyways, love the project, and I'm itching to use it at work.","closed","improvement,","klauern","2012-03-15T01:43:17Z","2016-06-08T20:48:32Z"
"","511","Fix Jetty configuration to enable the use of the Windows certificate store for storing the SSL certificates","This is in reference to issue #505 in the dropwizard project.","closed","","bwmeier","2014-03-25T22:24:17Z","2014-07-09T16:38:00Z"
"","25","(dropwizard-db) Database Health Checks Use Hardcoded SQL","This is a small fix to make db health checks configurable.  Currently db health checks use the Database.ping() method which uses hard-coded sql to perform the check:  ""SELECT 1""  Which won't work on all dbs, such as Oracle.  With this patch, a db health check will be added if the connection config has a ""validationQuery"" param, and use that sql for the health check.  I didn't muck with the Database.ping() method, but IMO it should be removed or refactored... The above approach seemed easiest since ""ping()"" sql was tied up in an annotation.  -Taylor","closed","","ptgoetz","2012-02-02T22:31:46Z","2014-07-09T20:20:31Z"
"","371","Introduce dependencyManagement for major dependencies.","This is a set of changes to the POM files that introduce dependency management for Dropwizard's main dependencies (principally, those referenced by _dropwizard-client_, _dropwizard-core_ and _dropwizard-util_).  The motivation for suggesting this change is to allow projects that interact with Dropwizard (but are not themselves Dropwizard services) to reference Dropwizard's transitive dependencies without having to find, then specify, the version number.  Currently, the only alternative to finding the dependency versions and specifying them manually is to depend on a Dropwizard artifact then exclude the long list of everything you don't need - which is rather cumbersome and also requires updating when version numbers change.  If, for example, _dropwizard-client_ is referenced by a project, when that project is packaged up, it will pull in tens of megabytes of dependencies.  **Examples of why you might want to reference individual dependencies, rather than all of Dropwizard, include:** - You want to build **common libraries**, e.g. for logging, but don't want to pull in the full Dropwizard dependency for this, only the appropriate logging library - You want to build a Java-based **client for your Dropwizard service**, making use of Jersey and other dependencies, without depending on core Dropwizard code - Sections of your project may be **integrated with other applications**, and those applications should not depend on all of Dropwizard  **There is also a maintenance benefit to Dropwizard itself:** - Exclusions of managed dependencies only need to be specified **once in the parent POM**, rather than in every POM where they are referenced (e.g. the jersey-test-framework dependencies in the POMs for dropwizard-auth, dropwizard-core, dropwizard-hibernate and dropwizard-testing)  After these changes are made, projects that use Dropwizard can retrieve the versions of Dropwizard dependencies by specifying the following in their pom.xml, [as described by Apache](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope):  ```                                            com.codahale.dropwizard                 dropwizard-parent                 0.7.0-SNAPSHOT                 pom                 import                            ```  The equivalence of the managed dependency approach to the previous, unmanaged dependencies can be tested by running _mvn help:effective-pom_ against each project and comparing the dependencies section.","closed","","xako","2013-07-24T12:38:01Z","2014-07-04T14:48:00Z"
"","388","Add support for Joda DateTime objects to jDBI.","This is a pretty close duplicate of @nicktelford's pull request codahale/dropwizard#304  Given Dropwizard's tight integration with joda-time, this feels like a great feature to have integrated into the Dropwizard toolkit.  I added a small blurb to the documentation (similar to the notice about Guava support) so that it's obvious to JDBI users that this integration is available.","closed","","andrewlook","2013-09-16T23:52:08Z","2014-06-16T04:14:36Z"
"","79","Quick and Dirty patch to allow for enforced SSL","This is a patch that allows for configuration to enforce SSL on the main external connector.  The use case is for servers that want all interactions to be over HTTPS and want to do HTTPS termination at the service layer.  The external connector is either all SSL or it is not, it does not allow for serving some things over HTTPS and some things over normal HTTP.  This patch is also back-portable to 0.3.1.  More generally, I think that DropWizard might benefit from the ability to invert the configuration of the connectors.  Perhaps introduce a Provider that can be instantiated by config but can also be overridden through some method on the Environment object.  In general, having this mechanism allows clients of the library to work around potential limitations in the config understood by DropWizard (and thus saves them from wondering things like when a patch they submit will get introduced into the code base so that they do not have to deal with their own fork and deployment into maven, which is what I am now wondering ;) ).","closed","","cheddar","2012-04-13T00:54:50Z","2014-06-14T05:33:35Z"
"","482","Fixed org.eclipse.jetty.server.handler.AbstractHandler warnings","This fixes the warnings that occur when `org.eclipse.jetty.server.handler.AbstractHandler` instances do not have a Server set, such as:  ``` WARN  [2014-02-28 03:24:31,674] org.eclipse.jetty.server.handler.AbstractHandler: No Server set for org.eclipse.jetty.server.handler.ErrorHandler@63b7e77 WARN  [2014-02-28 03:24:31,687] org.eclipse.jetty.server.handler.AbstractHandler: No Server set for com.codahale.metrics.jetty9.InstrumentedHandler@3fdd2ed5 WARN  [2014-02-28 03:24:31,696] org.eclipse.jetty.server.handler.AbstractHandler: No Server set for i.d.j.MutableServletContextHandler@2edfbe28{/,null,STARTING} WARN  [2014-02-28 03:24:31,696] org.eclipse.jetty.server.handler.AbstractHandler: No Server set for org.eclipse.jetty.servlet.ServletHandler@633d4c22 WARN  [2014-02-28 03:24:32,166] org.eclipse.jetty.server.handler.AbstractHandler: No Server set for i.d.j.MutableServletContextHandler@515dd9a7{/,null,STARTING} WARN  [2014-02-28 03:24:32,166] org.eclipse.jetty.server.handler.AbstractHandler: No Server set for org.eclipse.jetty.servlet.ServletHandler@687c8cac ```  These normally occur on server startup.","closed","","jhalterman","2014-02-28T03:32:23Z","2014-07-08T12:15:32Z"
"","126","Update jdbi version to use the most recent bugfix release (2.37.2).","This fixes a bug where onDemand sql objects were not properly reentrant relative to the handle in use (not concurrency). See https://github.com/brianm/jdbi/pull/31 .","closed","","brianm","2012-07-03T12:10:32Z","2014-07-09T19:33:31Z"
"","147","Correctly log managed object names","This fix ensures that managed objects are correctly logged at startup. Because of the use of a Set, and wrapping with JettyManaged object, before this fix you will generally see a single entry in the logged set:  DEBUG com.yammer.dropwizard.config.Environment: managed objects = [com.yammer.dropwizard.jetty.JettyManaged]  After this fix, you will see the actual classes:  DEBUG com.yammer.dropwizard.config.Environment: managed objects = [x.y.z.MemcacheAccessor, x.y.z.RandomInsultGenerator]  Managed executors are a special case, there is likely to be more than on of same instance, the fix appends the pool's name format for threads to the class name, e.g. you will see:  DEBUG com.yammer.dropwizard.config.Environment: managed objects = [com.yammer.dropwizard.lifecycle.ExecutorServiceManager(foo-{}), com.yammer.dropwizard.lifecycle.ExecutorServiceManager(bar-{})]  While we could do something even neater - giving a pool name instead of using the name format, I think this approach is probably sufficient without making bigger changes and adding new method signatures for Environment.managedExecutorService(...).  Thanks!","closed","","arunh","2012-07-30T16:15:28Z","2014-07-03T23:06:49Z"
"","259","Updated Environment so that servlets can be added to the internal (admin) connector","This changeset fills a gap where I need to be able to add internal servlets that do not fall into the categories of health checks or tasks.  Cheers, Kai","closed","","kaiwaldron","2013-02-11T20:59:51Z","2014-07-09T18:24:13Z"
"","377","Add JDBI SQL Object integration test support.","This changeset adds a simple base class for implementing JDBI integration tests.   Extending `JdbiIntegrationTest` allows you to quickly get instances of JDBI SQL Objects for testing. When run, the tests will first execute your migrations to ensure the state of your database is clean and consistent – this also ensures that the queries in your SQL Object are tested against the same schema used to create your production database.  Note: this implementation does assume that users are using migrations in their service.","closed","feature,","thody","2013-08-03T20:21:36Z","2015-04-26T08:59:57Z"
"","437","Added the ability for the configuration factory to be customized","This change will allow you to use custom configuration formats as well as intercept the configuration generation to change it programmatically at runtime prior to application configuration.","closed","","jclawson","2013-12-13T20:47:11Z","2014-06-12T08:40:06Z"
"","235","Use Logback token for platform line endings","This change updates the logging pattern to use the logback escape sequence for a new line rather than a raw newline. This allows Logback to choose the platform-specific line separator so that Windows logs are readable by native text editors.","closed","","christophercurrie","2012-12-11T04:40:34Z","2014-06-23T13:26:30Z"
"","31","Allow services to customize the Jersey servlet container implementation","This change allows services to replace Jersey's `ServletContainer` with another implementation and customize the resource config directly. I found this necessary when integrating a service that used Guice and Jersey along with Jersey's Guice integration.  The nice thing about this is that it's a simple change but allows wholesale customization of Jersey while still keeping Dropwizard-specific features like instrumented resource methods. On the other hand, `getJerseyContainer` does get called before the service has a chance to initialize and that might make for some awkward init code on the service side. In my specific case that motivated this patch, the container implementation was being instantiated by Guice so all I had to do was to save the config for later injection to a custom `GuiceContainer` class (that comes with Jersey's Guice integration library). I think inverting the logic between `Environment` and `ServerFactory` and use a two-step configure/apply scheme to initialize the `ServerFactory` would make service initialization cleaner, but that seemed like too much surgery for what I wanted to accomplish.","closed","","tinkerware","2012-02-14T16:48:50Z","2014-06-28T15:37:10Z"
"","43","Enable downstream projects to customize how Jackson is used","This change allows a dropwizard project to use a subclass of com.yammer.dropwizard.json.Json as an alternative. This would enable customizing how jackson is configured or how it is used.  This takes a pretty blunt approach, but should hopefully enable any customizations necessary. The JsonConfiguration object might be a place for finer tuned json configuration in the future.  Our project needs this so we can work around a specific jackson issue we have been running into (http://jira.codehaus.org/browse/JACKSON-799)  thanks sam","closed","","samperman","2012-03-06T14:07:08Z","2014-07-09T20:12:56Z"
"","107","Support for configurable AsyncAppender properties in logging configuration","This can be quite useful for DW apps, especially when systems can handle more than the logback defaults and this provides users an opportunity to configure appenders based on their requirements.   Would this be useful for DW logging core?","closed","","aruld","2012-06-02T01:53:13Z","2014-06-18T13:37:40Z"
"","30","Allow setting filter and servlet names","This allows setting names for filters and servlets as they would be given in the deployment descriptor. Some filters and servlets use their given name as a lookup key in another registry (I'm looking at you, Spring) and this change enables using those filters and servlets in Dropwizard.  I'm not really happy with piling on to the existing amount of code duplication between `FilterConfiguration` and `ServletConfiguration`, but I wanted to keep this patch small.","closed","","tinkerware","2012-02-10T20:00:11Z","2014-06-14T16:23:39Z"
"","137","Make the configuration file optional.","This adds support for when the default configuration is perfectly fine, and no setting needs to be modified.  I'm a bit unsure if I've handled the exception when no configuration file is given correctly.","closed","","dwijnand","2012-07-12T10:10:19Z","2014-07-09T19:23:23Z"
"","471","Add support for performing validation of individual elements of a collection","This addresses issue https://github.com/dropwizard/dropwizard/issues/470","closed","","mveitas","2014-02-13T15:56:52Z","2014-06-20T23:30:06Z"
"","238","Possibility to add additional handlers to default ServerCommand, server","There should be some possibility to add additional handlers to default server trough Environment and ServerFactory... Any suggestions or thoughts? Cheers Primoz","closed","feature,","primozs","2012-12-13T17:35:05Z","2013-02-03T20:46:58Z"
"","503","Bump Jersey to v1.18.1","There is no proper Changelog but [Git told me](https://github.com/jersey/jersey-1.x/tree/1.18.1) that this is the only change which went in: [JERSEY-2363](https://java.net/jira/browse/JERSEY-2363)","closed","","mss","2014-03-20T21:37:03Z","2014-07-09T16:42:03Z"
"","378","Ability to use non .yml based logback configuration.","There is currently no good way make Logback use a non .yml configuration or rather prevent Dropwizard from overwriting the classpath configuration.  I've to programmatically reset what Dropwizard does between the `Service#initialize(Bootstrap)` and `Service#run(Configuration, Environment)`  calls.","closed","","rkapsi","2013-08-06T19:22:55Z","2013-09-17T18:47:12Z"
"","101","AbstractService#getJerseyContainer needs to add a Configuration parameter","There are scenarios in which getJerseyContainer will need to read the Service's com.yammer.dropwizard.config.Configuration but it has no way of accessing it.  The method signature can be changed to  public ServletContainer getJerseyContainer( DropwizardResourceConfig resourceConfig, T serviceConfig )  or DropwizardResourceConfig can be changed so that it has a publicly accessible reference to the service config.  The use-case is as follows:  When using Guice, a service will override getJerseyContainer to return com.sun.jersey.guice.spi.container.servlet.GuiceContainer, which needs an initialized Injector. Initializing the injector can depend on the service's Configuration object.","closed","","fleaflicker","2012-05-28T16:15:53Z","2012-06-07T05:04:45Z"
"","123","Can not access admin tasks when running application and admin contexts on same port.","There are issues with admin tasks when running the application and admin contexts off the same port.  For example:  curl -X POST http://localhost:8081/tasks/build-index  works great.  But if I use the same port in configuration yaml:  http:     port: 8080     adminPort: 8080  curl -X POST http://localhost:8080/admin/tasks/build-index  gives me a 404  I know that the admin context path is correct because my health checks work: curl http://localhost:8080/admin/healthcheck - dao: OK - deadlocks: OK","closed","","mrtho1","2012-07-01T11:57:52Z","2012-07-03T00:17:31Z"
"","465","adding an upgrade page to the manual","There are a lot of changes between 0.6 and 0.7 and it only seems fair that there is some more detailed guidance as to the changes you will required to make.  This request is incomplete and requires the following at min todo list: - [ ] list all any additional artifact naming changes (i.e. view modules artifact id's etc) - [ ] detail more of the metric changes i.e. I suspect the metric names will have changed - [ ] review the list of changed package names and relocations - [ ] test instructions on some non trivial projects - [ ] review placement and heading, is the manual the right place for this document?  Note if anybody wishes to help with this request, I haven't got any issues adding you as a collaborators to my fork if it'll help get 0.7 out of the door.","closed","improvement,","tempredirect","2014-02-09T16:29:45Z","2015-03-13T20:29:22Z"
"","464","adding an upgrade page to the manual","There are a lot of changes between 0.6 and 0.7 and it only seems fair that there is some more detailed guidance as to the changes you will required to make.  This request is incomplete and requires the following at min todo list: - [ ] list all any additional artifact naming changes (i.e. view modules artifact id's etc) - [ ] detail more of the metric changes i.e. I suspect the metric names will have changed - [ ] review the list of changed package names and relocations - [ ] test instructions on some non trivial projects - [ ] review placement and heading, is the manual the right place for this document?  Note if anybody wishes to help with this request, I haven't got any issues adding you as a collaborators to my fork if it'll help get 0.7 out of the door.","closed","","tempredirect","2014-02-09T15:48:44Z","2014-07-09T00:08:54Z"
"","247","Added support for configurable view encodings.","The View class will now allow the specification of the encoding Charset as part of it's constructor, and addresses an issue raised on dropwizard-user.    Anyone who wishes to override the default language -> encoding mappings (in Freemarker) can now easily do so.    Also added a quick multi-charset example to dropwizard-example.","closed","","ajordens","2013-01-18T04:57:58Z","2014-07-09T17:44:48Z"
"","453","updates for jetty 9.1","The test suite passes for me, but I wouldn't consider this ready for merge yet. I think it would be nice to add support for Jetty's HTTP/SPDY client. I had some issues with the jetty 9.1 jars because they seem to default depend on javax.servlet-api which as far as I can tell is a bad thing and caused me to learn about all kinds of things I would prefer not to know. I worked around it the best I could after some hellish debugging of tests failing with java class loader security exceptions.","closed","improvement,","toffaletti","2014-01-28T20:39:43Z","2014-09-30T11:54:41Z"
"","8","TaskServlet should return a Content-Type","The TaskServlet doesn't return a content type, which begs the question…what content type should the Tasks be writing to the PrintWriter? Tasks don't have any control over the Content-Type, indicating that dropwizard is in control of that. But there's no indication of what they ought to be sending back (text/plain? text/html? text/xml? application/json?).","closed","","ryankennedy","2011-07-07T05:36:43Z","2011-07-07T19:09:39Z"
"","268","Syslog Appender + Custom logFormat Is Broken","The SyslogAppender in Logback does not emit a layout (http://logback.qos.ch/codes.html#syslog_layout), instead should be using the suffixPattern.","closed","","ajordens","2013-02-19T21:19:48Z","2014-06-19T00:11:54Z"
"","272","Let HttpClientBuilder obey JSSE system properties","The SchemeRegistry which has been used in HttpClientBuilder doesn't support JSSE related system properties which would allow setting key and trust stores and other relevant properties through Java system properties.  The following system properties are taken into account by this method: - ssl.TrustManagerFactory.algorithm - javax.net.ssl.trustStoreType - javax.net.ssl.trustStore - javax.net.ssl.trustStoreProvider - javax.net.ssl.trustStorePassword - java.home - ssl.KeyManagerFactory.algorithm - javax.net.ssl.keyStoreType - javax.net.ssl.keyStore - javax.net.ssl.keyStoreProvider - javax.net.ssl.keyStorePassword  Also see http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLSocketFactory.html#getSystemSocketFactory%28%29  The change will not break anything in old clients of HttpClientBuilder but it will enable users to override the default SSL settings without implementing their own org.apache.http.conn.scheme.SchemeRegistry.","closed","","joschi","2013-02-28T14:27:25Z","2014-07-09T18:33:19Z"
"","12","switch link from ruby yaml to snakeyaml in the docs","the ruby yaml has a decent overview of yaml, but the snakeyaml stuff has stuff specific to dw. plus there are links to the 'official' yaml home page at snakeyaml's site, in case people want to learn more about yaml in general,","closed","","tnm","2011-12-13T07:40:50Z","2014-07-09T20:26:35Z"
"","177","Type-oh","The rendered text originally reads ""When your service runs a Configured Commands""... this just changes it to ""When your service run Configured Commands""","closed","","collinvandyck","2012-09-22T21:43:54Z","2014-07-09T19:11:46Z"
"","457","Upgrade to Guava 16.0.1","The Reflection utilities in Google Guava prior to version 16.0.1 do not work with the latest stable Oracle JDK 7u51. An upgrade to Guava 16.0.1 solves this problem.  IMHO Dropwizard 0.7.0 shouldn't ship with (direct) dependencies known to be broken with the latest version of the Oracle JDK.  Bug report at Google Guava: [Issue 1635: JDK and Guava TypeVariable implementations are no longer compatible under 1.7.0_51-b13](https://code.google.com/p/guava-libraries/issues/detail?id=1635)","closed","","joschi","2014-02-04T20:04:29Z","2014-06-27T18:50:38Z"
"","538","suggestion for example maven config","the plugins part https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/pom.xml#L80 is quite long, I have shrunk it with: it runs with `mvn compile exec:java`  ```                          org.apache.maven.plugins             maven-compiler-plugin             3.1                              1.7                 1.7                 UTF-8                                            org.codehaus.mojo             exec-maven-plugin             1.2.1                              com.example.helloworld.HelloWorldApplication                                      server                     example.yml                                             ```","closed","","caub","2014-04-13T19:53:28Z","2014-04-14T11:27:18Z"
"","33","custom log format pattern","The patch provide an easier way to substitute ISO8601 date format in log output :  -Dlogging.layout.pattern=""%-5p [%d{yyyy-MM-dd HH:mm:ss,SSS z}""] %c: %m\n""  (previously the format pattern is hard-coded in the constructor).","closed","","ducquoc","2012-02-16T09:43:32Z","2014-07-03T01:54:17Z"
"","278","Add '--configtest' parameter to ConfiguredCommand","The optional `--configtest` (or `-T`) command line argument runs the command until the configuration file has been parsed and validated and quits the command after that.  This is useful for could be useful in init scripts or whenever a new configuration file should be validated without restarting.","closed","","joschi","2013-03-08T16:50:54Z","2014-06-23T03:30:25Z"
"","254","Add jcl-over-slf4j dependency in dropwizard-core","The one missing SLF4J adaptor...","closed","","ptomli","2013-02-01T14:14:38Z","2013-02-03T06:16:57Z"
"","504","Migrate from FEST 2 to AssertJ","The migation guide at http://joel-costigliola.github.io/assertj/assertj-core-migrating-from-fest.html described all necessary steps to migrate from FEST 2.x to AssertJ 1.6.0.  In the future [assertj-joda-time](http://joel-costigliola.github.io/assertj/assertj-joda-time.html) and [assertj-guava](http://joel-costigliola.github.io/assertj/assertj-guava.html) might also come in handy for writing more concise tests for Dropwizard (which is using both, JodaTime and Google Guava).","closed","improvement,","joschi","2014-03-23T19:26:40Z","2014-07-22T05:14:54Z"
"","452","replace ConcurrentArrayBlockingQueue with BlockingArrayQueue","The jetty project has been slowly removing all usages of ConcurrentArrayBlockingQueue.  http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/log/?qt=grep&q=ConcurrentArrayBlockingQueue  The commit messages imply the implementation might not be correct or performant. Following their lead, I tried replacing its usage with `org.eclipse.jetty.util.BlockingArrayQueue`. Unfortunately their documentation for `org.eclipse.jetty.util.BlockingArrayQueue` is a lie:  ``` Unlike {@link java.util.concurrent.ArrayBlockingQueue}, this class is able to grow and provides a blocking put call. ```  and the implementation of this amazing blocking put call:  ```     @Override     public void put(E o) throws InterruptedException     {         // The mechanism to await and signal when the queue is full is not implemented         throw new UnsupportedOperationException();     } ```  I've chosen to fall back on the tried and true java.concurrent queues. Something like this change will be required for Jetty 9.1 as they've removed ConcurrentArrayBlockingQueue entirely https://bugs.eclipse.org/bugs/show_bug.cgi?id=403591.","closed","","toffaletti","2014-01-28T01:15:35Z","2014-06-14T06:06:35Z"
"","528","environment.jersey().register() should allow filter registration","The following does not add a filter:  ``` java environment.jersey().register(new ResponseTimestampingFilter()); ```  Instead, filters need to be added using:  ``` java environment.jersey().getResourceConfig().getContainerResponseFilters().add(new ResponseTimestampingFilter()); ```  This seems like it might be a bug?","closed","","timrobertson100","2014-04-06T09:22:33Z","2017-09-24T09:42:17Z"
"","172","Fix support for Optional resource method parameters in test","The fix for issue #111 broke the use of Optional params in tests.","closed","","celkins","2012-08-29T21:52:32Z","2014-06-22T16:52:55Z"
"","142","Added @Valid annotation to nested configuration example.","The example for using nested Configuration classes doesn't include a @Valid annotation on the parent object.","closed","","scottfromsf","2012-07-24T19:51:06Z","2014-07-09T19:27:25Z"
"","174","Fixed an incorrect class-name in the OAuth example.","The example code found in the documentation for dropwizard-auth has a copy&paste mistake.   In the section about OAuth2 authentication, the example uses the BasicAuthProvider.","closed","","shartte","2012-09-02T11:42:04Z","2014-07-09T19:12:16Z"
"","417","Validation isn't applied to Collection members","The Dropwizard manual recommends using `@Valid` annotation on the resource methods to validate the objects coming in as the body:  ``` @PUT public Response replace(@Valid Person person) {     // ... } ```  This works for objects where we can annotate individual fields. It does not seem to work for Java collections (lists, sets, maps) in the resource method. Reading docs on Hibernate Validator (http://docs.jboss.org/hibernate/validator/4.2/reference/en-US/html_single/#d0e496) implies that `@Valid` annotation on a collection should in turn validate each item in the collection, but this is not happening in Dropwizard that I can tell.  Using dropwizard 0.6.2 from maven.","closed","","zAlbee","2013-10-29T18:38:33Z","2013-10-29T18:52:22Z"
"","265","Exception Handling 500 content types","The documentation says an un-handled Exception will be returned as text/plain. But it is currently returned as HTML. Perhaps the return type should respect the accepts header? I would like to avoid a custom catch in every method as it doesn't seem very DRY.   Dropwizard is great btw.   Thanks Paul","closed","","paulhill","2013-02-16T23:14:11Z","2013-04-30T20:02:25Z"
"","86","Dropwizard uses logback, not Log4j for its logging backend.","The document at http://dropwizard.codahale.com/manual/core/#logging says ""Dropwizard uses Log4j for its logging backend.""  It appears to be false as the pom.xml and source code only references logback.","closed","","cstivers78","2012-04-23T04:42:11Z","2012-04-23T05:04:41Z"
"","405","The documentation needs reviewing","The docs need need reviewing. This is an issue to document what's being focused on, and a place to update what's been signed off on. - Getting Started  (https://github.com/dropwizard/dropwizard/pull/404) - Dropwizard Core (https://github.com/dropwizard/dropwizard/pull/404) - Dropwizard Client (https://github.com/dropwizard/dropwizard/pull/404) - Dropwizard JDBI - Dropwizard Migrations - Dropwizard Hibernate - Dropwizard Authentication - Dropwizard Views (https://github.com/dropwizard/dropwizard/pull/404) - Dropwizard & Scala (https://github.com/dropwizard/dropwizard/pull/404) - Testing Dropwizard - Dropwizard Example, Step by Step (https://github.com/dropwizard/dropwizard/pull/404) - About Dropwizard","closed","","carlo-rtr","2013-10-04T14:01:18Z","2014-01-20T21:22:18Z"
"","440","Deploy SNAPSHOT to Maven repository after successful Travis CI build","The currently 0.7.0-SNAPSHOT version that is in the Maven repository is dated Sept 19, 2013. It would be nice to be able to push up the latest SNAPSHOT release after a successful Travis CI build.  There's a short description on how to set this up at: http://blog.xeiam.com/2013/05/configure-travis-ci-to-deploy-snapshots.html","closed","task,","mveitas","2013-12-17T18:32:55Z","2014-11-18T05:08:32Z"
"","356","Add separate health checks for server vs entire system","The current /healthcheck API is great for testing that the current server is fine. However, there is no API to check that there is some current issue with the entire system (not a particular server).  E.g. we have messages that failed batch processing and are sitting in a retry queue that needs to be manually examined by a sysadmin to evaluate why they failed.  if we add a HealthCheck for this then every single server in the cluster will throw 500, even though this is a problem with a particular server but overall health of the entire application.  It would be great to have a HealthCheck API for server and maybe a SystemHealthCheck API under /systemHealthCheck for cross-system issues.  Our only option is to add a separate Task for this and the monitoring software will have to do a POST to this monitoring task (instead of a more logical GET). It works...but just seems wrong and not quite in line with what Tasks should be used for.","closed","","jacek99","2013-06-19T15:29:47Z","2013-06-19T16:25:28Z"
"","165","AssetServlet no longer resolves resources correctly","The commit 45051d1a47271d6cce7015cef61824f744cd853e (""Refactor AssetServlet"") changed the way resources are resolved.  You should be able to put two different directories on the classpath with the same name.  For example, if you have   module1/web/javascripts module2/web/javascripts  And add module1/web and module2/web to your classpath, you should be able to reference resources from either directory.  But that doesn't happen because AssetLoader is storing a root URL (an instance variable named resourceURL). In the above example, that URL points to module1/web/javascripts, which restricts all requests to /javascripts just to module1.  In the past AssetLoader would invoke Resources.getResource on every load, which correctly resolved the path.","closed","","fleaflicker","2012-08-12T23:38:27Z","2012-11-13T23:57:28Z"
"","529","Make available 0.6 manual","The changes between 0.6 and 0.7 are significant enough that the manual now online (dropwizard.github.io/dropwizard/) doesn't sensibly relate to 0.6. I know that the world moves on and all that, but it's probably far better for you to provide something like `/manual/latest`, `/manual/0.7.x` and `/manual/0.6.x` than to force people into trying to read the manual via git history.  I would, I expect, just require generating the manual at the last 0.6 compatible point, and stuffing it into gh-pages.","closed","","ptomli","2014-04-07T14:45:42Z","2014-04-08T11:53:10Z"
"","530","Renaming 0.7.0-SNAPSHOT to 0.7.0","The change log ought to be for released versions only.","closed","","pims","2014-04-07T15:13:49Z","2014-07-09T16:33:57Z"
"","398","dropwizard-views-freemarker tests fails on windows","The `FreemarkerViewRendererTest` two tests `rendersViewsWithAbsoluteTemplatePaths` and `rendersViewsWithRelativeTemplatePaths` fail on windows due to line endings mismatch. The tests uses the `String.format` **platform-dependent** `%n` which translates to `CRLF` on windows while the freemarker files `example.ftl` and `relative.ftl`, used in the two tests respectively, use unix line-endings.  I think in this case the tests should be hardcoded to use the unix line-endings since they need to match what's in the two files.","closed","","kilemensi","2013-09-28T23:30:55Z","2013-10-24T11:40:39Z"
"","44","enable the Service to provide a custom Json implementation","Thanks for the suggestion on the service method... much more straightforward.  sam","closed","","samperman","2012-03-06T19:02:43Z","2014-06-29T02:46:27Z"
"","195","Add tests for AssetsBundle.","Tests around constructor parameters to ensure they get modified properly (trailing slashes, URL generation, etc.) before being passed to AssetServlet. Requires making some fields protected.","closed","","ghost","2012-10-17T23:24:24Z","2014-07-09T19:02:39Z"
"","394","Make ResourceTest a JUnit TestRule","TestRules are much more flexible. They can be run at either the class or the test level, and can be combined with other TestRules for more complex behaviour.","closed","","nicktelford","2013-09-19T19:14:43Z","2014-07-09T17:28:36Z"
"","158","writesMustacheViews test fails on windows","Test input file `yay.mustache` uses `LF` while the expected string evaluates to `CRLF` under windows hence `AssertionError`:  ``` Expected: is ""Hello Stranger!\r\nWoo!\r\n\r\n""      got: ""Hello Stranger!\nWoo!\n\n"" ```  I think the `String.format` should also use `LF` i.e.  ``` java String.format(""Hello Stranger!\nWoo!\n\n"") ```","closed","","kilemensi","2012-08-03T09:21:18Z","2012-08-03T17:17:46Z"
"","473","Instrument the execution of tasks with a Timer","Tasks are now instrumented using a Timer and can be found in the metrics registry with a name of `task.{task-name}`.","closed","","mveitas","2014-02-16T16:34:38Z","2014-07-09T16:29:23Z"
"","20","Extended Capablities of AssetsBundle and RootPath configuration","Take II, ;) Here are three changes: 1) Ability to specify the url from which to serve resources 2) Ability to specify the location of rest services, as a sub-url 3) Ability to serve up an ""index.htm"" page from the root path.","closed","","boneill42","2012-01-18T21:16:25Z","2014-06-12T14:30:27Z"
"","393","Add option to include/exclude stack traces from syslog","Syslog doesn't work well with stack trace data. The Logback `SyslogAppender` provides an option to exclude this data, logging only the name of the Throwable and its message.  We should provide this option to users.","closed","","nicktelford","2013-09-19T11:54:08Z","2020-06-11T09:30:14Z"
"","41","Upgrade to Jetty 8.x","Supports Servlet 3.0, no other big changes.","closed","task,","codahale","2012-03-02T23:39:29Z","2012-03-07T07:40:09Z"
"","135","dropwizard-example w/ AssetBundle did not work out of the box","Steps to reproduce: - start dropwizard-example - localhost:8080/assets/example.txt - get a 404 instead of a 200  Debugging into AssetLoader:  ``` final String requestedResourcePath = key.substring(uriPath.length() + 1); ```  Unfortunately, uriPath has a trailing slash explicitly tacked onto it (see AssetsBundle.java) and this substring is clobbering the initial character.  ie)  example.txt -> xample.txt, resulting in the 404.  The supplied patch will strip off any trailing slash in the AssetLoader.    The AssetServletTest's were also updated so that they have the same path configuration as if they were launched via the AssetsBundle.","closed","","ajordens","2012-07-11T06:09:49Z","2014-07-09T19:28:26Z"
"","7","Add stack trace logging for slow requests","Steal heavily from [dogslow](https://bitbucket.org/evzijst/dogslow) and log the stack traces of threads which have been running the same request for > `N`ms.  We could use a hashed wheel timer for rough timeouts and then thread local ID counters -- when a request is handled, increment the thread's counter and schedule a job to execute in `N`ms which checks that counter against the result of the increment. If the thread is still running but the counter hasn't been incremented, get its stack trace and log it.","closed","feature,","codahale","2011-05-16T06:15:06Z","2013-04-30T20:03:54Z"
"","348","Jersey module's pom.xml has hard-coded Jackson version, should use ${jackson.version}","sorry, didn't have git configured when i opened #347.","closed","","fleaflicker","2013-06-14T16:27:23Z","2014-07-09T17:44:17Z"
"","92","Fix issue #89","Somewhat partial fix that should work for typical use cases (and specifically one that bit me). Did not go hunting for other cases where same problem might occur, assume they exist; will fix those if I run across them.","closed","","cowtowncoder","2012-05-05T03:11:35Z","2014-07-09T19:47:40Z"
"","130","Add Json read/write support to/from ByteBuffers","Sometimes we have a `ByteBuffer` that we need to either read a JSON document from or write a JSON document to.  To ensure that the same Jackson configuration/feature-set is used, we need to add support to `com.yammer.dropwizard.json.Json` for reading from and writing to `ByteBuffers`.  This implementation supports both direct and ""heap"" (non-direct) `ByteBuffer`s, and should be fairly efficient.  Tests are of course included and should provide complete coverage of the changes.","closed","","nicktelford","2012-07-04T14:45:26Z","2014-07-09T19:30:58Z"
"","535","Ability to get the server admin port in integration tests","Sometimes it's useful to perform admin tasks in integration tests.","closed","","arteam","2014-04-12T11:35:34Z","2014-06-27T11:06:20Z"
"","355","Make Liquibase migrations file an optional CLI argument","Sometimes it's desirable to maintain/package your database migrations outside of your application JAR (e.g. when the migrations file is massive).  Lets add an optional argument to all Liquibase Commands that permits specifying the path to the migrations file in the local filesystem.  Omitting this option retains the default behaviour.  Note: I'm not entirely sure how best to test Command arguments, so there are no tests. I used `dropwizard-example` to check that it roughly works as expected, but that doesn't really qualify as testing.","closed","","nicktelford","2013-06-19T10:32:15Z","2014-07-09T17:28:06Z"
"","390","when yaml conf set adminPort=-1, disuse admin port.","sometimes i don't want to start admin port, so i when adminPort=-1, disable it.","closed","","shijinkui","2013-09-17T04:03:10Z","2014-07-09T17:41:46Z"
"","162","Allow disabling request entity compression.","Some servers cannot handle compressed request entities. This patch adds the ability to disable compressing the request entity. It does not affect decompressing the response.","closed","","deverton","2012-08-05T23:06:41Z","2014-07-09T19:16:49Z"
"","288","Provide a means for Validator failures to be returned to the client as a JSON response.","Some context is here: https://groups.google.com/d/msg/dropwizard-user/ZvO3mnDTJYg/Y4Pt3yzt300J  I had a similar problem to the person who posted this. My clients expect JSON, all the time, even for errors. And more generally, keeping validation errors in code-friendly format seems to be a good idea. The current Dropwizard code (in Validator) discards all the juicy and useful violation information and instead crams the errors into a List of Strings.  Yes, you can use your own Validator, but that path is kludgy.   This patch introduces a handful of new classes and concepts: - ValidationResult, which is what the Validator will now return from calls to validate. ValidationResult contains the same List of Strings, but also contains a List of ConstraintViolations, so that callers can have more freedom to work with those as well. - InvalidEntityToJsonExceptionMapper, to use in place of InvalidEntityExceptionMapper. This mapper keeps the same 422 HTTP response, but the entity body is now a JSON array of (messageTemplate, message, invalidValue) tuples. - ValidatorConfiguration, a new top-level configuration that allows you to override the default InvalidEntityExceptionMapper, and can be configured by adding the following to your YML config.  here's the config snippet:  ``` validation:   invalidEntityExceptionMapperClass: com.yammer.dropwizard.jersey.InvalidEntityToJsonExceptionMapper ```  All tests pass and this is working great for me. There might be better/cleaner ways to do the overriding though (the new top-level config might be unpalatable for reasons I'm unable to think of), so I'm open to suggestions if there is a better way.","closed","","cobbzilla","2013-03-24T20:00:15Z","2014-06-14T08:37:14Z"
"","334","Trivial docfixes for 0.7 change","Some changes (already present in dropwizard-example) didn't make it into getting-started.rst","closed","","clemensw","2013-05-19T09:04:52Z","2014-07-09T18:00:59Z"
"","310","Error while parsing yml configuration file","So far I had no problems parsing yml file with Jackson's ObjectMapper. Once I added SSL configuration to my configuration the parsing started to throw an exception:  ``` java ERROR [2013-04-24 11:48:58,310] org.example.ExampleService: Can not construct instance of com.google.common.base.Optional, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information  at [Source: src/main/resources/example.yml; line: 53, column: 15] (through reference chain: org.example.ExampleConfiguration[""http""]->com.yammer.dropwizard.config.HttpConfiguration[""ssl""]->com.yammer.dropwizard.config.SslConfiguration[""keyStore""]) ! com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.google.common.base.Optional, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information  at [Source: src/main/resources/example.yml; line: 53, column: 15] (through reference chain: org.example.ExampleConfiguration[""http""]->com.yammer.dropwizard.config.HttpConfiguration[""ssl""]->com.yammer.dropwizard.config.SslConfiguration[""keyStore""]) ! at com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:164) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:624) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(AbstractDeserializer.java:115) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:375) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:98) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:308) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:121) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:375) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:107) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:308) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:121) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:375) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:107) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:308) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:121) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:2793) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:1897) ~[jackson-databind-2.1.4.jar:2.1.4] ! at org.example.ExampleService.extractConfiguration(ExampleService.java:57) [classes/:na] ! at org.example.ExampleService.(ExampleService.java:28) [classes/:na] ! at org.example.ExampleService.main(ExampleService.java:33) [classes/:na] ```","closed","","akoskm","2013-04-24T10:00:05Z","2013-04-25T03:29:12Z"
"","330","Fix rootPath default config in core docs.","Small doc change. @nicktelford","closed","","shashir","2013-05-15T01:16:22Z","2014-07-09T18:02:30Z"
"","477","Slf4jRequestLog doesn't set timestamp on LoggingEvent","Slf4jRequestLog in 0.7.0 doesn't set the timestamp of the event it creates, so HTTP request events have the wrong timestamp. (The timestamp of the message portion is fine.) This is causing my syslog entries to look like:  ``` Jan  1 00:00:00 test.example.com TestApplication[10151]: [dw-18] http.request 10.239.27.229 -  -  [25/Feb/2014:00:57:13 +0000] ""GET /test HTTP/1.1"" 200 - ""-"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Safari/537.36"" 7 ```  where I'd expect:  ``` Feb 25 00:57:13 test.example.com TestApplication[10151]: [dw-18] http.request 10.239.27.229 -  -  [25/Feb/2014:00:57:13 +0000] ""GET /test HTTP/1.1"" 200 - ""-"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Safari/537.36"" 7 ```  Saw this same issue with 0.6.2 (I think AsyncRequestLog is the equivalent there).","closed","","hslater","2014-02-25T01:52:10Z","2014-02-25T19:25:49Z"
"","502","Adding the project version into the footer of all the docs pages","Since we are looking to have multiple versions of the docs, it will be helpful to display the version in the footer as a reference.","closed","","mveitas","2014-03-20T11:50:04Z","2014-06-13T22:32:09Z"
"","428","Maintenance release in Dropwizard 0.6.x line","Since there have been a lot of breaking changes in the new Dropwizard 0.7.x line and a release date is not given, the old Dropwizard 0.6.x line should get a maintenance release with updated dependencies (where it makes sense) and some bugfixes (where possible and needed).  I've started a branch `stable-0.6` based on the tag `v0.6.2` for that purpose at https://github.com/joschi/dropwizard/tree/stable-0.6 and cherry picked those commits from Dropwizard `master` branch which could be applied without changes and which do not change anything in an incompatible way.","closed","","joschi","2013-11-30T21:58:31Z","2013-11-30T22:05:02Z"
"","54","How to reload static assets in dev mode?","Since Dropwizard supports `AssetsBundle`s, I thought that maybe this would be a quick way to test out them fancy JS frontends (Backbone, Ember, etc.) by throwing them up on `src/main/resources/assets` and trying to serve from there.  However, I quickly realized that Dropwizard either doesn't reload any of the resources it gets, or I'm missing something on configuring it to reload static assets.  If I were using the Maven Jetty plugin, I'd throw something in the config to use a custom `webdefault.xml` file as described here for us lowly Windows users: http://docs.codehaus.org/display/JETTY/Files+locked+on+Windows  Is this something I can do in Dropwizard, or is this too far out of scope for the tool?","closed","","klauern","2012-03-17T20:24:22Z","2016-03-11T22:15:28Z"
"","140","Make service name optional (defualt to Class.getSimpleName() of subclass)","Since all my services look like this...  ``` java public class ApiService extends Service {      protected ApiService() {         super(ApiService.class.getSimpleName());     } } ```  ...I'd find it nice to not having to explicitly invoke the parent constructor but rather just have the service being named as the class. Admittedly, the change became somewhat more intrusive than I would have liked it to be.","closed","","chids","2012-07-22T14:47:33Z","2014-07-09T19:25:54Z"
"","513","Allow in-memory unit testing of resources using views?","Since `ViewMessageBodyWriter` contains `@Context private HttpHeaders headers;` it's not possible to unit test resources using views with the lightweight in-memory Jersey provider (using `ResourceTestRule`).  However since a `MessageBodyWriter.writeTo` receives the request headers as a `MultivaluedMap` argument there shouldn't be an absolute need for injecting `HttpHeaders`.  I did a very rough PoC by rewriting `ViewMessageBodyWriter.detectLocale()` into this horrid mess:  ``` java     private static Locale detectLocale(MultivaluedMap headers) {         InBoundHeaders h = new InBoundHeaders();         List accepts = headers.get(ACCEPT_LANGUAGE);         if(accepts != null && accepts.size() > 0) {             h.put(ACCEPT_LANGUAGE, Lists.transform(accepts, Functions.toStringFunction()));         }         ContainerRequest cr = new ContainerRequest(new WebApplicationImpl(), null, null, null, h, null);         for (AcceptableLanguageTag langTag : HttpHelper.getAcceptLanguage(cr)) {             Locale x = langTag.getAsLocale();             if (!x.toString().contains(""*"")) { // Freemarker doesn't do wildcards well                 return x;             }         }         return Locale.getDefault();     } ```  I'd be happy to put some more effort into it and submit a PR if others think its valuable.","closed","","chids","2014-03-26T22:35:39Z","2015-03-31T23:12:18Z"
"","68","Allow implementations of ResourceTest to supply their own implementation of Json","Similar to pull request 44: https://github.com/codahale/dropwizard/pull/44","closed","","jspiewak","2012-03-27T13:45:39Z","2014-07-09T20:00:18Z"
"","289","update dropwizard-example README.md to current version","silly little text files don't keep up with the project change 0.3.0 to 0.7.0","closed","","littleidea","2013-03-25T04:21:18Z","2014-07-09T18:25:44Z"
"","490","server does not shut down promptly on CTRL-C (SIGINT)","Shutting down a running service via SIGINT (e.g. hitting CTRL-C in the running terminal) used to be very quick in the latest official release (0.6.2).  However, in the current 0.7.0 branch, it seems to get stuck waiting on the threadpool and takes almost a minute on my PC to finally terminate:  ``` $ java -jar target/dropwizard-example-0.7.0-SNAPSHOT.jar server example.yml; date  [..snip..]  ^CINFO  [2014-03-11 19:46:35,657] org.eclipse.jetty.server.ServerConnector: Stopped application@3becd589{HTTP/1.1}{0.0.0.0:8080} INFO  [2014-03-11 19:46:35,658] org.eclipse.jetty.server.ServerConnector: Stopped application@39b7341b{SSL-HTTP/1.1}{0.0.0.0:8443} WARN  [2014-03-11 19:47:05,665] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-57-selector-0,5,main] WARN  [2014-03-11 19:47:05,665] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-58-selector-1,5,main] WARN  [2014-03-11 19:47:05,665] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-59-selector-2,5,main] WARN  [2014-03-11 19:47:05,666] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-60-selector-3,5,main] WARN  [2014-03-11 19:47:05,666] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-62-selector-4,5,main] WARN  [2014-03-11 19:47:05,666] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-63-selector-5,5,main] WARN  [2014-03-11 19:47:05,666] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-64-selector-6,5,main] WARN  [2014-03-11 19:47:05,666] org.eclipse.jetty.util.thread.QueuedThreadPool: dw-admin{STOPPING,1<=8<=64,i=0,q=0} Couldn't stop Thread[dw-admin-65-selector-7,5,main] INFO  [2014-03-11 19:47:05,666] org.eclipse.jetty.server.ServerConnector: Stopped admin@2abdf637{HTTP/1.1}{0.0.0.0:8081} Tue Mar 11 12:47:30 PDT 2014 ```","closed","documentation,","pimlottc","2014-03-11T19:52:55Z","2014-10-05T16:00:27Z"
"","328","Provide Duration APIs as well as (long, TimeUnit)","Several components require setting a duration (for timeouts etc.) that require a `long` and `TimeUnit` pair. Lets provide an API that accepts a `Duration` instead, as it's often less cumbersome to work with, especially when working with a `Configuration` that already provides the value as a `Duration`.  Note: this adds `dropwizard-util` as a dependency of `dropwizard-lifecycle`.","closed","","nicktelford","2013-05-13T10:09:58Z","2014-07-09T17:29:37Z"
"","495","Fix for Issue 494: GZip Filter should not set ""Vary"" header to ""User-Agent""","See Issue #494 for details.","closed","","Mahoney","2014-03-14T17:04:29Z","2014-09-17T00:51:52Z"
"","145","User Manual additions: Assets, SSL.","See commits, they are unrelated.","closed","","xaviershay","2012-07-29T03:47:27Z","2014-06-17T08:43:40Z"
"","346","ScanningHibernateBundle + Issue#277","ScanningHibernateBundle for module dropwizard-hibernate that searches in given package for hibernate entities (classes annotated with @Entity) instead of giving every single one of them by hand.  Idea and instructions taken from https://groups.google.com/forum/?fromgroups#!topic/dropwizard-user/9xBhmSrw6LM  There are some simple tests showing how it works.","closed","","spacanowski","2013-06-13T17:55:37Z","2014-07-09T17:38:13Z"
"","350","ScanningHibernateBundle","ScanningHibernateBundle for module dropwizard-hibernate that searches in given package for hibernate entities (classes annotated with @Entity) instead of giving every single one of them by hand.  Idea and instructions taken from https://groups.google.com/forum/?fromgroups#!topic/dropwizard-user/9xBhmSrw6LM","closed","feature,","spacanowski","2013-06-15T05:59:21Z","2014-06-12T18:04:24Z"
"","324","JUnit rule config overrides and documentation","Same as before but merged with 0.7.0.","closed","","tomakehurst","2013-05-11T12:57:29Z","2014-07-01T05:48:12Z"
"","42","Update the name and date in NOTICE","s/Metrics/Dropwizard and update the date.","closed","","tnm","2012-03-06T09:29:12Z","2014-07-09T20:13:27Z"
"","520","Possible regression: ContainerException with 0.7.0-rc3","Running a resource test with 0.7.0-rc3 gives a container exception not present in 0.7.0-rc2:   ``` com.sun.jersey.api.container.ContainerException: No WebApplication provider is present     at com.sun.jersey.spi.container.WebApplicationFactory.createWebApplication(WebApplicationFactory.java:69)     at com.sun.jersey.test.framework.spi.container.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.initiateWebApplication(InMemoryTestContainerFactory.java:178)     at com.sun.jersey.test.framework.spi.container.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.(InMemoryTestContainerFactory.java:116)     at com.sun.jersey.test.framework.spi.container.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer.(InMemoryTestContainerFactory.java:89)     at com.sun.jersey.test.framework.spi.container.inmemory.InMemoryTestContainerFactory.create(InMemoryTestContainerFactory.java:82)     at com.sun.jersey.test.framework.JerseyTest.getContainer(JerseyTest.java:347)     at com.sun.jersey.test.framework.JerseyTest.(JerseyTest.java:170)     at io.dropwizard.testing.junit.ResourceTestRule$1$1.(ResourceTestRule.java:131)     at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:131)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)     at org.junit.runner.JUnitCore.run(JUnitCore.java:160)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120) ```","closed","","oddcb","2014-03-31T09:26:30Z","2014-03-31T09:44:30Z"
"","292","Move Jackson annotations on *Configuration properties to setters","Right now Configuration class must be extended, override, and re-annotated to change a default.  See: https://groups.google.com/forum/#!topic/dropwizard-user/8SbTRIc_J7U","closed","improvement,","toffaletti","2013-03-28T04:34:19Z","2013-05-06T04:50:09Z"
"","6","Add non-blocking ServletHolder","Right now `ServletHolder#handle` has a synchronized block in it.  That will eventually cause tears.","closed","","codahale","2011-05-13T07:49:23Z","2011-05-17T20:25:17Z"
"","297","Remove rethrow method on UnitOfWork","Rethowing Exception to End-user is very annoying, i can't wrap the error with my error handler. Please remove it.","closed","","nottix","2013-04-03T08:43:59Z","2013-04-30T19:53:57Z"
"","171","Added property support for Jersey Config of ResourceTest","ResourceTest do not have a point for registering jersey configurations e.g. ResourceFilterFactory. This change lets the ResourceTest subclasses to add properties to Jersey Configuration.","closed","","cemo","2012-08-24T22:11:45Z","2014-07-09T19:13:17Z"
"","339","Environment doesn't log explicit root resources","Resources added via `Environment.getJerseyConfig().getExplicitRootResources()` are not logged upon start up, More specifically, `Environment.logResources()` and `Environment.logEndpoints()` do not consider explicit root resources when building the log output.  Stumbled over this minor issue when looking for a workaround for https://java.net/jira/browse/JERSEY-692.","closed","bug,","bentmann","2013-05-31T16:52:35Z","2013-06-01T16:01:33Z"
"","104","JSON error messages on entity validation and as the server error handler","Replaces QuietErrorHandler with JsonErrorHandler, a slightly modified version of the original that returns error messages as a JSON document.  A similar pattern is used for returning entity validation errors as JSON.  The main motivation for this change to is prevent reflected XSS attacks by not returning client-controlled values in a format that could result in script execution in some browser scenarios. With client-controlled values safely formatted in JSON documents, achieving script execution should be far more difficult for an attacker.  Note that I haven't modified the 500 plain text response returned by `com.yammer.dropwizard.jersey.LoggingExceptionMapper`. It may make sense to have that return JSON for consistency, but it does not reflect any client-controlled values and as such poses no known security risk.","closed","","al3x","2012-05-30T04:19:31Z","2014-07-02T10:50:19Z"
"","24","ConfigurationFactory#build","Removing unused Reader. Looks like the Yaml#init uses  FileReader = new FileReader  where ConfigurationFactory#build used  BufferedReader = Files.newReader(file, Charsets.UTF_8)  which Reader instantiation did you want to use?","closed","","chrisgray","2012-02-02T21:23:54Z","2014-06-16T17:13:38Z"
"","51","remove unused formal template parameter","Remove unused, and therefore slightly confusing, formal template parameter from findById()","closed","","brianm","2012-03-12T22:25:18Z","2014-07-09T20:07:23Z"
"","63","Clarify wording on the AuthenticationException log message.","Reads a bit better","closed","","tnm","2012-03-22T22:25:11Z","2014-07-09T20:02:49Z"
"","439","Delegating Auth Provider for Dual Authentication Types (HTTP BASIC and OAuth 2 Bearer)","Ran into a situation where I wanted one endpoint to be protected by both HTTP BASIC and OAuth 2 simultaneously. It doesn't appear that you can call environment.addProvider() twice, one for HTTP BASIC and one for OAuth. So, I whipped up this delegating auth provider class that is constructed with two Authenticators: one for HTTP BASIC and one for OAuth. The code merely looks at the HTTP Authorization header to determine if there is a bearer token there, delegating the authentication accordingly to either the OAuth (if there is a bearer token) or BASIC authenticator (fallback if not bearer token)  Would this be a welcome contribution to the project? I also authored a unit test to confirm that the delegation works as expected.","closed","","tagdyn","2013-12-14T01:44:22Z","2014-09-28T14:04:00Z"
"","336","Metrics transitive dependencies being pulled in do not match the DW versions in all cases","Raised this one on the mailing list - some of the transitive dependency versions being brought in to DW by metrics don't match up. The easiest way to show this is to add:  ```                              org.apache.maven.plugins                 maven-enforcer-plugin                 1.2                                                               enforce                                                                                                                                                                                                   enforce                                                                             ```  to the POM then run a Maven verify. From memory the offenders are Jersey, Jackson Databind, JodaTime and Guava dependencies.  It's probably not the end of the world - we're getting tough on transitive dependency mismatches and I guess adding exclusions in DW will save us needing to do this in our poms.","closed","","mikeycmccarthy","2013-05-23T10:39:57Z","2013-05-23T19:55:06Z"
"","178","Type-oh Optional.absent()","putting the 'al' in Optional","closed","","littleidea","2012-09-30T04:01:44Z","2014-06-22T16:52:39Z"
"","290","Add ObjectMapperFactory#configure","Provides a means to configure existing `ObjectMapper` instances using the Dropwizard `ObjectMapperFactory`.  Breaks out the code to configure instances from `ObjectMapperFactory#build()` in to `ObjectMapperFactory#configure()`.  This is also useful for sub-classes that override `ObjectMapper#build()` to create a sub-classed instance of `ObjectMapper`, but configured according to the `ObjectMapperFactory`.","closed","","nicktelford","2013-03-25T12:27:19Z","2014-06-30T14:37:08Z"
"","116","Add @Range constraint for Size and Duration","Provides a convenience for defining a range constraint on `Duration` and `Size`, using `@MinDuration`, `@MaxDuration`, `@MinSize` and `@MaxSize` that was introduced in #115:  ``` java @DurationRange(min = 10, max = 60, unit = TimeUnit.SECONDS) private Duration timeout = Duration.seconds(10);  @SizeRange(min = 1024, max = 10240, unit = SizeUnit.KILOBYTES) private Size chunkSize = Size.megabytes(1); ```  The _unit_ parameter defines the unit for both the _min_ and _max_ parameters; it is not possible to mix quantities of different units in a range constraint.","closed","","nicktelford","2012-06-21T00:32:52Z","2014-07-09T19:36:33Z"
"","293","Add ability to use a configuration path other than local file system","Previously there were two commands added to the Bootstrap in Service.java. I added some functionality to be able to override the the list of default commands passed to the Bootstrap as well as the ability to override the ServerCommand that is passed in. This allows someone to be able to create an extension of the ServerCommand to be able to override the behavior of how the configuration is read from.  By default the ConfiguredCommand assumes the file is local. Now someone can override a method to specify how they would like to read in the configuration.","closed","","mveitas","2013-03-28T16:27:36Z","2014-07-09T18:25:14Z"
"","335","Log all of the endpoints on startup.","Previously only the resource methods and sub resource methods were logged, now the sub resource locators are included.  No longer manually parsing the JAX-RS annotations, instead using the Jersey builtin introspector.","closed","","vadims","2013-05-22T08:17:31Z","2014-07-09T18:00:29Z"
"","209","Include rootPath when logging end points.","Presently it can be a bit confusing when starting a Dropwizard service that overrides the HTTP rootPath in the config file because Dropwizard logs the end point paths, but doesn't include the rootPath.  For example:  ``` INFO  [2012-11-08 02:54:20,356] com.yammer.dropwizard.config.Environment:       GET     /resource1 (com.example.Resource1)     GET     /resource2 (com.example.Resource2) ```  The implication is that hitting http://localhost:8080/resource1 will result in the Resource1 resource being used to service the request.  In reality if a rootPath is specified, a 404 will be returned instead.  This change causes the rootPath to be emitted with the end points so that what ends up being logged is the complete path necessary to reach the resource.  For example, if rootPath were specified as `/api/*` then the preceding example would log:  ``` INFO  [2012-11-08 02:54:20,356] com.yammer.dropwizard.config.Environment:       GET     /api/resource1 (com.example.Resource1)     GET     /api/resource2 (com.example.Resource2) ```","closed","","bbeck","2012-11-08T02:59:12Z","2014-07-09T18:57:06Z"
"","236","Possibility to add WebAppContext handlers to Environment","Possibility to add WebAppContext to default Server  Example in service run method:  ```     WebAppContext context = new WebAppContext();     context.setDescriptor(""web/WEB-INF/web.xml"");     context.setResourceBase(""web"");     context.setContextPath(""/"");     context.setParentLoaderPriority(true);      // new environment addWebApp method     environment.addWebApp(context); ```  I need this feature, i hope you find it useful... Cheers Primoz","closed","","primozs","2012-12-13T12:30:28Z","2014-06-19T00:50:28Z"
"","203","Method validation","Please add support for method validation as described at http://musingsofaprogrammingaddict.blogspot.ca/2011/01/method-validation-with-hibernate.html","closed","","cowwoc","2012-11-02T03:22:12Z","2012-11-13T22:43:52Z"
"","153","HttpClient DNS overrides","Permits DNS names to be overridden in the http client configuration.  Currently contains some classes that would ultimately belong in Metrics, but kept here for the time being for ease of inspection.","closed","","tomakehurst","2012-08-01T21:15:14Z","2014-07-09T19:18:19Z"
"","375","JDK1.7 requirements","parts of dropwizard are compiled with JDK 1.7 - thus on default ubuntu images, it won't run. Could you guys cut a JDK 1.6 release?  Exception in thread ""main"" java.lang.UnsupportedClassVersionError: com/airbnb/dropwizard/assets/AssetServlet : Unsupported major.minor version 51.0     at java.lang.ClassLoader.defineClass1(Native Method)     at java.lang.ClassLoader.defineClassCond(ClassLoader.java:631)     at java.lang.ClassLoader.defineClass(ClassLoader.java:615)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)     at java.net.URLClassLoader.access$000(URLClassLoader.java:58)     at java.net.URLClassLoader$1.run(URLClassLoader.java:197)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:190)     at java.lang.ClassLoader.loadClass(ClassLoader.java:306)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)     at java.lang.ClassLoader.loadClass(ClassLoader.java:247)     at com.airbnb.dropwizard.assets.ConfiguredAssetsBundle.run(ConfiguredAssetsBundle.scala:48)     at com.airbnb.dropwizard.assets.ConfiguredAssetsBundle.run(ConfiguredAssetsBundle.scala:24)     at com.yammer.dropwizard.config.Bootstrap.runWithBundles(Bootstrap.java:64)     at com.yammer.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:37)     at com.yammer.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:58)     at com.yammer.dropwizard.cli.Cli.run(Cli.java:53)     at com.yammer.dropwizard.Service.run(Service.java:61)     at com.yammer.dropwizard.ScalaService.main(ScalaService.scala:7)     at com.airbnb.scheduler.Main.main(Main.scala)","closed","","florianleibert","2013-08-02T10:28:32Z","2014-09-09T20:24:14Z"
"","497","fix #481 Update JDBI docs according to new connection pool parameters","Parameters **checkConnectionHealthWhenIdleFor** and **closeConnectionIfIdleFor** are deprecated  and were replaced to **evictionInterval** and **minIdleTime** accordingly.  Reference commit: b8b5210","closed","","arteam","2014-03-18T09:31:20Z","2016-01-24T08:05:13Z"
"","222","UUID Parameter Class","Parameter class implementation for UUID's.","closed","","dstainer","2012-11-25T07:08:56Z","2014-07-09T18:49:00Z"
"","161","On startup log what tasks are available","Our latest Dropwizard project has numerous tasks. It is helpful to have them logged at startup so the names of the tasks are handy.","closed","","jspiewak","2012-08-04T16:27:05Z","2014-07-09T17:42:16Z"
"","57","Add provider to ResourceTest to enable things such as Exception mappers","Our ""store"" throws an Exception when the resource cannot be found, and we have an Exception mapper that turns it into a 404 Response.","closed","","jspiewak","2012-03-20T18:17:12Z","2014-06-30T00:33:48Z"
"","188","OptionalContainerFactory added","Optional support added to return Optional from JDBI DAO's.","closed","","cemo","2012-10-08T18:32:10Z","2014-06-22T16:52:49Z"
"","320","Failed tests:   createsNewData(com.codahale.dropwizard.hibernate.JerseyIntegrationTest)","On master, dropwizard-hibernate tests fail with the following error message:  `Failed tests:   createsNewData(com.codahale.dropwizard.hibernate.JerseyIntegrationTest): expected:<1971-03-14T[19]:12:00.000Z> but was:<1971-03-14T[22]:12:00.000Z>`  I'm currently located at UTC + 3 so I think the issue is when the `DateTime` is read back from H2, it is converted to local time instead of being left in UTC.","closed","","kilemensi","2013-05-05T01:39:15Z","2013-05-06T18:44:31Z"
"","266","A JUnit Rule to start and stop your service","On both systems I've built with Dropwizard I've ended up building a mechanism for starting and stopping the app from JUnit to allow in-memory acceptance testing.  This is slightly awkward to do currently due to the fact that the server command blocks (on server.join()) after startup and provides no hook for getting at the server to stop it. This patch provides a JUnit Rule along with some changes to a couple of core classes to resolve the above issues.","closed","","tomakehurst","2013-02-17T21:46:51Z","2014-07-09T18:32:19Z"
"","19","Recommendations for daemonizing a service?","On a previous project (not using dropwizard) we were using an old version of JSW to daemonize our service. What are the cool kids using these days?","closed","","adamv","2012-01-15T19:49:51Z","2012-01-17T04:06:52Z"
"","98","Fix issues 95, 96; remnants of 89","Ok, a few odds and ends to allow for messing with Configuration.","closed","","cowtowncoder","2012-05-23T22:17:41Z","2014-07-09T19:45:39Z"
"","73","Config overriding through .yml files","Often certain config values are maintained by operations/support team, and bundling them with application binaries is not possible. or asking support to change the values every time after deployment doesn't work out smoothly.  Also there are situation, where some configuration is required to be shared among applications. in this cased a shared config can be a huge help.  I have made some change to ConfigurationFactory, which looks for .yml and shared.yml file in ""user.home/.dw"" directory. later merges contents of these two files with developer supplied .yml file.","closed","","sipte","2012-04-06T18:13:54Z","2014-07-09T19:56:46Z"
"","286","doing > doin'","Obviously superflous, but this makes the Metrics description consistent with all the others","closed","","stve","2013-03-20T04:22:44Z","2014-06-12T13:14:08Z"
"","243","Add tasks for invalidating authentication caches","OAuthCacheInvalidationTask is perhaps misnamed, because there's nothing OAuth-specific about it. It offers parameter support for authenticators which use simple string credentials (notably OAuthProvider).","closed","feature,","celkins","2012-12-21T20:55:28Z","2014-07-09T18:05:32Z"
"","233","Check for null reference when validating objects","Null references cannot be validated. Check for null and return an error message.","closed","","carllerche","2012-12-07T23:44:21Z","2014-06-25T20:41:04Z"
"","191","Cleanup Scala Service initialization","Now that Bundles can hook in to the Bootstrap process, we can move all the Scala customizations from `ScalaService` to `ScalaBundle`.  `ScalaService` remains solely to provide the default `main` method for Scala Services.","closed","","nicktelford","2012-10-09T10:45:12Z","2014-07-09T19:04:41Z"
"","423","SlowRequestFilter.java","Not sure if this has been highlighted - but I think it's calculating wrong.  In the constructor it converts to nanoseconds  public SlowRequestFilter(Duration threshold) {     this.threshold = threshold.toNanoseconds();  }  But when it compares it uses milliseconds   final long elapsedMS = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);             if (elapsedMS >= threshold) {","closed","","cheekymonkat","2013-11-14T11:51:51Z","2013-12-07T20:34:04Z"
"","4","Make request logging non-blocking","No need to keep this around in the critical path. We should generate the log statement and then push it to a queue for a background thread to write to disk.","closed","","codahale","2011-05-11T20:02:36Z","2011-05-13T07:48:05Z"
"","5","Add optional cache-busting filter","Mostly for local development.","closed","","codahale","2011-05-12T23:12:15Z","2011-05-17T20:44:24Z"
"","113","Integrate Dropwizard with Wordnik Swagger for documentation","Most of the work on this was done by @ieugen Do you think it makes sense to have something like this in the main tree? Do we need to make any changes?","closed","","andreisavu","2012-06-18T21:39:24Z","2014-06-14T12:56:53Z"
"","519","Option to configure default RootResource","Most of the Restful projects I have worked on have a default RootResource class which generally have the @Path(""/"") and return a ""Welcome to "" Message.These classes are replicated across all projects.I wanted to know if it is possible to include a Default Resource object inside the framework and message can be configured using YAML file","closed","","akushe","2014-03-29T18:38:18Z","2014-03-29T18:53:16Z"
"","466","Use mockito-core rather than mockito-all","mockito-core is packaged with an old version of hamcrest which conflicts with JUnit 4.11, which means you can't use things like ExpectedException rules when you're depending on dropwizard-testing without explicitly excluding its mockito dependencies.  Just replacing mockito-core with mockito-all ends up with enforcer failures, because mockito-core depends on hamcrest 1.1 and JUnit 4.11 depends on hamcrest 1.3, but a bit of googling suggests that excluding the mockito-core dependency and running with hamcrest 1.3 works fine.","closed","","romseygeek","2014-02-09T22:25:09Z","2014-06-19T10:40:28Z"
"","364","Mockito artifact in dropwizard-testing breaks tests","Mockito is imported using the mockito-all artifact which packages a version of hamcrest. This older version has the potential to produce an error.   The stacktrace is presented here: http://stackoverflow.com/questions/7869711/  A possible solution is provided here: http://stackoverflow.com/a/16735373/2502247  I will test this out & report back with results.","closed","","MariusVolkhart","2013-07-17T18:51:53Z","2013-07-20T19:06:40Z"
"","449","Dependency updates","Minor dependency updates without backward incompatible changes.","closed","","joschi","2014-01-18T16:14:35Z","2014-07-09T16:57:14Z"
"","432","Remove mention of managed commands in manual.","ManagedCommand has been removed in bb94d628aa0b8bfb810d183e71b23a259777a37e.","closed","","Trundle","2013-12-03T21:54:17Z","2014-06-17T12:10:44Z"
"","296","Close Liquibase database connection on shutdown.","Make sure to close down the underlying Liquibase database connection on shutdown of the ManagedLiquibase service.","closed","","pkwarren","2013-04-01T14:39:43Z","2014-07-09T18:20:41Z"
"","431","Validating a JSON payload raises an exception when the payload is empty","Looks like there is a regression bug in 0.7?  Old bug: https://github.com/dropwizard/dropwizard/issues/232","closed","","wirde","2013-12-02T09:58:57Z","2014-06-25T20:43:23Z"
"","379","fix small typo in testing docs","looks like in 3b0561efa5d96b4b8a1d3abb0379e5510e2d5290 @simoncollins forgot to change store -> dao in 2 places","closed","","chadselph","2013-08-11T03:17:35Z","2014-06-15T07:36:57Z"
"","89","Handling of generic detection for ConfiguredCommand incomplete","Looks like ConfiguredCommand assumes that all commands directly extend it; so trying to use an intermediate base class, like:  ``` class MyCommmand extends ConfiguredCommand { } ```  will fail with exception like:  ``` Exception in thread ""main"" java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType at com.yammer.dropwizard.cli.ConfiguredCommand.getConfigurationClass(ConfiguredCommand.java:36) at com.yammer.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:62) at com.yammer.dropwizard.cli.Command.run(Command.java:113) at com.yammer.dropwizard.AbstractService.run(AbstractService.java:178) ```  I suspect same is true for other generic types, but this is the one I bumped into. A work-around is to keep intermediate classes parametric as well.  To fix this it should be possible to just go down inheritance hierarchy to find the place where generic information is passed; and although type aliasing can theoretically be problem (someone using intermediate classes with different number of parameters etc), in practice this should suffice. (and if not, java-classmate project can solve this cleanly and completely -- but it'd be one more dependency, although can be shaded)","closed","","cowtowncoder","2012-04-24T22:01:20Z","2016-07-14T14:06:46Z"
"","111","Optional query param does not support ints","Looks like  https://github.com/codahale/dropwizard/blob/master/dropwizard-core/src/main/java/com/yammer/dropwizard/jersey/OptionalExtractor.java  only works with string query parameters. It would be cool if you could do `Optional` for a query param and have dropwizard do the right magic.  Right now if you do `Optional`, everything works just fine, but when you do get() you get a string which is surprising given the template type.","closed","","justinvf-zz","2012-06-13T23:32:23Z","2012-07-05T06:39:38Z"
"","143","Allow keyStoreType to be configured for SSL.","Looked around for an existing test but couldn't find one. Verified by running up a server locally using a JCEKS cert.","closed","","xaviershay","2012-07-24T23:54:29Z","2014-07-09T19:26:55Z"
"","469","v0.6.2-tkosgrabar : Enabled multiple file logging configurations","Logging to multiple files enabled. This pull request is for version 0.6.2","closed","","tkosgrabar","2014-02-12T10:37:30Z","2014-06-14T10:54:03Z"
"","136","Queueing log events for asynchronous processing loses thread context (i.e., MDC)","Log events need to be prepared for asynchronous processing in order to gather thread-local data (and lazy-loaded properties).","closed","","celkins","2012-07-11T18:45:28Z","2014-06-14T10:43:04Z"
"","351","Small patch, add some documentation for logging","Life got in the way; I promised I would add the documentation for async logging so here it is.","closed","","GregBowyer","2013-06-15T06:15:11Z","2014-07-09T17:51:52Z"
"","10","Two minor fixes","Let me prefix this with ""I have no idea what the fuck I'm doing"".  Hit two issues trying to run the example project from git this morning.  First was that `RenderCommand#getConfiguredSyntax()` was returning a `String` rather than an `Optional`.  After that was fixed there was an error at runtime about the `HelloWorldResource#sayHello` method which I've included below.  Switching the type of the argument to a `String` allowed the app to function as intended.  ``` INFO  [2011-11-15 02:13:13,380] com.yammer.dropwizard.config.Environment:       GET     /hello-world (com.example.helloworld.resources.HelloWorldResource)  ERROR [2011-11-15 02:13:13,586] com.sun.jersey.spi.inject.Errors: The following errors and warnings have been detected with resource and/or provider classes:   SEVERE: Missing dependency for method public com.example.helloworld.core.Saying com.example.helloworld.resources.HelloWorldResource.sayHello(com.google.common.base.Optional) at parameter at index 0   SEVERE: Method, public com.example.helloworld.core.Saying com.example.helloworld.resources.HelloWorldResource.sayHello(com.google.common.base.Optional), annotated with GET of resource, class com.example.helloworld.resources.HelloWorldResource, is not recognized as valid resource method. WARN  [2011-11-15 02:13:13,587] /: unavailable ! com.sun.jersey.spi.inject.Errors$ErrorMessagesException !   at com.sun.jersey.spi.inject.Errors.processErrorMessages(Errors.java:170) !   at com.sun.jersey.spi.inject.Errors.postProcess(Errors.java:136) !   at com.sun.jersey.spi.inject.Errors.processWithErrors(Errors.java:199) ```","closed","","NZKoz","2011-11-15T02:40:21Z","2014-07-09T20:27:36Z"
"","16","ditch some old gitignore stuff","legacy of streamie?","closed","","tnm","2011-12-18T22:58:20Z","2014-07-09T20:24:34Z"
"","34","Add service-wide Jackson config/instance","Keep in mind we'll need to provide the ability for consumers like `ConfigurationFactory` to customize behavior (e.g., failing on unknown properties).","closed","feature,","codahale","2012-02-17T19:46:22Z","2012-03-07T07:40:42Z"
"","507","Bumped jackson to v2.3.2.","Just upgraded jackson to the last release in order to benefit from the new addition of the CBOR mapper.","closed","","emeka","2014-03-24T22:59:08Z","2014-07-09T16:41:02Z"
"","21","Build fails","Just tried to build from latest GIT, but HttpClient support fails:  --- ##  T E S T S  Running com.yammer.metrics.httpclient.tests.InstrumentedHttpClientTest SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"". SLF4J: Defaulting to no-operation (NOP) logger implementation SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.247 sec Running com.yammer.metrics.httpclient.tests.InstrumentedClientConnManagerTest Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec <<< FAILURE!  Results :  Failed tests:    what(com.yammer.metrics.httpclient.tests.InstrumentedClientConnManagerTest):  Expected: is 1      got: 0","closed","","analytically","2012-01-20T09:42:52Z","2012-02-02T16:46:00Z"
"","50","Suggested updates to the dropwizard documentation","Just some small updates to the dropwizard-db section and the package structure section in core.","closed","","wolfeidau","2012-03-12T06:29:26Z","2014-07-09T20:07:53Z"
"","94","Make logback usage more configurable","Just some non configurable roadblocks I've hit: 1. Make the pattern in com.yammer.dropwizard.logging.LogFormatter configurable (yes, the default is a well-thought-out choice but the relative merit of logging patterns is subjective and everyone will want to tweak theirs). 2. Expose some of the other configurable attributes in the ch.qos.logback.classic.PatternLayout hierarchy (e.g., setting outputPatternAsPresentationHeader to false will suppress the printing of the logback pattern on startup).","closed","","fleaflicker","2012-05-18T21:44:14Z","2012-05-19T16:00:08Z"
"","13","Fix a grammar error","Just caught this whilst skimming the docs.","closed","","tcrayford","2011-12-14T14:14:34Z","2014-07-09T20:26:05Z"
"","112","Added missing argument to error message in AssetsBundle","Just a real minor fix, a checkArgument call had a %s in the error message but was missing the varargs parameter.","closed","","bbeck","2012-06-14T03:43:04Z","2014-07-09T19:39:05Z"
"","467","Fix graceful shutdown","Jetty uses StatisticsHandler to track outstanding requests for graceful shutdown.  See https://bugs.eclipse.org/bugs/show_bug.cgi?id=420142 for more details.","closed","","vadims","2014-02-10T21:40:35Z","2014-06-27T11:06:08Z"
"","100","Add spdy support","Jetty has SPDY support, http://wiki.eclipse.org/Jetty/Feature/SPDY. Please add spdy support, it shuold be similar to ssl support that is already included.","closed","","slavus","2012-05-26T17:19:51Z","2012-05-28T11:53:00Z"
"","14","Adding a DBIExceptionsBundle.","Jersey should log the actual causes for SQLExceptions & DBIExceptions","closed","","chrisgray","2011-12-15T02:01:01Z","2014-07-09T20:25:35Z"
"","491","logEndpoints omits resource with @Path-annotated interfaces","Jersey recognizes the @Path annotation on resource classes either directly on the class itself or on one of its interfaces.  Dropwizard, however, only looks directly on the class itself when logging the list of resource paths at startup.  It should use the same test as Jersey to ensure the list of paths is complete.","closed","","pimlottc","2014-03-11T22:25:48Z","2014-03-12T18:37:11Z"
"","169","Update to current JDBI Version","JDBI 2.39 provides better StringTemplate statement location mechanisms. Out of the box it should make no difference to dropwizard, but it's good to be on the current version.","closed","","brianm","2012-08-23T18:43:02Z","2014-07-09T19:14:47Z"
"","498","Enable Java 8 build in travis (in addition to Java 7)","Java 8 is out, so it'd be good to start working towards supporting it properly. Here's a travis and maven change to enable builds on a JDK8 (not taking advantage of any Java8 features).   There are 2 incompatibilities which I've resolved using profiles: - findbugs doesn't yet support Java 8, so I've introduced a profile which disables it under Java8. - JDK8 introduces a new strict mode to javadoc which makes Java7 compatible javadoc break the build, so I've introduced a profile which disables it under Java8.","closed","task,","davidillsley","2014-03-18T20:18:15Z","2014-06-30T18:35:16Z"
"","114","Expose count and unit in Size and Duration","It's often useful to use a `Duration` defined in a `Configuration` to provide timing information to parts of `java.util.concurrent`:  ``` java Duration delay = Duration.seconds(1); executor.schedule(task, delay.toSeconds(), TimeUnit.SECONDS); ```  However, when this `Duration` is defined elsewhere (e.g. in a `Configuration`) it's not possible to know the unit type. Therefore, to ensure no loss in granularity you must use the most fine-grained `TimeUnit`:  ``` java public void schedule(Runnable task, delay: Duration) {     executor.schedule(task, delay.toNanoseconds(), TimeUnit.NANOSECONDS); } ```  While under the hood this is always translated to nanoseconds anyway, it creates potentially misleading code, as the reader may erroneously interpret such timings to be miniscule.  As a convenience, it'd be nice if we could ask `Duration` for its quantity and unit explicitly:  ``` java public void schedule(Runnable task, delay: Duration) {     executor.schedule(task, delay.getQuantity(), delay.getUnit()); } ```  The same is done for `Size` for consistency.","closed","","nicktelford","2012-06-20T14:16:45Z","2014-07-09T19:37:03Z"
"","206","Document HttpConfiguration","It's not clear what some of the flags do, nor is it clear whether we're supposed to extend this class.","closed","","cowwoc","2012-11-06T21:29:22Z","2012-11-06T21:30:24Z"
"","9","Exclude jetty-client","It's getting drug in via jetty-servlets.  (Do we even need jetty-servlets?)","closed","","codahale","2011-07-14T16:58:29Z","2011-07-14T19:41:46Z"
"","156","Add Maven Archetypes for skeleton projects","It's a good idea to have a template for new projects to help users adhere to best practices for project layout.  Provides: - A Java Archetype, `java-simple`, for creating new Java Dropwizard projects. - A Scala Archetype, `scala-simple`, for creating new Scala Dropwizard projects. [update: **no Scala support as of 0.7.0**] - A utility, `dropwizard-create`, for bootstrapping a new project using the Archetypes.  The POM for generated projects will: - Generate JavaDoc/ScalaDoc, and build an attached doc JAR. - Build and attach a source JAR. - Build shaded JAR (optional) - Build an executable JAR for the Service. - Generate Maven Site  The `dropwizard-create` utility is provided so that users don't have to grapple with Mavens' appalling UI for generating projects from Archetypes. It ensures that all the necessary properties are provided to the Archetypes and provides some sensible defaults for the lazy.","closed","feature,","nicktelford","2012-08-02T12:37:42Z","2014-11-24T19:54:23Z"
"","3","added link to example application repository from README","It'd be useful to have a link to the example repository from the README.","closed","","tommorris","2011-05-10T10:13:17Z","2014-06-15T07:37:34Z"
"","438","Add support for customizing the view renderers used","It'd be nice to have the ability to customize the ViewRenderers that are used in DropWizard.   I created a [Handlebars ViewRenderer](https://github.com/tburch/dropwizard-extras/tree/master/dropwizard-extras-view/dropwizard-extras-view-handlebars) and [Markdown ViewRenderer](https://github.com/tburch/dropwizard-extras/tree/master/dropwizard-extras-view/dropwizard-extras-view-markdown) for Dropwizard, but I'm unable to pass in an instance of Handlebars/Markdown4jProcessor in the ViewRenderer because of how the ViewMessageBodyWriter instantiates ViewRenderer instances. In the Mustache and FreeMarker cases, this is ok, but for Handlebars/Markdown, using the default constructor is insufficient because you wouldn't be able to customize the rendering engine being used.","closed","","tburch","2013-12-13T21:24:05Z","2014-06-12T07:28:24Z"
"","106","Enable mix-in Bundles for ScalaServices","It'd be nice to be able to mix-in `Bundles` to `ScalaServices`. Such Bundles would use a self-type annotation to define their requirements on the `Service` implementation:  ``` scala trait GraphiteReportingBundle {   self: ScalaService[_ <: GraphiteReportingConfiguration] =>    self.addBundle(new GraphiteReportingBundle)    class GraphiteReportingBundle     extends ConfiguredBundle[GraphiteReportingConfiguration] {      def initialize(c: GraphiteReportingConfiguration, e: Environment) {       GraphiteReporter.enable(/*...*/)       env.addHealthCheck(new GraphiteHealthCheck(/*...*/)     }   } } ```  Unfortunately, this fails at runtime with:  ``` IllegalAccessError: tried to access method AbstractService.addBundle(LConfiguredBundle;)V from class GraphiteReportingBundle$class ```  Because `AbstractService.addBundle` is a protected method and traits can only access the public methods on their self-type.  To address this, I've added two public proxy methods to `ScalaService`:  ``` scala   def withBundle(bundle: Bundle)   def withBundle(bundle: ConfiguredBundle[_ >: T]) ```  These methods allow Service mix-ins to add the bundle like this:  ``` scala trait GraphiteReportingBundle {   self: ScalaService[_ <: GraphiteReportingConfiguration] =>    self.withBundle(new GraphiteReportingBundle)    /* snip */ } ```  Since these proxies are only added to `ScalaService`, it doesn't leak in to Java projects that don't support/require/want mix-in composition of bundles.","closed","","nicktelford","2012-06-01T10:16:29Z","2014-07-09T19:41:06Z"
"","211","AssetsBundle CacheBuilderSpec configuration based","It would be really helpful to have the ability to configure AssetsBundle's cache via configuration file. This would allow to switch between dev and production modes without any code changes.  Having something like this in production.yml  ``` yml assets:   cacheMaximumSize: 100 ```  dev.yml  ``` yml assets:   cacheMaximumSize: 0 ```  Is less error-prone than changing:  ``` java CacheBuilderSpec cacheSpec = CacheBuilderSpec .disableCaching();     ```  to   ``` java CacheBuilderSpec cacheSpec = AssetsBundle.DEFAULT_CACHE_SPEC; ```  before each deployment.","closed","","ghost","2012-11-10T15:43:18Z","2012-12-16T23:21:18Z"
"","263","Add ability to disable or change the number of retries of the Apache Http Client request retry handler","It would be nice if we could disable or better yet manage the default request retry policy of the Instrumented Apache Http Client used by Dropwizard-client module.   An entry in httpClient configuration like requestRetries (from zero to whatever, zero disables it), maybe?","closed","","pparth","2013-02-15T15:09:44Z","2013-02-16T04:15:14Z"
"","509","Return 4xx errors instead of 5xx errors if the body of the request is invalid JSON","It would be nice if Dropwizard can handle this problem instead of having DW users to provide custom JSON exception handling providers. After all, this kind of requests are bad requests, not server errors","closed","","tongguop","2014-03-25T13:09:38Z","2014-05-13T12:56:15Z"
"","522","Improve retries in dropwizard-client","It would be great if users could specify their own RequestRetryHandler when constructing Jersey and Apache HttpClient instances since the default implementation does not retry on timeouts (see [this issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1207)) and the [dropwizard implementation](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java#L132) does not retry sent requests.  One solution would be to simply add a `using(HttpRequestRetryHandler)` method to `JerseyClientBuilder` and `HttpClientBuilder`. I'd be happy to make the change if this is agreeable.   My current (nasty) workaround is:  ``` ApacheHttpClient4 c = (ApacheHttpClient4) new JerseyClientBuilder(environment).using(config.jerseyClient).build(""foo""); ((AbstractHttpClient) c.getClientHandler().getHttpClient()).setHttpRequestRetryHandler(myRetryHandler); ```","closed","","jhalterman","2014-04-02T23:54:19Z","2014-05-13T16:26:20Z"
"","215","No way to assign custom error handlers.","It would be great if there was a way to configure custom implementations of error handlers/representations.  Currently, it appears there's no way to override the behaviour of UnbrandedErrorHandler, which produces HTML representations of errors such as ""Error 422 Unprocessable Entity"", even when the Accept header is set to application/json.  Perhaps I'm just not aware of the approach to do this with the existing code?","closed","","thody","2012-11-14T19:08:31Z","2015-03-31T17:52:22Z"
"","391","Multiple Versions of Documentation","It would be great if documentation on the site http://dropwizard.codahale.com/ was presented for the three latest versions (0.7.x, 0.6.x, 0.5.x). And also had the opportunity to look at the documentation in different languages.  e.g. like http://docs.sqlalchemy.org/en/rel_0_8/  If you will find it appropriate, I am willing to do this, as well as the translation into Russian.","closed","","jamel","2013-09-17T09:46:37Z","2013-09-18T10:54:48Z"
"","74","Fat jar containing all dropwizard modules","It would be easier for people not using maven, to combine all jars in single dropwizard.jar, metrics.jar.","closed","","sipte","2012-04-06T18:32:16Z","2012-04-07T00:02:05Z"
"","159","Tasks servlet not finding tasks (404)","It seems that the upgrade of Jetty has changed the semantics of HttpServletRequest.getServletPath(), such that it's returning ""/tasks"" for all requests at the Tasks servlet. The method getPathInfo() seems to fit the bill:  ""Returns any extra path information associated with the URL the client sent when it made this request. The extra path information follows the servlet path but precedes the query string and will start with a ""/"" character.""  Pull request forthcoming.","closed","","jaredstehler","2012-08-03T22:41:39Z","2012-08-04T20:24:27Z"
"","354","Fix package name for GangliaReporterFactoryTest","It apparently didn't get moved along with GangliaReporterFactory.","closed","","nicktelford","2013-06-18T14:55:12Z","2014-06-18T12:08:09Z"
"","345","Swagger tutorial?","Is there a tutorial for using swagger with dropwizard?  I've found the swagger java tutorial here: https://github.com/wordnik/swagger-core/wiki/java-jax-rs however, I'm not sure where/how in dropwizard I can modify the web.xml properties needed.  Any tips would be greatly appreciated.","closed","","doapp-jeremy","2013-06-10T14:08:52Z","2013-06-10T14:09:47Z"
"","323","Add ability to define custom MIME mappings (for servlets)","Intended primarily for use with AssetServlet. Analogous to `` in a deployment descriptor, so didn't seem necessary to expose `MimeTypes` directly.","closed","","celkins","2013-05-08T21:27:46Z","2014-07-09T18:05:02Z"
"","516","add http patch annotation","Included here for convenience http://tools.ietf.org/html/rfc5789  > The difference between the PUT and PATCH requests is reflected in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.  In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced.  With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.","closed","","d2fn","2014-03-27T22:05:12Z","2014-06-16T12:29:55Z"
"","386","Add support for multiple AssetsBundle","In version 0.7.0-SNAPSHOT it is not possible to use multiple AssetsBundle pointing to different resourcePath or uriPath.   This is because of this line:  ``` java  environment.servlets().addServlet(""assets"", createServlet()).addMapping(uriPath + '*'); ```  If multiple AssetsBundle are added than only last is used because all servlets use same name ""assets"".","closed","needs code,","slavus","2013-09-08T17:41:07Z","2013-09-22T12:25:15Z"
"","474","Removing maximum limit on archivedFileCount for file logging.","In some systems we want to keep a history of logs for 1 year. As far as I can tell the maximum of 50 here is an arbitrary decision; Logback itself imposes no such limit.","closed","","reines","2014-02-20T11:51:37Z","2014-07-09T16:52:10Z"
"","193","JerseyClientFactory now accepts a HttpClientFactory","In order to start support client-certificate based authentication, there needs to be a way to configure the HttpClient.","closed","","chrisgray","2012-10-12T23:09:03Z","2014-07-09T19:03:40Z"
"","166","Add GenericType methods to JerseyClient","In order to allow for things like:  jerseyClient.get(..., ..., new GenericType>() {});  You need to have the GenericType methods exposed on JerseyClient.  Easy fix :-)","closed","","dmorgantini","2012-08-20T14:38:53Z","2014-06-19T15:51:59Z"
"","225","(shortterm) fix for case-problems in logging","In norway the months are legally written in lower case, which I suspect is the case here. I guess other locales might get other proclems, not solvable by ignoring case though.  I haven't dug deep enough to solve by forcing locale for the tests, though that might be a better long-term solution.  ``` Failed tests:    logsRequests(com.yammer.dropwizard.jetty.tests.AsyncRequestLogTest): expected:<'10.0.0.1 - - [16/[N]ov/2012:05:00:47 +00...> but was:<'10.0.0.1 - - [16/[n]ov/2012:05:00:47 +00...>   logsPrincipal(com.yammer.dropwizard.jetty.tests.AsyncRequestLogTest): expected:<...10.0.0.1 - coda [16/[N]ov/2012:05:00:47 +00...> but was:<...10.0.0.1 - coda [16/[n]ov/2012:05:00:47 +00...>   logsForwardedFor(com.yammer.dropwizard.jetty.tests.AsyncRequestLogTest): expected:<...123.123.123 - - [16/[N]ov/2012:05:00:47 +00...> but was:<...123.123.123 - - [16/[n]ov/2012:05:00:47 +00...>   logsAsyncContinuations(com.yammer.dropwizard.jetty.tests.AsyncRequestLogTest): expected:<'10.0.0.1 - - [16/[N]ov/2012:05:00:47 +00...> but was:<'10.0.0.1 - - [16/[n]ov/2012:05:00:47 +00...>  ```","closed","","olvesh","2012-11-29T13:17:38Z","2014-07-09T18:46:59Z"
"","382","Support logback variable substitution","In logback config you can use variable substitution: http://logback.qos.ch/manual/configuration.html.  For instance, you can log to ${APPDATA}\myapp\logs\myapp.log, and it will just do the right thing (write to C:\Users\Login\AppData\Roaming...).  It appears that dropwizard bypasses this parser completely, so my app ends up writing to a folder called ${APPDATA} in current work dir.","closed","","konrad-garus","2013-08-26T08:51:35Z","2013-08-26T13:23:20Z"
"","481","Configuration in JDBI doc has deprecated parameters","In https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/jdbi.rst  The following don't exist anymore:  ``` # how long a connection must be held before it can be validated   checkConnectionHealthWhenIdleFor: 10s  # the maximum lifetime of an idle connection   closeConnectionIfIdleFor: 1 minute ```  Browsing dropwizard/dropwizard-db/src/main/java/io/dropwizard/db/DataSourceFactory.java there appear to be some new ones that were not in the doc previously.","closed","","creategui","2014-02-27T13:11:35Z","2014-03-24T16:56:39Z"
"","347","Jersey module's pom.xml has hard-coded Jackson version, should use ${jackson.version}","In file   https://github.com/codahale/dropwizard/blob/master/dropwizard-jersey/pom.xml  artifactId `jackson-jaxrs-json-provider` has a hard-coded version of 2.2.1","closed","","fleaflicker","2013-06-14T15:57:36Z","2013-06-14T16:27:23Z"
"","241","Cannot use indexFile when the assets are mapped on ""/"" and the service is started from JAR file","In AssetServlet the path to the indexFile was built this way :    ``` java absoluteRequestedResourcePath + '/' + indexFile ```  When the assets are mapped on ""/"", this leads to :  ``` java  ""my/resource/path/"" + '/' + ""myindex.html"". ```  And when trying to get a resource url with a double slash (//) in path, it works from filesystem (""exploded jar""), when starting the service from Eclipse for example, but not within a JAR.  The fix simply trims ""/"" from absoluteRequestedResourcePath to make sure we never get a double slash.","closed","","tmaurel","2012-12-19T13:30:56Z","2014-07-09T18:43:57Z"
"","514","Update views.rst","In 0.7.x you do not set the Application name property via Bootstrap. It defaults to the simple class name or can be overridden `@Override public String getName()` in the Application class.","closed","","dominicfarr","2014-03-27T08:56:16Z","2014-07-09T16:40:01Z"
"","515","Update client.rst","In 0.7.x HttpClientBuilder and JerseyClientBuilder take the Environment object as a constructor parameter","closed","","dominicfarr","2014-03-27T14:15:51Z","2014-07-09T16:39:00Z"
"","403","JerseyHttpClient always uses chunked encoding for sending data, annoying lighttpd","If you use Dropwizard's JerseyHttpClient to POST data somewhere, it will always use chunked encoding which annoys simpler webservers like lighttpd massively:  ``` POST / HTTP/1.1 Content-Type: application/json Accept-Encoding: gzip Transfer-Encoding: chunked Host: 127.0.0.1:8000 Connection: Keep-Alive  2 {} 0  HTTP/1.1 411 Length Required Content-Type: text/html Content-Length: 357 Connection: close Date: Thu, 03 Oct 2013 08:37:56 GMT Server: lighttpd/1.4.28  […] ```  This shouldn't really happen because Jersey's [ApacheHttpClient4Handler](https://java.net/projects/jersey/sources/svn/content/tags/jersey-1.17.1/jersey/contribs/jersey-apache-client4/src/main/java/com/sun/jersey/client/apache4/ApacheHttpClient4Handler.java?rev=5854) does use a `BufferedHttpEntity` unless requested otherwise (line 271ff).  Below you can find a simplish test case (I think the `Managed` stuff isn't really necessary, I just wanted to be sure everything is in a good state before I send my request). It won't happen in my naive JerseyClient implementation (switch the comments in `main`) and also won't happen with a `HttpClient` (switch the comments in `run`) unless you use a streaming `HttpEntity` and forget to wrap it in a `BufferedHttpEntity`.  Because it doesn't happen in `runNaiveJerseyClient` I think Dropwizard registers some magic which makes the Jersey client unhappy/forget to apply its `BufferedHttpEntity`. My guess is the gzip filter which is registered (at least I'm stepping through it with the debugger) even if I set `setGzipEnabledForRequests` to false. But I might be wrong.  ``` public class TestService extends Service {     private final static String URL = ""http://127.0.0.1:8000/"";      public static void main(String[] args) throws Exception {         TestService s = new TestService();         s.run(args);         //s.runNaiveJerseyClient();     }      public void initialize(Bootstrap bootstrap) {}      public void run(Configuration config, Environment env) throws Exception {         runJerseyClient(config, env);         //runHttpClient(config, env);         env.addResource(new Root());     }     private void runJerseyClient(Configuration config, Environment env) throws Exception  {         final JerseyClientConfiguration clientConfig = new JerseyClientConfiguration();         clientConfig.setGzipEnabledForRequests(false);         final Client client = new JerseyClientBuilder()             .using(clientConfig)             .using(env)             .withProperty(ClientConfig.PROPERTY_CHUNKED_ENCODING_SIZE, null)             .build();         client.addFilter(new LoggingFilter());         env.manage(new Managed() {             public void start() throws Exception {                 WebResource.Builder builder = client.resource(URL)                         .type(""application/json"")                         .entity(new HashMap());                 builder.post();             }             public void stop() throws Exception {}         });     }     private void runNaiveJerseyClient() {         Client client = Client.create();         client.setChunkedEncodingSize(null);         client.addFilter(new LoggingFilter());         WebResource.Builder builder = client.resource(URL)                 .type(""application/json"")                 .entity(new HashMap());         builder.post();     }     private void runHttpClient(Configuration config, Environment env) throws Exception {         final HttpClientConfiguration clientConfig = new HttpClientConfiguration();         final HttpClient client = new HttpClientBuilder()             .using(clientConfig)             .build();         //final HttpEntity entity = new StringEntity(""{}"");         final HttpEntity entity = new BufferedHttpEntity(new EntityTemplate(new ContentProducer() {             public void writeTo(OutputStream out) throws IOException {                 out.write(new byte[]{'{', '}'});             }         }));         env.manage(new Managed() {             public void start() throws Exception {                 HttpPost post = new HttpPost(URL);                 post.setHeader(""Content-Type"", ""application/json"");                 post.setEntity(entity);                 HttpResponse response = client.execute(post);                 StatusLine status = response.getStatusLine();                 if (status.getStatusCode() >= 300)                     throw new RuntimeException(status.toString());             }             public void stop() throws Exception {}         });     }     @Path(""/"")     public class Root {         @GET         public Object get() { return null; }     } } ```","closed","","mss","2013-10-03T08:55:24Z","2015-03-23T21:53:02Z"
"","496","Log Appenders with filters do not function when wrapped async","If you have an custom appender and decide to add filters, the `AsyncAppender` does not correctly execute the filters on the delegate.","closed","","halorgium","2014-03-18T00:02:34Z","2014-07-17T10:59:10Z"
"","317","nested custom config needs explicit JonsProperty defined","If you have a custom nested config directive, you need to explicitly call out the parent level string in the @JsonPropery in the base Configuration class.","closed","","doapp-ryanp","2013-04-30T20:34:23Z","2014-07-09T18:10:04Z"
"","426","Adding a servlet filter doesn't work if jersey is disabled","If you do:   environment.jersey().disable()  Servlet filters added via:    environment.servlets().addFilter .... addMappingForUrlPatterns do not work.  Enabling jersey and adding in a dummy resource causes it to work.  This is dropwizard 0.7.0-SNAPSHOT","closed","","jclawson","2013-11-20T18:49:05Z","2014-10-23T08:40:01Z"
"","316","AssetBundle unable to load encoded resources","if the resources requested is encoded by the browser, the AssetLoader is not able to load the file system resource. ### Example  the request   ``` http://localhost:8080/images/Their Finest Hour.jpg  ```  is sent by Chrome as   ``` http://localhost:8080/resources/images/The%20Big%20Guns.jpg ```  As the resource is   ``` /resources/images/Their Finest Hour.jpg  ```  it is not found and a 404 is returned.","closed","","massigerardi","2013-04-29T19:54:03Z","2013-05-07T19:05:37Z"
"","90","Avoid NPE when tearing down test","If setUpResources() throws an exception, the JerseyTest field is never initialized. This causes an NPE later in tearDownJersey() and masks the underlying error.","closed","","celkins","2012-04-26T22:07:54Z","2014-07-09T19:49:41Z"
"","262","Migrate command with ValidationFailedException return with exit code 0","If I currently run migrate and a validation exception occurs the command exits with status code 0 (success).  I would expect a failure return code.  The bad migration I had to generate this output was a rename column without specifying a data type:  ``` xml          ``` ## EXAMPLE OUTPUT  log4j:WARN No appenders could be found for logger (org.jboss.logging). log4j:WARN Please initialize the log4j system properly. log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. INFO  [2013-02-14 16:07:39,334] liquibase: Successfully acquired change log lock INFO  [2013-02-14 16:07:39,854] liquibase: Reading from `DATABASECHANGELOG` INFO  [2013-02-14 16:07:39,856] liquibase: Reading from `DATABASECHANGELOG` WARN  [2013-02-14 16:07:40,087] liquibase: modifyDataType will lose primary key/autoincrement/not null settings for mysql.  Use  and re-specify all configuration if this is the case INFO  [2013-02-14 16:07:40,091] liquibase: Successfully released change log lock Validation Error:  echo ""$?"" 0","closed","","bjfish","2013-02-14T16:41:29Z","2013-03-03T04:03:06Z"
"","80","Add method path to startup log message","If a method of class annotated with Path contains a Path annotation itself, add that path to what is logged on start up. Thus if there are multiple GET methods on a class with distinct Path extensions, you can see the difference","closed","","jspiewak","2012-04-19T16:19:36Z","2014-07-09T19:54:14Z"
"","256","adminPort isn't used with dynamic http.port and http.adminPort","If `http.adminPort` and `http.port` are both set to `0`, the `internal` servlet is added to the `main` connector at context path `/admin` and the `internal` connector is unused.  [ServerFactory.java#L317](https://github.com/codahale/dropwizard/blob/v0.6.1/dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java#L317) should be changed to match [ServerFactory.java#L100](https://github.com/codahale/dropwizard/blob/v0.6.1/dropwizard-core/src/main/java/com/yammer/dropwizard/config/ServerFactory.java#L100). Maybe adding something like `HttpConfiguration#hasSeparateAdminPort` would be helpful?","closed","bug,","also","2013-02-02T00:08:34Z","2014-07-09T18:28:16Z"
"","408","updated docs for core, hibernate and migrations","I've updated the references in the docs for the 0.7.0 update for manual/core, manual/hibernate and manual/migrations. I've also created a configuration reference and linked to it at the bottom of manual/index.","closed","","grahamoregan","2013-10-07T10:53:12Z","2014-06-27T03:13:04Z"
"","361","dropwizard-migrations diff command","I've seen that migrations bundles provides a lot of useful commands: dump, rollback, etc.. but I didn't see the ""diff"" command, why?","closed","","CeccoCQ","2013-07-11T17:32:26Z","2013-07-11T17:34:12Z"
"","303","Update Scala docs to point to new repo location.","I've pushed it to Sonatype OSS, should be synced to Maven Central within a couple hours.  Thanks.","closed","","bretthoerner","2013-04-08T19:22:15Z","2014-07-09T18:21:11Z"
"","337","Server shutdowns immediately after starting","I've just pulled the latest `0.7.0-SNAPSHOT` and after making a clean build, my server no longer waits for any requests after starting up. It immediately shuts down.  I get the same behavior when I run the example application. There isn't any immediate error that I can see that could be causing this.  The output logs for the example application (with level: ALL) can be see in this [gist](https://gist.github.com/kilemensi/5655862)","closed","","kilemensi","2013-05-27T08:37:48Z","2013-05-27T23:42:08Z"
"","182","Freemarker + Encoding Mappings","I've attached a quick 1-liner pull request that loads the default encoding mappings when building the Freemarker configuration.  Previously it was setting a default encoding of UTF-8, but not having any mechanism to use anything locale-specific.","closed","","ajordens","2012-10-03T00:28:22Z","2014-07-09T17:46:19Z"
"","329","multi-db liquibase migrations","I'm working on a project that has Dropwizard talking to multiple databases. This didn't require any extra trickery on the jdbi side of things, but the migrations bundle needed some adjustments to allow migration of both databases.  When you add the migrations bundle, you provide it with one configuration strategy per database:  ```  public void initialize(Bootstrap bootstrap)  {      bootstrap.addBundle(new MultiDbMigrationsBundle(                ConfigurationStrategies.newMultiDbConfigurationStrategy(                        ImmutableMap.> builder()                                .put(""this_db"", new ConfigurationStrategy() {                                    @Override                                    public DatabaseConfiguration getDatabaseConfiguration (MyConfiguration configuration) {                                        return configuration.getThisConfiguration().getDatabaseConfiguration();                                    }                                })                                .put(""that_db"", new ConfigurationStrategy() {                                    @Override                                    public DatabaseConfiguration getDatabaseConfiguration (MyConfiguration configuration) {                                        return configuration.getThatConfiguration().getDatabaseConfiguration();                                    }                                })                                .build()               )      ){}); ```  The database configuration bean / YAML has been extended to allow configuration a schema resource path other then the default ""`migrations.xml`"".  The command line then looks like e.g.  ```     db status --db that_db local.yml ```","closed","","lorrin","2013-05-13T23:46:19Z","2014-06-27T11:06:08Z"
"","470","Putting @Valid validation on List doesn't validate individual elements","I'm trying to use the @Valid annotation on a resource request parameter to validate a list of inputs.  While this works fine for a single model object, when I try it on a List of model objects, it doesn't validate each individual object like I expected.  For example, adding a batch POST method to dropwizard-example's HelloWorldResource:  ``` @POST @Path(""/s"") public void receiveHellos(@Valid List sayings) {     LOGGER.info(""Received some sayings: {}"", sayings); } ```  Testing:  ``` $ curl -X POST --include  http://localhost:8080/hello-world --data '{""content"" : ""hello""}' --header ""Content-Type: application/json""; echo HTTP/1.1 422 Unprocessable Entity Date: Wed, 12 Feb 2014 23:28:25 GMT Content-Type: application/json Transfer-Encoding: chunked  {""errors"":[""content length must be between 0 and 3 (was hello)""]} ```  ``` $ curl -X POST --include  http://localhost:8080/hello-world/s --data '[{""content"" : ""hello""}]' --header ""Content-Type: application/json""; echo HTTP/1.1 204 No Content Date: Wed, 12 Feb 2014 23:31:13 GMT Content-Type: application/json ```","closed","","pimlottc","2014-02-12T23:31:33Z","2018-06-26T12:15:42Z"
"","441","How to redirect from one view to another app url?","I'm new to Drop Wizard, and would like to redirect from a server side view to another url in my app.  Does DropWizard wrap up this common task somehow?  e.g.  ``` @GET public View getView(@Context HttpServletRequest req) {      View view = new View();       if (somethingBad)      {          // code here to redirect to another url, eg /bad_data      }      else      {           return view;      } } ```  **_Note that I'd like to redirect to an URL not return a different view....  Thanks!**_","closed","","bradparks","2013-12-20T19:15:13Z","2013-12-20T19:23:26Z"
"","2","Allow the ability to set min number of connections on Jetty","I'd like to have this ability, as it's slightly traumatic for observatory to get hit with a boatload of http all at once and spin up ~300 threads.","closed","","collinvandyck","2011-04-07T16:30:50Z","2014-06-18T07:48:37Z"
"","443","Add support for date-time offset values in configuration files","I'd like to add the ability to specify something I'd like to call date time offset, which relates directly to JodaTime's plusDays(), plusWeeks(), etc. functions.  I had a need to be able to specify an offset value in the format '+1 day', and '-1 day', etc.  At first I attempted to use Duration.  Duration doesn't support negative values or explicit positive values, and after giving it some more thought, I decided that this type of thing is an entirely different concept than Duration anyways and the units Duration supports isn't directly in line with what JodaTime allows you to plus/minus from DateTime instances.  I've left out the ability to convert between units for now as this can get fairly complex for cases like converting days to months, etc.  I wanted to keep the functionality simply for representing an offset and applying it, not much more.  Examples:  MyConfiguration.java:  public class MyConfiguration extends Configuration {    private DateTimeOffset start;    // public getStart()/setStart()...    private DateTimeOffset end;    // public getEnd()/setEnd()... }  config.yaml: start: -1 day end: +5 days  Usage: MyConfiguration configuration = ...; configuration.getStart().apply(DateTime.now()); // calls plusDays(-1) on instance","closed","","gtrog","2014-01-02T16:10:30Z","2014-07-09T17:07:21Z"
"","448","Allow for using external logback.xml configuration","I'd like to add some custom appenders (like Whisper) that require specialized configuration. Does dropwizard allow you to move all logging configuration outside of yaml to logback's own xml configuration file?  If you don't please consider doing so. Otherwise you are trying to unnecessarily wrap another library into your yaml and will always play catchup to logback.","closed","","kartech","2014-01-15T15:27:57Z","2015-09-25T23:45:23Z"
"","60","Use AssetBundle on /","I'd like requests to / to be served by an AssetBundle (while still being able to set other sub-paths via `@Path`).  When I try to do this with:  ``` addBundle(new AssetsBundle(""/assets/"", 0, ""/"")); ```  I get the following error:  ``` Exception in thread ""main"" java.lang.IllegalArgumentException: duplicate key: /* at com.google.common.base.Preconditions.checkArgument(Preconditions.java:115) at com.google.common.collect.RegularImmutableMap.(RegularImmutableMap.java:72) at com.google.common.collect.ImmutableMap$Builder.fromEntryList(ImmutableMap.java:245) at com.google.common.collect.ImmutableMap$Builder.build(ImmutableMap.java:231) at com.yammer.dropwizard.config.Environment.getServlets(Environment.java:353) at com.yammer.dropwizard.config.ServerFactory.createHandler(ServerFactory.java:180) at com.yammer.dropwizard.config.ServerFactory.buildServer(ServerFactory.java:81) at com.yammer.dropwizard.cli.ServerCommand.run(ServerCommand.java:50) at com.yammer.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:71) at com.yammer.dropwizard.cli.Command.run(Command.java:113) at com.yammer.dropwizard.AbstractService.run(AbstractService.java:178) at com.jamesward.BarService.main(BarService.java:11) ```","closed","","jamesward","2012-03-21T12:41:41Z","2012-03-23T17:08:18Z"
"","450","Cannot reconfigure JacksonMessageBodyProvider","I was looking for a way to work around https://github.com/dropwizard/dropwizard/issues/231 and I found that calling JacksonMessageBodyProvider.removeUntouchable(String.class) would do just that!  Unfortunately,JacksonMessageBodyProvider is added to the jersey environment after the initialization process. This occurs in AbstractServerFactory.createAppServlet.  Is there a way I can access this provider in a clean way? Or, will a dropwizard change be necessary to allow me to access this particular provider?","closed","","DorianGray","2014-01-20T23:14:42Z","2015-03-19T18:58:16Z"
"","270","JUnit4 Rule for integration testing","I use dropwizard and I needed to test integration DAO with DB. I believe that some other users have similar needs and this 2 classes could help.","closed","","V0L0DYMYR","2013-02-20T12:31:25Z","2014-07-09T18:14:37Z"
"","420","fix for bug in FileAppenderFactory where even if archive is set to true it returns a regular file appender instead of rolling file appender","I tried to add a unit test but the best I could come up with was to peek at the internals of a private method. Please suggest a better unit test and I can resubmit.","closed","","saadmufti","2013-11-03T18:15:59Z","2014-07-09T17:15:27Z"
"","96","Minor improvement to Size, Duration, make jackson serializable","I noticed that two types, Size and Duration, are not by default serializable with Jackson. But it looks like 'toString()' method would work well, so the fix would be as simple as adding `@JsonValue` for 'toString()' methods. I assume this is ok since there is already `@JsonCreator` used; otherwise we could almost as easily create custom serializers, which is what I do locally.  My specific use case is debugging: I just want to print out Configuration object as JSON during startup.  Related to this, I guess it might be also useful to expose config object itself via GUI (similar to /threads etc); but I leave that for future improvements. :-) (further ahead, really trying to dig into Jetty setup, JMX exposes only subset... but I digress).  Let me know if you want a patch (I realize that a unit test would be good, esp. for round-tripping); fix itself is trivial.","closed","","cowtowncoder","2012-05-21T19:57:25Z","2012-05-23T22:25:15Z"
"","87","Support SSL and certificates for client authentication","I noticed a pull request get merged a couple weeks ago that adds SSL termination within Drop Wizard. One of the big advantages of performing termination within Jetty (rather than in a fronting proxy) is having direct access to information about the client certificate. It would be great to have an authentication mechanism that returns the DN (or part thereof) from a validated client certificate.  Certificate authentication is a fairly widespread requirement for APIs, especially ones running over HTTP(S). I'd be happy to take a stab at implementing this if I can get some guidance about where such an implementation would go. (I'm _very_ new to Drop Wizard.)","closed","feature,","davidstrauss","2012-04-23T08:45:00Z","2012-11-17T00:53:43Z"
"","314","Remove Jetty dependencies from StaticAssetServlet","I notice you're trying break DW into more modules.  You can remove `StaticAssetServlet`'s dependency on the Jetty API without affecting the functionality as follows:  The `ServletContext` interface has a method `getMimeType(String)` which delegates to the servlet container. Jetty's implementation of `ServletContext` actually does exactly what the existing DW code does.   So  ``` java final String mimeTypeOfExtension = mimeTypes.getMimeByExtension( req.getRequestURI() ); ```  becomes  ``` java final String mimeTypeOfExtension = this.getServletContext().getMimeType(                 req.getRequestURI() ); ```  And then you can remove the Jetty dependency and move the file into dw-servlets if you want.  You can see that Jetty's implementation of ServetContext exactly mimics DW's logic so this change can be made without affecting any existing applications:  https://github.com/eclipse/jetty.project/blob/jetty-8/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java#L1369","closed","","fleaflicker","2013-04-26T15:56:34Z","2013-04-30T15:09:06Z"
"","154","File not logging at INFO","I might be doing something stupid here, if so, apologies, but I have this logging configured  ``` logging:   level: DEBUG   loggers:     ""net.amadan.sal.migration.MigrationResource"": DEBUG   console:     enabled: true     threshold: INFO   file:     enabled: true     threshold: INFO     currentLogFilename: migration.log     archivedLogFilenamePattern: migration-%d.log.gz     archivedFileCount: 50     timeZone: UTC ```  and with that, nothing gets written to the log file. If I change file/threshold to DEBUG/ALL, I see file logging. Is that intentional?","closed","","dehora","2012-08-01T22:59:16Z","2012-08-02T00:14:15Z"
"","527","Updated some of the documentation related to testing","I just spent some time upgrading a DW 0.6.2 app to 0.7 and ran into these issues while trying to figure out how to get my tests to pass.","closed","","jplock","2014-04-05T18:48:24Z","2014-07-09T16:33:26Z"
"","373","dropwizard-example exception when POSTing new name","I installed and executed the [dropwizard-example](https://github.com/codahale/dropwizard/tree/master/dropwizard-example) as per the instructions. Everything works up to and including `http://localhost:8080/hello-world`, but I get an error when I POST a new name:  ``` > curl -H ""Content-Type: application/json"" -X POST -d '{""fullName"":""Other Person"",""jobTitle"":""Other Title""}' http://localhost:8080/people {""message"":""There was an error processing your request. It has been logged (ID 94770433d1e091f7).""}% ```  Console:  ``` WARN  [2013-07-26 19:05:34,643] org.hibernate.engine.jdbc.spi.SqlExceptionHelper: SQL Error: -5501, SQLState: 42501 ERROR [2013-07-26 19:05:34,643] org.hibernate.engine.jdbc.spi.SqlExceptionHelper: user lacks privilege or object not found: PEOPLE ... ```  This could be related. If I try to run the migrations twice, it ""waits for changelog lock"" indefinitely:  ``` java -jar target/dropwizard-example-0.7.0-SNAPSHOT.jar db migrate example.yml INFO  [2013-07-26 19:09:44,419] hsqldb.db.HSQLDB401C57DA8E.ENGINE: checkpointClose start INFO  [2013-07-26 19:09:44,436] hsqldb.db.HSQLDB401C57DA8E.ENGINE: checkpointClose end INFO  [2013-07-26 19:09:45,416] liquibase: Waiting for changelog lock.... ... INFO  [2013-07-26 19:10:45,473] liquibase: Waiting for changelog lock.... ^C% ```  I experienced similar behaviour when I tried to configure HyperSQL for my Dropwizard project.  p.s. The README.md states ""To setup the h2 database run..."", but actually the example appears to be using [HyperSQL](https://github.com/codahale/dropwizard/blob/master/dropwizard-example/example.yml).","closed","","sharpedavid","2013-07-26T19:16:00Z","2013-09-17T18:12:08Z"
"","409","Configuration by things other than files","I have seen people suggest classpath loading for yaml files to solve problems similar to the one I have encountered. They have been shot down, for good reason, since they were only hanging themselves in the long run. I suppose should begin by presenting my case...  I have written a module for dropwizard 0.7-SNAPSHOT that allows rewriting configuration(even nested deeply in the factory methods and things) by environment variables via reflection. The variables are loaded based on a prefix, by default ""APP"". To configure the first applicationConnector section's ""port"", for example, you would set the environment variable APP_SERVER_APPLICATIONCONNECTORS_0_PORT=80.  The reason I have written this is so that I can use operating system standard locations and formats for configuration. I also plan on releasing this under the apache license as soon as I have it production ready.  That being said, It is quite difficult at this juncture to extend literally every configuration factory class just to set up defaults. I am open to other suggestions, like maybe allowing configuration via a map in application.initialize or something.","closed","","DorianGray","2013-10-09T01:08:38Z","2015-03-17T20:46:31Z"
"","49","Here is the first cut of examples for dropwizard-db","I have implemented the features you mentioned in  issue #45 looking for some feedback on whether I have added to much or not.  Would like to add some tests as well but haven't at this stage as there are none presently in this project.  Note: I added a throw for `ClassNotFoundException` to the initialize function of `HelloWorldService` to cater for the `DatabaseFactory` build method. This is missing from the example in the dropwizard-db at http://dropwizard.codahale.com/manual/db/","closed","","wolfeidau","2012-03-12T03:07:14Z","2014-06-14T04:47:16Z"
"","483","Dropwizard throws internal server error when invalid content type is passed","I have created a simple hello world resource with a post method, when i send a post request to this endpoint, it works fine. But is a set the header parameter ""Content-type"" to some non existing value like ""foo"" the endpoint returns an 500 Internal server error when it is actually a client error. In my log i can see an exception which says javax.ws.rs.WebApplicationException: java.lang.IllegalArgumentException: Error parsing media type 'foo' . Is it a bug in dropwizard or am i missing something?  Exception details:-  ``` WARN  [2014-02-27 16:05:43,643] org.eclipse.jetty.servlet. ServletHandler: /sample ! javax.ws.rs.WebApplicationException: java.lang.IllegalArgumentException: Error parsing media type 'foo' ! at com.sun.jersey.server.impl.model.HttpHelper.clientError(HttpHelper.java:265) ~[jersey-server-1.17.1.jar:1.17.1] ! at com.sun.jersey.server.impl.model.HttpHelper.getContentType(HttpHelper.java:91) ~[jersey-server-1.17.1.jar:1.17.1] ! at com.sun.jersey.server.impl.model.HttpHelper.getContentType(HttpHelper.java:77) ~[jersey-server-1.17.1.jar:1.17.1] ! at com.sun.jersey.spi.container.ContainerRequest.getMediaType(ContainerRequest.java:651) ~[jersey-server-1.17.1.jar:1.17.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.filterFormParameters(WebComponent.java:828) ~[jersey-servlet-1.17.1.jar:1.17.1] ! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:407) ~[jersey-servlet-1.17.1.jar:1.17.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:538) ~[jersey-servlet-1.17.1.jar:1.17.1] ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:716) ~[jersey-servlet-1.17.1.jar:1.17.1] ! at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) ~[javax.servlet-3.0.0.v201112011016.jar:na] ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ~[dropwizard-jetty-0.7.0-20130919.213647-2.jar:0.7.0-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1506) ~[jetty-servlet-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) ~[jetty-servlets-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:348) ~[jetty-servlets-9.0.5.v20130815.jar:9.0.5.v20130815] ! at io.dropwizard.jetty.BiDiGzipFilter.doFilter(BiDiGzipFilter.java:127) ~[dropwizard-jetty-0.7.0-20130919.213647-2.jar:0.7.0-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1477) ~[jetty-servlet-9.0.5.v20130815.jar:9.0.5.v20130815] ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) ~[dropwizard-servlets-0.7.0-20130919.213626-2.jar:0.7.0-SNAPSHOT] ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1477) ~[jetty-servlet-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:503) [jetty-servlet-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.handler.ContextHandler.__doHandle(ContextHandler.java:1096) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:432) [jetty-servlet-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1030) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:136) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:173) [metrics-jetty9-3.0.1.jar:3.0.1] ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) [dropwizard-jetty-0.7.0-20130919.213647-2.jar:0.7.0-SNAPSHOT] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:92) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.Server.handle(Server.java:445) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:268) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:229) [jetty-server-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.run(AbstractConnection.java:358) [jetty-io-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:601) [jetty-util-9.0.5.v20130815.jar:9.0.5.v20130815] ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:532) [jetty-util-9.0.5.v20130815.jar:9.0.5.v20130815] ! at java.lang.Thread.run(Thread.java:744) [na:1.7.0_45] Caused by: ! java.lang.IllegalArgumentException: Error parsing media type 'asdas' ! at com.sun.jersey.core.impl.provider.header.MediaTypeProvider.fromString(MediaTypeProvider.java:79) ~[jersey-core-1.17.1.jar:1.17.1] ! at com.sun.jersey.core.impl.provider.header.MediaTypeProvider.fromString(MediaTypeProvider.java:53) ~[jersey-core-1.17.1.jar:1.17.1] ! at javax.ws.rs.core.MediaType.valueOf(MediaType.java:119) ~[jersey-core-1.17.1.jar:1.17.1] ! at com.sun.jersey.server.impl.model.HttpHelper.getContentType(HttpHelper.java:89) ~[jersey-server-1.17.1.jar:1.17.1] !... 34 common frames omitted Caused by: ! java.text.ParseException: End of header ! at com.sun.jersey.core.header.reader.HttpHeaderReaderImpl.getNextCharacter(HttpHeaderReaderImpl.java:168) ~[jersey-core-1.17.1.jar:1.17.1] ! at com.sun.jersey.core.header.reader.HttpHeaderReaderImpl.next(HttpHeaderReaderImpl.java:129) ~[jersey-core-1.17.1.jar:1.17.1] ! at com.sun.jersey.core.header.reader.HttpHeaderReaderImpl.next(HttpHeaderReaderImpl.java:124) ~[jersey-core-1.17.1.jar:1.17.1] ! at com.sun.jersey.core.header.reader.HttpHeaderReader.nextSeparator(HttpHeaderReader.java:116) ~[jersey-core-1.17.1.jar:1.17.1] ! at com.sun.jersey.core.impl.provider.header.MediaTypeProvider.valueOf(MediaTypeProvider.java:90) ~[jersey-core-1.17.1.jar:1.17.1] ! at com.sun.jersey.core.impl.provider.header.MediaTypeProvider.fromString(MediaTypeProvider.java:77) ~[jersey-core-1.17.1.jar:1.17.1] !... 37 common frames omitted ```  Method to reproduce:-  Create an endpoint in dropwizard, give a request to that endpoint with a header parameter 'Content-Type' set to an invalid value 'foo'. When dropwizard receives this request, it will throw this exception. (I used postman rest client to make the request).","closed","bug,","manuviswam","2014-03-03T03:57:50Z","2014-10-05T14:23:35Z"
"","75","Routes display bug during startup","I have a class defined like:  ``` @Path(""/locations"") @Produces(Array(MediaType.APPLICATION_JSON + "";charset=utf-8"")) class LocationsResource(httpClient:HttpClient){   @GET   @Path(""/search"")   @Timed   def search(@QueryParam(""ll"") ll:String, @QueryParam(""q"") query:Option[String]):Response = {   }   @GET   @Path(""/details"")   @Timed   def details(@QueryParam(""venue_id"") VenueIdOpt:Option[String]):Response = {   } } ```  The routes display:  ```     GET     /locations (xxx.LocationsResource)     GET     /locations (xxx.LocationsResource) ```  When it should show the path for each method:  `GET /locations/search`","closed","","tc","2012-04-11T17:26:39Z","2012-04-19T16:25:29Z"
"","214","Fix and tests for issue #165 attempt 2","I had omitted the default resources path from pom.xml in #208  ```                         src/test/more-resources                            src/test/resources             : ```","closed","","fleaflicker","2012-11-13T23:11:50Z","2014-07-09T18:53:03Z"
"","47","relax access controls so subclasses can access the mapper, etc","I forgot to change these to protected in my last pull request. Makes the subclass much cleaner :)  thanks sam","closed","","samperman","2012-03-08T18:26:38Z","2014-07-09T20:10:25Z"
"","460","Getting Started project does not compile","I followed the Getting Started page and cut/pasted the code exactly and the compile failed.  Correction - in section ""Creating a Service"" - the base code should be adjusted to include the additional imports for code to be added later:  import com.example.helloworld.resources.HelloWorldResource; import com.example.helloworld.health.TemplateHealthCheck;  Later in the page - you add these two lines to the service class but the code doesn't have the imports so the compile fails.  Adding these these two lines corrects the failure.","closed","","mikemil","2014-02-05T20:25:57Z","2014-05-13T12:24:06Z"
"","357","Setting the name of a filter","I created a branch on my code to see how much work it was going to be to upgrade to DW 0.7.0 and ran into an issue with adding a filter.  I am integrating Spring Security into my Dropwizard service and previously with 0.6.2 I had the following:  ``` environment.addFilter(DelegatingFilterProxy.class,""/*"").setName(""springSecurityFilterChain""); ```  With 0.7.0 there is no longer a FilterBuilder and I am unable to set the name of the filter.  ``` environment.servlets().addFilter(DelegatingFilterProxy.class,""/*"").setName(""springSecurityFilterChain""); ```  -Matt","closed","","mveitas","2013-06-25T17:53:49Z","2013-07-07T21:45:33Z"
"","451","fix typo Jetty -> Jersey","I couldn't find any mention of org.eclipse.jetty.client in dropwizard so I assumed this must be a typo.","closed","","toffaletti","2014-01-27T22:06:31Z","2014-06-19T20:52:18Z"
"","376","FR:  Add support for uri extension config","I couldn't find a way to do this in DW, but I'm talking about a way to set the mapping between the uri extension and the media type, like this:  http://zcox.wordpress.com/2009/08/11/uri-extensions-in-jersey/","closed","","pschuegr","2013-08-03T08:03:29Z","2013-09-17T04:24:12Z"
"","97","Programmatic overrides to Config: private to protected or mutator(s)?","I am trying to change default settings for some of DropWizard Configuration settings (specifically, disabling default gzip handling to customize it). This seemed simple: in default constructor of my sub-class I just tweak properties.  But the snatch is that properties are typically declared as private, and there are no mutators. My first inclination is to change properties to protected, so that my sub-class can change their values.  Alternatively I could add mutator(s), but this seems bit more convoluted. And changing access to protected would also make it possible for sub-classes to add mutators by those who... like, like adding setXxx() methods.  If this does not sounds like a colossally bad idea, I'll submit a patch for this.","closed","","cowtowncoder","2012-05-23T20:31:56Z","2012-05-23T22:25:07Z"
"","362","Add support for a development mode where static assets can be worked with without restarting the server","I added this feature in my local fork but it's not worthy of a pull request because it's not a finished feature. It needs some feedback on how to parameterize some of the info that's used when setting up the static file resource handler. (e.g. static resource path)  See my commit here: https://github.com/kovacs/dropwizard/commit/0118ef373e519e253cc0c2f7fa5707d5a34a245f  I didn't find a way to get access to the configuration information and it's not passed into the build method.  Hopefully this can be added to DW because it's pretty important to be able to develop javascript and HTML against your REST services and it seems kinda silly to not use the HTTP server that's embedded in DW for serving that content in development.","closed","","kovacs","2013-07-16T06:22:06Z","2013-09-17T04:23:23Z"
"","91","SPDY support","I added support for google's SPDY protocol. I followed the conventions in the code and all test pass, but two things to note: 1. Requires java 7 because of jetty-npn. 2. Although SPDY also runs w/o SSL, I've forced SSL because that's what's preferred from my understanding.  I know Java 7 might be a deal breaker, so I understand if you don't want to pull.  Thanks, Esteban","closed","","earaya","2012-04-30T21:31:43Z","2014-06-19T05:53:10Z"
"","285","Factory methods for various bits in Service","I added some factory methods for the various bits in Service. Specifically for Bootstrap, Cli, and ServerCommand. Bootstrap and Cli I don't foresee being used that much, but ServerCommand is useful.  For example, I want to be able to override the run method which takes a Namespace instance as a parameter and reuse an existing library that I have for dealing with some command line arguments.","closed","","ghost","2013-03-18T23:14:46Z","2014-07-09T18:16:38Z"
"","326","Scala docs contains a typo","https://github.com/codahale/dropwizard/blob/v0.6.2/docs/source/manual/scala.rst  Docs say this:  object ExampleService extends ScalaService[ExampleConfiguration]) {   def initialize(bootstrap: Bootstrap[ExampleConfiguration]) {     bootstrap.setName(""example"")     bootstrap.addBundle(new ScalaBundle)   }    def run(configuration: ExampleConfiguration, environment: Environment) {     environment.addResource(new ExampleResource)   } }  but it should be this:  object ExampleService extends ScalaService[ExampleConfiguration] {   def initialize(bootstrap: Bootstrap[ExampleConfiguration]) {     bootstrap.setName(""example"")     bootstrap.addBundle(new ScalaBundle)   }    def run(configuration: ExampleConfiguration, environment: Environment) {     environment.addResource(new ExampleResource)   } }  There is a ')' Right after extends ScalaService[ExampleConfiguration]","closed","","dcapwell","2013-05-12T19:02:47Z","2013-05-12T20:08:30Z"
"","72","Update HttpClientConfiguration, Refactor HttpClientFactory","HttpClientFactory: - refactor to allow sub-classes to override creating HTTP params and   connection manager - add connection reuse strategy adn keep alive strategy based on   keepAlive configuration - remove the use of 'timeout' for 'connectionTimeout' (use the new   config value instead)  HttpClientFactory: - add connectionTimeout, maxConnectionsPerRoute, keepAlive  Note: keepAlive default value is 0 - NoConnectionReuseStrategy","closed","","vdrolia","2012-04-02T22:00:31Z","2014-07-09T19:57:46Z"
"","207","Existing design makes it impossible to use GuiceFilter without violating Dropwizard specification","http://code.google.com/p/google-guice/wiki/ServletModule explains how we are expected to register GuiceFilter.  http://jersey.java.net/nonav/apidocs/1.11/contribs/jersey-guice/com/sun/jersey/guice/spi/container/servlet/package-summary.html explains how we are supposed to integrate Guice with Jersey.  Taking these two into consideration it isn't obvious how to integrate Guice with Dropwizard.  The existing design forces us to create and register GuiceServletContextListener in Service.initialize() but we only gain access to Dropwizard's jersey configuration in Service.getJerseyContainer().  This means that we cannot pass Dropwizard's jersey configuration into the GuiceServletContextListener as expected. This means we cannot respect Dropwizard's configuration (I am forced to ignore it).  Furthermore, I argue that we shouldn't be forced to use DropWizard's custom configuration. DropWizard requires us to register each resource individually whereas JerseyServletModule allows us to use PackagesResourceConfig and other more flexible APIs provided by Jersey.","closed","","cowwoc","2012-11-06T22:10:56Z","2012-11-07T18:13:09Z"
"","120","End to end integration testing","How about adding a class similar to this to dropwizard-testing for end to end integration testing?   ``` java public class ServiceIntegrationTest {    private static Log LOG = Log.forClass(ServiceIntegrationTest.class);    protected Server server;   protected int port, adminPort;    /**    * @see com.yammer.dropwizard.cli.ServerCommand#run    */   @BeforeMethod   public void setUp() throws Exception {     final Service service = createServiceInstance();      int[] openPorts = getPossiblyOpenPorts(2);     port = openPorts[0];     adminPort = openPorts[1];      File temporaryConfigFile = createTemporaryConfigFile(port, adminPort);      ConfigurationFactory factory = ConfigurationFactory.forClass(         service.getConfigurationClass(), new Validator(), service.getJacksonModules());     Configuration configuration = (Configuration) factory.build(temporaryConfigFile);      Environment environment = new Environment(service, configuration);     service.initializeWithBundles(configuration, environment);      server = new ServerFactory(configuration.getHttpConfiguration(),         service.getName()).buildServer(environment);      LOG.info(""Starting embedded Jetty with configuration {}"", configuration.toString());     server.start();   }    @AfterMethod   public void tearDown() throws Exception {     LOG.info(""Stopping embedded Jetty server"");     server.stop();     server.join();   }    /**    * This method tries to find a set of open ports by creating a bunch of    * server sockets.    *     * Note: This procedure is susceptible to a race condition and some    * of the returned ports may be in use    */   private int[] getPossiblyOpenPorts(int number) throws IOException {     ServerSocket[] serverSockets = new ServerSocket[number];     try {       int[] ports = new int[number];       for (int i = 0; i < number; i++) {         serverSockets[i] = new ServerSocket(0 /* bind to any open port */);         ports[i] = serverSockets[i].getLocalPort();       }       return ports;      } finally {       for (ServerSocket socket : serverSockets) {         socket.close();       }     }   }    public Service createServiceInstance() throws Exception {     return getServiceClass().newInstance();   }    public String createConfigurationAsYaml() throws IOException {     return Resources.toString(Resources.getResource(""config/test-jetty-config.yml""), Charsets.UTF_8);   }    private File createTemporaryConfigFile(int port, int adminPort) throws IOException {     File temporaryConfig = File.createTempFile(""dropwizard"", "".yml"");     temporaryConfig.deleteOnExit();      Files.write(createConfigurationAsYaml() + ""\n"" +         ""http:\n"" +         ""  port: "" + port + ""\n"" +         ""  adminPort: "" + adminPort + ""\n"",         temporaryConfig, Charsets.UTF_8);      return temporaryConfig;   }    /**    * @see com.yammer.dropwizard.AbstractService#getConfigurationClass    */   @SuppressWarnings(""unchecked"")   public final Class getServiceClass() {     Type t = getClass();     while (t instanceof Class) {       t = ((Class) t).getGenericSuperclass();     }     if (t instanceof ParameterizedType) {       for (Type param : ((ParameterizedType) t).getActualTypeArguments()) {         if (param instanceof Class) {           final Class cls = (Class) param;           if (Service.class.isAssignableFrom(cls)) {             return (Class) cls;           }         }       }     }     throw new IllegalStateException(""Can not figure out Configuration type "" +         ""parameterization for "" + getClass().getName());   } } ```","closed","","andreisavu","2012-06-28T11:47:26Z","2014-08-11T22:44:51Z"
"","218","Sphinx theme","Hi,  Would you have any issue with me using your Sphinx theme (plus the odd colour scheme tweak) for my project's docs?  Thanks, Tom","closed","","tomakehurst","2012-11-18T11:54:57Z","2012-11-19T09:32:25Z"
"","488","Generalize DropwizardAppRule for other test frameworks","Hi,  I was looking at starting/stopping a Dropwizard app in Cucumber tests and DropwizardAppRule has all the functionality I need but obviously it doesn't expose startIfRequired and stop methods.  I'd happy to extract a DropWizardAppTestSupport class from DropwizardAppRule and make the DropwizardAppRule depend on that and contribute the code if there's any interest.  What do you think?  Thanks, Csaba","closed","improvement,","csabapalfi","2014-03-07T10:33:09Z","2015-01-04T23:04:58Z"
"","88","Testing section of user manual has asJSON instead of asJson","Hi,  I was going through the user manual specifically  http://dropwizard.codahale.com/manual/testing/  The Json helper function over there is indicated as asJSON whereas it should be asJson, this seems to be fixed in the repository but somehow doesn't reflect on the site.","closed","","truncs","2012-04-23T23:34:22Z","2012-05-01T20:22:39Z"
"","333","Flash scope (again)","Hi,  I was about to do a second pass over this and get it merged with 0.7.0 but noticed your leaving Yammer/summer off tweet, so is it worth doing this now or holding off for a while?  Regarding your comments on the pull request: 1) Easy enough to use the Environment's object mapper, so will do that. 2) Starting to think that map decoration route might not be the right one. A class with just read() and write() might be better, leaving the user to provide a class hierarchy to bind from/to. 3) Agree that it looks like more code than you'd expect, but other than 2) I can't see any obvious ways to reduce it without giving it a clunkier dev interface. Would appreciate any insights you may have.  Thanks, Tom","closed","","tomakehurst","2013-05-18T15:58:26Z","2013-06-02T12:13:06Z"
"","413","I can not find the log file","Hi! I could not find the log file in my system. My yml config is:    loggers:      ""com.lista.resources.ProductResouce"": ALL      file:        enabled: true        currentLogFilename: registry.log        archivedLogFilenamePattern: registry-%d.log.gz        archivedFileCount: 5        timeZone: UTC  I am using intellij, and create the jar file using maven, so I can deploy it using command line from window prompt.  The problem is after deploying the application and generating some logs I do not see the registry.log file in anyplace.  Any help???","closed","","nspessot","2013-10-24T00:00:33Z","2013-10-24T00:20:06Z"
"","192","Expose JerseyTest from TestResource","Hi there,  ResourceTest does a lovely job of hiding the pointy edges in the standard JerseyTest, but could we maybe expose it to subclasses with a getter?  Due to a fantastic bug with the inmemory test container, I had to switch to the (slightly) heavier-weight http test container, but it freaks out when using client() because I haven't provided the base URI. Providing the base URI is proving difficult, given I can't access the getBaseURI() property on JerseyTest, nor can I access resource() on JerseyTest (which does set base uri ofc).  -Sam","closed","","samcday","2012-10-09T10:54:10Z","2012-10-09T15:27:35Z"
"","344","Allow logging to be configured to allow for async appenders in drop wizard","Hi there  Sometimes (not always but sometimes), we write services that take a lot of requests, it is a business requirement that they don't take very long.  We have been looking and playing with dropwizard as a nice platform for cranking out services, but we have had situations where logging can stall requests.  This pull makes it possible to flip the dropwizard appenders over to async mode","closed","","GregBowyer","2013-06-04T03:19:33Z","2014-06-25T15:26:18Z"
"","319","Using partials templates in a resource directory","Hi guys,  (from https://groups.google.com/forum/#!topic/dropwizard-user/wECAU4INAIA)  Using DW 0.6.2, I'm facing problems with partial templates (mustache).  Let's say foo.mustache is the root template :  ``` Foo is working! {{> bar}} ```  and bar.mustache is a partial :  ``` Bar is working too \o/ ```  The two are located in a resource directory, let's say ${project.root}/src/main/resources/views, and called with a View implementation  ``` java FooView extends View {     private static final PATH_TO_TEMPLATES = ""/views/"";     public FooView() {         super(PATH_TO_TEMPLATES + ""foo.mustache"");     } } ```  If foo.mustache don't call any partial, everything works like a charm. But here with a partial call, DW logs complain about ""template bar.mustache not found"" (i.e. foo is still found, but not bar).  I think the way DW's View.class parse template name might be the cause : if the template name starts with a '/', path is kept for further processing. Maybe partial are only called by their name, and thus searched in the view package?","closed","","LeRiton","2013-05-02T16:18:09Z","2013-05-06T17:09:09Z"
"","204","Command don't preserve OptionGroup","Hi Dropwizard Community,  I've find a bug in Dropwizard Command class in `getOptionsWithHelp` method. ### Issue  This method copy user options in another options object and add an help option (-h) to print the usage.  During the copy the user defined option groups are lost. ### Solution  We just have to copy the option group :   ```     @SuppressWarnings(""unchecked"")     final Options getOptionsWithHelp() {         Options userOptions = getOptions();         final Options options = new Options();         for (Option option : (Collection) userOptions.getOptions()) {             options.addOption(option);             OptionGroup group = userOptions.getOptionGroup(option);             if (group != null) {                  options.addOptionGroup(group);             }         }         options.addOption(""h"", ""help"", false, ""display usage information"");         return options;     } ```  I've created a gist to demonstrate the bug :  https://gist.github.com/4016621  Regards,  Nicolas","closed","","nhuray","2012-11-05T10:56:46Z","2012-11-05T16:14:32Z"
"","205","Fix issue #204 : Command don't preserve OptionGroup","Hi community,  I make a patch from the issue #204 from the tag v0.5.1.  I don't see maintenance branch for 0.5 release so I point this pull request on master.  Tell me if I have to change it.  Regards,","closed","","nhuray","2012-11-05T12:17:11Z","2014-07-09T18:58:37Z"
"","399","External query in JDBI","Hi Can we use external SQL query in JDBI.   Please help.","closed","","shitla","2013-09-29T13:04:11Z","2013-09-29T17:47:53Z"
"","309","Flash scope","Hey,  I've started writing a cookie-based flash scope feature under dropwizard-core. To test it I need dropwizard-testing, and adding this to the POM creates a circular dependency.  So, a) are you likely to want this feature? b) any suggestions how you'd like it structured to avoid the above problem?  Cheers, Tom","closed","","tomakehurst","2013-04-21T22:19:12Z","2013-04-26T14:57:23Z"
"","70","Possible fix for https://github.com/codahale/dropwizard/issues/67","Hey there.  I ran into the same problem as the dude from https://github.com/codahale/dropwizard/issues/67   looked through your code and docs (both very nice BTW), and wrote a patch that seems to bring them into closer alignment...or at least it worked for me! :)  What do you think?  -Steve","closed","","pandich","2012-03-30T04:05:05Z","2014-07-02T22:56:01Z"
"","23","Scala resources returning objects don't work with 0.1.3","Here's a resource  ``` scala  package com.scala.aboutdropwizard                                                                                                                                                                                                                                                                                                                                                                                             import javax.ws.rs.core.MediaType                                                                                                                                                                                                                                                                                                                                                                                                      import javax.ws.rs.{GET, Produces, Path}         case class DumbResult(val itIsOk: Boolean)                                                                                                                                                                                                                                                                                                                                                                                              @Path(""/hello-scala-world"")                                                                                                                                                                                                                                                                                                                                                                                                            @Produces(Array(MediaType.APPLICATION_JSON))                                                                                                                                                                                                                                                                                                                                                                                           class HelloScalaWorldResource {                                                                                                                                                                                                                                                                                                                                                                                                           @GET def wellHello(): DumbResult =  {                                                                                                                                                                                                                                                                                                                                                                                                    DumbResult(true)                                                                                                                                                                                                                                                                                                                                                                                                                     }                                                                                                                                                                                                                                                                                                                                                                                                                                    }                   ```  And a scala service:  ``` scala  package com.scala.aboutdropwizard                                                                                                                                                                                                                                                                                                                                                                                             import scala.collection.mutable.ArrayBuilder                                                                                                                                                                                                                                                                                                                                                                                            import com.aboutdropwizard._                                                                                                                                                                                                                                                                                                                                                                                                  import com.yammer.dropwizard.Service                                                                                                                                                                                                                                                                                                                                                                                                   import com.yammer.dropwizard.config.Environment                                                                                                                                                                                                                                                                                                                                                                                         class HelloScalaWorldService extends Service[HelloWorldConfiguration](""The scala hello world"") {                                                                                                                                                                                                                                                                                                                                          def initialize(config: HelloWorldConfiguration, environment: Environment) {                                                                                                                                                                                                                                                                                                                                                               val template = config.getTemplate                                                                                                                                                                                                                                                                                                                                                                                                      val defaultName = config.getDefaultName                                                                                                                                                                                                                                                                                                                                                                                                 environment.addResource(new HelloWorldResource(template, defaultName));                                                                                                                                                                                                                                                                                                                                                                environment.addResource(new HelloScalaWorldResource)                                                                                                                                                                                                                                                                                                                                                                                   environment.addHealthCheck(new TemplateHealthCheck(template));                                                                                                                                                                                                                                                                                                                                                                       }                                                                                                                                                                                                                                                                                                                                                                                                                                    }                                                                                                                                                                                                                                                                                                                                                                                                                                       object HelloScalaWorldService {                                                                                                                                                                                                                                                                                                                                                                                                          def main(args: Array[String]) = new HelloScalaWorldService().run(args)                                                                                                                                                                                                                                                                                                                                                               }                          ```  Doing curl -v http://127.0.0.1:8080/hello-scala-world  produces the following error:  ``` ERROR [2012-01-25 00:11:33,141] com.sun.jersey.spi.container.ContainerResponse: A message body writer for Java class com.scala.aboutdropwizard.DumbResult, and Java type class com.scala.aboutdropwizard.DumbResult, and MIME media type application/json was not found ERROR [2012-01-25 00:11:33,142] com.sun.jersey.spi.container.ContainerResponse: The registered message body writers compatible with the MIME media type are:  application/json ->   com.yammer.dropwizard.jersey.JacksonMessageBodyProvider */* ->   com.sun.jersey.core.impl.provider.entity.FormProvider   com.sun.jersey.core.impl.provider.entity.StringProvider   com.sun.jersey.core.impl.provider.entity.ByteArrayProvider   com.sun.jersey.core.impl.provider.entity.FileProvider   com.sun.jersey.core.impl.provider.entity.InputStreamProvider   com.sun.jersey.core.impl.provider.entity.DataSourceProvider   com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General   com.sun.jersey.core.impl.provider.entity.ReaderProvider   com.sun.jersey.core.impl.provider.entity.DocumentProvider   com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider   com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter   com.sun.jersey.server.impl.template.ViewableMessageBodyWriter   com.sun.jersey.core.impl.provider.entity.XMLRootElementProvider$General   com.sun.jersey.core.impl.provider.entity.XMLListElementProvider$General ```  The java version of the resource works fine.  Using @Produces(MediaType.APPLICATION_JSON) in scala instead of @Produces(Array(MediaType.APPLICATION_JSON))  produces compile-time error  ``` [ERROR]  found   : java.lang.String(""application/json"") [ERROR]  required: Array[java.lang.String] [ERROR] @Produces(MediaType.APPLICATION_JSON) ```  I'm at a loss w.r.t. what's going on. Any suggestions?","closed","","syrnick","2012-01-25T00:19:07Z","2012-01-25T21:35:56Z"
"","461","Added two missing imports for HelloWorldApplication","HelloWorld was missing imports for the HelloWorldResource and TemplateHealthCheck classes, causing a compile error in the Getting Started application.   This was related to issue #460 - which can be closed.","closed","","mikemil","2014-02-06T18:40:06Z","2014-06-30T13:22:03Z"
"","524","`com.fasterxml.jackson.databind.JsonMappingException` is not processed by `ExceptionMapper`","Hello. We are using version `0.6.2`.  I've got an exception on serializing response - `com.fasterxml.jackson.databind.JsonMappingException: failed to lazily initialize a collection of` (it our mistake). I've got two problems with an exception: 1. Even if I have handler that should process it - it doesn't! Instead server returns   ```    Error 500 Server Error  HTTP ERROR 500 Problem accessing /admin/movies/1133706. Reason:     Server Error``` 1. Server doesn't log this exception if we've got following loggin settings  ``` logging:  loggers:     ""org.eclipse.jetty"": INFO ```  Hope you will fix it","closed","bug,","fedotxxl","2014-04-04T07:48:06Z","2014-10-05T14:29:24Z"
"","283","Support for JspServlet","Hello, In order to support the use of the JspServlet, the ClassLoader needs to be set on the external handler, such as:  handler.setClassLoader( Thread.currentThread().getContextClassLoader());   It seems to work for me when i do it in the ServerFactory class, but i am not sure about the relevant implications on the whole framework. If you feel that this is ok, please add it to the next version.","closed","","pparth","2013-03-15T10:05:20Z","2014-12-27T22:56:29Z"
"","276","""Malformed"" http.rootPath in configuration does not raise a warning/error","Hello,  I have (mistakenly) overridden the default `http.rootPath`, which is `/*`, with `/sv` -- no `/*` at the end.  When I call the URIs of my resources, they all return 404, however at startup the resource URIs are ""recognized"":  ``` INFO  [2013-03-06 11:46:30,293] com.yammer.dropwizard.config.Environment:       GET     /sv/hello-world/hi.html (com.alexeypro.samples.resources.HelloWorldResource)     GET     /sv/hello-world/hi.json (com.alexeypro.samples.resources.HelloWorldResource) ```  When ready:  ``` $ wget -S -O /dev/null http://localhost:8080/sv/hello-world/hi.json --2013-03-06 12:48:05--  http://localhost:8080/sv/hello-world/hi.json Resolving localhost (localhost)... 127.0.0.1 Connecting to localhost (localhost)|127.0.0.1|:8080... connected. HTTP request sent, awaiting response...    HTTP/1.1 404 Not Found [etc etc] ```","closed","","fge","2013-03-06T11:49:26Z","2015-05-12T09:04:59Z"
"","301","Added Travis CI","Hello,  I added Dropwizard to Travis CI. You can log in to Travis CI on https://travis-ci.org and add the codahale/dropwizard repository after adding this pull request.  /Richard","closed","","ricn","2013-04-05T18:33:16Z","2014-07-09T18:21:41Z"
"","267","setLogFormat on LoggingConfiguration.ConsoleConfiguration?","Hello,  Can we have a setLogFormat on LoggingConfiguration.ConsoleConfiguration please? It is available for the LoggingConfiguration.FileConfiguration but not for the console one.  Thank you!","closed","","pparth","2013-02-18T15:51:00Z","2013-03-03T04:03:06Z"
"","475","Undertow Support?","Hello,  After see some amazing performance about undertow.io  - http://www.techempower.com/benchmarks/previews/round9/#section=data-r9&hw=peak&test=json - http://undertow.io/  I want ask if is possible use Undertow instead Jetty, i guess this should boost the Dropwizard performance.  I also want to know why Dropwizard dont appear on Fortunes/Data Updates/PlainText  Thanks for your time.","closed","","n4ndo","2014-02-20T12:29:48Z","2016-02-16T16:18:19Z"
"","422","Missing dependency for field while testing with ResourceTest","Hello! I'm testing dropwizard resourses using ResourceTest, method setUpResources() - addResource(new MyResource()); Then I using in unit tests code like client().resource(""/..."") and got the exciption - com.sun.jersey.spi.inject.Errors$ErrorMessagesExceptionERROR [] c.s.j.s.i.Errors - The following errors and warnings have been detected with resource and/or provider classes:  SEVERE: Missing dependency for field: javax.servlet.http.HttpServletRequest ua.bank.pay.api.resource.MyResource.request  I understand that's problem with injecting field HttpServletRequest request. Can you help me?   Thank you in advance","closed","","ghost","2013-11-12T09:56:33Z","2013-11-12T15:03:49Z"
"","117","fixed typo","heath => health","closed","","dstendardi","2012-06-21T17:50:30Z","2014-07-09T19:36:03Z"
"","198","Fix async log clean shutdown, and test","Have been having problems where my tests don't stop cleanly.  The root problem (in AsyncAppender.stop) seems already to have been fixed in 0.6.0-SNAPSHOT.  But I noticed this probably also deserved fixing.  The test fails without the change to AsyncRequestLog.Dispatcher.stop(), passes with that change.","closed","","ahgittin","2012-10-26T13:15:39Z","2014-07-09T19:01:39Z"
"","229","Improvement: Add handlebars support","Handlebars has several advantages over Mustache as a templating engine. I built a quick working example in my fork: https://github.com/PhoneTech/dropwizard","closed","","bartveenstra","2012-12-01T17:37:04Z","2012-12-02T17:30:45Z"
"","66","Add Eclipse specific project files to .gitignore.","Great framework by the way. So refreshing :-)","closed","","KingBuzzer","2012-03-23T22:44:28Z","2014-07-09T20:00:48Z"
"","232","Validating a JSON payload raises an exception when the payload is empty.","Given a resource that is expecting a valid object, for example:  ``` @POST public Response doSomething(@Valid MyClass payload) { } ```  When the payload is fully omitted, the following exception is raised:  ``` java.lang.IllegalArgumentException: HV000116: The object to be validated must not be null. ```  My guess is that it's because the validator is not checking that the object is not null first:  https://github.com/codahale/dropwizard/blob/master/dropwizard-core/src/main/java/com/yammer/dropwizard/validation/Validator.java#L53","closed","","carllerche","2012-12-07T23:13:30Z","2014-06-25T20:43:23Z"
"","231","Returning a bare string meant to be application/json doesn't properly quote the string","Given a JAX-RS resource that proclaims to produce JSON and a resource method that returns a String…  ``` java @Path(""/foo"") @Produces(MediaType.APPLICATION_JSON) public class FooResource {     @GET     public String get() {         return ""hello, foo!"";     } } ```  the HTTP response indicates it is an application/json response, however the string returned is not properly quoted for JSON:  ``` HTTP/1.1 200 OK Date: Fri, 07 Dec 2012 06:23:17 GMT Content-Type: application/json Transfer-Encoding: chunked  hello, foo! ```  I think this may be caused by @asinger's commit (4347832) for #146. So I'm unsure what consequences taking String.class out of DEFAULT_IGNORE in JacksonMessageBodyProvider will have.","closed","","ryankennedy","2012-12-07T06:29:25Z","2014-01-20T23:14:42Z"
"","67","dropwizard-view: Missing Template error","Getting the Missing Template error when I place the template in classpath relative to the View class, e.g. src/main/resources/my/package/ViewClass/view.ftl I was able to resolve it finally by placing the view.ftl in src/main/resources (root of the classpath)  While debugging the template I encounter following in ViewMessageBodyWriter.java: 38:            configuration.setClassForTemplateLoading(key, ""/"");  If I change this invocation to configuration.setClassForTemplateLoading(key, """"), things work almost as documented, i.e. the template file is picked up from: src/main/resources/my/package/view.ftl (I have also found that this may, in fact, be preferable to .../my/package/View/view.ftl since eclipse flags a warning on the View class ""The type View collides with a package"")","closed","","adeshmukh","2012-03-26T17:47:47Z","2012-03-30T19:17:58Z"
"","447","Handle deserialization when enums are lower-/mixed case","FuzzyEnumModule fails to deserialize when the enum being deserialized to is not all UPPER_CASE.  See: https://github.com/dropwizard/dropwizard/pull/436","closed","","wirde","2014-01-14T09:55:48Z","2014-06-19T17:48:11Z"
"","436","Handle deserialization when enums are lower-/mixed-case","FuzzyEnumModule fails to deserialize when the enum being deserialized to is not all UPPER_CASE.","closed","","wirde","2013-12-13T14:53:08Z","2014-07-09T17:04:19Z"
"","264","add gauges for number of active and idle connections in pool","From https://groups.google.com/d/topic/dropwizard-user/zwsXxWrlj-Y/discussion   When databaseConfiguration.connectionGaugesEnabled is added, will add gauges on ""numActive"" and ""numIdle"" for the pool.","closed","","mattnworb","2013-02-15T20:29:04Z","2014-06-13T13:45:14Z"
"","110","JackonMessageBodyProvider-raised exceptions aren't logged in LoggingExceptionMapper when called from JerseyClient","From #109:  ``` ERROR [2012-06-11 01:22:58,720] com.alpinefex.gcwizard.GCWizardResource: gcwizard error in sayHello ! javax.ws.rs.WebApplicationException: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:103) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:82) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:554) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:506) ! at com.sun.jersey.api.client.WebResource.handle(WebResource.java:684) ! at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ! at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:507) ! at com.alpinefex.gcwizard.GCWizardResource.dumpMetrics(GCWizardResource.java:84) ! at com.alpinefex.gcwizard.GCWizardResource.sayHello(GCWizardResource.java:72) ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ! at java.lang.reflect.Method.invoke(Method.java:597) ! at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60) ! at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:185) ! at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$TimedRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:34) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$ExceptionMeteredRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:73) ! at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288) ! at com.sun.jersey.server.impl.uri.rules.ResourceObjectRule.accept(ResourceObjectRule.java:100) ! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ! at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1483) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1414) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1363) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1353) ! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:414) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:708) ! at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) ! at com.yammer.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:47) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1367) ! at com.yammer.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1338) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:484) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at com.yammer.metrics.jetty.InstrumentedHandler.handle(InstrumentedHandler.java:200) ! at org.eclipse.jetty.server.handler.GzipHandler.handle(GzipHandler.java:270) ! at com.yammer.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:123) ! at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at org.eclipse.jetty.server.Server.handle(Server.java:350) ! at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454) ! at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:47) ! at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890) ! at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944) ! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630) ! at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230) ! at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:66) ! at org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint.run(BlockingChannelConnector.java:293) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538) ! at java.lang.Thread.run(Thread.java:680) Caused by: ! org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at org.codehaus.jackson.map.JsonMappingException.from(JsonMappingException.java:163) ! at org.codehaus.jackson.map.deser.StdDeserializationContext.mappingException(StdDeserializationContext.java:219) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:44) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:13) ! at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2732) ! at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1923) ! at com.yammer.dropwizard.json.Json.readValue(Json.java:335) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:101) !... 56 common frames omitted ERROR [2012-06-11 01:22:58,722] com.yammer.dropwizard.jersey.LoggingExceptionMapper: Error handling a request: 46b4c2d7ea57bef0 ! java.lang.RuntimeException: javax.ws.rs.WebApplicationException: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at com.alpinefex.gcwizard.GCWizardResource.sayHello(GCWizardResource.java:76) ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ! at java.lang.reflect.Method.invoke(Method.java:597) ! at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60) ! at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:185) ! at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$TimedRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:34) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$ExceptionMeteredRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:73) ! at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288) ! at com.sun.jersey.server.impl.uri.rules.ResourceObjectRule.accept(ResourceObjectRule.java:100) ! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ! at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1483) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1414) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1363) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1353) ! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:414) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:708) ! at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) ! at com.yammer.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:47) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1367) ! at com.yammer.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1338) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:484) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at com.yammer.metrics.jetty.InstrumentedHandler.handle(InstrumentedHandler.java:200) ! at org.eclipse.jetty.server.handler.GzipHandler.handle(GzipHandler.java:270) ! at com.yammer.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:123) ! at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at org.eclipse.jetty.server.Server.handle(Server.java:350) ! at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454) ! at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:47) ! at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890) ! at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944) ! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630) ! at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230) ! at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:66) ! at org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint.run(BlockingChannelConnector.java:293) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538) ! at java.lang.Thread.run(Thread.java:680) Caused by: ! javax.ws.rs.WebApplicationException: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:103) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:82) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:554) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:506) ! at com.sun.jersey.api.client.WebResource.handle(WebResource.java:684) ! at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ! at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:507) ! at com.alpinefex.gcwizard.GCWizardResource.dumpMetrics(GCWizardResource.java:84) ! at com.alpinefex.gcwizard.GCWizardResource.sayHello(GCWizardResource.java:72) !... 48 common frames omitted Caused by: ! org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at org.codehaus.jackson.map.JsonMappingException.from(JsonMappingException.java:163) ! at org.codehaus.jackson.map.deser.StdDeserializationContext.mappingException(StdDeserializationContext.java:219) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:44) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:13) ! at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2732) ! at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1923) ! at com.yammer.dropwizard.json.Json.readValue(Json.java:335) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:101) !... 56 common frames omitted ```","closed","","codahale","2012-06-11T16:50:46Z","2012-06-19T23:29:11Z"
"","93","extend ResourceTest so it is possible for subclasses to add jersey features.","For example, a subclass could add request tracing like this:  ``` @Override protected void setUpResources() throws Exception {     addFeature(ResourceConfig.FEATURE_TRACE, Boolean.TRUE); } ```  Also, modify an unrelated test so it passes on windows.","closed","","samperman","2012-05-17T14:56:30Z","2014-07-09T19:46:39Z"
"","48","Allow admin servlets to mount at :8080/admin with HTTP basic auth","Followup from #46. These changes are necessary to get dropwizard running out of the box on Heroku.","closed","feature,","michaelfairley","2012-03-10T08:10:58Z","2014-06-19T20:52:40Z"
"","250","TaskServlet properly returns 500 on exceptions now","Fixing TaskServlet to properly return 500 when an exception is thrown by a Task. Exceptions were only being handled after the output stream was being closed, which results in Jetty committing the response and disallowing further modification (e.g. sending an error.)","closed","","skastel","2013-01-22T01:15:35Z","2014-07-09T18:39:24Z"
"","280","Fix for Issue #230","Fixing a bad path in the logging of the endpoints if the @Path value for the class does not contain a leading slash","closed","","mveitas","2013-03-10T04:21:49Z","2014-07-09T17:21:30Z"
"","424","Updated dependency on liquibase-slf4j to 1.2.0","Fixes problems with missing methods in 1.1.0 (https://github.com/mattbertolini/liquibase-slf4j/issues/2)","closed","","wirde","2013-11-14T16:01:48Z","2014-07-02T03:12:46Z"
"","521","Fix configuration classloader bug when system classloader not used","Fixes issue https://github.com/dropwizard/dropwizard/issues/455#issuecomment-39175102","closed","","jjlauer","2014-04-01T15:32:52Z","2014-06-12T14:17:39Z"
"","144","Update to newest bugfix version of JDBI","Fixes an issue with CloseInternal being not accessible","closed","","brianm","2012-07-26T18:03:21Z","2014-07-09T19:24:54Z"
"","430","Fix comparison of elapsed time and threshold in SlowRequestFilter","Fixes #423","closed","","joschi","2013-12-01T17:16:38Z","2014-07-09T17:09:53Z"
"","416","Upgrade jetty-setuid-java to 1.0.2","Fixes #402","closed","","vadims","2013-10-28T09:30:42Z","2014-07-09T17:16:58Z"
"","400","Fixes #398: EOL in tests strings must match those in template files","Fixes #398.","closed","","kilemensi","2013-09-29T22:23:54Z","2014-07-09T17:23:02Z"
"","366","Fix issue364","Fixes #364 by specifying the latest version of objenesis. Hamcrest's latest version is included in the Junit dependency.  Exclusions are added to the mockito artifact.","closed","","MariusVolkhart","2013-07-20T17:13:48Z","2014-06-18T11:51:28Z"
"","234","Fixed Serving Assets doc in version 0.6.1","Fixed Serving Assets doc in version 0.6.1 .","closed","","zhongl","2012-12-11T01:03:31Z","2014-06-18T10:07:59Z"
"","239","Docs fix for Views","Fix views.rst to reflect change from 0.5.1 to 0.6 where bundles are now added (and service name is set) in the initialize method instead of the constructor.  Pedantically changed Freemarker to FreeMarker.","closed","","tedyoung","2012-12-18T02:04:40Z","2014-07-09T18:41:25Z"
"","517","Fix issue #505 in dropwizard, retrofitting the change from #511","Fix Jetty configuration to enable the use of the Windows certificate store for storing the SSL certificates #511 got contaminated with line feed changes thanks to eclipse issues, this PR cleans that up.","closed","","bwmeier","2014-03-28T19:03:46Z","2014-07-09T16:37:29Z"
"","435","Fix issue when we specify duration twice in CsvReporterFactory.","Fix issue when we specify duration twice in CsvReporterFactory while creating CsvReporter.","closed","","alex-bezrodniy","2013-12-13T08:20:23Z","2014-07-05T19:42:31Z"
"","208","Fix and tests for issue #165: AssetServlet no longer resolves resources correctly","Fix for correctly resolving URLs when there is more than one directory on the classpath with the same name.  Storing the root resource as a fully-qualified URL and not a relative URI string meant that AssetServlet couldn't correctly load the resources in the presence of more than one directory on the classpath with the same name (this actually happens a lot, e.g., module1/javascripts, module2/javascripts).  I completely removed the method ResourceURL#resolveRelativeURL because it was encouraging this incorrect behavior (and isn't used anywhere else).","closed","","fleaflicker","2012-11-07T20:23:37Z","2014-07-09T18:54:03Z"
"","228","Adds support for services which wrap other services.","First and foremost, thank you for publishing this library and your continual work in improving and supporting it.  My company over the past few months has found it invaluable.  This small modification was required as if one wishes to add bundles, resources, etc. in a generic fashion to a Dropwizard service and is using version 0.6.0 or later, one needs to establish an AOP-style cutpoint on the abstract initialize and run methods.  In previous versions of Dropwizard (namely 0.4.x and 0.5.x), this procedure was a bit more straight forward.  While I realize this may be a somewhat esoteric use case, this patch enables support for this functionality in a way which is completely opaque to users of Dropwizard, and hopefully shouldn't be a maintenance burden.  Cheers,  Brett","closed","improvement,","eonflare","2012-11-30T04:15:43Z","2014-07-09T18:31:18Z"
"","493","Update from FEST 2 to AssertJ","FEST hasn't been updated in over 1 year.  AssertJ looks like the successor.  https://github.com/joel-costigliola/assertj-core  Here's the migration info: http://joel-costigliola.github.io/assertj/assertj-core-migrating-from-fest.html","closed","","wiverson","2014-03-13T21:06:12Z","2014-07-21T20:46:59Z"
"","308","dropwizard-views tests fail on Windows","Failed to execute mvn package on dropwizard-views? And Ideas","closed","","nash4403","2013-04-21T05:20:22Z","2013-04-21T05:40:19Z"
"","442","Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.10:test (default-test) on project dropwizard-hibernate: There are test failures.","Failed tests:   findsExistingData(com.yammer.dropwizard.hibernate.tests.JerseyIntegrationTest): expected:<1979-01-0[2T00]:22:00.000Z> but was:<1979-01-0[1T16]:22:00.000Z>   buildsAWorkingSessionFactory(com.yammer.dropwizard.hibernate.tests.SessionFactoryFactoryTest): expected:<1979-01-0[2T00]:22:00.000Z> but was:<1979-01-0[1T16]:22:00.000Z>  Tests run: 50, Failures: 2, Errors: 0, Skipped: 0","closed","","erunsky","2013-12-24T09:30:39Z","2014-05-13T12:23:30Z"
"","536","Adding missing exclusions for the slf4j-api dependency","Excluding the slf4j-api dependency from the metrics project as it is causing the maven dependency enforcer to fail. https://github.com/dropwizard/dropwizard/pull/484","closed","","mveitas","2014-04-12T13:05:33Z","2014-07-09T16:27:22Z"
"","352","Signer information does not match signer information of other classes in the same package.","Exception in thread ""main"" java.lang.SecurityException: class ""javax.servlet.ServletRegistration$Dynamic""'s signer information does not match signer information of other classes in the same package     at java.lang.ClassLoader.checkCerts(ClassLoader.java:806)     at java.lang.ClassLoader.preDefineClass(ClassLoader.java:487)     at java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)     at java.lang.ClassLoader.defineClass(ClassLoader.java:615)     at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)     at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)     at java.net.URLClassLoader.access$000(URLClassLoader.java:58)     at java.net.URLClassLoader$1.run(URLClassLoader.java:197)     at java.security.AccessController.doPrivileged(Native Method)     at java.net.URLClassLoader.findClass(URLClassLoader.java:190)     at java.lang.ClassLoader.loadClass(ClassLoader.java:306)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)     at java.lang.ClassLoader.loadClass(ClassLoader.java:247)     at com.yammer.dropwizard.config.Environment.addServlet(Environment.java:215)     at com.yammer.dropwizard.assets.AssetsBundle.run(AssetsBundle.java:83)     at com.yammer.dropwizard.config.Bootstrap.runWithBundles(Bootstrap.java:60)     at com.yammer.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:37)     at com.yammer.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:58)     at com.yammer.dropwizard.cli.Cli.run(Cli.java:53)     at com.yammer.dropwizard.Service.run(Service.java:61)     at com.katami.service.ApiService.main(ApiService.java:42)  The code is trying to register the AssetServlet when the exception occurs.","closed","","felixgao","2013-06-17T01:57:44Z","2014-03-16T12:25:56Z"
"","127","Add addProvider to JerseyClientFactory","Example usage:  ``` java final JerseyClient jerseyClient = new JerseyClientFactory(config.getJerseyClientConfiguration())     .addProvider(new InputStreamWithLengthProvider())     .build(environment); ```  Analogous to addProvider on Environment for service providers.","closed","","asinger","2012-07-03T18:58:14Z","2014-07-05T10:32:34Z"
"","332","Fix incorrect handling of entity tags","Entity tags aren't plain strings; they are quoted strings.  This code uses some Jetty utility functions to handle the quoting/unquoting. Using `javax.ws.rs.core.EntityTag` is arguably a better approach, but that would introduce an otherwise unnecessary dependency to the servlets module. Adding a dependency on jetty-util seemed less onerous.","closed","","celkins","2013-05-15T21:11:18Z","2014-06-18T07:49:26Z"
"","492","use Jersey's own logic to filter resource and provider classes for logging","Ensure consistency with actual classes recognized by Jersey","closed","","pimlottc","2014-03-11T23:40:39Z","2014-07-06T20:50:32Z"
"","397","Tidy up PrefixedThrowableProxyConverters","Each implementation had a bunch of code copied from the underlying Logback implementation with the prefixing code hacked in.  Instead, lets just use regular expressions to replace the beginning of each trace with the prefix.  Also, let's override the ""Wrapped by: "" text in `RootCauseFirstThrowableConverter` and display ""Causing: "" instead, as it's more intuitive.  Finally, ensure that the ThrowableProxyConverter is correctly initialized in tests.  Resolves issue described in the conversation in #396","closed","","nicktelford","2013-09-23T18:35:24Z","2014-07-09T17:25:04Z"
"","342","Restore access to Jersey's ResourceConfig when setting up Environment","DW 0.6.2 offers `Environment.getJerseyResourceConfig()` which allows to make tweaks to Jersey that are not offered via the `Environment` API itself. Looking over the new `JerseyEnvironment` in DW 0.7.0, this possibility seems to have been taken away.  In particular, there doesn't seem to be a way to eliminate/replace singletons created by DW like `LoggingExceptionMapper` or to register explicit root resources. Do I overlook something in the new API?","closed","","bentmann","2013-05-31T23:20:33Z","2013-06-01T16:08:29Z"
"","39","New config parser fails with nested types","DW >= 0.2.0 breaks config parsing. I have the following configuration classes for my (Scala) service:  ``` class CryptoConfiguration extends Configuration {   var keyStore = ""key.store""   var keyPass = """"   var algo = """"   var keySize: Int = 0 }  class ExternalServiceConfiguration extends Configuration {   var api: URL = new URL(""http://wrongo:1234"")   var user = """"   var pass = """" }  class ServiceConfiguration extends Configuration {   var database = new DatabaseConfiguration()   var rabbit = new RabbitConfiguration()   var cachet = new CachetConfiguration()   var s3 = new S3Configuration()   var crypto = new CryptoConfiguration()   var api = new URL(""http://fixme"") } ```  And here's the config.yml:  ``` http:   port: 12004   adminPort: 12005   maxIdleTime: 30s    requestLog:     enabled: true  rabbit:   host: localhost   vhost: /local/myservice   username: myservice   password: myservice  database:   url: jdbc:postgresql://localhost/myservice   username: myservice   password: myservice  externalservice:   api: https://externalservice.com   user: elided   pass: elided  # Logging settings. logging:   level: DEBUG   console:     enabled: true     threshold: DEBUG    syslog:     enabled: false    loggers:     org.apache.http.wire: WARN     org.eclipse.jetty.http.HttpParser: WARN     org.apache.http.headers: DEBUG     org.eclipse.jetty.server.AbstractHttpConnection: WARN     org.eclipse.jetty.server.handler.ContextHandler: WARN     org.eclipse.jetty.io.nio.ChannelEndPoint: WARN     org.eclipse.jetty.servlet.ServletHandler: WARN     org.eclipse.jetty.server.AbstractConnector: WARN     org.eclipse.jetty.util.component.AbstractLifeCycle: WARN     org.eclipse.jetty.util.component.Container: WARN    file:     enabled: true     threshold: ALL     filenamePattern: ./logs/myservice.log  s3:   bucket: myservice-dev   key: elidedd   secret: elided  crypto:   keyStore: key.store   keyPass: elided   algo: Blowfish   keySize: 256  api: http://randomhost ```  When I start the service, it dies with:  ``` Exception in thread ""main"" org.codehaus.jackson.map.exc.UnrecognizedPropertyException: Unrecognized field ""rabbit"" (Class com.simple.clownshoes.config.ServiceConfiguration), not marked as ignorable  at [Source: N/A; line: -1, column: -1] (through reference chain: com.simple.clownshoes.config.ServiceConfiguration[""rabbit""])     at org.codehaus.jackson.map.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:53)     at org.codehaus.jackson.map.deser.StdDeserializationContext.unknownFieldException(StdDeserializationContext.java:267)     at org.codehaus.jackson.map.deser.std.StdDeserializer.reportUnknownProperty(StdDeserializer.java:672)     at org.codehaus.jackson.map.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:658)     at org.codehaus.jackson.map.deser.BeanDeserializer.handleUnknownProperty(BeanDeserializer.java:1361)     at org.codehaus.jackson.map.deser.BeanDeserializer._handleUnknown(BeanDeserializer.java:725)     at org.codehaus.jackson.map.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:703)     at org.codehaus.jackson.map.deser.BeanDeserializer.deserialize(BeanDeserializer.java:580)     at org.codehaus.jackson.map.ObjectMapper._readValue(ObjectMapper.java:2704)     at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1999)     at com.yammer.dropwizard.json.Json.readYamlValue(Json.java:508)     at com.yammer.dropwizard.config.ConfigurationFactory.parse(ConfigurationFactory.java:43)     at com.yammer.dropwizard.config.ConfigurationFactory.build(ConfigurationFactory.java:36)     at com.yammer.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:69)     at com.yammer.dropwizard.cli.Command.run(Command.java:112)     at com.yammer.dropwizard.AbstractService.run(AbstractService.java:178)     at com.yammer.dropwizard.ScalaService.main(ScalaService.scala:13) ```  Everything works fine on 0.1.3.","closed","","ieure","2012-02-27T18:47:48Z","2012-03-02T23:28:30Z"
"","444","Update Jersey version to support 2+","DropwizardResourceConfig extends ResourceConfig in com.sun.jersey. However, current jersey provide different ResourceConfig in 2+. Is there any plan to update Jersey version? Thanks.","closed","","coolgeng","2014-01-08T18:02:40Z","2014-01-08T19:35:32Z"
"","62","Switched dropwizard-db to use Logback for query logs.","Dropwizard-db currently uses Log4j for query logging. Lets switch it to Logback to keep things in sync with the rest of Dropwizard.  NOTE: `LogbackLog` is an implementation of JDBI's `SQLLog` interface. It should probably live upstream (or a more generic SLF4J based implementation) but I felt it better to include it directly for now until it's handled upstream.","closed","","nicktelford","2012-03-21T15:29:37Z","2014-07-09T20:03:20Z"
"","534","GZip's compressedMimeTypes is not working","Dropwizard's compressedMimeTypes is a whitelist but Jetty is defaulting it's _mimeTypes to a blacklist if `FilterConfig#getInitParameter(""mimeTypes"");` returns null. See GzipFilter at line ~202 and 304.","closed","","rkapsi","2014-04-11T21:34:38Z","2014-07-09T16:27:52Z"
"","374","Support class-level constraints","Dropwizard validator does poor job of providing messages for class-level JSR-303 constraints.  The message looks like:  ```   Here is the user-provided message (was: UserObject@3e2ad6a0) ```  It starts with two empty spaces (from property path), and ends with Object.toString(). The latter makes it completely unusable - it is very user-unfriently (dumping the entire big object to string regardless of context) or downright useless (esp. with default toString).  If you're interested, I can provide PR with patch (don't append the `(was: ""%s"")`, don't prepend `%s` for property path, fix sort order to always make class-level validations last).","closed","needs code,","konrad-garus","2013-07-29T11:24:57Z","2013-09-23T22:09:59Z"
"","381","Add wiki to index community based resources regarding Dropwizard","Dropwizard user's guide and getting started are good but there is a plenty of howtos repos and questions on StackOverflow/mailing list which could be helpful. Why not turn on standard Github wiki and let people index them ?","closed","","tomaszkubacki","2013-08-25T03:19:28Z","2013-09-17T04:21:25Z"
"","261","Add logback converter for extended stack traces","Dropwizard prefixes logged stack traces and optimizes them for sleepy ops folk. However, ""extended stack traces"" made available by Logback are not formatted.  These traces add package information to each frame so you can trace which JAR the code was executed from.  This patch adds a converter for these extended stack traces, which can be enabled in your log format by using ""%xEx"" in place of ""%ex"".  Since this is quite useful, I've also enabled this by default.","closed","","nicktelford","2013-02-12T15:13:03Z","2014-07-09T17:29:07Z"
"","539","GZip's compressedMimeTypes is not working","Dropwizard is setting the MIME types before GzipFilter#init() is being called. The latter will overwrite our custom list if FilterConfig#getInitParameter(""mimeTypes"") is null (see GzipFilter line 199 and the first if-block).","closed","","rkapsi","2014-04-14T17:15:00Z","2015-04-06T19:59:05Z"
"","109","DropWizard should automatically log resource exceptions","DropWizard is awesome! Thanks for such a productivity booster! Even so, I found a little gotcha to share...  DropWizard should automatically log exceptions to console without the user needing to manually insert try-catch-log boilerplate to every resource method. This would reduce plumbing and improve usability.  I have the following gcwizard.yml config file: logging:    # Settings for logging to stdout.   console:  ``` # If true, write log statements to stdout. enabled: true  # Do not display log statements below this threshold to stdout. threshold: TRACE ```  … and there's a server resource with a simple method like so:  @GET @Timed @ExceptionMetered public Saying sayHello(@QueryParam(""name"") Optional name) { //    try {         dumpMetrics();         return new Saying(counter.incrementAndGet(), String.format(template, name.or(defaultName))); //    } catch (Throwable e) { //        LOG.error(e, ""gcwizard error in sayHello""); //        throw new RuntimeException(e); //    } }  When I call the service curl tells me that something failed, but it turns out the dropwizard service didn't log any stacktrace:  $ curl http://localhost:8080/gcwizard?name=foo There was an error processing your request. It has been logged (ID 46b4c2d7ea57bef0).  DropWizard console output isn't very helpful to diagnose the problem: … INFO  [2012-06-11 01:23:54,919] org.eclipse.jetty.server.AbstractConnector: Started InstrumentedBlockingChannelConnector@0.0.0.0:8080 INFO  [2012-06-11 01:23:54,923] org.eclipse.jetty.server.AbstractConnector: Started SocketConnector@0.0.0.0:8081 0:0:0:0:0:0:0:1%0 -  -  [11/Jun/2012:01:23:57 +0000] ""GET /gcwizard?name=foo HTTP/1.1"" 400 72  2152 2152  Now, if I uncomment the try-catch-LOG block above and rerun I can see the stacktrace to diagnose the problem (see output further below). With this stacktrace I was easily able to fix my bug in calling some third party REST service (fix was to ask jackson to map JSON to Map.class instead of String.class). However, I believe I shouldn't have to manually add that try-catch-log boilerplate to every resource method since the doc at http://dropwizard.codahale.com/manual/core/#logging nicely promises to already do this:   ""Error Handling :If your resource class unintentionally throws an exception, Dropwizard will log that exception (including stack traces) and return a terse, safe text/plain 500 Internal Server Error response.""  What am I missing?  FYI, here is what my manual try-catch-log statement prints:  … INFO  [2012-06-11 01:22:54,639] org.eclipse.jetty.server.AbstractConnector: Started InstrumentedBlockingChannelConnector@0.0.0.0:8080 INFO  [2012-06-11 01:22:54,642] org.eclipse.jetty.server.AbstractConnector: Started SocketConnector@0.0.0.0:8081 ERROR [2012-06-11 01:22:58,720] com.alpinefex.gcwizard.GCWizardResource: gcwizard error in sayHello ! javax.ws.rs.WebApplicationException: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:103) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:82) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:554) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:506) ! at com.sun.jersey.api.client.WebResource.handle(WebResource.java:684) ! at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ! at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:507) ! at com.alpinefex.gcwizard.GCWizardResource.dumpMetrics(GCWizardResource.java:84) ! at com.alpinefex.gcwizard.GCWizardResource.sayHello(GCWizardResource.java:72) ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ! at java.lang.reflect.Method.invoke(Method.java:597) ! at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60) ! at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:185) ! at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$TimedRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:34) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$ExceptionMeteredRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:73) ! at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288) ! at com.sun.jersey.server.impl.uri.rules.ResourceObjectRule.accept(ResourceObjectRule.java:100) ! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ! at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1483) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1414) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1363) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1353) ! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:414) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:708) ! at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) ! at com.yammer.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:47) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1367) ! at com.yammer.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1338) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:484) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at com.yammer.metrics.jetty.InstrumentedHandler.handle(InstrumentedHandler.java:200) ! at org.eclipse.jetty.server.handler.GzipHandler.handle(GzipHandler.java:270) ! at com.yammer.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:123) ! at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at org.eclipse.jetty.server.Server.handle(Server.java:350) ! at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454) ! at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:47) ! at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890) ! at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944) ! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630) ! at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230) ! at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:66) ! at org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint.run(BlockingChannelConnector.java:293) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538) ! at java.lang.Thread.run(Thread.java:680) Caused by: ! org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at org.codehaus.jackson.map.JsonMappingException.from(JsonMappingException.java:163) ! at org.codehaus.jackson.map.deser.StdDeserializationContext.mappingException(StdDeserializationContext.java:219) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:44) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:13) ! at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2732) ! at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1923) ! at com.yammer.dropwizard.json.Json.readValue(Json.java:335) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:101) !... 56 common frames omitted ERROR [2012-06-11 01:22:58,722] com.yammer.dropwizard.jersey.LoggingExceptionMapper: Error handling a request: 46b4c2d7ea57bef0 ! java.lang.RuntimeException: javax.ws.rs.WebApplicationException: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at com.alpinefex.gcwizard.GCWizardResource.sayHello(GCWizardResource.java:76) ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ! at java.lang.reflect.Method.invoke(Method.java:597) ! at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60) ! at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:185) ! at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$TimedRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:34) ! at com.yammer.metrics.jersey.InstrumentedResourceMethodDispatchProvider$ExceptionMeteredRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:73) ! at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:288) ! at com.sun.jersey.server.impl.uri.rules.ResourceObjectRule.accept(ResourceObjectRule.java:100) ! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ! at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1483) ! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1414) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1363) ! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1353) ! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:414) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:537) ! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:708) ! at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) ! at com.yammer.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:47) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1367) ! at com.yammer.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1338) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:484) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at com.yammer.metrics.jetty.InstrumentedHandler.handle(InstrumentedHandler.java:200) ! at org.eclipse.jetty.server.handler.GzipHandler.handle(GzipHandler.java:270) ! at com.yammer.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:123) ! at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111) ! at org.eclipse.jetty.server.Server.handle(Server.java:350) ! at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454) ! at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:47) ! at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890) ! at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944) ! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:630) ! at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230) ! at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:66) ! at org.eclipse.jetty.server.nio.BlockingChannelConnector$BlockingChannelEndPoint.run(BlockingChannelConnector.java:293) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:603) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:538) ! at java.lang.Thread.run(Thread.java:680) Caused by: ! javax.ws.rs.WebApplicationException: org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:103) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:82) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:554) ! at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:506) ! at com.sun.jersey.api.client.WebResource.handle(WebResource.java:684) ! at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ! at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:507) ! at com.alpinefex.gcwizard.GCWizardResource.dumpMetrics(GCWizardResource.java:84) ! at com.alpinefex.gcwizard.GCWizardResource.sayHello(GCWizardResource.java:72) !... 48 common frames omitted Caused by: ! org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.lang.String out of START_OBJECT token  at [Source: com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream@3c9ed91f; line: 1, column: 1] ! at org.codehaus.jackson.map.JsonMappingException.from(JsonMappingException.java:163) ! at org.codehaus.jackson.map.deser.StdDeserializationContext.mappingException(StdDeserializationContext.java:219) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:44) ! at org.codehaus.jackson.map.deser.std.StringDeserializer.deserialize(StringDeserializer.java:13) ! at org.codehaus.jackson.map.ObjectMapper._readMapAndClose(ObjectMapper.java:2732) ! at org.codehaus.jackson.map.ObjectMapper.readValue(ObjectMapper.java:1923) ! at com.yammer.dropwizard.json.Json.readValue(Json.java:335) ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.parseEntity(JacksonMessageBodyProvider.java:101) !... 56 common frames omitted 0:0:0:0:0:0:0:1%0 -  -  [11/Jun/2012:01:22:56 +0000] ""GET /gcwizard?name=foo HTTP/1.1"" 500 86  2587 2587","closed","","whoschek","2012-06-11T01:52:15Z","2012-06-11T17:03:37Z"
"","331","Make it easier to override default ExceptionMappers","Dropwizard comes with some sensible default ExceptionMappers, but I would like to provide my own ExceptionMappers that return JSON error responses instead.  Would it be possible to provide a means to remove or customise the default mapppers?","closed","","dmayo3","2013-05-15T05:28:52Z","2013-05-15T20:13:03Z"
"","253","Adding documentation for ServerFactory","documentation","closed","","carlo-rtr","2013-01-29T15:54:18Z","2014-07-09T17:22:01Z"
"","64","Update wording on the AuthenticationException log message.","Do the same for the oauth2","closed","","tnm","2012-03-22T23:30:07Z","2014-07-09T20:02:19Z"
"","313","Local tests for example application","directory local tests for the example application - just wanted to get initial feedback before finishing up the tests","closed","","barinek","2013-04-25T19:04:49Z","2014-07-09T18:15:07Z"
"","463","Ignore dependency-reduced-pom.xml file","dependency-reduced-pom.xml file is auto-generated by maven shade plugin (in the dropwizard-example) and should be not be tracked in the repo.","closed","","kilemensi","2014-02-08T19:53:12Z","2014-07-09T16:55:12Z"
"","383","Extract HandlerFactory from ServerFactory","Decouples settings specific to a context (e.g. ""admin"", ""application"") from the server. The motivation for this was to allow per-context configuration of the RequestLog. - `requestLog`, `gzip`, `minThreads`, `maxThreads`, `maxQueuedRequests` and `idleThreadTimeout` now all configurable per context (handler). - For `DefaultServerFactory`, each context accepts a list of `connectors`. - For `SimpleServerFactory`, the server is configured with a single `connector`, and each context accepts a context `path`.  See [Example Configuration](https://github.com/nicktelford/dropwizard/blob/feature/extract-servlet-factory/dropwizard-example/example.yml) for an example of the new configuration.","closed","improvement,","nicktelford","2013-08-27T13:43:25Z","2015-04-06T20:04:04Z"
"","478","Use next available tcp port when starting server in unit tests, not default port","Currently the tests will fail in CI because of other builds running on the same machine. Since the test is not dependent on which port is actually used, it should just use the next available port.","closed","","kschjeld","2014-02-25T22:01:53Z","2014-07-09T16:50:39Z"
"","271","Remove reference to PeopleStore in testing section of docs","Currently the resource testing refers to mocking PeopleDAO but the code uses PeopleStore.","closed","","simoncollins","2013-02-26T01:34:29Z","2014-07-09T18:32:49Z"
"","489","Allow configuring of SSL cipher suite blacklist","Currently the `HttpsConnectorFactory` allows the configuration of cipher suites through the `supportedCipherSuites` property. However, it is my understanding that this is strictly a whitelist, which seems to contradicts the docs (jetty's [`setIncludeCipherSuites`](http://download.eclipse.org/jetty/9.1.2.v20140210/apidocs/org/eclipse/jetty/util/ssl/SslContextFactory.html#setIncludeCipherSuites%28java.lang.String...%29) sounds like a whitelist, though I could be wrong).   Regardless, I believe that there should be a mechanism that allows cipher suites to be excluded in the configuration.  Thoughts?","closed","","nickbabcock","2014-03-07T14:21:19Z","2014-04-08T11:42:44Z"
"","134","Ability to change the system property prefix","Currently in ConfigurationFactory the system property prefix is set to ""dw."" and cannot be changed. I would very much like to be able to change this.  Would it be possible to add this feature? Would it be accepted?","closed","","dwijnand","2012-07-10T08:40:33Z","2012-07-10T18:12:52Z"
"","183","Fixed issue with missing directories in assets broadcasting jar file path info.","Currently in 0.5.1 & snapshot the asset servlet can leak file path info under certain circumstances. The one I've seen is where I have an assets bundle defined as   CacheBuilderSpec cacheSpec = AssetsBundle.DEFAULT_CACHE_SPEC; addBundle(new AssetsBundle(""/apidocs/"", cacheSpec, ""/""));  Hitting the url  http://127.0.0.1:8080/services/hello-world  will result in a 500 error with the following message:  java.lang.AssertionError: java.io.FileNotFoundException: JAR entry apidocs/services/hello-world not found in I:\development\dropTest\target\droptest-0.1-SNAPSHOT.jar  This patch fixes that to correctly return a 404.","closed","","Omega359","2012-10-05T13:13:03Z","2014-07-09T19:08:13Z"
"","187","partial validation added","Current Validation was based on only Default.class group. Added custom groups support for patial validations.","closed","","cemo","2012-10-08T17:54:06Z","2014-06-18T07:45:19Z"
"","173","Validation Group support added","Current Validation was based on Default.class group. Added support for groups without breaking existence codes. See the discussion at group.   https://groups.google.com/forum/?fromgroups=#!topic/dropwizard-user/5MX_Ytg1gfs","closed","","cemo","2012-08-30T10:15:43Z","2014-07-07T10:08:53Z"
"","155","Appetite for Moustache Template Support","Curious as to the appetite for supporting moustache templates.  A couple weeks back I had done some experimental work in dropwizard-views to play around with the idea, it wasn't too difficult to add/cleanup a couple interfaces and provide support for both freemarker or moustache.  They both work off a JavaBean model so it was basically just making the ViewMessageBodyWriter a little more extensible.  I realize these two frameworks are pretty much at either end of the templating landscape goes (logic vs. logicless), but if there's interest, I can tidy things up.  Cheers.","closed","","ajordens","2012-08-02T05:15:20Z","2012-08-02T23:17:48Z"
"","294","Create ConfigurationSourceProvider interface to allow customization of the source of the configuration","Created a fresh pull request with the new ConfigurationSourceProvider interface. I decided to call it ConfigurationSourceProvider vs ConfigurationProvider as the later might imply that it returns the actual Configuration.","closed","","mveitas","2013-03-29T11:38:19Z","2014-06-29T05:18:59Z"
"","260","Minor documentation fix for dropwizard-example readme","Corrected the link for JDBI in dropwizard-example's README file.","closed","","jon-ruckwood","2013-02-12T14:12:49Z","2014-07-09T18:34:50Z"
"","257","Minor fix for mustache views in dropwizard-example","Corrected templateName for mustache views (accidentally pointed to the ftl ones).","closed","","dimzava","2013-02-05T22:33:42Z","2014-07-09T18:35:22Z"
"","151","Add JsonHelpers.jsonRoundTrip(T) and jsonRoundTripWithEquality(T)","Convenience methods for testing serialization and deserialization (with optional equals/hashcode test) of representation classes","closed","","chids","2012-08-01T16:38:47Z","2014-07-09T19:16:18Z"
"","168","Order of annotations on resource methods matters","Consider the different ordering of parameters on the following signatures:  ``` java     @GET     @Timed     @Path(""{id}"")     public Response get(@NotEmpty @PathParam(""id"") String id) ```  vs  ``` java     @GET     @Timed     @Path(""{id}"")     public Response get(@PathParam(""id"") @NotEmpty String id) ```  The first works as expected, the second passes validation but passes in an empty string instead of the correct path parameter","closed","","brianm","2012-08-21T18:39:01Z","2012-08-22T01:33:53Z"
"","479","Update core.rst","Configuration example needs to provide property naming to match the yaml example.","closed","","christophercurrie","2014-02-26T17:45:04Z","2014-07-09T16:49:38Z"
"","219","Fix compilation errors on Java 6 (1.6.0_37)","Compiling on Java 6 fails with errors such as the following:  [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5:compile (default-compile) on project dropwizard-core: Compilation failure [ERROR] [...]/dropwizard/dropwizard-core/src/main/java/com/yammer/dropwizard/cli/ConfiguredCommand.java:[34,51] inconvertible types [ERROR] found   : java.lang.Class<java.lang.Object> [ERROR] required: java.lang.Class<T> [ERROR] -> [Help 1]","closed","","celkins","2012-11-21T00:56:39Z","2014-07-09T18:50:01Z"
"","427","DropwizardAppRule (DropwizardServiceRule) does not restart Jetty","Compare these two lines:  https://github.com/dropwizard/dropwizard/blob/v0.6.2/dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/junit/DropwizardServiceRule.java#L40  https://github.com/dropwizard/dropwizard/blob/v0.6.2/dropwizard-testing/src/main/java/com/yammer/dropwizard/testing/junit/DropwizardServiceRule.java#L47  When the Jetty server is stopped after a class run, the instance variable `jettyServer` is not nullified which makes `startIfRequired()` quit fast and not restart the server.  This prevents usage of the rule in a static field of a base class shared by two or more concrete test classes. The first test class will start and stop the server, the second class will erroneously assume the server is still up and have the tests fail to connect.","closed","","bentmann","2013-11-28T23:51:33Z","2014-11-09T14:16:18Z"
"","15","Add User Mailing List","Coda,  First of all I can't thank you (and Yammer) enough for releasing this. Best-of-breed REST stack, out-of-the-box metrics, etc. (I could go on and on...)  In an hour or so, I was able to migrate a bunch of our JAX-RS services to dropwizard and get all the metrics and health checks we really need... Truly awesome.  Anyway, is there a mailing list for users to interact? If not could you establish one (google groups, etc.)?  Thanks again, this is great. - Taylor","closed","","ptgoetz","2011-12-16T04:34:15Z","2011-12-17T06:08:27Z"
"","279","Jetty 9 Upgrade","Coda,  Do you have any plans to upgrade to Jetty 9? The API is rather different, but the changes are definitely doable.  Thoughts?","closed","","earaya","2013-03-09T15:46:27Z","2013-04-30T15:24:57Z"
"","543","JDBI manual has incorrect config example","checkConnectionHealthWhenIdleFor does not seem to exist anymore. But the manual docs/source/manual/jdbi.rst still mentions it.","closed","","jairamc","2014-04-16T11:14:10Z","2014-05-13T12:14:26Z"
"","148","Fix logging FileConfiguration validation function.","Check that file logging is actually enabled before checking if the archive logging configuration is valid. Also add a unit test to check that the defaults are valid.  This is the same as the fix mentioned on the [user group](https://groups.google.com/d/topic/dropwizard-user/2aE1un1dpN0/discussion).","closed","","deverton","2012-07-31T23:30:26Z","2014-07-09T19:21:21Z"
"","251","Doc fix for Hibernate","Change docs to describe/use the simpler of the HibernateBundle constructors, the one currently used (HibernateBundle(String package)) doesn't exist.","closed","","robrasmussen","2013-01-23T20:19:17Z","2014-06-25T11:37:29Z"
"","190","bootstrapping changed slightly","Bundles which depends on Environment suffering initializing order. Our bundles depends on Database and DBIFactory depends on Environment which is restricting bundle scopes greatly.  In this pull request Environment parameter was added to init method of the service.  Maybe this is not exactly in your mind to solve this problem but It would be great to elaborate on this issue.","closed","","cemo","2012-10-08T23:07:45Z","2014-07-09T19:04:10Z"
"","307","Documentation and config property overrides for JUnit rule","Brief section under Testing explaining `DropwizardServiceRule`","closed","","tomakehurst","2013-04-18T21:08:57Z","2014-06-13T13:03:02Z"
"","368","More human configuration errors","Breaks up `ConfigurationException` in to: - `ConfigurationParsingException` - for errors parsing the YAML/JSON or binding it to the Configuration objects. - `ConfigurationValidationException` - for errors validating the configuration against its constraints (existing `ConfigurationException`)  `ConfigurationParsingException` generalizes the description of parse errors. The following error are now handled and better described: - _Malformed YAML_ - If it can't get parsed in to a JsonNode tree, it's malformed. - _Unrecognized field_ - Naming a field that doesn't exist on the target class. Provides suggestions, ranked by Levenshtein distance to optimize for typos. - _Incorrect type_ - If Jackson can't marshall the types (e.g. using a String when expecting an Integer).  When possible, it will include the most precise location information it has available.  Example:  ``` /etc/worldgreeter/conf.yaml has an error:     * Incorrect type of value at: server.applicationConnectors[0].port; is of type String, expected: Integer ```  `ConfiguredCommand`s now suppress stack-traces for `ConfigurationException`s, as they represent an error in the runtime configuration, which the stack-trace doesn't help with.  Caveats: - `commons-lang` is a dependency, for the Levenshtein distance implementation. - Jackson uses `JsonMappingException` to classify many different problems, making it difficult to handle more specific problems.","closed","improvement,","nicktelford","2013-07-23T17:05:59Z","2014-06-25T01:03:05Z"
"","26","More support for servlet listeners","Both servlet context and servlet request listeners can now be added to a Dropwizard environment during service initialization.  The closest supertype is `EventListener` and it seemed too much to add four different `addXXX` methods to environment, so there's instead one `addServletListener(EventListener... listeners)` method that can take an arbitrary number and type of servlet event listeners.","closed","","tinkerware","2012-02-10T02:39:52Z","2014-06-18T07:08:26Z"
"","237","Missing call to Bundle#initialize in Bootstrap","Bootstrap#addBundle(Bundle) calls Bundle#initialize Bootstrap#addBundle(ConfiguredBundle<T>) does not  https://github.com/codahale/dropwizard/blob/master/dropwizard-core/src/main/java/com/yammer/dropwizard/config/Bootstrap.java","closed","","ptomli","2012-12-13T12:44:01Z","2014-06-03T14:22:57Z"
"","175","Make it possible to stop/restart services","Being able to start and stop a service multiple times within a jvm process would be great for lightweight integration tests. I've briefly looked into this and found some problems with logging and mbeans.","closed","improvement,","kimble","2012-09-02T22:31:51Z","2013-04-30T20:03:14Z"
"","35","Rationalize object lifecycles","Because so much of Dropwizard is glue code, the way in which things are created, configured, and wired together could use a bit more love. - Jersey servlet container   - enable/disable Jersey features   - swap out for a `GuiceContainer` or what have you - Jackson factory/mapper   - add modules, etc. for `ConfigurationFactory` and `JacksonMessageBodyProvider`   - enable/disable features for specific instances (e.g., `ConfigurationFactory` needs to always reject unknown fields) - `MetricsRegistry`/`HealthCheckRegistry`   - really starting to regret those static factory methods   - would make JRebel-style development reloads possible","closed","improvement,","codahale","2012-02-17T23:52:09Z","2013-04-30T20:03:42Z"
"","69","Add ability to configure read-only database connections","Attempting to access a read-only database fails with the following error:  `! Caused by: org.apache.tomcat.dbcp.dbcp.SQLNestedException: Cannot get a connection, pool error Could not create a validated object, cause: A read-only user or a user in a read-only database is not permitted to disable read-only mode on a connection. !   at org.apache.tomcat.dbcp.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:114) !   at org.skife.jdbi.v2.DataSourceConnectionFactory.openConnection(DataSourceConnectionFactory.java:36) !   at org.skife.jdbi.v2.DBI.open(DBI.java:192) !   ... 52 more`  This commit allows configuration of read-only connections while defaulting to the current behavior of forcing writable connections.","closed","","celkins","2012-03-28T22:32:40Z","2014-06-12T08:07:09Z"
"","37","Allow request logging to stdout","AsyncRequestLog is [already set up for this](https://github.com/codahale/dropwizard/blob/master/dropwizard-core/src/main/java/com/yammer/dropwizard/jetty/AsyncRequestLog.java#L104-105), but there's a NotNull validation on filenamePattern in RequestsLogConfiguration, and YamlConverter doesn't properly handles nulls.","closed","","michaelfairley","2012-02-26T07:18:01Z","2014-07-09T20:14:58Z"
"","244","Double slashes in AssetServlet.java causes 404 when pulling assets from jar","AssetServlet.java  when using AssetsBundle: bootstrap.addBundle(new AssetsBundle(""/assets"", ""/"", ""/index.htm""));  a trailing '/' is tacked on in AssetServlet:  this.resourcePath = trimmedPath.isEmpty() ? trimmedPath : trimmedPath + ""/"";  When the asset is requested from: requestedResourceURL = Resources.getResource(absoluteRequestedResourcePath + '/' + indexFile);  another '/' is tacked on making it: assets//index.htm  this works fine for files in the Unix filesystem but fails when trying to load resources from the jar and ends up throwing a 404.  I am not sure of the impact, so I focused a patch on the smallest isolated area of my issue.","closed","","mikekirby","2012-12-22T01:05:23Z","2014-07-06T04:50:28Z"
"","274","Adding getService() and getEnvironment() to DropWizardServiceRule","As per sul3n3t's suggestion","closed","","tomakehurst","2013-03-04T21:35:29Z","2014-06-14T09:09:58Z"
"","358","Liquibase Null Pointer Exception in dw-example","As far as I can tell, straight from a clean build from github (last ref: 61457b55208086511533b24795a2a49d6cc2a629), I get the following strack trace (and I don't know how to resolve this).   Command:  ~/dropwizard/dropwizard-example$ java -jar target/dropwizard-example-0.7.0-SNAPSHOT.jar db migrate example.yml  $ git status  # On branch master nothing to commit (working directory clean)  Stacktrace  INFO  [2013-07-02 23:42:13,099] hsqldb.db.HSQLDB3FA1C3D44F.ENGINE: Checkpoint start INFO  [2013-07-02 23:42:13,100] hsqldb.db.HSQLDB3FA1C3D44F.ENGINE: checkpointClose start INFO  [2013-07-02 23:42:13,104] hsqldb.db.HSQLDB3FA1C3D44F.ENGINE: checkpointClose end INFO  [2013-07-02 23:42:13,105] hsqldb.db.HSQLDB3FA1C3D44F.ENGINE: Checkpoint end INFO  [2013-07-02 23:42:13,995] liquibase: Successfully acquired change log lock Exception in thread ""main"" java.lang.NullPointerException         at liquibase.diff.compare.DatabaseObjectComparatorFactory.isSameObject(DatabaseObjectComparatorFactory.java:86)         at liquibase.snapshot.DatabaseSnapshot.get(DatabaseSnapshot.java:180)         at liquibase.snapshot.SnapshotGeneratorFactory.createSnapshot(SnapshotGeneratorFactory.java:137)         at liquibase.snapshot.SnapshotGeneratorFactory.has(SnapshotGeneratorFactory.java:87)         at liquibase.snapshot.SnapshotGeneratorFactory.hasDatabaseChangeLogTable(SnapshotGeneratorFactory.java:160)         at liquibase.database.AbstractJdbcDatabase.hasDatabaseChangeLogTable(AbstractJdbcDatabase.java:726)         at liquibase.database.AbstractJdbcDatabase.getRanChangeSetList(AbstractJdbcDatabase.java:1127)         at liquibase.database.AbstractJdbcDatabase.checkDatabaseChangeLogTable(AbstractJdbcDatabase.java:695)         at liquibase.Liquibase.checkDatabaseChangeLogTable(Liquibase.java:602)         at liquibase.Liquibase.update(Liquibase.java:130)         at com.codahale.dropwizard.migrations.DbMigrateCommand.run(DbMigrateCommand.java:57)         at com.codahale.dropwizard.migrations.DbCommand.run(DbCommand.java:51)         at com.codahale.dropwizard.migrations.AbstractLiquibaseCommand.run(AbstractLiquibaseCommand.java:54)         at com.codahale.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:62)         at com.codahale.dropwizard.cli.Cli.run(Cli.java:69)         at com.codahale.dropwizard.Application.run(Application.java:72)         at com.example.helloworld.HelloWorldApplication.main(HelloWorldApplication.java:23)","closed","","ojilles","2013-07-02T23:47:16Z","2013-07-03T06:34:50Z"
"","22","Adds dropwizard-daemon contrib module","As discussed (briefly) on the mailing list:  Provides an Apache Commons Daemon (jsvc and procrun) wrapper around Dropwizard Services. Services and Configurations are defined as normal, but the user can optionally define a ServiceDaemon implementation that provides the daemon wrapper with a Service instance to wrap. #### The Good - Doesn't touch any core interfaces so existing Services can easily be wrapped by defining an additional class. - Services are only wrapped if launched through jsvc/procrun - you can still write your Service main() method as usual for running under other circumstances. #### The Bad - Commons Daemon recommends that priviliged operations (e.g. binding ServerSockets) is done in init() because it may (e.g. under jsvc) be called as a super-user before dropping privileges for calling start(). As we don't have access to the underlying socket binding, it has to be done in start() so may not have super-user privileges. #### The Ugly - This basically extracts the LifeCycle start behaviour from main() -> ConfiguredCommand.run() -> ServerCommand.run(). I didn't want to rock the boat too much so opted to duplicate code rather than refactor the LifeCycle management out to a more accessible place. This can be improved upon in the future. - No tests. I couldn't figure out how end-to-end LifeCycle testing is done in the rest of the project so omitted tests for now. Will add them if necessary.","closed","","nicktelford","2012-01-20T14:33:12Z","2014-06-13T21:42:53Z"
"","40","Allow for command-line overrides of configuration parameters","As @bradhouse said on the mailing list:  > I reguarly launch services with Foreman and usually launch multiple instances at the same time. Each instance needs a different port. >  > A more serious issue is if you want to run a DW service on something like Heroku. You must bind on the port they define via the $PORT environment variable. If you cannot pass this on the CLI you cannot run on their service. System.getenv(""PORT"") also works, but there are no bind points in DW to alter a Configuration instance prior to Jetty start. Not surprising as the DW approach strongly favours immutable configuration.","closed","feature,","codahale","2012-02-27T21:55:54Z","2016-02-18T10:53:19Z"
"","425","WebSocket support","Are there any plans to incorporate WebSockets into dropwizard, I know one current work around is to add another servlet directly to the environment, but it would be nice if we could use similar semantics to the current Http Resources.","closed","","paulpdaniels","2013-11-15T21:15:49Z","2013-11-15T21:56:47Z"
"","389","Update Jersey version","any plans to update the Jersey dependency to a newer version? I think that core of dropwizard is using jersey 1.17.1 and latest is 2.2.","closed","","samandmoore","2013-09-17T03:39:51Z","2017-06-27T12:52:20Z"
"","462","Upgrade to SLF4J 1.7.6 and Logback 1.1.1","Another janitorial pull request. - [[qos.ch-announce] Release of SLF4J version 1.7.6](http://mailman.qos.ch/pipermail/announce/2014/000125.html) - Logback 1.1.1: http://jira.qos.ch/browse/LOGBACK-942 and http://jira.qos.ch/browse/LOGBACK-943","closed","","joschi","2014-02-06T23:00:19Z","2014-07-09T16:55:42Z"
"","384","Update to Liquibase 3.x","Another attempt to update the Liquibase version used in Dropwizard, this time with working `DbDumpCommand`. It ain't pretty but it works as with Liquibase 2.x before.","closed","","joschi","2013-08-28T22:09:51Z","2014-07-09T17:35:41Z"
"","17","More .gitignore updating.","And remove the rest of the sbt legacy.","closed","","tnm","2011-12-18T23:03:04Z","2014-07-09T20:24:04Z"
"","108","Performance: AssetServlet unnecessarily clones byte[] resource on every request","Although it's good engineering to make a defensive copy of the byte array in a public getter, it's unnecessary in this case because AssetServlet.CachedAsset is a private class and the byte array is effectively immutable (no other access modifies it).   The performance gain could be significant when serving large images.  The servlet's doGet method can safely access the private array directly:  output.write(cachedAsset.resource);","closed","","fleaflicker","2012-06-05T15:08:30Z","2012-06-05T17:46:59Z"
"","306","Added threadpool queue size field to HttpConfiguration","Allows switching to bounded queue. Default remains unbound though.","closed","","sepiroth887","2013-04-17T22:03:43Z","2014-07-09T18:15:38Z"
"","291","Extended hibernate configuration.","Allows HibernateBundle to configure the SessionFactory in ways that are not possible using standard properties.  Specifically NamingStrategy and any other configuration outside of org.hibernate.cfg.Environment.","closed","","vadims","2013-03-26T06:22:10Z","2014-07-05T22:41:49Z"
"","359","Support alternate log classes for request logging.","Allows an alternate log class to be specified via configuration. Specifically needed to customize the request log format.","closed","","clstokes","2013-07-03T15:42:24Z","2014-07-09T17:47:50Z"
"","138","Enhancements to the Log class","Allow loggers to be created without repetition of class names in a static context. This is achieved by inspecting stack frame, more details here. I've used this code in production systems for a few years now, and think it avoids a large class of copy-paste logger errors some programmers make.  More details about the ""inventor"" here: http://www.javaspecialists.eu/archive/Issue137.html","closed","","arunh","2012-07-20T09:50:54Z","2014-07-09T19:26:25Z"
"","304","Add support for Joda DateTime objects to jDBI.","Adds support for both returning and binding `DateTime` objects in jDBI queries.","closed","","nicktelford","2013-04-09T00:59:14Z","2014-07-02T19:01:39Z"
"","380","Add route capabilities to hibernate module.","Adds database routing ability (via 'RouteKey' HTTP header) for Hibernate.  In Configuration Class:  ``` java @Valid @NotNull private ImmutableList databases; ```  In yaml file:  ``` yaml # Database settings. databases:   - routeName: routeone     database:       # the name of your JDBC driver       driverClass: com.mysql.jdbc.Driver        # the username       user: userone        # the password       password: password        # the database url       url: jdbc:mysql://hostone.com:3306/myapp   - routeName: routetwo     database:       # the name of your JDBC driver       driverClass: com.mysql.jdbc.Driver        # the username       user: usertwo        # the password       password: password        # the database url       url: jdbc:mysql://hosttwo.com:3306/myapp ```  During bootstrap retrieve the session factory map from the RouteCapableHibernateBundle and create all your DAOs keyed by the routeName. For Example In Service:  ``` java router = new DAORouter(hibernateBundle.getSessionFactories()); ```  ``` java public class DAORouter {     private final ImmutableMap, DAO> daos;     public DAORouter(             final ImmutableMap, SessionFactory> sessionFactoryMap) {         checkNotNull(sessionFactoryMap);         checkState(!sessionFactoryMap.isEmpty());          final Map, DAO> daos = new LinkedHashMap<>();         for (Entry, SessionFactory> e : sessionFactoryMap                 .entrySet()) {             SessionFactory factory = checkNotNull(e.getValue());              // if you have multiple DAOs you can make this an collection of DAOs based on route name             daos.put(e.getKey(), new DAO(factory));         }          this.daos = ImmutableMap.copyOf(daos);     }      public DAO getDAO(String routeName) {         return daos.get(Optional.fromNullable(routeName));     } } ```  Now you can pass that router to your resources and retrieve the appropriate DAO via the HttpHeader 'RouteKey' for each request in your resources:  ``` java private final DAORouter router;  @Context private HttpHeaders headers;  public Resource(DAORouter router) {     this.router = router; }  @POST @UnitOfWork public void doSomething() {   router.getDAO(getRouteName()).doSomething(); }  private String getRouteName() {     return headers.getRequestHeaders().getFirst(UnitOfWorkRequestDispatcher.ROUTE_KEY_HEADER_NAME); } ```","closed","","mcarrierastonish","2013-08-20T18:28:35Z","2014-07-09T17:37:43Z"
"","315","Flash scope","Adds cookie-based flash scope support to dropwizard-views, and a demo in the example app.","closed","","tomakehurst","2013-04-27T13:02:58Z","2014-06-18T07:53:48Z"
"","338","Make Metrics Reporters configurable via SPI","Adds a new `metrics` section to the Dropwizard `Configuration`, permitting users to define `reporters`, based on `ReporterFactory` implementations.  Any `EnvironmentCommand` will automatically add the configured metrics reporters to its lifecycle.  Current implementations: - `console` - `ConsoleReporterFactory` - `csv` - `CsvReporterFactory` - `log` - `Slf4jReporterFactory`  Note: I'm raising this Pull Request now for comment or rejection if you don't feel it's helpful. There are still several outstanding tasks I need to finish: - Tests for all `ReporterFactory` implementations. - JavaDoc. - Other `ReporterFactory` implementations with ""optional"" dependencies (e.g. Graphite, Ganglia, etc.)","closed","","nicktelford","2013-05-31T01:14:58Z","2014-07-08T23:15:10Z"
"","149","Add package scanning for resources and providers","Adds a `scanPackages(Class...)` method to `Environment` to allow DW to scan packages for resource and provider classes.","closed","","chids","2012-08-01T13:00:31Z","2014-06-29T20:01:05Z"
"","541","Support for Basic Auth without using @Auth annotation.","Adding support for Basic Authentication and Authorization  ``` java     @Override     public void initialize(Bootstrap bootstrap) {         final Authenticator authenticator = new Authenticator() {             @Override             public Optional authenticate(BasicCredentials credentials) throws AuthenticationException {                 //implement lookup strategy                 return Optional.absent();             }         };         final boolean requireAuthorizationHeader = true;         final String realm = ""My realm"";         final AuthenticationBundle authenticationBundle = new AuthenticationBundle(authenticator, requireAuthorizationHeader, realm);         bootstrap.addBundle(authenticationBundle);     } ```  Annotate resources with @RolesAllowed, @PermitAll or @DenyAll to enforce security.","closed","","bnese","2014-04-15T08:30:26Z","2014-06-12T20:48:17Z"
"","196","Adding different argumentFactory for sqlserver because it requires typed...","Adding different argumentFactory for sqlserver because it requires typed nulls.","closed","","chrisgray","2012-10-24T21:13:57Z","2014-07-09T19:02:09Z"
"","512","Update auth.rst","Adding authentication providers in 0.7.x has change to environment.jersey().register( Authenticator )","closed","","dominicfarr","2014-03-26T10:35:03Z","2014-07-09T16:40:31Z"
"","360","Small clarifications on the dw-example README","Adding a few pointers to the dropwizzard-example readme to nudge  folks into the right direction. (I'm assuming here that whoever walks up the dw-example, they just want to see stuff work first rather than trying to figure out the data format for a Person, etc)","closed","","ojilles","2013-07-03T22:32:01Z","2014-07-09T17:48:50Z"
"","170","Group Support for Dropwizard Validator","Added support for group validating which is very handy in terms of partial validation. If no group is specified the default group javax.validation.groups.Default is assumed. [1]  http://docs.jboss.org/hibernate/validator/4.3/reference/en-US/html/validator-usingvalidator.html#validator-usingvalidator-validationgroups","closed","","cemo","2012-08-24T07:08:44Z","2014-07-09T19:14:17Z"
"","139","added SMTP Logger","added simple support for SMTP Logger that maps to Logback SMTPAppender","closed","","rene-schulz","2012-07-20T23:02:08Z","2014-06-23T12:44:49Z"
"","395","Issue #386 Add support for multiple AssetsBundle","Added optional parameter for AssetsBundle name, with test","closed","","slavus","2013-09-22T11:35:11Z","2014-06-29T07:06:04Z"
"","421","Add ability to override config settings that are array of strings","Added more test coverage of configuration override facility via Java properties that are prefixed with ""dw."", plus the ability to override settings that are a simple array of strings. Updated docs to reflect new capability.","closed","","saadmufti","2013-11-05T16:35:28Z","2014-07-09T16:56:13Z"
"","194","Add indexFile to AssetsBundle","Added constructor which takes indexFile to allowing changing the index file in AssetsServlet in a much more simple manor.","closed","","ghost","2012-10-17T21:49:34Z","2014-07-09T19:03:10Z"
"","81","Minor doc improvement (sys prop overrides)","Added a mention for passing system properties for overrides. Not sure how formatting should work; local doc build didn't work. But I assume you can massage visual aspect (and wording etc).","closed","","cowtowncoder","2012-04-20T03:54:00Z","2014-07-09T19:53:13Z"
"","410","encryption of keyStore Password","Add the capability to have the password for keystores in the YAML file be encrypted.  I believe Jetty has the capability/tools for this.","closed","","camechis","2013-10-10T19:49:17Z","2015-03-17T20:44:18Z"
"","419","Add support for using Optional in dropwizard-jdbi","Add support for Optional in dropwizard-jdbi by handling NULL-values in JodaDateTimeMapper. This also fixes a NPE-occuring when using the existing mapper to plain DateTime-object if extracted column is NULL.","closed","","klette","2013-11-03T14:49:47Z","2014-06-14T12:24:43Z"
"","220","Support for 'stop' command in a dropwizard like manner","Add stop support as a new module.  Ideally it should be part of the core.  For now this allows those that need this support to use it by simply adding the StopBundle during service initialization. See the dropwizard-example.  This was inspired by need and these threads: http://goo.gl/HSUZa http://goo.gl/2EYMT","closed","","roskelleycj","2012-11-24T05:56:19Z","2015-10-01T07:37:52Z"
"","163","Instrument managed executor services.","Add some metrics about the thread pools created using the Environment class. Currently tracks execution count, timing, and active threads.","closed","","deverton","2012-08-06T23:57:13Z","2014-07-04T08:33:41Z"
"","71","Feature/http client config","Add keepAlive strategy and a few more knobs for the http client","closed","","vdrolia","2012-04-02T19:57:55Z","2014-06-26T13:30:07Z"
"","459","AbstractDAO persist() is not consistent with Hibernate persist() behavior description for persistent entity classes","According to the [Hibernate docs](http://docs.jboss.org/hibernate/orm/4.3/javadocs/) (better formatted [here](http://docs.jboss.org/hibernate/annotations/3.5/api/org/hibernate/Session.html)), a persistent entity class associated with a session should have the behavior that a persist() result in a SQL INSERT.  But this is not the case in the dropwizard Hibernate library as shown [here](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java#L148-L151).  A persist() should only result in the same operation as a saveOrUpdate() in the case of transient or detached instances (those which are not tied to a Session).  Please correct me if I'm wrong, but the dropwizard-hibernate implementation of persist() seems to be inconsistent with the Hibernate definition.","closed","","justinwoo","2014-02-05T01:25:26Z","2014-02-05T12:43:53Z"
"","418","Add support for HTTP byte ranges","Accessing video from iOS requires server support for HTTP byte range requests. This pull request adds support for those requests and advertises the support for media assets.  Unit tests included.","closed","","davidillsley","2013-11-02T16:30:57Z","2015-02-23T15:27:00Z"
"","402","AbstractServerFactory creates a thread pool that doesn't get shutdown","AbstractServerFactory.createThreadPool() creates a thread pool. When the Jetty server is shut down, this thread pool is never stopped. It appears that there's an assumption that because QueuedThreadPool extends AbstractLifeCycle that Jetty will manage it. It doesn't.  You can test this by shutting down the Jetty server and doing a thread dump.","closed","blocked,","Randgalt","2013-10-03T00:22:47Z","2013-11-04T12:07:17Z"
"","221","Added getter for Jersey Properties","A getter for Jersey properties is necessary to register filters to existing registered lists as this.    ``` (List) environment.getJerseyProperty(DefaultResourceConfig.PROPERTY_RESOURCE_FILTER_FACTORIES); ```  This is essential for especially bundles which are not aware of other parts of the application. If there is an existing resource list, it must be taken and added filter to end of list.","closed","","cemo","2012-11-24T21:44:43Z","2014-07-04T06:51:57Z"
"","468","Make ValidatorFactory available on Bootstrap","`ValidatorFactory` is used to obtain `Validator` instances in several places (including configuration validation).  Instead of using a singleton instance, let's make this available on `Bootstrap`, so that validation may be customised (e.g. by `Bundle`s).","closed","","nicktelford","2014-02-11T14:45:35Z","2014-07-09T16:49:08Z"
"","99","Propagate log level changes to JUL","`SLF4JBridgeHandler` only sees logs that are actually emitted by `java.util.logging`, and the default logging level for JUL is `INFO`. Because of this, no matter how verbose the Dropwizard logging level is set, it won't get those messages unless the JUL logger is also set to the same level or lower.  Two approaches to this are possible. 1. Set the Level for the root JUL Logger to `ALL`. This is the simplest approach, but has an overhead cost for processing log messages that are not emitted by Logback. This cost is further discussed in the [slf4j docs](http://www.slf4j.org/legacy.html#jul-to-slf4j). 2. Add an instance of `ch.qos.logback.classic.jul.LevelChangePropagator` to the `LoggerContext`. This class listens for logger level changes and makes an equivalent change happen on the JUL Logger with the same name.  This patch takes the second approach. Unfortunately, since the listener needs to be added _after_ the LoggerContext is reset, but _before_ the logging levels are configured, the patch changes `configureLevels` instead of `hijackJDKLogging`. Let me know if you rather I refactor the logging configuration to make this cleaner.","closed","","christophercurrie","2012-05-24T19:02:01Z","2014-06-23T12:25:59Z"
"","327","Fix null shutdown timeout in ExecutorServices","`ScheduledExecutorServiceBuilder` defines no default `shutdownTime` or `shutdownUnit`. These are passed to `ExecutorServiceManager` which in turn uses them verbatim on `ExecutorService#awaitTermination(long, TimeUnit)`, potentially causing a `NullPointerException`.  Adding default values resolves this problem.","closed","","nicktelford","2013-05-13T09:46:37Z","2014-07-09T17:31:39Z"
"","28","Support servlet context parameters","`HttpConfiguration` now has a `contextParameters` node that contains name/value pairs for all context parameters. `ServerFactory` sets context init parameters using the service configuration.","closed","","tinkerware","2012-02-10T15:22:52Z","2014-07-01T04:33:27Z"
"","115","Add Min/Max Constraints for Duration and Size","`Duration` and `Size` are highly useful for `Configuration` classes, keeping them human-readable. However, they're limited to validating manually using `ValidationMethod` only.  Specifying an upper and/or lower bounds on such parameters is a very common case, so lets start with implementations for `@Min` and `@Max`.  Unfortunately, because both `Duration` and `Size` convey more information than just a scalar value (the _unit_ of the value), we cannot simply use `@Min` and `@Max`. ## Duration  `@MinDuration` and `@MaxDuration` constrain the upper and lower bounds of a `Duration` respectively:  ``` java @MinDuration(value = 30, unit = TimeUnit.MINUTES) @MaxDuration(value = 1, unit = TimeUnit.HOURS) private Duration timeout = Duration.seconds(1); ```  The _unit_ defaults to `TimeUnit.SECONDS`, so you only need to name parameters if you're providing the unit explcitly:  ``` java @MinDuration(30) // 30 seconds minimum @MaxDuration(3600) // 3600 seconds (1 hour) minimum private Duration timeout = Duration.seconds(30); ```  Even if you define all `@MinDuration` and `@MaxDuration` constraints in seconds, this allows Configuration files to define value in any time unit that `Duration` understands. ## Size  `@MinSize` and `@MaxSize` work in much the same way as their sister constraints for `Duration` do, except they constrain a `Size`:  ``` java @MinSize(value = 1, unit = SizeUnit.KILOBYTES) @MaxSize(value = 1, unit = SizeUnit.MEGABYTES) private Size receiveBuffer = Size.bytes(1024); ```  The default value for _unit_ here is `SizeUnit.BYTES`, allowing you to easily define everything as bytes:  ``` java @MinSize(1024) // 1KB min @MaxSize(10240) // 10KB max private Size receiveBuffer = Size.bytes(1024); ```  Again, this allows `Confiuration` files to describe their properties using any unit that `Size` understands, whilst still being constrained correctly.  Tests included for happy merging. I was considering a `DurationRange` and `SizeRange` too, but I wanted to be sure this would be accepted before heading in too deep.","closed","","nicktelford","2012-06-20T17:28:33Z","2014-06-30T15:23:04Z"
"","367","Generalize DropwizardAppRule","`DropwizardAppRule` uses reflection to invoke the nullary constructor of the target `Application`. However, applications that don't define a public nullary constructor cannot be used.  This affects all Scala Applications, because the app is defined as an Object, (which has a private nullary constructor).  This will also affect apps that are parametrized in some way, or that protect the nullary constructor (e.g. for Singleton `Application`s).  By introducing a `newApplication()` method and providing the current, reflection-based implementation as the default, users may override this to provide instances of their application themselves.","closed","","nicktelford","2013-07-22T11:44:24Z","2014-07-09T17:30:38Z"
"","349","remove jetty dependency (was only used for a blocking queue implementation)","`dropwizard-logging` will now have a smaller set of dependencies.","closed","","fleaflicker","2013-06-14T20:11:00Z","2014-06-17T07:21:39Z"
"","446","Dropwizard-JDBI Version Bump: 2.50 - > 2.53","`dropwizard-jdbi` was left out of #429 and there are couple of changes especially in the `StringTemplate3StatementLocator` that I'm currently using that requires jdbi version `2.53`","closed","","kilemensi","2014-01-10T19:17:55Z","2014-07-09T17:04:49Z"
"","202","Poor URL hygiene","`ConfigurationFactoryTest` has e.g.  ``` private final File validFile = new File(Resources.getResource(""factory-test-valid.yml"")                                                  .getFile()); ```  which does not work when run from a checkout with a space in its name:  ``` java.io.FileNotFoundException: /…/Dropwizard%20Core/dropwizard-core/target/test-classes/factory-test-valid.yml (No such file or directory) ```  `new File(url.getFile())` is wrong; use `new File(url.toURI())` instead.  Better still is to make the factory method take a `URL` to begin with, which would let this test run from a JAR &c.","closed","","jglick","2012-11-01T21:41:37Z","2012-11-01T22:03:23Z"
"","32","Certain tests are locale dependent","``` jbrauer@werner:~/projects/dropwizard (master)$ cat /home/jbrauer/projects/dropwizard/dropwizard-core/target/surefire-reports/com.yammer.dropwizard.config.tests.ConfigurationFactoryTest.txt ------------------------------------------------------------------------------- Test set: com.yammer.dropwizard.config.tests.ConfigurationFactoryTest ------------------------------------------------------------------------------- Tests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: -2,104,463.334 sec <<< FAILURE! throwsAnExceptionOnInvalidFiles(com.yammer.dropwizard.config.tests.ConfigurationFactoryTest)  Time elapsed: 0 sec  <<< FAILURE! java.lang.AssertionError:  Expected: a string ending with ""factory-test-invalid.yml has the following errors:\n  * name must match \""[\w]+[\s]+[\w]+\"" (was Boop)""      got: ""/home/jbrauer/projects/dropwizard/dropwizard-core/target/test-classes/factory-test-invalid.yml has the following errors:\n  * name muss auf Ausdruck \""[\w]+[\s]+[\w]+\"" passen (was Boop)""      at org.junit.Assert.assertThat(Assert.java:780)     at org.junit.Assert.assertThat(Assert.java:738)     at com.yammer.dropwizard.config.tests.ConfigurationFactoryTest.throwsAnExceptionOnInvalidFiles(ConfigurationFactoryTest.java:58)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:597)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)     at org.junit.runners.ParentRunner.run(ParentRunner.java:300)     at org.junit.runners.Suite.runChild(Suite.java:128)     at org.junit.runners.Suite.runChild(Suite.java:24)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)     at org.apache.maven.surefire.junitcore.ConfigurableParallelComputer$AsynchronousRunner$1.call(ConfigurableParallelComputer.java:186)     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)     at java.util.concurrent.FutureTask.run(FutureTask.java:138)     at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)     at java.lang.Thread.run(Thread.java:662)  jbrauer@werner:~/projects/dropwizard (master)$ cat /home/jbrauer/projects/dropwizard/dropwizard-core/target/surefire-reports/com.yammer.dropwizard.validation.tests.ValidatorTest.txt ------------------------------------------------------------------------------- Test set: com.yammer.dropwizard.validation.tests.ValidatorTest ------------------------------------------------------------------------------- Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: -2,104,463.747 sec <<< FAILURE! returnsASetOfErrorsForAnObject(com.yammer.dropwizard.validation.tests.ValidatorTest)  Time elapsed: 0.001 sec  <<< FAILURE! java.lang.AssertionError:  Expected: is <[notNull may not be null (was null), tooBig must be less than or equal to 30 (was 50)]>      got: <[notNull kann nicht null sein (was null), tooBig muss kleinergleich 30 sein (was 50)]>      at org.junit.Assert.assertThat(Assert.java:780)     at org.junit.Assert.assertThat(Assert.java:738)     at com.yammer.dropwizard.validation.tests.ValidatorTest.returnsASetOfErrorsForAnObject(ValidatorTest.java:34)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     at java.lang.reflect.Method.invoke(Method.java:597)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)     at org.junit.runners.ParentRunner.run(ParentRunner.java:300)     at org.junit.runners.Suite.runChild(Suite.java:128)     at org.junit.runners.Suite.runChild(Suite.java:24)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)     at org.apache.maven.surefire.junitcore.ConfigurableParallelComputer$AsynchronousRunner$1.call(ConfigurableParallelComputer.java:186)     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)     at java.util.concurrent.FutureTask.run(FutureTask.java:138)     at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)     at java.lang.Thread.run(Thread.java:662) ```","closed","","bracki","2012-02-14T20:02:51Z","2015-05-19T08:13:18Z"
"","27","Dropwizard uses the wrong JAR name","``` java -jar dropwizard-core-0.2.0-SNAPSHOT.jar  [arg1 arg2] ```  You are not the right JAR!","closed","","codahale","2012-02-10T02:51:18Z","2012-02-10T03:21:03Z"
"","322","Fixed UnrecognizedPropertyException.","``` Exception in thread ""main"" com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""database"" (class com.example.helloworld.HelloWorldConfiguration), not marked as ignorable (5 known properties: , ""server"", ""template"", ""databaseConfiguration"", ""defaultName"", ""logging""])  at [Source: N/A; line: -1, column: -1] (through reference chain: com.example.helloworld.HelloWorldConfiguration[""database""]) ```","closed","","zhongl","2013-05-06T06:11:11Z","2014-07-09T18:08:03Z"
"","230","Bad path concatentation in Environment.logEndpoints()","```             String rootPath = configuration.getHttpConfiguration().getRootPath();             if (rootPath.endsWith(""/*"")) {                 rootPath = rootPath.substring(0, rootPath.length() - 2);             }             final StringBuilder pathBuilder = new StringBuilder()                     .append(rootPath)                     .append(path); ```  The above lines taken from com.yammer.dropwizard.config.Environment in Dropwizard 0.6.1 do not work properly when the configured root path is e.g. ""/context/*"" and a class' @Path declares ""foo"" (note the missing leading slash which as per JAX-RS spec should be equivalent to @Path(""/foo"")), making the log output read ""contextfoo/..."" instead of ""context/foo/..."" for the endpoint's path.","closed","bug,","bentmann","2012-12-06T15:12:33Z","2013-04-30T20:02:56Z"
"","523","admin interface hangs on 24-core machine","_Primary symptom_: on a machine with 22 or more cores and the default server configuration, the admin interface accepts TCP connections and then never processes the requests, causing a browser to hang forever.  This can happen on any machine given the wrong config parameters.  Details: - Server thread configuration must adhere to the following invariants, determined through debugging and trial and error:   - `maxThreads` > ∑ (`acceptorThreads` + `selectorThreads`) over all `applicationConnectors`   - `adminMaxThreads` > ∑ (`acceptorThreads` + `selectorThreads`) over all `adminConnectors` - Presumably what this means is that `maxThreads` _includes_ all the `acceptorThreads` and `selectorThreads`, and what's left over is used for handling requests. If there's nothing left over, the requests queue up and never get handled. - If this invariant is not satisfied, either the `applicationConnectors` or the `adminConnectors` (respectively) will accept TCP connections but then never handle them - DropWizard's defaults for `maxThreads` (1024) and `adminMaxThreads` (64) are fixed, while the defaults for `acceptorThreads` (#CPUs/2) and `selectorThreads` (#CPUs) vary on different machines. - So on a machine with 22 or more cores and an admin interface with 2 connectors (one for HTTP, one for HTTPS), the invariant doesn't hold for the admin interface.  With 342 or more cores and 2 connectors, it won't hold for the application interface.  There are potentially 3 parts to this bug: - DropWizard defaults should probably be made so they work on all modern hardware. - DropWizard should probably validate the configuration and fail to start if an invariant isn't satisfied, rather than silently hanging. - Perhaps the invariant should be documented. - Alternatively, the meaning of the parameters could be changed so that they are independent.  Using `maxThreads` only for processing requests (and not for selector threads and acceptor threads) might be more intuitive.  Tested with version `v0.7.0.rc3`.  How to reproduce: use the `dropwizard-example` application on a 24-core machine, or use the following server config on any machine:  ``` server:   minThreads: 2   maxThreads: 2   applicationConnectors:     - type: http       port: 8080       acceptorThreads: 1       selectorThreads: 1   adminConnectors:     - type: http       port: 8081       acceptorThreads: 1       selectorThreads: 1 ```  App starts successfully, but requests to either the application or the admin interface hang.","closed","bug,","jbyler","2014-04-03T17:57:49Z","2016-02-23T02:25:27Z"
"","494","GZip Filter should not set ""Vary"" header to ""User-Agent""","[According to the docs](http://www.eclipse.org/jetty/documentation/current/gzip-filter.html), by default the Jetty GZip filter sets the Vary header as so:   Vary: Accept-Encoding, User-Agent  This is because it refuses to GZip content requested by IE6, excluding it by default in a configuration value excludedAgents.  By default Dropwizard over-rides the excludedAgents default to an empty list, so it compresses for all user-agents. Hence by default it should not Vary on User-Agent, which massively reduces the cacheability of a response.","closed","","Mahoney","2014-03-14T16:56:41Z","2014-09-17T08:04:34Z"
"","273","Environment abstraction","@codahale   I know that you are reluctant to bring extra maintaining costs and that is why I am filing this issue.  Environment currently is a concrete class which is making adding new behaviors or even new frameworks on it very difficult. Changing concrete Environment class to Interface will provide tremendous easiness to your community.   First of all there are some requests regarding customizing return types for validation as JSON or something else by folks and me as well :) .New environment implementations easily provide custom validations.   There are also another benefits but the most interesting one is creating different environments based on other frameworks such as Spring MVC. Last week I had to port a legacy application to Dropwizard and had to use Spring MVC. I had to copy almost all core elements such as Bundle, Task, Environment etc.. After duplicating 10-12 classes I can successfully created a new Dropwizard environment. I even successfully removed Jersey Servlet and dependencies. At the end I had a new **a simple, light-weight application by stable, mature libraries**.   What do you think about this?","closed","","cemo","2013-03-03T23:53:55Z","2013-04-30T20:01:39Z"
"","486","Deprecate the defaultReadOnly property in favor of readOnlyByDefault","317f2e5cd4 introduced `DataSourceFactory.readOnlyByDefault` and made the existing `defaultReadOnly` property a no-op.","closed","","celkins","2014-03-05T21:41:26Z","2014-07-09T16:46:35Z"
"","298","Update jDBI to 2.48.2","2.48.2 fixes a bug where using sqlObject.begin() followed by a call to an @Transaction annotated method would cause an unexpected early commit on return from the method.","closed","","brianm","2013-04-04T03:28:20Z","2014-07-09T18:23:43Z"
"","365","Several improvements for view rendering","1. Added ModelView class, which eliminates the need for custom View classes in many cases 2. Enabled explicit configuration of ViewRenderers within ViewBundle. This allows ViewRenderers to be configured by the end user. 3. Modified FreemarkerViewRenderer to allow custom configuration. 4. Enabled per-request customization of  FreemarkerViewRenderer that allows users to register custom functions and global variables. 5. Introduced the notion of ModelContainer, which allows model objects to be root context for template evaluation","closed","","aseovic","2013-07-18T00:41:49Z","2014-06-23T13:15:47Z"
"","18","A few enhancements for AssetBundles","1. Added ability to specify a url mapping for asset bundles that is different than their resource location. 2. Made ROOT_PATH of services configurable. 3. Fix potential for NPE in mimetype resolution. 4. Added attempt to resolve index.htm in the case that the base url directory is passed in without a resource.","closed","","boneill42","2012-01-10T21:21:19Z","2014-07-03T12:52:10Z"
"","505","Support windows keystore - regression in 0.7.0","0.6.2 allowed you to configure dropwizard to get the https certificate from the windows keystore instead of a java keystore.  0.7.0 no longer understands this keystore.  This is a significant blocker for us upgrading to 0.7.0.","closed","bug,","bwmeier","2014-03-24T16:35:58Z","2014-05-13T12:17:19Z"
"","302","Expose another build method in SessionFactoryFactory that takes the ManagedDataSource, similarly to DBIFactory","...to DBIFactory","closed","","rayokota","2013-04-05T21:38:59Z","2014-07-09T18:22:12Z"
"","369","A servlet filter that adds request identifiers to slf4j's mapped diagnos...","...tic context (MDC), it allows logging output at multiple levels of your service to be easily grouped by the originating request. - Updated RequestIdLoggingFilter to add support for checking clientId's against a regex for validity. - Updated LoggingExceptionMapper to use the Service-Request-Id if it's available in the MDC.","closed","feature,","ajordens","2013-07-23T18:50:36Z","2015-04-06T19:18:34Z"
"","363","A servlet filter that adds request identifiers to slf4j's mapped diagnos...","...tic context (MDC) , it allows logging output at multiple levels of your service to be easily grouped by the originating request.  This is an adaptation of something we've been running in 0.6.2. By using the MDC and an appropriate logFormat, this allows a developer to see which server-side logs were generated within the same request.  At the same time, any exceptions received by a client can be easily associated back to server-side error logs.","closed","","ajordens","2013-07-17T04:22:44Z","2014-06-19T00:12:19Z"
"","146","JacksonMessageBodyProvider should not try to serialize, byte[], String, ...","...InputStream... - canSerialize will return true for things that could be valid json   properties. For example, a byte[] is base64 encoded and   written. That's not really a json object by itself, though. The   client probably wanted the built-in byte array provider to kick in. - Added a DEFAULT_IGNORE set of classes to ignore. Similar idea to Tatu's own provider:   https://github.com/FasterXML/jackson-jaxrs-json-provider/blob/master/src/main/java/com/fasterxml/jackson/jaxrs/json/JacksonJsonProvider.java - Also check the media type. If it's not set, or looks like any json   type, we continue with the other checks. If it's a word doc media   type, well, don't continue.","closed","","asinger","2012-07-30T07:36:25Z","2014-06-13T20:01:13Z"
"","542","Removing AsyncAppender in favor of using Logback's AsyncAppender, which ...","...doesn't have a dependency on pre-Jetty 9.1's ConcurrentArrayBlockingQueue.  Resolves #452 without needing to update Dropwizard's AsyncAppender.","closed","","ryankennedy","2014-04-15T23:29:40Z","2014-08-05T16:30:58Z"
"","249","Minor fix for an NPE in the command line interface code.","... package (i.e. no declared package).","closed","","ryankennedy","2013-01-21T06:29:36Z","2014-07-09T18:38:54Z"
"","385","Added new exception mapper for when a client disconnecting in the middle...","... of parsing the input stream causes a jetty Early EOF/500. This is just a normal disconnect so it shouldn't return a 500  Issue: In a range of drop wizard services we are seeing, in the log files, exceptions relating to EarlyEOFException (org.eclipse.jetty.io.EofException: early EOF).  Reproduce: This exception has been reproduced consistently in a sample drop wizard service as follows: 1)Start the service in debug which is a simple message storing service and break before exception is thrown in JacksonMessageBodyProvider readfrom method 2)In the terminal - use curl to do a put with a large json file: curl -vvv -H ""Content-Type: application/json"" -X PUT --data-binary ""@json_load.json"" localhost:8080/v1/messages/12 3) Ctrl C in the terminal to try and simulate disconnecting the client. 4) Continue program running from the breakpoint in Step 1) and the exception occurs as follows:  ERROR [2013-09-03 19:45:53,783] com.yammer.dropwizard.jersey.LoggingExceptionMapper: Error handling a request: 507b398b2dc34feb ! org.eclipse.jetty.io.EofException: early EOF ! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:65) ~[jetty-server-8.1.10.v20130312.jar:8.1.10.v20130312] ! at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.loadMore(UTF8StreamJsonParser.java:174) ~[jackson-core-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed(ParserBase.java:431) ~[jackson-core-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2111) ~[jackson-core-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString(UTF8StreamJsonParser.java:2092) ~[jackson-core-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(UTF8StreamJsonParser.java:291) ~[jackson-core-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:24) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(StringDeserializer.java:11) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:375) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:107) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:308) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:121) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.ObjectReader._bind(ObjectReader.java:1169) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:625) ~[jackson-databind-2.1.4.jar:2.1.4] ! at com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider.readFrom(JacksonJsonProvider.java:448) ~[jackson-jaxrs-json-provider-2.1.4.jar:2.1.4] ! at com.yammer.dropwizard.jersey.JacksonMessageBodyProvider.readFrom(JacksonMessageBodyProvider.java:61) ~[dropwizard-core-0.6.2.jar:na] ………  Summary: So it appears that LogExceptionMapper returns a server error 500 in this case.    Request: We would like to request the addition of an Exception mapper to handle the timeout/disconnect whilst in the middle of JSON processing to return a NO_CONTENT response rather than a 500.   I have added the registration of the EarlyEOFExceptionMapper to the Environment class : e.g   jerseyConfig.getSingletons().add(new EarlyEOFExceptionMapper()); due to the fact that Jersey and Jetty are both referenced within the mapper registration.  @64BitChris","closed","improvement,","laurachart","2013-09-03T20:00:44Z","2014-06-16T13:52:21Z"
"","540","Added support for HttpClientBuilder and JerseyClientBuilder configurable...","... HttpRequestRetryHandlers. Handlers are only used when HttpClientConfiguration retries are > 0.  To fix issue #522.","closed","","jhalterman","2014-04-14T18:03:32Z","2014-12-08T04:56:52Z"
"","197","Adding a ManagedLiquibase obj + factory to make use of Liquibase objects...","... easier. This enables tests in particular to take advantage of Liquibase's features.","closed","","chrisgray","2012-10-25T20:50:35Z","2014-06-14T22:53:44Z"
"","312","Handlebars template engine support","- Uses Handlebars.java for java support - Uses cache used by Handlebars.java - Template files have .hbs extension","closed","","santanusinha","2013-04-25T09:59:54Z","2014-07-05T18:53:32Z"
"","131","Add support for configuring Jetty SslContextFactory includeProtocols","- updated the SslConfiguration object to add 'includeProtocols' property   which is an optional List of Strings specifying SSL protocols to enable   in the SSL Context Factory. I'm not very happy with the name of this   configuration parameter but it matches the corresponding configuration   parameter in Jetty so I didn't want to rename it just for the sake of   asthetics. - if specified, pass the set includeProtocols on SslContextFactory. The   behaviour of the includeProtocols List on SslContextFactory is to   take the intersection of the includeProtocols and the available SSL   protocols in the JVM and use that as the list of active SSL protocols.   As such, I didn't add any validation to the values in the list, if   an invalid value is specified, it will be ignored.  configuration looks like (YAML):  ``` http:   connectorType: legacy+ssl   ssl:     includeProtocols:     - TLSv1     - SSLv3 ```","closed","","cfieber","2012-07-04T16:58:05Z","2014-06-21T05:35:56Z"
"","118","Refactor AssetServlet","- Specify assets by URL, as well as by path. This is more general, and allows serving of assets within jar files as well as ones within the resources directory. - Use real last-modified times for assets whenever possible. - Make default filename configurable; the default remains ""index.htm"" - Add lots of tests","closed","","emerose","2012-06-21T19:37:42Z","2014-06-18T04:21:05Z"
"","370","experimenting with a configurable pattern for access requests using logback-access","- Implemented our own DropwizardRequestLog to avoid any file-based configuration from RequestLogImpl. - Added a new interface AccessAppendFactory to build access vs classic appenders  TODO: I'm still working on rolling file appender support.","closed","feature,","eliast","2013-07-24T11:33:12Z","2015-04-06T19:57:12Z"
"","414","AsyncAppender now flushes log events when the application shuts down","- async appender workers are no longer daemon threads so they can flush   partially buffered events to their delegates before stopping - SLF4J request log stops the appenders when it's closed - configured command stops the appenders when the execution finishes - configured commands that execute asynchronously (e.g. ServerCommand)   must now call cleanup when they finish execution","closed","","vadims","2013-10-28T09:30:03Z","2014-06-19T10:42:34Z"
"","415","Connectors shouldn't try to manage the same thread pool","- app connectors use the server thread pool (null means inherit thread   pool from server) - admin connectors have their own shared thread pool that is now managed   by the server instead of the individual connectors  Having multiple connectors manage the same thread pool was problematic.  To reproduce, run the example application and send a SIGTERM to the process after it starts. It will timeout and give up stopping the admin thread pool after 30 seconds instead of stopping cleanly right away.","closed","","vadims","2013-10-28T09:30:26Z","2014-07-03T05:14:45Z"
"","456","Add ability to override config settings that are in arrays and maps","**Overview**  This pull request lets you override more config entries like server port and hibernate properties.  It also adds tests for the existing override feature as well as for these additions.  **Details**  Properties like listening port cannot be overridden because they are inside a list like so:  ``` server:     applicationConnectors:         - type: http           port: 8080 ```  This pull request addresses this by adding support for indexing into arrays.  The override for this looks like:  ``` -Ddw.server.applicationConncetors[0].port=9090 ```  Additionally, properties inside maps that have '.' in the name cannot be overridden.  For example, setting hibernate properties in database config:  ``` database:     url: jdbc://...     properties:         charSet: UTF-8         hibernate.hbm2ddl.auto: create ```  This pull request also addresses this issue by adding support for properties inside maps.  The overide for hbm2ddl above looks like this:  ``` -Ddw.database.properties.hibernate.hbm2ddl.auto=none ```","closed","","cmicali","2014-02-04T20:00:09Z","2014-07-09T16:47:05Z"
"","484","All projects using 0.7.0-rc2 fail to build when using maven-enforcer-plugin","**Issue** Projects built with dropwizard-0.7.0-rc2 fail with two dependency convergence errors   1. Dropwizard depends on jackson-annotations 2.3.1 but most jackson 2.3.1 dependencies for some reason still depend on jackson-annotations 2.3.0 2. Dropwizard depends on slf4j 1.7.6 but metrics-\* depend on slf4j 1.7.5  **Reproduction** 1. Download **pom.xml** from https://gist.github.com/cmicali/9292420 and put it in any directory 2. Run **mvn install**  Expected: Build success Actual: Enforcer error showing the above 2 dependency convergence errors  **Proposed Fix** 1. Switch jackson dependency back to 2.3.0 - unclear why 2.3.1 has dependencies to annotations 2.3.0, and there is nothing newer 2. Exclude slf4j dependencies on all the metrics dependencies - there is no newer metrics version available and 1.7.6 seems to have some good fixes http://www.slf4j.org/news.html","closed","","cmicali","2014-03-03T18:00:44Z","2014-07-09T16:28:53Z"
"","277","Add parameter validation for resource methods","**Backstory:** A parameter like `@QueryParam(""name"") String name` is optional. `name` becomes `null` if the request doesn't include the parameter. (Unless the parameter type is `Optional`, in that case the parameter becomes `Optional.absent()`.)  It would be great if there was some way to mark parameters as mandatory, making Dropwizard automatically return HTTP status code 422 if they are missing. I currently have to write boilerplate code to make sure all parameters are present.  Relevant issues: - http://java.net/jira/browse/JERSEY-351 : Parameter Validation - http://java.net/jira/browse/JERSEY-399 : Add support for `@Required` attribute on a parameter  **Keywords**: parameters, mandatory, optional, non-optional, required","closed","improvement,","qerub","2013-03-07T17:08:20Z","2014-11-09T14:17:51Z"
"","46","Allow admin to be disabled","(This _should_ be the final nail in the getting-dropwizard-to-work-on-heroku-out-of-box coffin.)  [Heroku kills processes that bind to more than one port](http://devcenter.heroku.com/articles/error-codes#r11__bad_bind), which doesn't exactly jive with having the admin servlet bind on a separate port. Ideally the admin servlet could live on ""/admin"" with some http basic auth guarding it, but it seems like that would require rejiggering ServerFactory quite a bit. This is a quick and dirty solution that should get people up and running on Heroku.","closed","","michaelfairley","2012-03-07T09:01:27Z","2014-07-09T20:09:54Z"
"","372","Refactor Jetty/HTTP server out of dw-core and into new dw-server","(In reference to comments on #349.)  **Motivation** Using Dropwizard right now requires the use of Jetty. Not all backend services are built on Jetty/HTTP (e.g., Netty). These commits move all Jetty/HTTP specific functionality into a new project, `dropwizard-server`. Project `dropwizard-core` is refactored to operate on more abstract [Guava Services](https://code.google.com/p/guava-libraries/wiki/ServiceExplained).  This change will make it possible to configure and launch any application using Dropwizard and its conventions but without including the Jetty runtime (small Jetty utility libraries are still used).  **Changes** All server-related functionality moved out of dw-core and into dw-server. Rather than expecting Jetty's `Server`, `ServerCommand` is now just a specific instance of a new `ServiceCommand` that operates on `Service`. `Service#addListener` is used to carry out the lifecycle operations that had previously been delegated to Jetty.  **Notice** I don't mean to dump a lot of changes on you at once, I just wanted to have something concrete to point to for discussion.","closed","","fleaflicker","2013-07-24T19:57:59Z","2014-06-19T20:57:22Z"
"","105","Upgrade Jetty to 8.1.4","(and fix the release notes for JDBI version)","closed","","KingBuzzer","2012-05-30T12:30:33Z","2014-07-09T19:43:07Z"
"","217","Fix AssetServlet trimming of '/', add ability to optionally specify a charset in the response's content-type attempt 2","#216 against latest changes","closed","","fleaflicker","2012-11-16T20:47:22Z","2014-07-09T18:51:31Z"
"","325","Example project health check fails for hsqldb","""SELECT 1"" doesn't seem to work for hsqldb. So I replaced it with ""SELECT \* FROM INFORMATION_SCHEMA.SYSTEM_TABLES"" which I found here: http://javasplitter.blogspot.com/2011/01/keep-alive-query-in-hsqldb.html","closed","","dmt","2013-05-11T18:54:49Z","2014-07-09T18:03:30Z"
"","533","More updates to the testing docs","","closed","","jplock","2014-04-08T12:45:39Z","2014-07-09T16:24:50Z"
"","532","first stab at documenting committers and rules","","closed","","cab222","2014-04-08T02:40:40Z","2014-06-16T00:46:43Z"
"","526","Adding a project level docs for contributing and creating issues","","closed","","mveitas","2014-04-05T11:58:24Z","2014-07-09T16:23:19Z"
"","525","remove site generation for now","","closed","","carlo-rtr","2014-04-04T21:27:14Z","2014-06-17T01:55:24Z"
"","508","Docs updates","","closed","","celkins","2014-03-24T23:01:43Z","2014-06-18T10:31:12Z"
"","506","Fix a typo in the HttpsConnectorFactory configuration regarding the keyStoreType","","closed","","mveitas","2014-03-24T18:58:09Z","2014-07-09T16:41:32Z"
"","480","Add jdk8 to travis","","closed","","davidillsley","2014-02-26T19:14:41Z","2014-07-09T16:50:08Z"
"","458","Update example SPDY references for 0.7","","closed","","sps","2014-02-04T20:35:36Z","2014-06-26T21:37:09Z"
"","454","Update to liquibase library to 3.1.1","","closed","","mveitas","2014-02-01T22:32:09Z","2014-07-09T16:58:45Z"
"","445","Is there any plan to support Grizzly instead of Jetty?","","closed","","coolgeng","2014-01-09T22:13:57Z","2014-01-10T08:42:16Z"
"","434","Fixing formatting in README.md","","closed","","ometa","2013-12-11T06:11:41Z","2014-07-09T17:05:50Z"
"","412","Fix test failure on windows","","closed","","kutzi","2013-10-18T14:52:51Z","2014-07-09T17:18:59Z"
"","411","Update to Liquibase 3.0.6","","closed","","kutzi","2013-10-18T14:41:36Z","2014-06-19T20:52:02Z"
"","407","Adding a 'livehtml' target to the docs Makefile that will use livereload and a Guardfile to watch for changes to the docs","","closed","","mveitas","2013-10-05T13:59:18Z","2014-06-13T10:54:18Z"
"","406","Use new github link","","closed","","basil3whitehouse","2013-10-05T02:55:42Z","2014-07-09T17:21:00Z"
"","404","updating the docs","","closed","","carlo-rtr","2013-10-03T15:15:50Z","2014-07-09T17:14:26Z"
"","401","timezine -> timezone","","closed","","jplock","2013-10-01T14:45:19Z","2014-07-09T17:22:32Z"
"","392","update to liquibase 3.0.4","","closed","","kutzi","2013-09-18T15:01:06Z","2014-07-09T17:27:36Z"
"","387","fixed the SSL configuration docs","","closed","","simoncurd","2013-09-16T13:11:07Z","2014-07-03T06:18:06Z"
"","343","Issue 339","","closed","","bentmann","2013-06-01T00:19:01Z","2014-07-07T02:07:38Z"
"","341","Issue 32 Reloaded","","closed","","bentmann","2013-05-31T22:56:35Z","2014-07-09T17:57:56Z"
"","318","Update to most recent JDBI Version","","closed","","brianm","2013-05-01T17:05:06Z","2014-06-18T07:45:43Z"
"","300","removed backup files from previous commit","","closed","","vikchilu","2013-04-05T04:13:52Z","2014-07-09T18:22:42Z"
"","299","added new functionality for hello-world","","closed","","vikchilu","2013-04-04T03:37:45Z","2014-07-09T18:23:12Z"
"","287","Internal admin servlet should have filters applied if running on same port as service","","closed","","sps","2013-03-21T22:17:40Z","2014-06-14T11:20:03Z"
"","284","Remove useless method","","closed","","jamel","2013-03-18T01:01:19Z","2014-07-09T18:28:47Z"
"","275","Adding getService() and getEnvironment() to DropWizardServiceRule (take 2)","","closed","","tomakehurst","2013-03-04T22:29:35Z","2014-07-09T17:57:26Z"
"","252","Support for loading custom log appenders","","closed","","dump247","2013-01-23T20:57:21Z","2014-06-14T10:56:01Z"
"","245","Add note about setting port and adminPort to the same value","","closed","","michaelfairley","2013-01-14T03:56:25Z","2014-06-19T12:09:30Z"
"","242","Missing call to Bundle#initialize in Bootstrap","","closed","","ptomli","2012-12-20T14:00:41Z","2014-07-09T18:42:56Z"
"","223","Updated JDBI documention for DW 0.6.0","","closed","","collinvandyck","2012-11-28T01:41:19Z","2014-06-18T07:53:32Z"
"","212","Adding client cert support","","closed","","andershedstrom","2012-11-12T15:50:35Z","2014-07-09T18:55:35Z"
"","200","Support for setting connectionInitSqls on DBCP pool.","","closed","","frankgrimes97","2012-10-31T19:46:34Z","2014-07-09T19:00:08Z"
"","181","Update jerkson dependency.","","closed","","ieure","2012-10-02T22:00:14Z","2014-06-12T13:13:57Z"
"","180","Added ability to configure base resource and protected targets for the external servlet","","closed","","sjhorn","2012-10-02T05:49:20Z","2014-07-07T21:29:00Z"
"","179","Docs - Add missing word","","closed","","chids","2012-10-01T13:21:20Z","2014-07-09T19:10:45Z"
"","164","Added help text in example.yml around handling httpS requests.","","closed","","jamesladd","2012-08-07T21:57:20Z","2014-07-09T19:15:48Z"
"","157","-Ddw params are ignored if no config file is used","","closed","","michaelfairley","2012-08-02T20:04:53Z","2012-08-03T01:33:35Z"
"","152","Gustafsons -> Gustafson","","closed","","chids","2012-08-01T16:40:38Z","2014-07-09T19:21:52Z"
"","150","s/Gustafsons/Gustafson/","","closed","","chids","2012-08-01T13:42:50Z","2014-07-09T19:22:22Z"
"","132","Re-enable logEndpoints INFO logging, was surrounded in isDebugEnabled()","","closed","","asinger","2012-07-06T00:37:04Z","2014-07-09T19:29:57Z"
"","124","Allow the TaskServlet to work in non-default contexts","","closed","","michaelfairley","2012-07-02T01:47:29Z","2014-07-09T19:35:02Z"
"","85","Remove redundant cast.","","closed","","KingBuzzer","2012-04-22T08:28:47Z","2014-07-09T19:51:12Z"
"","84","Upgrade JDBI to 2.33.2","","closed","","KingBuzzer","2012-04-21T20:20:50Z","2014-07-09T19:51:42Z"
"","83","Upgrade Maven Shade plugin to 1.6","","closed","","KingBuzzer","2012-04-21T09:15:29Z","2014-07-09T19:52:13Z"
"","82","Fix invalid Java syntax and stale method references","","closed","","celkins","2012-04-20T19:08:56Z","2014-07-09T19:52:43Z"
"","78","Remove references to logging level FATAL in docs and resources.","","closed","","KingBuzzer","2012-04-11T20:26:02Z","2014-07-09T19:55:15Z"
"","77","Replace log4j reference with Logback.","","closed","","KingBuzzer","2012-04-11T20:24:29Z","2014-07-09T19:55:45Z"
"","76","Upgrade to JDBI 2.33.1.","","closed","","KingBuzzer","2012-04-11T20:12:28Z","2014-07-09T19:56:15Z"
"","65","Remove duplicate groupIds, add name to dropwizard-auth module.","","closed","","KingBuzzer","2012-03-23T21:23:47Z","2014-07-09T20:01:18Z"
"","56","Add ETag and Last-Modified support for better caching","","closed","","jamesward","2012-03-19T14:01:07Z","2014-06-23T22:38:07Z"
"","53","Correct the logging levels","","closed","","KingBuzzer","2012-03-15T21:53:58Z","2014-07-09T20:06:52Z"
"","38","s/manged/managed/","","closed","","michaelfairley","2012-02-26T07:22:09Z","2014-06-18T12:01:35Z"
"","36","Add link to mailing list back to docs","","closed","documentation,","codahale","2012-02-21T21:55:00Z","2012-02-24T21:07:39Z"
"","11","Quick doc correction","","closed","","marcua","2011-12-12T13:21:14Z","2014-07-09T20:27:06Z"
"","1","Development","","closed","","collinvandyck","2011-03-16T22:44:12Z","2014-07-09T20:31:38Z"