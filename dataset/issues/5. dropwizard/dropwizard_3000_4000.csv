"#","No","Issue Title","Issue Details","State","Labels","User name","created","Updated"
"","1719","Fix occasional null comparison introduced in #1718","üòä","closed","","nickbabcock","2016-09-02T18:41:05Z","2016-09-02T20:42:12Z"
"","2290","Fixed template broken after enabling html escaping of strings in Free‚Ä¶","‚Ä¶marker templates by default, added integration tests.  See also: https://github.com/dropwizard/dropwizard/pull/2251  Before you could see this in logs trying to render 'view_freemarker' template:  ``` Causing: io.dropwizard.views.ViewRenderException: freemarker.core.ParseException: Syntax error in template ""com/example/helloworld/views/freemarker/person.ftl"" in line 8, column 38: ! Using ?html (legacy escaping) is not allowed when auto-escaping is on with a markup output format (HTML), to avoid double-escaping mistakes. ```  ###### Problem:  Seems that auto-escaping for strings in Freemarker templates is enabled by default. But an example template still contains **?html** , so we've got **ViewRenderException** mentioned in comment to commit, and a http status **500**.  ###### Solution:  Fixed template assuming auto-escape enabled. Added small tests verifying that **/people/{personId}/{view_name}** returns **200 OK**.  ###### Result:","closed","bug,","Silvmike","2018-03-03T15:41:11Z","2018-03-04T00:36:18Z"
"","1804","Enhanced the logging mechanism of registered endpoints in DropwizardR‚Ä¶","‚Ä¶esourceConfig.  With the enclosed changes, the logger also processes programatically added Resources which group other resources together. This differs from the previous implementation where only the directly added Resource classes were logged.  This pull request accompanies this issue: [#1803](https://github.com/dropwizard/dropwizard/issues/1803)","closed","improvement,","vemilyus","2016-11-07T20:56:04Z","2016-11-09T08:25:12Z"
"","1859","Have the abstract command pass in the Database rather than Connection‚Ä¶","‚Ä¶, so that default schema / catalog can be provided before constructing Liquibase.  This is to address #1857","closed","improvement,","nathklei","2016-12-12T18:31:38Z","2016-12-14T16:12:54Z"
"","2098","Add ""immediateFlush"" configuration for FileAppenderFactory","Would be nice to use ""immediateFlush"" feature from ch.qos.logback.core.encoder.LayoutWrappingEncoder in FileAppenderFactory","closed","","pavelkokush","2017-07-10T12:54:27Z","2017-12-20T03:24:52Z"
"","2071","Fix size and time rolling appender","Without this fix, file logging configurations that use time and size based rotations will not work (ie, no log file or logging statements). Added test case to guard against regressions.  cc @charbonnier666 who reported the issue and also reported this PR fixed the issue  Closes #2068","closed","bug,","nickbabcock","2017-06-06T14:07:28Z","2017-06-20T07:34:34Z"
"","2373","Support expiring log level task configurations","With the log configuration task. My typical use case is to temporarily change the log level, get the relevant information, then revert the change. I would like the option to set a duration at which the log change reverts to the previous state. The example below takes in an ISO8601 duration as optional parameter.  ``` curl -X POST -d ""logger=com.example.helloworld&level=INFO&duration=PT10M"" http://localhost:8081/tasks/log-level ```  https://www.dropwizard.io/1.3.2/docs/manual/core.html#logging-configuration-via-http https://github.com/dropwizard/dropwizard/blob/v1.3.2/dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/LogConfigurationTask.java","closed","","mattnelson","2018-05-30T17:42:10Z","2018-07-05T18:34:59Z"
"","2042","requestLog 'file' appender does not seem to work in 1.1.0","With or without ""classic,"" these configurations create the specified request log file, but produce no output:  ````` server:   requestLog:     appenders:       - type: console       - type: file         threshold: ALL         logFormat: ""%h %l %u [%t] \""%r\"" %s %b \""%i{Referer}\"" \""%i{User-Agent}\""""         currentLogFilename: test-requests.log         archive: false ````` or  ````` server:   requestLog:     type: classic     appenders:       - type: console       - type: file         threshold: ALL         logFormat: null         currentLogFilename: test-requests.log         archive: false ````` Prints to the console just fine, but not the file. I've tested with/without the console appender, with/without archiving, with/without specifying a `logFormat`, with/without `timeZone`. I never get any output.","closed","","moxie0","2017-05-02T22:40:00Z","2017-05-03T03:35:45Z"
"","2122","Commands and customizable exception handling","With 1.2.0-rc1 out I tried rolling out to all my apps in testing, but I hit a snag:  #2003 introduced printing the stack trace on an exception which is good for the `server` command but the wrong call for `check` and other commands.  Let's look at the differences between v1.1.3 and v1.2.0-rc1 with dropwizard-example by `check banner.txt`  v1.1.3  ``` classes\banner.txt has an error:   * Failed to parse configuration; Can not construct instance of com.example.helloworld.HelloWorldConfiguration: no String-argument constructor/factory method to deserialize from String value ('web-scale hello world dP for the web 88 .d8888b. dP.  .dP .d8888b. 88d8b.d8b. 88d888b. 88 .d8888b. 88ooood8  `8bd8'  88'  `88 88'`88'`88 88'  `88 88 88ooood8 88.  ...  .d88b.  88.  .88 88  88  88 88.  .88 88 88.  ... `88888P' dP'  `dP `88888P8 dP  dP  dP 88Y888P' dP `88888P' 88 dP')  at [Source: N/A; line: -1, column: -1] ```  v1.2.0  ``` io.dropwizard.configuration.ConfigurationParsingException: classes\banner.txt has an error:   * Failed to parse configuration; Cannot construct instance of `com.example.helloworld.HelloWorldConfiguration` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('web-scale hello world dP for the web 88 .d8888b. dP.  .dP .d8888b. 88d8b.d8b. 88d888b. 88 .d8888b. 88ooood8  `8bd8'  88'  `88 88'`88'`88 88'  `88 88 88ooood8 88.  ...  .d88b.  88.  .88 88  88  88 88.  .88 88 88.  ... `88888P' dP'  `dP `88888P8 dP  dP  dP 88Y888P' dP `88888P' 88 dP')  at [Source: UNKNOWN; line: -1, column: -1]          at io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:276)         at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:157)         at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:92)         at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:124)         at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:72)         at io.dropwizard.cli.Cli.run(Cli.java:74)         at io.dropwizard.Application.run(Application.java:93)         at com.example.helloworld.HelloWorldApplication.main(HelloWorldApplication.java:38) Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.example.helloworld.HelloWorldConfiguration` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('web-scale hello world dP for the web 88 .d8888b. dP.  .dP .d8888b. 88d8b.d8b. 88d888b. 88 .d8888b. 88ooood8  `8bd8'  88'  `88 88'`88'`88 88'  `88 88 88ooood8 88.  ...  .d88b.  88.  .88 88  88  88 88.  .88 88 88.  ... `88888P' dP'  `dP `88888P8 dP  dP  dP 88Y888P' dP `88888P' 88 dP')  at [Source: UNKNOWN; line: -1, column: -1]         at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63)         at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1329)         at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1031)         at com.fasterxml.jackson.databind.deser.ValueInstantiator._createFromStringFallbacks(ValueInstantiator.java:370)         at com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(StdValueInstantiator.java:314)         at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1351)         at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:170)         at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:120)         at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3972)         at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2264)         at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:128)         ... 6 more ``` The stack trace is unneeded for `check` and only adds confusion. Similarly, I have custom commands where the stack trace greatly distracts from the output and I won't be able to upgrade from v1.1 until the same behavior is kept.  Off the top of my head:  - a `Command` needs to signal that it failed (I'm ok with exception ‚úîÔ∏è) - `Cli#run` can provide a sane default for what to do with an exception (like printing stack trace) but this must be overridable - `onFatalError` is too weak in it's current state to be used for this (it lacks the exception, for instance, if an exception even caused `onFatalError` to be triggered)","closed","","nickbabcock","2017-08-03T14:37:15Z","2017-08-24T19:22:49Z"
"","2244","DropwizardResourceConfig not logging Interface Resources","Why are Interface Resources not logged on startup?  Line of code in question: https://github.com/dropwizard/dropwizard/blob/502fd326041787f25190338f56365409a01567b0/dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java#L131","closed","","frederic-h","2018-01-18T10:31:01Z","2018-06-18T20:18:32Z"
"","2539","dropwizard-json-logging - add method, linenumber to loggerName","While: dropwizard-json-logging is great, I miss the method and line number from the 'loggerName'.  As I see it is available in the ILoggingEvent's CallerData, as it is possible to log it in text with 'logFormat'.","closed","improvement,","tapifolti","2018-10-28T20:21:23Z","2019-01-21T15:00:18Z"
"","2472","Upgrade to latest Guava (26.0-jre) and exclude jsr305 from Guava dependencies","While trying to work through some JDK10 building issues, JSR305 is causing a lot of issues:  - https://blog.codefx.org/java/jsr-305-java-9/ - https://stackoverflow.com/questions/4963300/which-notnull-java-annotation-should-i-use - https://github.com/google/guava/issues/2960 - https://github.com/ben-manes/caffeine/issues/242 - http://openjdk.java.net/jeps/320  Dropwizard is explicitly pulling in jsr305 as a dependency and using it internally.  I'm not sure if this will continue to work with JDK10+ or not.  We could do a future PR to replace our jsr305 usage with another library.","closed","improvement,","jplock","2018-08-28T20:04:47Z","2018-08-28T21:03:01Z"
"","1940","List tasks","While trying to execute a task on the cli I realized the task names aren't easily accessible. They're logged on application startup but that's it as far as I can see.   I opened https://github.com/dropwizard/dropwizard/pull/1939 to address this but probably I should have opened an issue to discuss beforehand.  The suggestion is to list all tasks by sending a GET request like this: ``` $ curl http://localhost:8081/tasks echo gc log-level ```  Closing the PR for now. Let me know if I shuold re-open or if you have any other comments.","closed","improvement,","aaanders","2017-02-27T07:21:09Z","2017-02-27T12:43:41Z"
"","1663","Can't set custom HostnameVerifier on DropWizard client","While the improvements to TLS configuration of HTTP clients in 1.0.0 (maybe prior) are awesome, as part of that process the ability to set a custom HostnameVerifier easily on the HTTP client has been lost.  You used to be able to do e.g. as:  ``` JerseyClientConfiguration myJerseyClientConfiguration = ; HostnameVerifier verifier = new MyCustomHostnameVerifier(); JerseyClientBuilder clientBuilder = new JerseyClientBuilder(env); clientBuilder.using(myJerseyClientConfiguration).using(verifier); Client httpClient = clientBuilder.build(); ```  Same is true for `HttpClientBuilder` too.  You can still do it by creating a custom Apache `Registry` but you need to set up socket factories for every scheme. Pretty heavyweight.  I have a pull request that I'll submit and reference this issue.","closed","","tbartley","2016-08-02T20:47:20Z","2016-08-04T18:17:17Z"
"","1664","Allow use of custom HostnameVerifier on clients.","While the improvements to TLS configuration of HTTP clients in 1.0.0 (maybe prior) are awesome, as part of that process the ability to set a custom HostnameVerifier easily on the HTTP client has been lost.  You used to be able to do e.g. as:  JerseyClientConfiguration myJerseyClientConfiguration = ; HostnameVerifier verifier = new MyCustomHostnameVerifier(); JerseyClientBuilder clientBuilder = new JerseyClientBuilder(env); clientBuilder.using(myJerseyClientConfiguration).using(verifier); Client httpClient = clientBuilder.build(); Same is true for HttpClientBuilder too.  You can still do it by creating a custom Apache Registry but you need to set up socket factories for every scheme.  This change restores the ability to set a custom HostnameVerifier for clients.  [Fixes #1663]","closed","improvement,","tbartley","2016-08-02T23:48:48Z","2016-08-09T06:08:46Z"
"","2174","Issue with allowed methods in 1.2.0","While setting yaml file with  allowedMethods: [GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH] I still get issue java.lang.NoSuchFieldError: DEFAULT_ALLOWED_METHODS I tried with empty [], [""GET""] and ""GET"" but still get the same error. I am using java 1.9 with dropwizard 1.2.0. When I switch it to 1.0.0, issue goes away. ```  java.lang.NoSuchFieldError: DEFAULT_ALLOWED_METHODS 	at io.dropwizard.server.AbstractServerFactory.(AbstractServerFactory.java:261) 	at io.dropwizard.server.DefaultServerFactory.(DefaultServerFactory.java:70) 	at io.dropwizard.Configuration.(Configuration.java:63) 	at com.java.SampleServiceConfiguration.(SampleServiceConfiguration.java:6) 	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:488) 	at java.base/java.lang.Class.newInstance(Class.java:558) 	at io.dropwizard.configuration.YamlConfigurationFactory.build(YamlConfigurationFactory.java:105) 	at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:126) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:72) 	at io.dropwizard.cli.Cli.run(Cli.java:75) 	at io.dropwizard.Application.run(Application.java:93) 	at com.java.SampleApplication.main(SampleServiceApplication.java:11) ```","closed","","yash9patel","2017-10-15T14:17:18Z","2017-10-17T12:37:07Z"
"","2188","Potential resource leak in ScanningHibernateBundle","While playing a bit with [SonarQube](https://www.sonarqube.org/), I noticed (thanks to it), that there is [one place](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/ScanningHibernateBundle.java#L43) where an instance of [`PackageNamesScanner`](https://github.com/jersey/jersey/blob/master/core-server/src/main/java/org/glassfish/jersey/server/internal/scanning/PackageNamesScanner.java) class (which implements `AutoClosable`) is not closed anywhere, which will result in not closing the resource which is referenced by this class [`compositeResourceFinder`](https://github.com/jersey/jersey/blob/master/core-server/src/main/java/org/glassfish/jersey/server/internal/scanning/PackageNamesScanner.java#L181).  A simple fix for that would be to create this instance of `PackageNamesScanner` within a try-with-resources block, so it will get automagically closed.  If this will be confirmed, I'm happy to provide a PR addressing this issue.","closed","","patrox","2017-10-26T18:16:10Z","2017-10-26T22:45:40Z"
"","1974","javax.el in jersey-bean-validation is older than the one in dropwizard-validation","Which gives me warnings in my build when including dropwizard-jersey","closed","","vrolijken","2017-03-23T09:53:10Z","2017-03-23T10:02:17Z"
"","2457","Possible race condition causing invalid responses to requests (dropwizard 1.0+)","When we attempted to upgrade several of our projects from dropwizard 0.9.2 to 1.x, we ran into a bizarre, intermittent bug under high load that proved rather difficult to track down. The bug manifests as HTTP 400 responses to what should be valid requests; or, worse, certain requests receiving a the wrong response entirely (receiving the response for a different, earlier, request).  I have narrowed down the bug to a detectable race in `ByteBuffer` access within jetty ([link to the discussion here](http://dev.eclipse.org/mhonarc/lists/jetty-dev/msg03192.html)), but the root cause is still unknown. I *have* managed to reproduce it outside of our product's codebase, using a simple dropwizard server consisting of the getting started tutorial, with some minimal modifications. I'm working through the pipeline to getting the repro published, but in the meantime, I wanted to share what I can about the conditions needed to recreate this, in case anyone has seen it before (or runs into something similar).  The repro consists of a tiny dropwizard server, essentially the getting started tutorial, with two main API endpoints that are accessed at high load by a client. I'm not sure both are needed, but I haven't gotten around to trying anything simpler:  ``` GET /category/{categoryName} GET /category/{categoryName}/item/{itemName} ```  There's one notable change we did make to the standard configuration--enable logging globally at the `DEBUG` level, but drop anything below `INFO` at the appender level. We did encounter the bug without this custom logging config, but based on local testing, this makes the bug significantly easier to repro:  ``` logging:   level: DEBUG   loggers:     ""io.dropwizard"": INFO   appenders:     - type: console       threshold: INFO       target: stdout       logFormat: '%d{ISO8601,UTC} %5p %mdc{debug-request-id:-na} %logger{40} - %m%n%rEx' ```  The bug repros across all of dropwizard 1.0, 1.1, 1.2, and even 1.3. It seems to repro as long as jetty 9.3 or 9.4 is used.","closed","stale,","dpodder","2018-08-16T20:25:57Z","2019-08-19T14:01:46Z"
"","2334","@SelfValidating annotation results in 500 when used with @BeanParam","When using the new [@SelfValidating](https://github.com/dropwizard/dropwizard/blob/v1.3.1/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java) annotation on a class that is used as a `@BeanParam`, a 500 error is raised when a [@SelfValidation](https://github.com/dropwizard/dropwizard/blob/v1.3.1/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidation.java) fails instead of 400/422.  This is caused by execution falling through to [ConstraintMessage#getMemberName()](https://github.com/dropwizard/dropwizard/blob/release/1.3.x/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java#L120) where an `IllegalArgumentException` is raised in `FieldUtils#getField()` since `member.getName()` returns an empty string.   I believe execution should not get to this point and [@SelfValidating](https://github.com/dropwizard/dropwizard/blob/v1.3.1/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java) should be handled like [@ValidationMethod](https://github.com/dropwizard/dropwizard/blob/v1.3.1/dropwizard-validation/src/main/java/io/dropwizard/validation/ValidationMethod.java).  Here is an example showing this behaviour: ```java @SelfValidating public class FailingSelfValidation {      @SelfValidation     public void validate(ViolationCollector collector) {          collector.addViolation(""failing self validation"");     }  } ```  And the following resource method: ```java @GET @Path(""failingSelfValidation"") public Response failingSelfValidation(@Valid @BeanParam FailingSelfValidation) {         return Response.ok().build(); } ```  Since I have a already written a test exemplifying this issue, and I have a fix in mind, I will submit a pull request shortly","closed","","matt-snider","2018-04-28T10:38:05Z","2018-05-06T16:46:17Z"
"","1903","Problem when handling path versions","When using the ""/api/v1-2-3"" path pattern, one of the resource is not registered correctly and return 404 ""Not Found"" when issuing a request.  In the following example we should have two version of the same API: ```Java @Path(""/api/"") public class SomeResource {     @GET     @Path(""v1/some_resource"")     public Response getV1()     {         return Response.ok().entity(""V1"").build();     }      @GET     @Path(""v2/some_resource"")     public Response getV2()     {         return Response.ok().entity(""V2"").build();     } } ```  In this case calling ""GET /api/v1/some_resource"" will result in a ""404 Not Found""  and calling ""GET /api/v2/some_resource"" will result in a ""200 V2"" response.  Thanks","closed","","omryhay-unibeam","2017-01-29T14:42:40Z","2017-01-30T22:29:17Z"
"","1692","Response created (HTTP 201) does not take config rootPath into account","When using root path for designing rest api with  ``` server:   adminMinThreads: 1   adminMaxThreads: 64   rootPath: /api/* ```  I sometimes need to indicate to client that resource successfully created with the following response.  `return Response.created(URI.create(""/category/"" + categoryId)).build();`  What I expected is dropwizard to employ `rootPath` when forming full `Location` header url for new created entity which I think is `https://localhost:8080/api/category/1000`.  What I actually got is `https://localhost:8080/category/1000`. Is this expected behaviour by design, if not I can look into this.  > This may be related to #661","closed","","burakdede","2016-08-16T13:27:53Z","2016-08-17T06:25:07Z"
"","2172","When using JerseyClient dropwizard metric is not reflecting connection pool details","When using JerseyClient, apart from max-connections, all the other metric remains 0, like available-connections, leased-connections etc.  Is there an example of how to initiate the client? As of now, it's done in a standard manner - final Client client = new JerseyClientBuilder(environment).using(config.getJerseyClientConfiguration())                                                               .build(getName());  This may be similar to the issue(https://github.com/dropwizard/dropwizard/issues/789) but was not finding a concrete example with the metric publishing working fine. If the functionality is working, please provide some detail/example of how to achieve the same.","closed","","shankhanildas","2017-10-11T13:53:45Z","2018-07-13T02:51:37Z"
"","1992","java.lang.NoClassDefFoundError: org/eclipse/jetty/client/api/Response$Listener","When using dropwizard 1.0.7 with jetty-proxy 9.3.9.v20160517 I am seeing a NoClassDefFoundError when instantiating the ProxyServlet.Transparent class.   ```java Exception in thread ""main"" java.lang.NoClassDefFoundError: org/eclipse/jetty/client/api/Response$Listener 	at com.comcast.ace.ProxyServerApplication.addProxyServlet(ProxyServerApplication.java:52) 	at com.comcast.ace.ProxyServerApplication.lambda$addProxyServlets$0(ProxyServerApplication.java:45) 	at java.util.ArrayList.forEach(ArrayList.java:1249) 	at com.comcast.ace.ProxyServerApplication.addProxyServlets(ProxyServerApplication.java:45) 	at com.comcast.ace.ProxyServerApplication.run(ProxyServerApplication.java:40) 	at com.comcast.ace.ProxyServerApplication.run(ProxyServerApplication.java:17) 	at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:43) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85) 	at io.dropwizard.cli.Cli.run(Cli.java:75) 	at io.dropwizard.Application.run(Application.java:79) 	at com.comcast.ace.ProxyServerApplication.main(ProxyServerApplication.java:20) Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.client.api.Response$Listener 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	... 11 more ```  Upgrading to dropwizard 1.1 with jetty-proxy 9.4.2.v20170220 fixed the problem for me.   The issue can be reproduced from the following repository: https://github.com/rsb5003/proxy-server-test.","closed","","rsb5003","2017-03-30T21:45:59Z","2017-04-03T20:16:05Z"
"","1758","Error when using jersey-test-framework-provider-jetty in dropwizard 1.0.2","When trying to run tests in a JettyTestContainerFactory provided by jersey-test-framework-provider-jetty in a test class that extends JerseyTestNg.ContainerPerClassTest, we're getting the same `java.lang.NoSuchMethodError: org.eclipse.jetty.server.Response.getResponse(Ljavax/servlet/http/HttpServletResponse;)Lorg/eclipse/jetty/server/Response;` error reported in https://java.net/jira/browse/JERSEY-2940  Looking at our dependency tree and maven shade invocation outputs, all jersey jars at at 2.23.1, and all jetty jars are at 9.3.9.v20160517  It seems that the versions of jersey & jetty being depended on by dropwizard are not compatible, at least with respect to the test container (things appear to work for the regular server main())?","closed","","josephlbarnett","2016-10-05T14:51:05Z","2018-07-12T00:20:06Z"
"","2311","Helpful error logging on JSON mapping","When this error is logged as debug level, by default developer will not see root cause of the error, and I struggled several hours because the only response was ""Unable to process JSON"" and logs for io.dropwizard ERROR level did not show any problems.  Invalid jackson mappings are quite common and should be more visible at least Error level.","closed","blocked,","llyys","2018-03-19T19:11:34Z","2018-07-27T13:31:01Z"
"","2402","logformat not being honoured for type console-json","When the appender type is console-json, the logFormat pattern is not being honoured. The configuration looks like this:  ```     - type: console-json       threshold: INFO       logFormat: ""%-6level [%d{HH:mm:ss.SSS}] [%t] %logger{5} - %X{code} %msg %n"" ```","closed","","supreethrao","2018-06-20T14:09:05Z","2018-06-20T16:06:31Z"
"","1660","Support maxFileSize and archivedFileCount","When the `%i` log format pattern is used with the `maxFileSize` and `archivedFileCount` properties, the logs are not rotated properly. It appear that the issue was that the triggering policy was not started.  ``` -rw-r--r-- 1 dw dw  1368 Aug  1 18:02 dw_server-1.log.gz -rw-r--r-- 1 dw dw  1807 Aug  1 18:01 dw_server-2.log.gz -rw-r--r-- 1 dw dw  2151 Aug  1 18:00 dw_server-3.log.gz -rw-r--r-- 1 dw dw  2170 Aug  1 18:00 dw_server-4.log.gz -rw-r--r-- 1 dw dw  2149 Aug  1 18:00 dw_server-5.log.gz -rw-r--r-- 1 dw dw  1384 Aug  1 18:00 dw_server_access-1.log.gz -rw-r--r-- 1 dw dw  1378 Aug  1 18:00 dw_server_access-2.log.gz -rw-r--r-- 1 dw dw  1419 Aug  1 18:00 dw_server_access-3.log.gz -rw-r--r-- 1 dw dw  1403 Aug  1 18:00 dw_server_access-4.log.gz -rw-r--r-- 1 dw dw  1410 Aug  1 18:00 dw_server_access-5.log.gz -rw-r--r-- 1 dw dw 10101 Aug  1 18:00 dw_server_access.log -rw-r--r-- 1 dw dw  3564 Aug  1 18:02 dw_server.log [vagrant@server ~]$ for i in {1..100}; do curl -s http://localhost:8080/stuff > /dev/null; done [vagrant@server ~]$ ll /opt/dw/server/logs/ total 76 -rw-r--r-- 1 dw dw  2950 Aug  1 18:03 dw_server-1.log.gz -rw-r--r-- 1 dw dw  2934 Aug  1 18:03 dw_server-2.log.gz -rw-r--r-- 1 dw dw  2963 Aug  1 18:03 dw_server-3.log.gz -rw-r--r-- 1 dw dw  2967 Aug  1 18:03 dw_server-4.log.gz -rw-r--r-- 1 dw dw  2940 Aug  1 18:03 dw_server-5.log.gz -rw-r--r-- 1 dw dw  1582 Aug  1 18:03 dw_server_access-1.log.gz -rw-r--r-- 1 dw dw  1589 Aug  1 18:03 dw_server_access-2.log.gz -rw-r--r-- 1 dw dw  1387 Aug  1 18:03 dw_server_access-3.log.gz -rw-r--r-- 1 dw dw  1384 Aug  1 18:00 dw_server_access-4.log.gz -rw-r--r-- 1 dw dw  1378 Aug  1 18:00 dw_server_access-5.log.gz -rw-r--r-- 1 dw dw   777 Aug  1 18:03 dw_server_access.log -rw-r--r-- 1 dw dw 30130 Aug  1 18:03 dw_server.log ```","closed","improvement,","mattnelson","2016-08-01T23:24:58Z","2016-10-31T08:14:45Z"
"","1672","requestLog formats with %reqAttribute{someAttibuteName} work intermittently","When setting a request attribute in a resource and configuring it to be logged via a custom logFormat with %reqAttribute{someAttibuteName} the expected value only gets logged from time to time.  I've done a little digging and it seems [`prepareForDeferredProcessing()`](https://github.com/qos-ch/logback/blob/master/logback-access/src/main/java/ch/qos/logback/access/spi/AccessEvent.java#L576) gets called twice, once from [`io.dropwizard.request.logging.async.AsyncAccessEventAppenderFactory`](https://github.com/dropwizard/dropwizard/blob/3d746d21c6e6656a59b26c2a7e92f19e1bb2e9b1/dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/async/AsyncAccessEventAppenderFactory.java#L22) and from [`ch.qos.logback.core.OutputStreamAppender`](https://github.com/qos-ch/logback/blob/658963544cc08059fc3cec48f5d35f650de5f6df/logback-core/src/main/java/ch/qos/logback/core/OutputStreamAppender.java#L205) where there's a race to set the attributeMap.  DW 1.0","closed","bug,","tjcutajar","2016-08-05T14:31:25Z","2016-08-11T14:53:22Z"
"","1600","CVE-2016-3720 in com.fasterxml.jackson dependencies","When running the OWASP Dependency Check tool against a Dropwizard 0.9.2 installation, [CVE-2016-3720](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3720) is raised thirteen times because of the fasterxml.jackson dependency:  ``` jackson-annotations-2.6.0.jar (com.fasterxml.jackson.core:jackson-annotations:2.6.0, cpe:/a:fasterxml:jackson:2.6.0) : CVE-2016-3720 jackson-core-2.6.5.jar (com.fasterxml.jackson.core:jackson-core:2.6.5, cpe:/a:fasterxml:jackson:2.6.5) : CVE-2016-3720 jackson-databind-2.6.5.jar (com.fasterxml.jackson.core:jackson-databind:2.6.5, cpe:/a:fasterxml:jackson:2.6.5) : CVE-2016-3720 jackson-dataformat-yaml-2.6.3.jar (com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-datatype-guava-2.6.3.jar (com.fasterxml.jackson.datatype:jackson-datatype-guava:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-datatype-jdk7-2.6.3.jar (com.fasterxml.jackson.datatype:jackson-datatype-jdk7:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-datatype-jdk8-2.6.3.jar (com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-datatype-joda-2.6.3.jar (com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-datatype-jsr310-2.6.5.jar (com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.5, cpe:/a:fasterxml:jackson:2.6.5) : CVE-2016-3720 jackson-jaxrs-base-2.6.3.jar (com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-jaxrs-json-provider-2.6.3.jar (com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-module-afterburner-2.6.3.jar (com.fasterxml.jackson.module:jackson-module-afterburner:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 jackson-module-jaxb-annotations-2.6.3.jar (com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.6.3, cpe:/a:fasterxml:jackson:2.6.3) : CVE-2016-3720 ```  We'd rather not patch the version in 0.9.2, especially when 1.0.0 has RCs out. It looks like 1.0.0-rc3 will pull FasterXML.Jackson's latest version, rather than pinning it, so we're hopeful this will provide a fix.","closed","security,","ajlanghorn","2016-06-17T10:19:30Z","2016-06-21T17:23:24Z"
"","2274","ClassNotFoundException when running command from Integration Test","When running a command from an integration test using juni5 I am getting the following exception:  ``` ERROR [2018-02-14 21:35:14,445] org.apache.tomcat.jdbc.pool.ConnectionPool: Unable to create initial connections of pool. ! java.lang.ClassNotFoundException:  ! at java.lang.Class.forName0(Native Method) ! at java.lang.Class.forName(Class.java:348) ! at org.apache.tomcat.jdbc.pool.ClassLoaderUtil.loadClass(ClassLoaderUtil.java:38) ! ... 72 common frames omitted ! Causing: java.lang.ClassNotFoundException: Unable to load class:  from ClassLoader:sun.misc.Launcher$AppClassLoader@18b4aac2;ClassLoader:sun.misc.Launcher$AppClassLoader@18b4aac2 ! at org.apache.tomcat.jdbc.pool.ClassLoaderUtil.loadClass(ClassLoaderUtil.java:56) ! at org.apache.tomcat.jdbc.pool.PooledConnection.connectUsingDriver(PooledConnection.java:272) ! ... 71 common frames omitted ! Causing: java.sql.SQLException: Unable to load class:  from ClassLoader:sun.misc.Launcher$AppClassLoader@18b4aac2;ClassLoader:sun.misc.Launcher$AppClassLoader@18b4aac2 ! at org.apache.tomcat.jdbc.pool.PooledConnection.connectUsingDriver(PooledConnection.java:283) ! at org.apache.tomcat.jdbc.pool.PooledConnection.connect(PooledConnection.java:203) ! at org.apache.tomcat.jdbc.pool.ConnectionPool.createConnection(ConnectionPool.java:738) ! at org.apache.tomcat.jdbc.pool.ConnectionPool.borrowConnection(ConnectionPool.java:670) ! at org.apache.tomcat.jdbc.pool.ConnectionPool.init(ConnectionPool.java:482) ! at org.apache.tomcat.jdbc.pool.ConnectionPool.(ConnectionPool.java:154) ! at org.apache.tomcat.jdbc.pool.DataSourceProxy.pCreatePool(DataSourceProxy.java:118) ! at org.apache.tomcat.jdbc.pool.DataSourceProxy.createPool(DataSourceProxy.java:107) ! at org.apache.tomcat.jdbc.pool.DataSourceProxy.getConnection(DataSourceProxy.java:131) ! at io.dropwizard.migrations.AbstractLiquibaseCommand.createDatabase(AbstractLiquibaseCommand.java:94) ! at io.dropwizard.migrations.AbstractLiquibaseCommand.openLiquibase(AbstractLiquibaseCommand.java:79) ! at io.dropwizard.migrations.AbstractLiquibaseCommand.run(AbstractLiquibaseCommand.java:67) ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87) ! at io.dropwizard.cli.Cli.run(Cli.java:78) ! at io.dropwizard.Application.run(Application.java:93) ! at io.huru.client.BaseITTest.resetDB(BaseITTest.java:36) ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ! at java.lang.reflect.Method.invoke(Method.java:498) ! at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:389) ! at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:115) ! at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeMethodInExtensionContext(ClassTestDescriptor.java:289) ! at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$synthesizeBeforeEachMethodAdapter$11(ClassTestDescriptor.java:277) ! at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$null$2(TestMethodTestDescriptor.java:132) ! at org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40) ! at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:152) ! at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachMethods(TestMethodTestDescriptor.java:131) ! at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:106) ! at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:57) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83) ! at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ! at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ! at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ! at java.util.Iterator.forEachRemaining(Iterator.java:116) ! at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ! at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ! at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ! at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ! at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ! at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ! at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ! at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92) ! at java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184) ! at java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:175) ! at java.util.Iterator.forEachRemaining(Iterator.java:116) ! at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ! at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ! at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ! at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151) ! at java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174) ! at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ! at java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:418) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92) ! at org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51) ! at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43) ! at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170) ! at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154) ! at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90) ! at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:86) ! at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) ! at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538) ! at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760) ! at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460) ! at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206) ```  I am simply trying to reset the DB schema by running the migrations command to drop and recreate the DB. Here is the code for the tests:  ``` @ExtendWith(DropwizardExtensionsSupport.class) public class BaseITTest {  	public static final DropwizardAppExtension EXTENSION = new DropwizardAppExtension<>( 			ExampleApplication.class, ResourceHelpers.resourceFilePath(""config.yaml""));  	@BeforeClass 	public static void resetDB() throws Exception { 		EXTENSION.getApplication().run(""db"", ""drop-all"", ""--confirm-delete-everything""); 		EXTENSION.getApplication().run(""db"", ""migrate""); 	}  } ```  What I am noticing is that the dropwizard APP starts fine but when running the command I get the error. There seems to be an issue with classloaders. Has anyone seen this?","closed","","edovale","2018-02-14T21:48:08Z","2018-10-04T02:02:12Z"
"","1973","Set the console logging context after a reset","When resetting logging, we should set a context for the console appender. Otherwise, we get an annoying message: `LOGBACK: No context given for ch.qos.logback.core.ConsoleAppender[null]` in the tests which use `DropwizardAppRule`.  This is related to #1947.","closed","improvement,","arteam","2017-03-23T09:32:55Z","2017-07-26T16:44:04Z"
"","2144","Start the console appender after a logging reset","When resetting logging, configure a layout and start the appender. Otherwise, using the appender logs a warning to the Logback StatusManager:  > WARN in ch.qos.logback.core.ConsoleAppender[null] - Attempted to append to non started appender [null].  Uses the same layout as bootstrap.  This is related to #1973.","closed","improvement,","shawnsmith","2017-09-02T13:58:38Z","2017-09-05T16:02:11Z"
"","1924","improves getting started doc by explaining where to save yml file","When reading the getting started guidance on my first ever exposure to DropWizard, I was confused about where the YML file was supposed to go. At first I put it in the src/main/resources directory expecting the far jar execution to pick it up when I named it on the command line execution arguments. This tiny pull request seeks to clarify that the YML file can be saved anywhere and referenced later.","closed","documentation,","mrice","2017-02-11T05:07:12Z","2017-02-11T05:24:11Z"
"","2416","Not possible to use custom server.requestLog because of bug.","When looking into the code of RequestLogFactory loading from the AbstractServerFactory class, everything seems to allow developers to implement their own RequestLogFactories etc.  There is one single line that prevents this from being possible!  https://github.com/dropwizard/dropwizard/blob/7295c5faf42840325c161cc82ad4ed1db2bf8419/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java#L588  This line uses only the default instance of RequestLogFactory, by referencing the local variable instead of the local getter method. At least this is how I understand it. I am currently trying to add my own PatternLayout AccessConverters to be able to allow certain special items from my context. I use the very same pattern as the LogbackAccessRequestLogFactory class, using my own @JsonTypeName(""my-log-factory"").  Nothing seems to make a difference though. Am I wrong about the local variable reference? Is there something different I need to do to trigger that my custom RequestLogFactory should be used?","closed","","artheus","2018-06-27T12:04:50Z","2018-06-27T12:42:49Z"
"","1716","When logging sub-resource that is polymorphic Object, DropwizardResourceConfig causes NPE","When loging sub-resources that are polymorphic and are methods returning a base class or Object that is not identifiable as a resource, the call at line 164 (branch 1.x) of   ``` populate(basePath, klass, isLocator, Resource.from(klass), endpointLogLines); ```  causes the populate call to NPE at same file line 173 because the `Resource.from(kclass)` returns NULL and there is no null checking.    Therefore this completely breaks using polymorphic sub resources just due to logging bug.","closed","","apatrida","2016-09-02T15:04:34Z","2016-09-02T17:59:08Z"
"","1798","Use the java version to determine alpn boot version","When intellij jdk version does not match the sdk version used for a project, causes an alpn boot version mismatch (only when running tests manually in intellij). Instead, use the `java.version` property to determine alpn version like how [jetty does it](https://github.com/eclipse/jetty.project/blob/f3f31d163c4f04d5c8f1bc2e4ae38f8c88583e77/pom.xml#L912-L1189) üòã   I've verified this works by running the http2 tests in intellij and seeing them complete without exception.","closed","","nickbabcock","2016-11-03T00:56:55Z","2016-11-03T04:34:21Z"
"","1819","how to let LoggingFeature work?","when i use the LoggingFilter to log the request and response, that is ok. env.jersey().register(new LoggingFilter(Logger.getLogger(""InboundRequestResponse""), true));  but when i use LoggingFeature, i can not  get the log,could you tell me there is any thing wrong with the following code:  env.jersey().register(new LoggingFeature(Logger.getLogger(""RequestResponse""), LoggingFeature.Verbosity.PAYLOAD_ANY));  wait for your response","closed","","maobulang","2016-11-14T06:57:23Z","2018-01-04T16:50:07Z"
"","2104","Multiple calls to SimpleServerFactory.configure()","When I run a dropwizard application, I see aforementioned [SimpleServerFactory.configure() ](http://bit.ly/2uaLo88) invoked a couple of times via      1. [EnvironmentCommand.java#L40](http://bit.ly/2uaGCY8) 2. [EnvironmentCommand.java#L44](http://bit.ly/2uaLZXq)  Following are the stack full stack traces for the paths leading up to [SimpleServerFactory.java#L141](http://bit.ly/2ub1FKm)  # Via  [EnvironmentCommand.java#L40](http://bit.ly/2uaGCY8) ``` ""main""@1 in group ""main"": RUNNING configure:141, SimpleServerFactory {io.dropwizard.server} run:40, EnvironmentCommand {io.dropwizard.cli} run:85, ConfiguredCommand {io.dropwizard.cli} run:74, Cli {io.dropwizard.cli} run:89, Application {io.dropwizard} main:12, Main {io.myapp} ```  # Via [EnvironmentCommand.java#L44](http://bit.ly/2uaLZXq)  ``` ""main""@1 in group ""main"": RUNNING configure:141, SimpleServerFactory {io.dropwizard.server} build:103, SimpleServerFactory {io.dropwizard.server} run:49, ServerCommand {io.dropwizard.cli} run:44, EnvironmentCommand {io.dropwizard.cli} run:85, ConfiguredCommand {io.dropwizard.cli} run:74, Cli {io.dropwizard.cli} run:89, Application {io.dropwizard} main:12, Main {io.myapp} ```  Perhaps, remove [this](http://bit.ly/2uaGLec) line or include it only if the configure has not been run already?","closed","","dsKarthick","2017-07-12T23:04:52Z","2018-02-19T17:59:56Z"
"","2280","Form parameters missing from Jersey client when gzip compression enabled.","When I make a web request, using the suggested Jersey client builder, to submit an urlencoded form, I get a 400 response back from my target telling me expected fields are missing  e.g.  ``` final Entity form = Entity.form(                 new Form()                         .param( ""grant_type"", ""client_credentials"" )                         .param( ""client_id"", config.getConsumerKey() )                         .param( ""client_secret"", config.getConsumerSecret() ) );  new JerseyClientBuilder(environment).using(config.getJerseyClientConfiguration())                                                               .build(getName())                                                               .target(config.getOauthAuthenticationAddress())                                                               .post( form, String.class ); ```  Causes a 400 response, 'missing parameter grant_type'  However making the same request from a client constructed using the default javax client builder works, as does disabling Gzip in the jersey client configuration e.g. ``` final JerseyClientConfiguration jerseyClientConfiguration = new JerseyClientConfiguration(); jerseyClientConfiguration.setGzipEnabledForRequests( false ); ```  This is using version 1.2.2 of drop-wizard.","closed","","aedwards-act","2018-02-20T16:21:02Z","2018-03-13T12:20:06Z"
"","1547","Silent failure to render view","When exception happens during rendering template it's being caught, logged with level debug and then a generic WebApplicationException rethrown. This causes the stack trace to be lost unless you run at debug level. The rethrown exception is not logged either which leads to a silent failure that we encoutered today in prod. Only trace left was a 500 reply in NGINX access log. I think that either the original exception should be logged at error, not debug level or the WebApplicationException should be created with the original exception as cause so that it gets logged.  See: https://github.com/dropwizard/dropwizard/blob/master/dropwizard-views/src/main/java/io/dropwizard/views/ViewMessageBodyWriter.java#L86","closed","","silvpol","2016-05-18T22:11:35Z","2016-05-18T22:15:49Z"
"","2175","Dropwizard passes soLingerTime to Jetty in seconds, while Jetty expects in milliseconds","When Dropwizard configures Jetty connector, it [passes configured soLingerTime in seconds](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java#L558), and Jetty after that [divides that value by 1000](https://github.com/eclipse/jetty.project/blob/jetty-9.4.x/jetty-server/src/main/java/org/eclipse/jetty/server/ServerConnector.java#L398) (assuming those were milliseconds). So when developers configures soLingerTime as 300s, it is actually passed as 0 to Jetty, which is wrong.","closed","bug,","mgtriffid","2017-10-17T07:06:16Z","2017-10-17T12:36:53Z"
"","1995","Unable to clone repository","When cloning the repo, git outputs the following: ``` git clone https://github.com/dropwizard/dropwizard.git Cloning into 'dropwizard'... remote: Counting objects: 123311, done. remote: Compressing objects: 100% (24/24), done. error: object 6fbf9def0293986beb2547a671f46148a5d2faf7: badDate: invalid author/committer line - bad date fatal: Error in object fatal: index-pack failed ```  Any relation to recent repo delete?","closed","","mmusnjak","2017-04-04T12:20:50Z","2017-04-04T13:13:37Z"
"","1831","ViewMessageBodyWriter eats exceptions, preventing the installed ExceptionMapper from mapping the exception","When an exception happens outside the view code, it can be mapped to something reasonable by the ExceptionMapper.  When an exception happens when rendering a view prior to prior to eaea76a37e9a5ac667b99cd81c46353034e8473d all exceptions, except FileNotFoundException where thown out of the writeTo method and thus available for handling by the ExceptionMapper.  After the change to ViewMessageBodyWriter, all Exceptions are eaten and in stead a WebApplicationException is thrown without the original exception and with content, so the ExceptionMapper is prevented from providing customized errors.  Would it be possible to make this behavior configurable, so the original exception is in stead wrapped in an IOException and thrown out of writeTo method?  Or would it be better to always throw the wrapped exception and let an ExceptionMapper handle it?","closed","","dren-dk","2016-11-17T12:48:28Z","2016-11-17T14:25:53Z"
"","1994","Request log async logging appender worker threads not stopped","When a Dropwizard  is stopped, most async appender  worker threads are stopped, but it seems the request log one isn't. Consider the below test case. If the lines adding `server.requestLog.appenders: []` are included, the testcase passes. If the reqestLog appender list is kept at the default, it fails. Threads for ordinary appenders are terminated (the printouts from `test` show that they exist before shutdown), but the request log one isn't.  This would not be that much of a problem normally, but it gets in the way of writing testcases that use Elasticsearch's `ESIntegTestCase` together with a `DropwizardAppRule`, as `ESIntegTestCase` is rather picky on thread cleanup.   ``` import static org.assertj.core.api.Java6Assertions.assertThat;  import java.io.File; import java.io.IOException; import java.nio.file.Files; import java.nio.file.StandardOpenOption; import java.util.Arrays;  import org.junit.AfterClass; import org.junit.BeforeClass; import org.junit.ClassRule; import org.junit.Rule; import org.junit.Test; import org.junit.rules.TemporaryFolder;  import io.dropwizard.Application; import io.dropwizard.Configuration; import io.dropwizard.setup.Environment; import io.dropwizard.testing.junit.DropwizardAppRule;  public class DropwizardThreadsIT {     @ClassRule     public static TemporaryFolder tmp = new TemporaryFolder();     static File configFile;      private static Thread[] beforeThreads;      @BeforeClass     public static void findThreads() throws IOException {         beforeThreads = new Thread[Thread.activeCount()];         Thread.enumerate(beforeThreads);     }      @BeforeClass     public static void writeConfig() throws IOException {         configFile = tmp.newFile();         Files.write(configFile.toPath(), (""server:\n""             + "" applicationConnectors:\n""             + "" - type: http\n""             + ""   port: 0\n""             + "" adminConnectors:\n""             + "" - type: http\n""             + ""   port: 0\n"" //            + "" requestLog:\n"" //            + ""  appenders: []""         ).getBytes(), StandardOpenOption.TRUNCATE_EXISTING);     }      @Rule     public DropwizardAppRule app = new DropwizardAppRule(         MyApp.class, configFile.getAbsolutePath()     );      public static class MyApp extends Application {         public MyApp() {}          @Override         public void run(             Configuration configuration, Environment environment         ) throws Exception {}     }      @Test     public void test() {         Thread[] threads = new Thread[Thread.activeCount()];         Thread.enumerate(threads);         Arrays.asList(threads).forEach(System.out::println);     }      @AfterClass     public static void checkThreads() {         Thread[] threadsAfter = new Thread[Thread.activeCount()];         Thread.enumerate(threadsAfter);         assertThat(beforeThreads).contains(threadsAfter);     } }  ```","closed","stale,","reftel","2017-04-01T20:41:36Z","2020-06-29T07:42:17Z"
"","2138","added @Priority(Priorities.AUTHENTICATION) to WebApplicationExceptionCatchingFilter","When `@Auth Optional` is used. Registered `WebApplicationExceptionCatchingFilter` has no Priority set up and in the result, filter is executed at the end of the filter chain.","closed","bug,","tmszdmsk","2017-08-28T19:51:25Z","2017-09-05T09:03:14Z"
"","2490","Update to jetty 9.4.12","What this PR entails:  - Update Jetty to latest (9.4.12) from (9.4.11) - Remove deprecated configuration knobs (blockingTimeout and soLingerTime) - Add minResponseDataRate  As for reasoning:  - Dropwizard should start with a clean slate with deprecations - soLingerTime was literally a noop and a warning, so it has been removed (and not replaced with an alternate method) - blockingTimeout has been rendered unnecessary (https://github.com/eclipse/jetty.project/issues/2525), and those interested in some sort rate limit  should see minResponseDataRate and minRequestDataRate (which was already part of 1.3.0 (https://github.com/dropwizard/dropwizard/pull/2184)) - Since minResponseDataRate was not present in our configuration, I added it, in case someone was using blockingTimeout in that fashion.  I'm torn on the what types minResponseDataRate / minRequestDataRate should be. They are currently numeric, but seeing just an `100` in a configuration file is not conducive to its meaning (number of bytes per second, as in if someone is sending less than `100` bytes per second, respond with a 408). I like how in https://github.com/dropwizard/dropwizard/pull/2384 we were able to use a `Duration` to convey how to throttle logging messages. I was looking into migrating to `Size` but I couldn't think of a descriptive name (and it would also be a breaking change), so I left it. But if we're going to make the switch from long to Size we should probably do it soon as the minRequestDataRate is a relatively new know (1.3.0), so it's usage may not be terribly widespread. (cc @patrox in case he has any thoughts on this)  ###### Result:  Closes #2480   Afterwards:  - [ ] update release notes - [x] write migration guide for removed configuration settings","closed","improvement,","nickbabcock","2018-09-14T23:33:16Z","2018-09-17T08:48:40Z"
"","2031","sessionDestroyed is not being called in latest DW version","We've upgraded the dw version and noticed that the sessionDestroyed in our internal event handler is not being called anymore.  I've reported this to jetty in the first place, they've tracked it down and finally noticed you are implementing a wrong Interface. Please see the issue I'Ve reported in the jetty repo here: https://github.com/eclipse/jetty.project/issues/1432#issuecomment-297665805  > So all dropwizard needs to do to make this work is to change RoutingHandler to respect the HandlerContainer interface.  I've also a testcase for you. http://www.orange-coding.net/dw_test.zip  build it with `mvn clean install -DskipTests`, afterwards go to ./target start it with `java -jar Test-1.2.0-SNAPSHOT.jar server` then point your browser to localhost:8080.  In the System.out, you'll see a CREATED (Session has been created) but no DESTROY. (Should appear after 10 seconds)","closed","bug,","orangecoding","2017-04-27T10:33:08Z","2017-04-28T03:01:11Z"
"","2380","registerDefaultExceptionMappers: false still maps ValidationExceptionMapper","We've configured Dropwizard not to register default exception mappers by setting `registerDefaultExceptionMappers: false` in the `yml` file. However it's still mapping `org.glassfish.jersey.server.validation.internal.ValidationExceptionMapper` and is messing with our catch-all exception handler.  Why is this not excluded and is there a way to remove it?","closed","","andrewoh531","2018-06-08T12:05:58Z","2019-12-26T19:27:12Z"
"","2461","Bad Gateway (502) error on Dropwizard 1.3.x","We're trying to upgrade the Dropwizard version from 1.2.x to 1.3.x. Our services are deployed on AWS EBS, with nginx as LB proxy. When changing the pom.xml dependency and deploying, we're starting to see, occasionally, ""Bad Gateway"" errors returned from nginx. They're happening randomly, not at the same tests, and not all the time, but every 2-3 builds. Usually in relatively heavy POST requests sending PDF content.  The nginx log shows errors like: 2018/08/14 05:03:07 [error] 12897#0: *11330 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: 10.30.xx.xx, server: , request: ""POST /some_url HTTP/1.1"", upstream: ""http://127.0.0.1:8080/some_url"", host: ""some_host.local""  2018/08/14 07:37:02 [error] 18575#0: *13099 writev() failed (104: Connection reset by peer) while sending request to upstream, client: 10.30.xx.xx, server: , request: ""POST /some_url HTTP/1.1"", upstream: ""http://127.0.0.1:8080/some_url"", host: ""some_hostname""  We suspected jetty version, but the errors happens on version 1.3.5 and NOT on 1.2.8 although they're using the same jetty version. If you have any explanations, ideas, missing configuration that we should have added except for just replacing the version in the pom file - please instruct us.","closed","","usulkies","2018-08-19T13:43:31Z","2018-11-14T01:40:43Z"
"","1691","Size based rollover logging broken in 1.0.0","We use size based rollover logging in DW. After upgrading to 1.0.0, no log files are produced at all. I have recreated the problem with a completely basic app (pretty much from the Getting Started example).   The following configuration file will result in NO logging whatsoever:  ``` server:   type: simple   connector:     type: http     port: 9090  logging:   level: TRACE   appenders:     - type: file       currentLogFilename: ./logs/example.log       archivedLogFilenamePattern: ./logs/example.%i.log.gz       archivedFileCount: 5       maxFileSize: 1KB ```  I have found that changing the archivedLogFilenamePattern to the following will cause logging to work again: `archivedLogFilenamePattern: ./logs/example.%d.%i.log.gz`  So adding a size and time based rolling policy works, but it is not exactly what we wanted. A purely time based rolling policy also works fine.  I attempted to recreate the problem with logback only, but was not able to. So I suspect the problem lies in io.dropwizard.logging.FileAppenderFactory.buildAppender.","closed","","oddmar","2016-08-15T16:40:14Z","2016-08-15T20:12:37Z"
"","1926","Create 1.0.0 to 1.1.0 Migration Guide","We should create a 1.0.x to 1.1.0 migration guide. Here are some things I've come across.  - Due to https://github.com/dropwizard/dropwizard/pull/1851, users must now add mockito as a test dependency  ```xml      org.mockito     mockito-core     2.7.6     test  ```  Else become susceptible to the following error:  ``` java.lang.NoClassDefFoundError: org/mockito/Mockito ```  - Due to https://github.com/dropwizard/dropwizard/pull/1695, `Cli` no longer allows exceptions to propagate, (which is a net positive), but I did have to rewrite my tests to no longer trap for exceptions but examine stderr.","closed","documentation,","nickbabcock","2017-02-13T17:05:03Z","2017-03-23T11:56:14Z"
"","1834","Add  integration tests for request logs","We recently had several reports about issues with request logging. It would be great to have some integration tests which verify that Dropwizard produces correct request logs. This should allow to us to catch errors with it more early and not let our users down.","closed","improvement,","arteam","2016-11-18T16:28:09Z","2016-11-18T18:36:05Z"
"","2205","Add `@Nullable` annotations or initialize nonnull fields","We now run a static analyzer during our build (#2204) which helps us to catch NPE during compilation. To make it work, we should annotate actual nullable fields with the `@Nullable` annotation, otherwise the analyzer will always consider such fields as non-null by default and will report violations when a null value is assigned to them.","closed","improvement,","arteam","2017-11-12T20:23:07Z","2017-11-13T13:39:41Z"
"","1739","Add Windows CI via AppVeyor","We need a windows ci runner, as many of my commits deal with fixing broken windows builds. These, ideally, should be fixed before a PR is merged. Since I'm most familiar with AppVeyor, I decided to go with them -- it was pretty simple, add `appveyor.yml` file to invoke maven.  Some notes: - Something was going on with H2 where the same table existed when on setup, so I modified the tests to create the table if not already existing. - I enabled the CI on my fork, and [this CI run](https://ci.appveyor.com/project/nickbabcock/dropwizard/build/1.0.5) would have caught the #1699 issue before #1678 was merged. - To test, I reverted mentioned pull request and the [CI does pass](https://ci.appveyor.com/project/nickbabcock/dropwizard/build/1.0.4)  We'll have to add AppVeyor as a trusted integration, like we do with Travis. I haven't checked if I have permission to do so.","closed","improvement,","nickbabcock","2016-09-23T17:51:53Z","2016-09-24T19:41:41Z"
"","1801","Request logging through syslog broken in DW1.0?","We have been using the following snippet to log requests through syslog: ``` # Listeners server:   applicationConnectors:     - type: http       port: 6720   adminConnectors:     - type: http       port: 6721   requestLog:     appenders:       - type: syslog         threshold: ALL         logFormat: ""app-ms %msg"" ```  This was still working fine in DW0.9.2. After upgrading to DW1.0.2 the requests are no longer getting logged through syslog; the regular application logging through syslog is still working fine.  Do we have to make some configuration changes?","closed","bug,","wilbertpol","2016-11-04T13:24:20Z","2016-11-15T15:59:45Z"
"","1736","Need to be able to use custom HK2 ServiceLocator for Spring integration","We have been one of the early adopters of DW and been using it in production for over 3 years. However, we are stuck on 0.7 and cannot move to a higher version.  The reason for this is the *******\* HK2 DI that Jersey 2 introduced (and DW adopted in 0.8). It just refuses to play nice with the our Spring context that we use everywhere for DI.  We've had 2 senior architects spend 3 weeks trying to get it to work and HK2 fails to play nicely with Spring no matter what. It wants to @Inject its own beans into our JAX-RS classes, even though those are existing Spring beans and have already been injected with existing Spring beans.  The only solution seems to write a custom HK2 service locator that just fetches the beans directly from Spring and hope that works.  However, Dropwizard seems to offer no API to allow defining a custom ServiceLocator in HK2 to override the default one.  If we cannot get this to work, we cannot be stuck on 0.7 and will be faced with the difficult choice of moving to a different platform...which we would hate, since we all love Dropwizard.  Help please :-/","closed","","jacek99","2016-09-22T15:16:06Z","2018-06-24T22:20:24Z"
"","1872","Cannot use parameter @Auth in parent resource","We have a root/parent resource ""Users"", and a sub-resource ""Vehicles"". For example: `/users//vehicles` will return the vehicles of the given user.  But before letting sub-resource ""Vehicles"" handle the request, we want to check if the currently authenticated user has access to data of the given user. The reason is that there will be more than one endpoint in ""Vehicles"", and we would like to have one centralised access check in the parent resource ""Users"", instead of having to check in every endpoint of sub-resource ""Vehicles"".  But when using the @Auth parameter in the parent resource, like so (`@Auth User authedUser`): ``` @Path(""{userId}/vehicles"") @RolesAllowed(Role.USER) public Class getVehicles(@Auth User authedUser, @PathParam(""userId"") Long userId) {     return VehiclesResource.class; } ``` the following exception is thrown: `java.lang.IllegalStateException: Cannot inject a custom principal into unauthenticated request`  Is there a way to check the authenticated user in the parent resource?","closed","stale,","parkdcom","2017-01-09T15:58:31Z","2020-04-08T21:41:45Z"
"","1712","SOAP Service Client framework","We have a requirement to consume SOAP services. Can you please advise, which framework we should use with dropwizard to write SOAP service client?","closed","","rpawarmca","2016-08-29T22:02:30Z","2019-07-22T07:19:02Z"
"","1812","Custom appender for requestLog not working in 1.0.3","We have a custom appender (it uses the logstash-encoder) to output logs in json.  This is working fine for:  logging:   appenders:     - type: console     - type: logstash-file       threshold: TRACE       customFields: '{""service-name"":""ms-iam""}'       currentLogFilename: log/application-json.log       archivedLogFilenamePattern: log/application-json-%d{yyyy-MM-dd}-%i.log.gz       archivedFileCount: 7       timeZone: Europe/Oslo       maxFileSize: 10MB  However, when we try and add it to requestLog, no logging appears in the request log file.  Are custom appenders not supported for the requestLog?  server:     requestLog:     appenders:     - type: console     - type: logstash-file       threshold: TRACE       currentLogFilename: log/access-json.log       archivedLogFilenamePattern: log/access-json-%d{yyyy-MM-dd}-%i.log.gz       archivedFileCount: 7       maxFileSize: 10MB","closed","","matthewjsummers","2016-11-10T13:21:56Z","2016-11-15T13:04:33Z"
"","2523","DropwizardTestSupport should clean system properties (config overrides) on service startup failure","We had a few test classes using both `DropwizardAppRule` and `DropwizardClientRule` (`DropwizardClientRule` around `DropwizardAppRule`). The service started by the `DropwizardAppRule` would fail on startup because of some environment problem. The _config override_ properties would stick around for the following tests causing unexpected behavior.  The problem seems to be that in the `before` method, overrides are set as system properties but are not cleaned/reset in case the service fails to start.  ```java import com.fasterxml.jackson.annotation.JsonProperty; import io.dropwizard.Application; import io.dropwizard.Configuration; import io.dropwizard.setup.Environment; import io.dropwizard.testing.ConfigOverride; import io.dropwizard.testing.DropwizardTestSupport; import io.dropwizard.testing.ResourceHelpers; import org.junit.Test; import org.junit.runners.model.Statement;  import static junit.framework.TestCase.assertNull;  public class IntTestReproduce {      @Test     public void dropwizardTestSupportShouldCleanSystemPropertiesOnServiceStartupFailure() {         assertNull(System.getProperty(""dw.dummyProperty""));          final DropwizardTestSupport testSupport = new DropwizardTestSupport<>(TestService.class,                         ResourceHelpers.resourceFilePath(""config.yml""),                         ConfigOverride.config(""dummyProperty"", ""dummy""));          try {             testSupport.before();         } catch (Exception e) {             // expected since the service will throw on startup         }          // Since ExternalResource will not call `after()` on exception, maybe DropwizardTestSupport should         // clean system properties. Otherwise the properties stick around and might affect the following tests.         assertNull(String.format(""System property is not null. The value is [%s]"",                 System.getProperty(""dw.dummyProperty"")),                 System.getProperty(""dw.dummyProperty""));     }      public static class TestService extends Application {          @Override         public void run(TestConfiguration testConfiguration, Environment environment) throws Exception {             throw new RuntimeException(""fail"");         }      }     public static class TestConfiguration extends Configuration {          private String dummyProperty;         @JsonProperty(""dummyProperty"")         public String getDummyProperty() {             return dummyProperty;         }          public void setDummyProperty(String dummyProperty) {             this.dummyProperty = dummyProperty;         }      }      private static final Statement TEST_STATEMENT = new Statement() {         @Override         public void evaluate() {          }     }; } ```","closed","bug,","coderunner","2018-10-05T20:19:19Z","2019-02-12T13:57:22Z"
"","1849","Log when application was gracefully stopped","We currently ran into an issue with some of our `io.dropwizard.lifecycle.Managed` objects taking quite long to stop. When deploying, we kill the java process if it doesn't gracefully stop after some time. It took us some time to figure out, that the application did not stop gracefully.  So we increased the time to wait, until we treat the application as unstoppable. Then we checked the logs for the managed objects to figure out, if everything was stopped properly. Later, we added a dummy managed object as the first managed object, which just logs that it was stopped. Since it's the first one, it will be stopped last. So if it logs something, everything else was stopped properly.  What would have really helped in our situation (and would not be as hacky as adding the dummy managed object), would be a final log statement (similar to `io.dropwizard.server.ServerFactory:  Starting myApplication`) which is logged at the very end of the application's lifetime (after all managed instances were stopped).  What do you think about that? If this feature is something you guys wish to have, just point me into a direction and I'll provide a PR.","closed","","scho","2016-12-09T08:58:37Z","2016-12-13T13:21:21Z"
"","1629","How to add provider for authenticator in  ResourceTestRule ?","We are trying to upgrade dropwizard 0.8.2 to 1.0.0.rc3, but original integration tests do not work any more.   When we use dropwizard 0.8.2, we add authenticator provider like below.  ``` ResourceTestRule.builder().addProvider(AuthFactory.binder(new BasicAuthFactory<>(new UserAuthenticator(userStore, userOrganizationDAO), """", AuthenticatedUser.class))) ```  In 1.0.0.rc3, class AuthFactory has been removed, my question is how to do the same thing against the version 1.0.0.rc3 ? thank you.","closed","","bruce-genhot","2016-07-11T09:32:03Z","2016-07-11T13:16:54Z"
"","1748","Could not retrieve/persist child entity !!!","We are migrating spring boot rest service to drop wizard rest service. also we are using Mongo DB with Jackson. In a Entity(parent) we are Associating a child entity, But we could not Save/Retrieve the child object using ""DBRef addreddData;""  While retrieving the Json response is shown below, {   ""id"": ""57eb58a0cb101eff0cefec9f"",   ""userid"": ""13"",   ""username"": ""johnbecker"",   ""password"": ""pass1234"",   ""firstname"": ""John"",   ""lastname"": ""Becker"",   ""addreddData"": {     ""id"": {       ""time"": 1475041440000,       ""new"": false,       ""inc"": 217050270,       ""timeSecond"": 1475041440,       ""machine"": -888135937     },     ""collectionName"": ""address"",     ""collectionKey"": {       ""name"": ""address"",       ""type"": ""model.AddressData"",       ""keyType"": ""java.lang.String""     }   } }  Similarily while saving Parent entity is persisting instead child entity is empty even though we are passing proper input JSON {     ""userid"": ""13"",     ""username"": ""johnbecker"",     ""password"": ""pass1234"",     ""firstname"": ""John"",     ""lastname"": ""Becker"",     ""addreddData"": {         ""addressid"": 13,         ""city"": ""Delhi"",         ""country"": ""India"",         ""state"": ""Delhi"",         ""street"": ""9th main road""     } `}`  My Parent Entity : `import org.hibernate.validator.constraints.NotEmpty;  import net.vz.mongodb.jackson.DBRef; import net.vz.mongodb.jackson.Id; import net.vz.mongodb.jackson.MongoCollection; import net.vz.mongodb.jackson.ObjectId;  @MongoCollection(name = ""user"") public class UserData {  ``` @Id @ObjectId public String id;  @NotEmpty public String userid;  @NotEmpty public String username;  @NotEmpty public String password;  @NotEmpty public String firstname;  @NotEmpty public String lastname;  @ObjectId public DBRef addreddData; ```  }`  My Child Entity :  `import org.hibernate.validator.constraints.NotEmpty;  import net.vz.mongodb.jackson.Id; import net.vz.mongodb.jackson.MongoCollection; import net.vz.mongodb.jackson.ObjectId;  @MongoCollection(name = ""address"") public class AddressData {  ``` @Id @ObjectId public String id;  @NotEmpty public int addressid;  @NotEmpty public String street;  @NotEmpty public String city;  @NotEmpty public String state;  @NotEmpty public String country; ```  }`  Please suggest some solution for retrieving/persisting the record in child object.","closed","","princevijayakumar","2016-09-28T08:03:40Z","2017-02-07T18:31:16Z"
"","1988","Consider making DropwizardSlf4jRequestLog.java public?","We are doing some customizations on the top of the LogbackClassicRequestLogFactory class. Is it possible to make DropwizardSlf4jRequestLog public instead of package private?","closed","","qinfchen","2017-03-29T19:39:58Z","2017-04-07T20:46:14Z"
"","2353","@NotEmpty fields in config break the configuration","We are building a Core library on top of dropwizard, it provides some default, basic values for configurations, and allow to specific service to override them.    We got several breaking changes after https://github.com/dropwizard/dropwizard/commit/207c3cbc98131463bc28cbf6cab814f44af1ece2#diff-e5126a75b90a2bf1ce64a60b923c8eadR343  For example: ``` -    @NotNull	 -    private String driverClass = null;  +    @NotEmpty +    private String driverClass = """"; ```  driverClass has an empty string in Core config. But now, a specific service which don't use database, cannot validate the config, until provides some dummy value.  Of course, we can find a workaround for this, just want to point your attension to our usecase.  Maybe, it worth to not be so strict with validation rules.","closed","stale,","krutsko","2018-05-10T12:41:37Z","2019-08-19T14:02:12Z"
"","2103","Handle badly formed 'Accept-Language' headers (#2097)","ViewMessageBodyWriter::detectLocale will now catch `HeaderValueException`s thrown when retrieving the languages from the headers and return a `400 - Bad Request` to clients instead of a server error.  The issue (#2097) talked about using the default locale in that case, but I don't agree. Not my decision in the end though, I can change this to use the default locale if you guys prefer this.","closed","bug,","FredDeschenes","2017-07-12T15:19:59Z","2019-03-12T13:58:16Z"
"","2198","Add tests for instrumenting admin tasks","Verify that instrumentation of tasks works and the measurements are added to the Dropwizard's 'MetricRegistry'.","closed","improvement,","arteam","2017-11-10T16:17:20Z","2017-11-10T20:30:22Z"
"","1961","Merge pull request #1 from dropwizard/master","v1.1.0-rc2","closed","","gaojun301","2017-03-14T03:37:04Z","2017-03-14T09:28:19Z"
"","2374","UUIDParam not checking structure of input","UUIDParam appears to be passing the String representation directly through to the UUID.fromString method, which does not validate its input.  This allows clients to supply an invalid value which should be rejected.  We can verify the behaviour of UUID.fromString as follows:    UUID originalUuid = UUID.randomUUID();   UUID mutatedUuid = UUID.fromString(originalUuid + ""1234"");   assertEquals(originalUuid.toString(), mutatedUuid.toString());","closed","","StephenSouness","2018-05-31T14:13:22Z","2018-06-10T16:20:37Z"
"","2126","Content-Encoding response header is not set when set using FilterChain","Using the following version:  ```      io.dropwizard     dropwizard-core     1.1.2  ``` Our service is not able to add to Response Headers the header for Content-Encoding.   The `GzipFilter` class we added is as:  ``` import javax.servlet.*; import javax.servlet.http.HttpServletResponse; import java.io.IOException;  public class GzipFilter implements Filter {     public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)             throws IOException, ServletException {         HttpServletResponse response = (HttpServletResponse) res;         response.setHeader(""Content-Encoding"", ""gzip"");         chain.doFilter(req, res);     }      public void init(FilterConfig filterConfig) {     }      public void destroy() {     } } ```  and the configuration for `OurService extends Application` is as:   ``` @Override public void run(OurServiceConfig config, Environment environment) throws Exception {     Injector injector = createInjector(config, environment);     environment.jersey().register(injector.getInstance(StatsResource.class)); // Some resource      environment.servlets().addFilter(""Gzip-Filter"", GzipFilter.class)             .addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, ""/*""); } ```  The issue is, we don't get the **Content-Encoding: gzip** in our response headers.  Just to add to the note, tried this with `dropwizard-core:1.2.0-rc1` and the behavior is same.","closed","","namannigam-zz","2017-08-04T11:17:24Z","2017-08-09T05:23:45Z"
"","1618","Strings are not serialized as JSON by correctly","Using the following server on 1.0.0-rc3:  ``` import io.dropwizard.Application; import io.dropwizard.Configuration; import io.dropwizard.setup.Environment;  import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces; import javax.ws.rs.core.MediaType;  public class Main extends Application {   public static void main(String[] args) throws Exception {       new Main().run(args);   }      @Override     public void run(Configuration configuration, Environment environment) throws Exception {         environment.jersey().register(new TestResource());     }      @Path(""/"")     public static class TestResource {          @Path(""json-test"")         @Produces(MediaType.APPLICATION_JSON)         @GET         public String ping() {             return ""pong"";         }     } } ```  I can do the following curl:  ``` $HTTP/1.1 200 OK Date: Sat, 02 Jul 2016 21:48:25 GMT Content-Type: application/json Vary: Accept-Encoding Content-Length: 4  pong%                                                                                                                                                          ```  I think there should be quotes around `pong` to make it well-formed JSON.","closed","","leeavital","2016-07-02T21:51:17Z","2016-07-27T20:18:20Z"
"","2164","Applying EP transformation using Rascal","Using Rascal Software retrieved from https://github.com/refactoring-towards-language-evolution/rascal-Java8. EP transformation was applied and the result was the following log:  - Number of files:  786 - Processed Files: 4 - Exported Files:   4 - Total of files changed: 4 - Total of transformations: 4 - Errors: 15","closed","","jmarcelonunes","2017-09-30T00:03:23Z","2017-10-02T12:46:59Z"
"","1821","sayHello() in the Getting Started/Resource class doesn't work out of the box","Using Java 1.8, I can't get this method to compile: ```     public Saying sayHello(@QueryParam(""name"") Optional name) {         final String value = String.format(template, name.orElse(defaultName));         return new Saying(counter.incrementAndGet(), value);     } ```  I get incorrect parameter type errors on QueryParam, it doesn't matter if I'm using Java.util.Optional or google's Optional.  I found this SO post but it didn't fix the issue for me: http://stackoverflow.com/questions/27757877/simple-dropwizard-0-7-1-app-failing-over-optional-queryparam-w-java-8","closed","","ghost","2016-11-15T06:00:15Z","2016-11-15T22:14:29Z"
"","1565","General Code Improvements","Using Intellij automated tools refactored some of the code. No behavior was changed (ie, no streams) - Replace tabs with spaces - Remove redundant type operations - Prefer `Optional.empty` to `Optional.ofNullable(null)` - Prefer try-with-resources - Prefer lambdas to anonymous classes - Simplify if conditionals - Optimize imports","closed","improvement,","nickbabcock","2016-05-27T02:07:06Z","2016-05-27T17:04:21Z"
"","1981","Add setting system/default timezone in logging configuration","Users should have the ability to use the system timezone in the logging configuration. It allows administrators to take advantage of the operation system/JVM time zone management tools and use the same configuration for Dropwizard applications in different time zones.  Resolves #1980.","closed","improvement,","arteam","2017-03-24T10:04:29Z","2017-03-27T15:24:42Z"
"","2105","Remove unnecessary use of varargs methods","Use `mapper#registerModule(Module)` instead of `mapper#registerModules(Modules...)` in `Jackson#configure(ObjectMapper)`.","closed","","Xaerxess","2017-07-14T08:43:16Z","2017-10-03T11:29:23Z"
"","2285","1.3.0-rc3 and newer has breaking dependency changes","Upgrading to metrics 4.0.2 in rc3 has breaking collision. We're using cassandra-driver-core 3.4.0 and it's based on metric 3.2.2. Is it's possible to move 1.3.x release to metrics5 ?  Stack trace: INFO  [2018-02-27 16:46:59,196] com.datastax.driver.core.NettyUtil: Did not find Netty's native epoll transport in the classpath, defaulting to NIO. java.lang.NoClassDefFoundError: com/codahale/metrics/JmxReporter     at com.datastax.driver.core.Metrics.(Metrics.java:113)     at com.datastax.driver.core.Cluster$Manager.init(Cluster.java:1467)     at com.datastax.driver.core.Cluster.init(Cluster.java:159)     at com.datastax.driver.core.Cluster.connectAsync(Cluster.java:330)     at com.datastax.driver.core.Cluster.connect(Cluster.java:280)  Referencing: https://github.com/dropwizard/metrics/issues/1248","closed","","phambryan","2018-02-28T03:22:43Z","2018-02-28T07:53:16Z"
"","1665","ValidationMethod in dropwizard 1.0.0","Upgrading dropwizard from 0.9.1 to 1.0.0. makes @ValidationMethod annotation stop working! any idea about this ?","closed","","ghost","2016-08-03T07:49:21Z","2016-08-04T13:11:15Z"
"","1868","Upgrade to Errorprone 2.0.15","Upgrade to Errorprone 2.0.15 split out from #1865.","closed","","joschi","2016-12-29T16:29:14Z","2017-01-13T15:11:47Z"
"","2113","Update Jetty to address CVE-2017-9735","Update Jetty version(s) used by Dropwizard in order to address [CVE-2017-9735](https://nvd.nist.gov/vuln/detail/CVE-2017-9735):  > Jetty  through 9.4.x is prone to a timing channel in util/security/Password.java, which makes it easier for remote attackers to obtain access by observing elapsed times before rejection of incorrect passwords.  See: eclipse/jetty.project/issues/1556  Fixed by * jetty-9.4.6.v20170531 * jetty-9.3.20.v20170531 * jetty-9.2.22.v20170606","closed","","msymons","2017-07-30T14:17:40Z","2017-07-31T12:40:47Z"
"","2118","Update Jetty to 9.4.6.v20170531","Update Jetty version from 9.4.5.v20170502 to jetty-9.4.6.v20170531 to address CVE-2017-9735 per #2113","closed","improvement,","msymons","2017-07-30T16:57:55Z","2017-07-30T23:34:05Z"
"","2117","Update 1.1.x branch Jetty  to 9.4.6.v20170531","Update Jetty version from 9.4.5.v20170502 to 9.4.6.v20170531 to address CVE-2017-9735 per #2113","closed","security,","msymons","2017-07-30T16:51:11Z","2017-07-31T11:43:05Z"
"","2115","Update 1.1.x branch Jetty  to 9.4.5.v20170502","Update Jetty version from 9.4.5.v20170502 to 9.4.6.v20170531 to address CVE-2017-9735 per #2113","closed","","msymons","2017-07-30T16:32:05Z","2017-07-30T16:40:37Z"
"","2116","Update 1.0.x branch jetty to 9.3.20.v20170531","Update Jetty version from 9.3.9.v20160517 to 9.3.20.v20170531 to address CVE-2017-9735 per #2113","closed","security,","msymons","2017-07-30T16:45:49Z","2017-07-31T09:21:50Z"
"","2114","Update 1.0.x branch jetty to 9.3.20.v20170531","Update Jetty version from 9.3.9.v20160517 to 9.3.20.v20170531 to address CVE-2017-9735 per #2113","closed","","msymons","2017-07-30T16:25:32Z","2017-07-30T16:39:11Z"
"","1555","Update README.md","update jar name as defined in pom.xml:    1.0.0-rc3-SNAPSHOT, otherwise jar wont be found!","closed","","mabuthraa","2016-05-23T06:35:02Z","2016-05-23T07:44:33Z"
"","2088","Update jackson to 2.8.9","Update jackson version from 2.8.8 to 2.8.9 to address Deserializer security vulnerability, per #2085 vulnerability is also fixed in jackson 2.9.0.pr3.    (see #2057)","closed","","msymons","2017-06-26T18:52:53Z","2017-06-26T21:00:11Z"
"","2086","Update 1.1.x branch jackson to 2.8.9","Update jackson version from 2.8.7 to 2.8.9 to address Deserializer security vulnerability, per #2085","closed","security,","msymons","2017-06-26T18:35:56Z","2017-07-30T13:59:26Z"
"","2087","Update 1.0.x branch jackson to 2.7.9.1","Update jackson version from 2.7.8 to 2.7.9.1 to address Deserializer security vulnerability, per #2085","closed","security,","msymons","2017-06-26T18:43:49Z","2017-07-30T14:00:00Z"
"","1951","Support configuring FileAppender#bufferSize.","Update FileAppenderFactory to support configuration of the FileAppender#bufferSize setting. Introduced in logback 1.1.10, this setting is reported to reduce thread contention in logging performance tests.","closed","improvement,","pkwarren","2017-03-07T14:27:58Z","2017-03-23T07:19:07Z"
"","1808","Update DropWizard 1.0.x to Jersey 2.23.2.","Update DropWizard 1.0.x to the latest patch release of Jersey 2.23 in order to pick up HK2 fixes from HK2 2.5.  Fixes #1807.","closed","improvement,","pkwarren","2016-11-08T18:38:35Z","2016-11-09T16:21:36Z"
"","1572","Add Resource Bean Validation","Update ConstraintMessage.isRequestEntity to be resilient against exceptions by using the `Iterables.get` method which accepts a default value. This is required in case the property path contains fewer than 2 items.","closed","","pkwarren","2016-05-29T18:17:23Z","2016-05-30T15:25:08Z"
"","1615","Use LoadingCache in CachingAuthenticator.","Update CachingAuthenticator to use a LoadingCache instead of a Cache, which will allow multiple concurrent requests to the cache for an uncached value to only result in one call to the authenticator. The current behavior to not cache invalid credentials is preserved.","closed","improvement,","pkwarren","2016-06-29T19:46:31Z","2016-07-27T12:43:17Z"
"","2069","Add time zone to Java 8 datetime mappers","Unless I'm missing something this seems like a bug. I ran into it today while playing with JDBI.  Is there a good reason to keep around the default constructor? It looks like it is only used in tests right now. Those could easily pass an empty optional and get the same result, and that would have made this impossible to miss.","closed","bug,","scottaj","2017-06-06T05:26:59Z","2017-08-23T22:59:16Z"
"","1864","Upgrade tomcat-jdbc to 8.5.9","Unfortunately, the tomcat-jdbc project doesn't provide own release notes, but you can find the changelog for the Tomcat project here: (you can see the `tomcat-jdbc` section): https://tomcat.apache.org/tomcat-8.0-doc/changelog.html. The list of commits here: https://github.com/apache/tomcat/commits/trunk/modules/jdbc-pool  The biggest feature which  is an additional statistic for the connection pool plus some bugfixes for handling various timeouts.","closed","improvement,","arteam","2016-12-22T07:53:23Z","2016-12-24T17:35:10Z"
"","2530","Dropwizard-example at master doesn't work","Unable to find 2.0.0-rc1-SNAPSHOT in maven repository","closed","","charbonnier666","2018-10-17T07:36:07Z","2018-10-17T08:00:27Z"
"","1830","Fix configPath in DropwizardTestSupport could only be file","trying to fix #1709","closed","bug,","aeolus","2016-11-16T23:20:21Z","2019-03-03T13:17:08Z"
"","2255","Using maven-jlink-plugin with Dropwizard 1.3.0rc5 fails due to transitive dependencies","Tried building the `dropwizard-example` repo with the [maven-jlink-plugin](https://maven.apache.org/plugins/maven-jlink-plugin/) out of curiosity and it fails with:  `[ERROR] Failed to execute goal org.apache.maven.plugins:maven-jlink-plugin:3.0.0-alpha-1:jlink (default-jlink) on project dropwizard-example: The given dependency ~/.m2/repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.0.1.Final/jboss-transaction-api_1.2_spec-1.0.1.Final.jar does not have a module-info.java file. So it can't be linked. -> [Help 1]`  This seems to be a transitive dependency:      mvn dependency:tree     [INFO] +- io.dropwizard:dropwizard-hibernate:jar:1.3.0-rc5-SNAPSHOT:compile                                    [INFO] |  +- io.dropwizard:dropwizard-db:jar:1.3.0-rc5-SNAPSHOT:compile                                        [INFO] |  |  \- org.apache.tomcat:tomcat-jdbc:jar:8.5.24:compile                                               [INFO] |  |     \- org.apache.tomcat:tomcat-juli:jar:8.5.24:compile                                            [INFO] |  +- com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:jar:2.9.3:compile                      [INFO] |  +- com.github.arteam.jadira:usertype.core:jar:6.0.1.GA-jdk9:compile                                  [INFO] |  |  +- org.hibernate:hibernate-entitymanager:jar:5.2.1.Final:compile                                  [INFO] |  |  \- com.github.arteam.jadira:usertype.spi:jar:6.0.1.GA-jdk9:compile                                                                                                                                           [INFO] |  \- org.hibernate:hibernate-core:jar:5.2.12.Final:compile                                             [INFO] |     +- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.0.Final:compile                  [INFO] |     +- antlr:antlr:jar:2.7.7:compile                                                                  [INFO] |     +- org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:jar:1.0.1.Final:compile  Which seems to have [fixed the problem](https://github.com/jboss/jboss-transaction-api_spec/pull/5) and made a new release with the tag `jboss-transaction-api_1.2_spec-1.1.1.Final`.  Is this something dropwizard want to fix before making an official 1.3.0 release?","closed","stale,","rbjorklin","2018-02-01T11:00:13Z","2019-08-19T14:02:21Z"
"","2396","Remove Joda Time in 2.0.0?","Tracking issue for 2.0.0 milestone to consider replacing joda-time with `java.time`.  See previous discussion in #1486.  threeten-extra for missing features: http://www.threeten.org/threeten-extra/ SO write-up on differences: https://stackoverflow.com/a/24635657/4092025 Time library comparison: http://time4j.net/tutorial/appendix.html","closed","stale,","rbjorklin","2018-06-16T09:26:21Z","2019-08-19T14:02:10Z"
"","2097","Malformed Accept-Language header causes server error (dropwizard-views)","To reproduce:      curl -H 'Accept-Language:;' localhost:8080/some_view  This returns an HTTP 500 and dumps a stack trace to the app's server log.  It happens because `HttpHeaders.getAcceptableLanguages()`, as called by `ViewMessageBodyWriter.detectLocale()` can throw a `HeaderValueException`.  I think a ""permissive"" approach probably makes sense here: catch the exception and just fall back to the default `Locale` if the header is malformed.","closed","","BenScholl","2017-07-07T12:02:13Z","2017-08-24T07:47:01Z"
"","2022","Merge pull request #1 from dropwizard/master","to 1.2.0-shotnap","closed","","gaojun301","2017-04-23T15:40:46Z","2017-04-23T16:06:25Z"
"","2363","Merge pull request #1 from dropwizard/master","to 1.1.0-rc2  ###### Problem:   ###### Solution:   ###### Result:","closed","","gaojun301","2018-05-20T17:12:22Z","2018-05-20T17:12:52Z"
"","2109","Merge pull request #1 from dropwizard/master","to 1.1.0-rc2","closed","","gaojun301","2017-07-23T17:40:40Z","2017-07-23T17:57:40Z"
"","2108","Merge pull request #1 from dropwizard/master","to 1.1.0-rc2","closed","","gaojun301","2017-07-23T17:35:39Z","2017-07-23T17:55:28Z"
"","1650","Update request log docs","timeZone is now a member of appenders.","closed","documentation,","tjcutajar","2016-07-27T17:23:00Z","2016-07-27T19:22:35Z"
"","1685","Make GZipHandler sync-flush configurable #1673","This would resolve #1673 by making sync-flush behaviour of GZipHandler configurable","closed","improvement,","LeDominik","2016-08-12T09:05:07Z","2017-03-22T09:41:30Z"
"","2186","Use InstrumentedQueuedThreadPool for admin endpoint","This will allow to monitor the usage of the thread pool which is used to handle the requests landing at admin endpoint.  Closes #2179.","closed","improvement,","patrox","2017-10-26T11:22:32Z","2017-10-26T15:06:49Z"
"","1765","Avoid needlessly binding 8080 and 8081 in tests","This way I can have a default dropwizard app I'm testing and still run all of dropwizard's tests.","closed","improvement,","nickbabcock","2016-10-07T14:27:04Z","2016-10-07T18:16:41Z"
"","1545","Jackson NoSuchMethodError When Building","This was working fine last week, but coming back to do a new build yesterday, I now get some error business when the Test target is hit.    `java.lang.NoSuchMethodError: com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;`  Any ideas?","closed","","ezweave","2016-05-12T20:41:31Z","2016-05-15T13:05:29Z"
"","2046","fixed error of not using given factory in JsonConfigurationFactory","This was an oversight on my part in the JsonConfigurationFactory. I created a new JsonParser like the YamlConfigurationFactory does. But it is better to use the one given in the ObjectMapper because the user might have changed the settings of this one in the bootstrapping phase.","closed","bug,","manuel-hegner","2017-05-04T15:57:04Z","2017-06-08T18:24:35Z"
"","1913","added run from root directory for maven command in example readme","This small addition should reduce the confusion that caused the following issues: https://github.com/dropwizard/dropwizard/issues/1760, https://github.com/dropwizard/dropwizard/issues/1510","closed","documentation,","zalberico","2017-02-02T19:03:52Z","2017-02-02T19:20:29Z"
"","2160","Update documentation for checkConnectionOnConnect","This should bring the documentation in line with the actual default value, as on line [389](https://github.com/dropwizard/dropwizard/pull/2160/files#diff-e5126a75b90a2bf1ce64a60b923c8eadL389).","closed","documentation,","bryanlb","2017-09-21T20:13:54Z","2017-09-22T06:56:01Z"
"","2237","dropwizard-jdbi creating query with concat generate NullPointerException","this query works fine: ""SELECT cd.display_name AS name         FROM city_dct as cd          WHERE cd.display_name LIKE :partialName""  this query does not: ""SELECT cd.display_name AS name, concat('-',cd.city_cd) AS dbIDMultiKey          FROM city_dct as cd          WHERE cd.display_name LIKE :partialName""  I attached the stack trace, the exception is thrown inside the rosettamapper, but I debugged it and the problem is when the metadata is generated the tableName and the other metadata attribute for the select concat are null.","closed","","grugna","2017-12-28T22:46:18Z","2017-12-29T13:42:31Z"
"","1893","[WIP] Implement Dropwizard Unix socket connector","This pull requests some basic work for supporting a Unix Socket connector in Dropwizard. The implementation seems to be rather simple, but I stumled on some problems:  * I wasn't able to run a server in the default mode because of some admin thread pool management issues.  * The server doesn't shut down gracefully. It waits 30 seconds and then killed forcefully after a SIGTERM signal is sent.  The original issue is #1889.","closed","blocked,","arteam","2017-01-18T08:39:26Z","2019-03-03T12:56:18Z"
"","1669","JUnit rule for testing database interactions (redux)","This pull requests is based on the great work of @rbarbey in #1594. There were too many changes I wanted to point out, so I decided to open a new pull request. This is basically the same JUnit rule, but with several implementation improvements (comments, a more apt API , additional tests, conformity with `HibernateBundle`, etc..).","closed","feature,","arteam","2016-08-04T18:28:13Z","2016-09-01T06:47:58Z"
"","2328","Documentation/Sphinx updates","This pull request updates the documentation generator (Sphinx) and makes some preparations to be able to move the documentation to [ReadTheDocs.org](https://readthedocs.org/).","closed","improvement,","joschi","2018-04-13T16:41:38Z","2018-06-22T21:50:55Z"
"","2150","SelfValidation annotation as an alternative to ValidationMethod","This pull request solves my feature request issue #2140 . It adds the two Annoations @SelfValidation and @SelfValidating. An example of how to use it: ```java @SelfValidating public class Example {     private int a = 3;     private int b = 6;      @SelfValidation     public void validOnlyIfEven(ViolationCollector col) {         if(a+b % 2 != 0)             col.addViolation(""a+b must be an even value. At the moment it is ""+a+""+""+b+""=""+(a+b));     } } ```  What do you think of it? If this solution is okay with you (especially the names of annotations) I would write a paragraph for the documentation.","closed","feature,","manuel-hegner","2017-09-13T07:43:32Z","2017-11-23T08:14:41Z"
"","2135","Expose removeOnCancel for scheduled executors","This pull request does the following:  1) Addes removeOnCancelPolicy as an optional builder method to ScheduledExecutorServiceBuilder. 2) Created unit tests for the aforementioned functionality (as well as other functionality I had added to this class awhile back but never had tests for since there was no unit test file for this class). 3) Added 'VisibleForTesting' accessors to ExecutorServiceManager to facilitate better testing of ScheduledExecutorServiceBuilder. 4) Created unit tests for ExecutorServiceManager.  Thanks.","closed","improvement,","isaki","2017-08-22T16:53:09Z","2017-09-01T15:06:03Z"
"","1649","Update Jetty to 9.3.11.v20160721","This PR supersedes #1608: - By updating to a newer version of Jetty - Fixing test case on windows due to window paths - Fixing test failure found in #1608 with new exception comparison. Admittedly, it seems like a worse exception message to test against (`SSLException` vs `SSLHandshakeException`)","closed","improvement,","nickbabcock","2016-07-27T13:58:50Z","2016-07-28T06:40:07Z"
"","2166","Dropwizard testing module for JUnit 5","This PR is proposition of Dropwizard testing module with use of JUnit 5 (Issue [#1944](https://github.com/dropwizard/dropwizard/issues/1944)). Contains following: - code of original test rules was changed to support executing them from JUnit 5 extension, - JUnit 5 extension class that executes classes from point above, - code of original tests modified to use JUnit 5.  Example of use:  ```  @ExtendWith(DropwizardExtensionsSupport.class) public class EpisodesResourceTest {      public final ResourceExtension resources = ResourceExtension.builder()             .addResource(new UsersResource(usersService))             .build(); 			 ```","closed","feature,","AnDyXX","2017-10-03T11:27:25Z","2019-05-21T19:44:59Z"
"","1820","Finer-grain control of exception behaviour in view renderers","This PR is one possible implementation of issue #1811. In short, I am standardizing the exception thrown by each `ViewRenderer` implementation as `ViewRenderException`, which is then caught and rethrown as `WebApplicationException` by `ViewMessageBodyWriter`.  To preserve previous behavior of returning an HTML error response on render exceptions, I have added a new `ViewRenderExceptionMapper` class which should be registered. Consequently I am still changing the original behavior by adding this registration requirement. Let me know if this is OK from backward-compatibility standpoint - if needed we can register the mapper in `ViewBundle`, although I don't know how I can register another exception mapper afterwards if I want custom behaviour. This also requires change to the documentation.  Otherwise, one can choose to provide their own `ExceptionMapper` to catch `WebApplicationException` and check that the cause is `ViewRenderException`, then do whatever is needed with its cause in the form of an exception thrown by the rendering code (Viewmarker, Mustache, etc.)  I tried updating the tests to verify both cases of with and without `ViewRenderExceptionMapper`, but I can't seem to get registration in each test case working like this:  ` target(""/test/bad"").regsiter(new ViewRenderExceptionMapper()).request().get(String.class);`  I had to register the mapper in `configure()`. Please let me know if you have any solution to this so I can increase the test coverage.  Thanks.","closed","improvement,","acwwat","2016-11-15T02:27:45Z","2016-11-18T08:51:50Z"
"","2154","Add binary size units; modify sizes to meet OSI standards; add tests.","This PR is for https://github.com/dropwizard/dropwizard/issues/2152. The changes are (from most to least significant):  1. SizeUnit.Kilobytes, SizeUnit.Megabytes, SizeUnit.Gigabytes, and SizeUnit.Terabytes have been modified to properly represent the OSI definitions of these units (multiples of 1000, rather than 1024). 2. SizeUnit.Petabytes, SizeUnit.Kibibytes, SizeUnit.Mebibytes, SizeUnit.Gibibytes, SizeUnit.Tebibytes, and SizeUnit.PebiBytes were added and all runtime and unit test code was modified to use the binary versions of these units. 3. Additional text suffixes were added to Size.java. 4. Existing unit tests for Size and SizeUnit were modified for the new numeric definitions of the OSI units and additional unit tests were added for the IEC binary units.  As I mentioned on the issue, this is not a trivial change. It had wide sweeping effects in the Dropwizard unit tests - though I tried my best to be as minimal with the changes as possible. However, the biggest hit will be taken by dropwizard users that expect KB to mean 1024 and don't really know what KiB is. Though most of the storage industry now recognizes these IEC suffixes, the rest of the world is still getting familiar with them. To make dropwizard effective in the enterprise storage industry, however, these changes really should be made.","closed","","jcalcote","2017-09-16T06:57:10Z","2019-03-14T22:31:37Z"
"","1835","Enable option to load Mustache templates from file system","This PR is for adding the ability to load Mustache templates from the file system instead of from the classpath.  To use this feature, add the new, Mustache-specific config option called `fileRoot` pointing to the directory in the file system where Mustache templates should be loaded. When specified, a `FileSystemResolver` will be used instead of `PerClassSystemResolver`. When combined with the new cache options from #1289 , you can update Mustache templates in the file system and Dropwizard will pick up the changes w/o restarting the application.  From implementation point of view, please see whether there is a better way to handle the tests. AFAIK each `JerseyTest` class can only configure the server once normally, so I cheated and added an instance variable to store the `MustacheViewRenderer` object, such that I can configure it. For each relevant test, I then added a ""load from file system"" version of the test by configuring the renderer with the `fileRoot` and `cache` option.  Thanks.","closed","improvement,","acwwat","2016-11-20T21:22:16Z","2016-11-22T18:49:33Z"
"","1734","Jersey Validation Improvements","This PR is a few changes we have been using for a while to improve the built-in jersey parameter validation error messages provided by Dropwizard.  **Better Enum Validation Messages** Currently dropwizard resources return a 404 if a request is made with an invalid value for a parameter of an `Enum` type. This PR includes `ValidatingEnumParamConverterProvider` which provides converters for all enums used in method parameters. The converter then provides better error messages like _""query param choice must be one of [OptionA, OptionB, OptionC]""_ when invalid values are sent.  **Parameter Names in Parse Failure Messages** Currently when an invalid value is passed into a *Param parameter dropwizard returns an error message like _""Parameter is not a number.""_.  This PR includes `AbstractParamConverterProvider`  along with a slight enhancement to the *Param classes that returns messages that include the name of the parameter that failed validation, like _""query param user_id is not a number.""_  **Hibernate ParameterNameProvider** Small change to move most of parameter naming logic from `ConstraintMessage` to `JerseyParameterNameProvider`. This implements the standard `ParameterNameProvider` interface that Hibernate uses to resolve parameter names during validation.  **New DurationParam** Include a new `DurationParam` that can parse String input in the format supported by dropwizard's existing `Duration` class.","closed","improvement,","cmicali","2016-09-21T13:52:32Z","2016-09-29T13:40:09Z"
"","1947","Flush loggers on cleanup, don't destroy","This PR fixes the issue where dropwizard would close all logging appenders in tests and in code when it's reasonable for there to be more log statements (eg. in case of an exception)! The fix is instead of closing all appenders, wait for them to flush all their log messages (which, as far as I can tell, was the original impetus for closing the `LoggerContext` on application shutdown, anyways)  In tests, the logging is reset to a sane default (I've chosen the default console appender as a default), so that users may still see the output of logging statements in their tests code (outside application code).  1. It's probably prudent to not merge this for 1.1.0 as logging is finicky, even though I've included a decently thorough test case (there's an API change to `LoggingFactory` üòû to communicate resetting for tests).  Closes https://github.com/dropwizard/dropwizard/issues/1119 Closes https://github.com/dropwizard/dropwizard/issues/1941  CC'ing original authors: @Sijmen, @joaocenoura  EDIT: and of course, any comments/reviews/suggestions are sincerely welcome üòÑ","closed","improvement,","nickbabcock","2017-03-03T16:32:47Z","2017-03-06T17:34:17Z"
"","1775","Upgrade to Jackson 2.8.4","This PR also includes the (unofficial) Jackson BOM so that users can include Jackson dependencies in the correct version into their projects.","closed","","joschi","2016-10-14T09:55:10Z","2016-10-15T17:36:58Z"
"","2180","JSON log support for Dropwizard - https://github.com/dropwizard/dropwizard/issues/1451","This PR adds JSON log support for Dropwizard. You can see the discussion at https://github.com/dropwizard/dropwizard/issues/1451  It starts off from the following branch and completes support for JSON logs for  ILoggingEvent and IAccessEvent. https://github.com/dropwizard/dropwizard/compare/master...jamisonhyatt:AddJsonFileAppender?expand=1","closed","feature,","sabarivasan","2017-10-20T20:11:58Z","2018-01-05T19:44:29Z"
"","2358","Make possible to collect backend exceptions","This patch enriches the errors with backend exception stack traces when a `@Test` fails.  Without this, error looks like: ``` feign.FeignException: status 500 reading FeatureFlagCRUDClient#store(List); content: {""code"":500,""message"":""There was an error processing your request. It has been logged (ID 978e0e322a5eae1f).""} 	at feign.FeignException.errorStatus(FeignException.java:62) 	at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:91) 	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:138) 	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76) 	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:103) 	at $Proxy83.store(Unknown Source) 	at MyTest.throwBackendError(MyTest.java:52) ^--- only shows were it failed on client ... more on the stack, but I removed ```  With this, more relevant details is available: ``` feign.FeignException: status 500 reading FeatureFlagCRUDClient#store(List); content: {""code"":500,""message"":""There was an error processing your request. It has been logged (ID 952586bb1d1433b3).""} 	at feign.FeignException.errorStatus(FeignException.java:62) 	at feign.codec.ErrorDecoder$Default.decode(ErrorDecoder.java:91) 	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:138) 	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76) 	at feign.ReflectiveFeign$FeignInvocationHandler.invoke(ReflectiveFeign.java:103)         at $Proxy83.store(Unknown Source)         at MyTest.throwBackendError(MyTest.java:52) ^--- only shows were it failed on client ...      more on the stack, but I removed      org.apache.avro.AvroTypeException: Found A, expecting B, missing required field name 	at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:292) 	at org.apache.avro.io.parsing.Parser.advance(Parser.java:88) 	at org.apache.avro.io.ResolvingDecoder.readFieldOrder(ResolvingDecoder.java:130) 	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:223) 	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:174) 	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:152) 	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:144) 	at org.apache.avro.file.DataFileStream.next(DataFileStream.java:233) 	at org.apache.avro.file.DataFileStream.next(DataFileStream.java:220) 	at com.google.common.collect.ImmutableList.copyOf(ImmutableList.java:266) 	at AvroConsumer.readFrom(AvroConsumer.java:142) 	at AvroConsumer.readFrom(AvroConsumer.java:34) ^--- this is exactly where the error happened ... more on the stack, but I removed    ```","closed","stale,","velo","2018-05-17T08:27:36Z","2020-02-23T00:04:09Z"
"","1569","HTTP2 Capable Client","This issue is to track an HTTP2 capable client for `dropwizard-client`. Discussion about this topic started in #1349, but it's best if there was a separate issue. An http2 capable client won't make it in the release 1.0.  Copying @arteam's [comment (Nov. 2015)](https://github.com/dropwizard/dropwizard/pull/1349#issuecomment-158766533):  > Yes, `JerseyClient` and Apache `HttpClient` don't support HTTP/2 currently. >  > I know 3 Java client HTTP/2 libraries: > - Jetty [Http2Client](https://github.com/eclipse/jetty.project/tree/master/jetty-http2/http2-client) > - [OkHttp](https://github.com/square/okhttp) > - Netty [Client](https://github.com/netty/netty/tree/master/example/src/main/java/io/netty/example/http2/helloworld/client)  >  > I like the first one from Jetty, because: > - It provides an asynchronous API;  > - `h2` and `h2c` support;  > - Has the same core as `jetty-http2-server`. It provides a good interopability with the server implementation. Despite that HTTP/2 is a standard, there could be some > idiosyncrasy .  Since then, looks like Apache's `HttpClient` is [planning a major upgrade](http://hc.apache.org/status.html) to start transitioning to HTTP2 ([HTTPCLIENT-1672](https://issues.apache.org/jira/browse/HTTPCLIENT-1672)). If we want to go this route we'll have to wait for the release, and then implement the appropriate metrics in Dropwizard Metrics, and finally update dropwizard client. Additionally we may have to wait for HTTP2 support in Jersey (no idea if this is the case).  Replacing the client in dropwizard client would mean this could not be done until 2.x, as I'm assuming the APIs and configurations would change.  This is not an urgent issue (http 1.0/1 will be around for much much longer), but I want it to be tracked since dropwizard 1.0 will include support for a http2 server -- it is only natural to wonder the status of an http2 client.","closed","stale,","nickbabcock","2016-05-27T18:55:58Z","2019-09-03T00:00:58Z"
"","1848","Dropwizard slf4j+logback","This issue is related to https://github.com/dropwizard/dropwizard/issues/1367 We are unable to use Phoenix Client in our existing DropWizard application. I see that incompatibility issues with Spark+DropWizard too. Currently both logback and slf4j are required dependencies in Dropwizard. And since you can only have one implementation of slf4j in your class path it's not possible to use slf4j-log4j12, for example. This is the current design. Please keep this ticket open and do not lock it. We'll use it to track the fix/pr for the same. If its closed, no one will think about it.","closed","","sathish-hike","2016-12-07T14:02:36Z","2020-06-04T13:29:07Z"
"","2296","add OWASP dependency check","This is the simplest way to introduce dependency check; it will generate reports on all module levels where it can extract a dependency tree.","closed","","synergiator","2018-03-06T14:17:43Z","2018-03-07T07:56:38Z"
"","2535","Guava still presents in project. Please use scope=test for tests but not compile.","This is the list of `pom.xml` which directly specify guava dependency. dropwizard-util dropwizard-jackson dropwizard-lifecycle dropwizard-jdbi3 dropwizard-bom  This is the list of modules where Java sources use guava transitively from modules in the previous list. dropwizard-jdbi dropwizard-jersey dropwizard-validation  What happens if we use `dropwizard-testing` as a dependency in our project POM and we exclude the `guava` dependency from it? The dropwizard still needs to have guava on classpath?","closed","","Tibor17","2018-10-26T07:57:15Z","2018-10-26T08:00:41Z"
"","1731","EDIT: Should requestLog be separate?","This is the configuration for my dropwizard server using version 1.0.0.  ``` server:     requestLog:         appenders:         - type: file           currentLogFilename: /logs/application.log           archive: false           # lowest level of eventrs to write to file           threshold: ALL           timeZone: UTC           logFormat: # TODO logging:     level: INFO     appenders:     - type: file       currentLogFilename: /logs/application.log       archive: false       # lowest level of eventrs to write to file       threshold: ALL       timeZone: UTC       logFormat: # TODO ```  Unfortunately, only the ones in logging block show up. requestLog does not pipe to the same file like I want it to. Is there a way to do this?  On a side note, I can't seem to use yaml anchors either (to prevent duplication of these 2 equal file appenders)","closed","stale,","deeTEEcee","2016-09-16T21:56:22Z","2019-09-03T00:00:54Z"
"","2479","BiDiGzipHandler should use interceptor pattern, not wrapped input/output streams","This is a request to reevaluate the BiDiGzipHandler.  The current BiDiGzipHandler attempts to wrap the input/output streams to accomplish what the old BiDiGzipFilter used to do.  The wrapping of servlet input streams and output streams as performed by BiDiGzipHandler is not compatible with Servlet 3.1 and Async I/O.  The Jetty project's own GzipHandler (supporting decompression of request bodies, and compression of response bodies) is performed via the interceptor features / patterns present in Jetty, to allow the Servlet 3.1 Async I/O features to function properly.  Is it still needed?  the built-in GzipHandler does a lot now. Is 'deflate' support still needed? (in the Eclipse Jetty's experience less than 0.01% of requests use deflate exclusively, and nearly 100% of requests that declare that they accept compression use gzip, with a small (and growing) number supporting brotli (which has no java solution yet).","closed","blocked,","joakime","2018-09-05T14:39:45Z","2018-11-20T13:53:47Z"
"","1900","Support Dropwizard applications without logback","This is a prototype for splitting the tight integration between Dropwizard and Logback. This feature was requested several times (See #1367). The idea is too provide users the ability to exclude Logback from Dropwizard and replace it with an external logging solution, if they really want to. The main work of this PR is too initialize the Logback infrastructure lazily, so the user can swap it to an external logging mechanism in the config file.  With this change users can swap logback to other logging implementation like that: ```xml                         io.dropwizard             dropwizard-core             1.1.0-SNAPSHOT                                                   ch.qos.logback                     logback-classic                                                       ch.qos.logback                     logback-access                                                       org.slf4j                     log4j-over-slf4j                                                              log4j             log4j             1.2.17                                org.slf4j             slf4j-log4j12             1.7.21                ```   ```yml server:   type: simple   applicationContextPath: /application   adminContextPath: /admin   connector:     type: http     port: 8080   requestLog:     type: external logging:   type: external ```  ```java public class ExampleApplication extends Application {      @Override     protected void bootstrapLogging() {     } } ```","closed","feature,","arteam","2017-01-24T09:56:27Z","2017-07-24T07:59:21Z"
"","2252","Jersey declarative-linking `@InjectLink` is not initialized","This is a Kotlin project, so attribute injected fields are `lateinit var`: ```kotlin     @InjectLink(resource = FooResource::class)     lateinit var foo: URI ``` which is the equivalent of: ```java     @InjectLink(resource = FooResource.class)     URI foo; ``` This behavior happens in both the latest 1.3.0-rc4 and 1.2.0 I've included the 1.25.1 version of declarative-linking in my gradle dependencies I no longer get the class not found errors and I've registered  I have this in my run method: ```kotlin         val jersey = environment.jersey()                  val resourceConfig = jersey.resourceConfig                 .packages(javaClass.`package`.name)         resourceConfig                 .register(DeclarativeLinkingFeature::class) ```  But the InjectLink fields are ignored. I'm filing this here, because based on everything I've read online, including mutliple examples with dropwizard, this should work.","closed","","charlesritchea","2018-01-24T14:58:05Z","2018-01-25T15:33:45Z"
"","2307","org.glassfish.jersey.internal.Errors Parameter 1 of type FooResource is not resolvable to a concrete type","This is a kotlin project using dropwizard 1.3.0 I have some resources with constructors with abstract parameters.      FooResource(private val repository: Repository){         \\...     }  Where Repository is an Interface  I get a bunch of warnings like:  ``` 5:09:40.108 [main] [] WARN  org.glassfish.jersey.internal.Errors - The following warnings have been detected: WARNING: Parameter 1 of type com.foo.Repository from public com.foo.FooResource(com.foo.Repository) is n ot resolvable to a concrete type. ``` But the program works fine. I assume this warning has something to do with the supported DI framework / IoC containers, but I use manual injection and don't care about this.  Why is this warning being logged?  How do I disable this check?  UPDATE: I think this has to do with kotlin adding a wildcard to String","closed","bug,","charlesritchea","2018-03-13T19:25:22Z","2019-08-02T20:48:48Z"
"","2298","Upgrade to hibernate validator 6.0 (#2127)","This is a contribution towards the 2.0.0 milestone.  Some tests are now green, but in one case I am not sure what to do.  Namely, a comment in the sources (`OptionalValidatedValueUnwrapperTest`) says, ```  // Dropwizard used to supply its own Java 8 optional validator but since // Hibernate Validator 5.2, it's built in, so the class was removed but // the test class stays to ensure behavior remains ``` So I'd consider, if something is built in, not so much needs to be done: but obviously if it still there, something needs to be done to activate it.  My first guess was to use constraint mapping but I must admit I have no clue how to approach this. https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-programmatic-constraint-definition","closed","","synergiator","2018-03-07T08:01:39Z","2018-06-19T12:54:11Z"
"","2161","Support fromString in FuzzyEnumParamConverter","This is a continuation of Stefan Zhelyazkov 's work in PR #1987","closed","bug,","reftel","2017-09-22T11:50:32Z","2017-11-07T09:35:21Z"
"","1599","Allow periods in keys to be escaped in ConfigOverrides","This in particular makes it possible to configure loggers (whose names frequently contain periods) with config overrides.","closed","improvement,","tjwilson90","2016-06-17T03:52:37Z","2016-08-15T07:23:32Z"
"","2037","Add a WeldBundle to Dropwizard","This feature makes it easy to get started with CDI using the Weld implementation.","closed","","jelmerterwal","2017-04-29T13:53:52Z","2017-04-29T16:19:20Z"
"","1770","correct sample code on building apache http client","This contract with [HttpClientBuilder$build](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java#L220-L226) is the following:  ``` public CloseableHttpClient build(String name); ```","closed","documentation,","tmack8001","2016-10-08T06:17:20Z","2016-10-08T12:34:25Z"
"","2356","nanreh/expose additional GzipHandler configuration properties","This commit exposes three additional configuration properties from Jetty's GzipHandler in DropWizard's GzipHandlerFactory: excludedMimeTypes, includedPaths, excludedPaths.  ###### Problem: Jetty provides configuration properties for GzipHandler that are not currently exposed in DropWizard. This commit adds these additional properties to GzipHandlerFactory.  ###### Solution: The three additional GzipHandler configuration properties have been exposed in GzipHandlerFactory following the pattern already adhered to by that class.","closed","improvement,","nanreh","2018-05-10T22:23:05Z","2018-06-22T21:50:58Z"
"","2355","Expose additional GzipHandler properties in GzipHandlerFactory","This commit exposes three additional configuration properties from Jetty's GzipHandler in DropWizard's GzipHandlerFactory: excludedMimeTypes, includedPaths, excludedPaths.  ###### Problem: Jetty provides configuration properties for GzipHandler that are not currently exposed in DropWizard. This commit adds these additional properties to GzipHandlerFactory.  ###### Solution: The three additional GzipHandler configuration properties have been exposed in GzipHandlerFactory following the pattern already adhered to by that class.","closed","","nanreh","2018-05-10T21:54:03Z","2018-05-10T22:10:17Z"
"","2444","Replace remaining use of Hamcrest with AssertJ","This change set replaces the remaining use of Hamcrest matchers with the equivalent functionality of AssertJ, which is used in all other tests in Dropwizard, and therefore removes the dependency on Hamcrest completely.  Closes #2437 Closes #2443","closed","improvement,","joschi","2018-07-25T07:42:35Z","2018-07-27T07:41:03Z"
"","1882","Properly integrate dropwizard-e2e into Maven build","This change set properly integrates the `dropwizard-e2e` into the Maven build and gets rid of the Maven warning:  ``` [WARNING]  [WARNING] Some problems were encountered while building the effective model for io.dropwizard:dropwizard-e2e:jar:1.1.0-SNAPSHOT [WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-enforcer-plugin is missing. @ line 64, column 21 [WARNING]  [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build. [WARNING]  [WARNING] For this reason, future Maven versions might no longer support building such malformed projects. [WARNING]  ```","closed","","joschi","2017-01-13T11:13:26Z","2017-01-13T11:38:29Z"
"","1592","Document the Dropwizard release process","This change proposes a simple draft of a document, which describes the technical aspects of making a release of Dropwizard. This information is mostly exist in the form emails between Dropwizard maintainers and personal experience, so it's quite easy for a maintainer to forget some steps during a release and make a mistake. It would be great, if we wrote it down in the repository and make accessible to the community. This should make Dropwizard a more transparent project and allow to improve our release process.  @dropwizard/committers, please give your feedback on this document. This is a rough draft which contains only the basic information. What other aspects we should address? Maybe something should be stripped out?","closed","documentation,","arteam","2016-06-10T10:37:23Z","2016-07-27T12:50:22Z"
"","2199","Add tests for Dropwizard filters","This change adds unit test for useful Dropwizard filters:  * ThreadNameFilter * SlowRequestFilter * CharsetUtf8Filter * RequestIdFilter * RuntimeFilter","closed","improvement,","arteam","2017-11-10T17:20:34Z","2017-11-10T20:29:32Z"
"","1915","Add more Liquibase tests","This change adds missed tests for the Liquibase commands in Dropwizard. By having them in standard test suite, we can verify that all commands work (or at least don't fail) and don't let our Liquibase users down. Most of tests are integration (they use an H2 database for migrations), but some use mocks when it's not possible to write a good integration test.","closed","","arteam","2017-02-06T07:21:30Z","2017-02-06T08:59:42Z"
"","1668","Allow HttpClientBuilder subclasses to customize the underlying builder","This change adds an overridable method which will allow `io.dropwizard.client.HttpClientBuilder` subclasses to customize the underlying `org.apache.http.impl.client.HttpClientBuilder` that is used. For example, this should allow the injection of [HTTP client caching](https://hc.apache.org/httpcomponents-client-ga/tutorial/html/caching.html), as proposed in #1633.","closed","improvement,","evnm","2016-08-04T04:24:49Z","2016-08-04T17:56:31Z"
"","2197","Build and run Dropwizard on JDK9","This change adds a Java profile which allows to compile and run the tests of Dropwizard on JDK9. TravisCI support it on their machines, so we can run the tests automatically for changes and pull requests.   Most of the Dropwizard dependencies are compatible with JDK9 with exceptions of: * [jadira](https://github.com/JadiraOrg/jadira). I created a pull request there: https://github.com/JadiraOrg/jadira/pull/66, but there's no response. To workaround it, I [forked](https://github.com/arteam/jadira) Jadira, applied the patch and published it via [jitpack](https://jitpack.io/#arteam/jadira).  * findbugs (I think we are better of with error-prone anyway) * The JDBI module had a bug with converting Instants (in JDK8 Instant had a millesecond resultion, in JDK9 - nanosecond)  So, this change makes sure that we are testing that Dropwizard apps can be successfuly run on JDK9 with the `java.xml.bind` module enabled.","closed","improvement,","arteam","2017-11-10T11:40:04Z","2017-11-10T21:29:05Z"
"","1838","Update to Jackson 2.8.5","This also simplifies the `dropwizard-bom` by just relying on the `jackson-bom` and `jersey-bom`.  All of the tests still pass and the example application is properly packaged without having to maintain all of the individual dependencies in the bom pom.xml.  (the preferred `jackson-bom` version to use is `2.8.5.1` per https://twitter.com/fasterxml/status/801240492000231424)","closed","improvement,","jplock","2016-11-23T03:48:43Z","2016-11-23T07:23:07Z"
"","1717","Illustrate subresource method usage in DropwizardResourceConfigTest","This adds a test case to `DropwizardResourceConfigTest` that ensure that subresource methods are supported. This functionality was called into question in #1716.","closed","","evnm","2016-09-02T17:01:55Z","2016-09-02T17:33:42Z"
"","1606","Feature/expose post body to tasks","This a PR for #838.  It provides the POST body of a task request to the task's execute method. For a first pass, I went with the simplest possible implementation, just providing the post body of the request as a string. This seemed consistent with how tasks handle query params already, just providing the strings and leaving any transformations to a more useful format to the user.  As it is implemented now, this is a **BREAKING** change. Anyone who updates Dropwizard to a version with this change will get compilation errors and need to add an additional `String` parameter to all their `Task` subclasses.  I went with the breaking API change style because it was the simplest, but I would like feedback on whether that seems like a reasonable path forward. it seems like the alternatives would be: 1. Make a subclass of task that accepts a post body e.g. `TaskWithBody` that has a different execute method. Dispatch to either `Task` or `TaskWithBody` in the task executor. (might actually make sense to switch it around and have the body version be the superclass) 2. Instead of passing the body directly to execute, just add a `getBody` method to the `Task` class 3. Something better I'm not thinking of","closed","feature,","scottaj","2016-06-22T21:50:59Z","2021-03-23T22:43:06Z"
"","1667","dropwizard-servlets: Combine unnecessarily nested if blocks in TaskServlet","These two nested if statements within `io.dropwizard.servlets.tasks.TaskServlet` were [flagged by Code Climate](https://codeclimate.com/github/dropwizard/dropwizard/dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/TaskServlet.java) and can be flattened.","closed","improvement,","evnm","2016-08-04T01:35:49Z","2016-08-04T20:05:06Z"
"","1842","General Code Improvements","These should be pretty uncontroversial code improvements, but let me know if otherwise. Most of these improvements were automatically done through intellij with me reviewing the changes.  - Fixup mockito deprecations - Rest of Guava's propagate replaced - Remove unneeded throws declaration - Simplify stream calls to collection foreach - Remove caught and rethrown exception - Replace anonymous types with lambdas - Replace isPresent check with ifPresent function - Replace asList with singleton list with one element - Use diamond operator - Prefer contains to indexOf() != -1 - Directly sort list instead of Collections.sort  Feel free to squash this into a single commit","closed","improvement,","nickbabcock","2016-11-27T20:52:33Z","2016-11-27T23:29:40Z"
"","1638","CachingAuthorizer?","There's already a `CachingAuthenticator` which is awesome, however there's no such thing as caching proxy for authorization yet. The reason/need for this stands similar to that of `CachingAuthenticator`.  I can think of some reasons why one does not want to do that (e.g. audit trails), but having such class would be a helpful option.  So is there a plan yet? Or specific reasons not to include one?","closed","","Jimexist","2016-07-14T15:26:29Z","2016-07-27T18:19:29Z"
"","2076","Unable to get JsonView deserialization working","There's a post on the mailing list from Tatu some time back which indicates this should work:  https://groups.google.com/forum/#!topic/jackson-user/QW4ZmFBIMLA  I have JsonView serialization working okay (i.e. for response values) but I am trying to use the same to guard against unwanted inputs, just like Tatu mentions in this post, i.e. the ParamView.class reference being used during deserialization to filter out unwanted inputs.  Similar idea here: http://lifelongprogrammer.blogspot.com/2015/09/using-jackson-view-to-protect-mass-assignment.html  The behaviour I see is that anything the client provides to the service is accepted and deserialized into the parameter object, even stuff I am not technically annotating with the appropriate view type.  Note that I have:      environment.getObjectMapper().disable(MapperFeature.DEFAULT_VIEW_INCLUSION);  in my application's run() method.  The class in question is an immutable PoJo - it contains a getter (which is annotated with a JsonView class and JsonProperty - obviously) and the constructor, which is annotated with JsonProperty. I've also tried annotating the constructor argument with a property-scoped JsonView (same as the getter) but no difference in behaviour.  I'm using 1.1.0 BTW.   Is this supposed to work? TIA!","closed","","mrwilby","2017-06-14T20:54:40Z","2019-02-08T04:10:27Z"
"","1847","Add Dropwizard forms e2e","There were no examples of using dropwizard-forms, so I decided to add it as a module to `e2e` as an example so that it is easier to point people to (maybe even a link from the documentation !?)","closed","improvement,","nickbabcock","2016-12-07T02:04:46Z","2016-12-07T07:40:01Z"
"","1991","YAML Parsing Bug","There seems to be an issue with how DropWizard is creating the Jackson ObjectMapper that causes the parser to loose its codec as the JSON tree is walked.  I have reproduced this using the exact paradigm used within the DropWizard code base (method is called testDropWizard) as well as utilizing my own approach that works (but using the ObjectMapper created by the DropWizard ""Jackson"" utility class).  Here is a very simple config that illustrates the issue:  ```yml ---  helloWorld:   intValue: 6   object:     type: ARRAY     value:       - ""one""       - ""two""  # vim: set tabstop=2 shiftwidth=2 softtabstop=2 expandtab : # ```  Here is an all-in-one unit test that will illustrate the failures (testDropWizard and testHybrid fail on the bug):  ```Java package io.isaki.jsandbox;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertTrue;  import java.io.IOException; import java.io.InputStream; import java.util.Collection;  import org.junit.Test;  import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.annotation.JsonSubTypes; import com.fasterxml.jackson.annotation.JsonSubTypes.Type; import com.fasterxml.jackson.annotation.JsonTypeId; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.core.JsonFactory; import com.fasterxml.jackson.core.JsonParseException; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.core.ObjectCodec; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import com.fasterxml.jackson.databind.node.TreeTraversingParser; import com.fasterxml.jackson.dataformat.yaml.YAMLFactory; import com.fasterxml.jackson.datatype.guava.GuavaModule; import com.google.common.collect.ImmutableList;  import io.dropwizard.jackson.Jackson;  public class JacksonYamlBugTest {      @Test     public void testOk() throws JsonParseException, JsonMappingException, IOException {         final String resource = ""/break_file.yml"";          final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());         mapper.registerModule(new GuavaModule());          // Dropwizard does this even though it is the default         mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);          final TestObject object;         try (final InputStream is = this.getClass().getResourceAsStream(resource)) {             if (is == null) {                 throw new IOException(""Unable to locate resource: "" + resource);             }              object = mapper.readValue(is, TestObject.class);         }          assertNotNull(object);          assertEquals(6, object.get().getIntValue());          final BaseTest t = object.get().getObject();         assertEquals(TestType.ARRAY, t.getType());         assertTrue(t instanceof ArrayTest);          final Collection contents = ((ArrayTest) t).get();         assertEquals(2, contents.size());         assertTrue(contents.stream().anyMatch((x) -> x.equals(""one"")));         assertTrue(contents.stream().anyMatch((x) -> x.equals(""two"")));     }      @Test     public void testDropWizard() throws IOException {         final String resource = ""/break_file.yml"";          final JsonFactory provider = new YAMLFactory();          final ObjectMapper mapper = Jackson.newObjectMapper();          // This does this:         // mapper.registerModule(new GuavaModule());         // mapper.registerModule(new LogbackModule());         // mapper.registerModule(new GuavaExtrasModule());         // mapper.registerModule(new JodaModule());         // mapper.registerModule(new AfterburnerModule());         // mapper.registerModule(new FuzzyEnumModule());         // mapper.registerModule(new ParameterNamesModule());         // mapper.registerModules(new Jdk8Module());         // mapper.registerModules(new JavaTimeModule());         // mapper.setPropertyNamingStrategy(new         // AnnotationSensitivePropertyNamingStrategy());         // mapper.setSubtypeResolver(new DiscoverableSubtypeResolver());                  // Dropwizard does this even though it is the default         mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);          final TestObject object;         try (final InputStream is = this.getClass().getResourceAsStream(resource)) {             final JsonParser p = provider.createParser(is);             final JsonNode node = mapper.readTree(p);              object = mapper.readValue(new TreeTraversingParser(node), TestObject.class);         }          // And we failed in 'readValue' so this is never reached.         assertNotNull(object);                  assertEquals(6, object.get().getIntValue());          final BaseTest t = object.get().getObject();         assertEquals(TestType.ARRAY, t.getType());         assertTrue(t instanceof ArrayTest);          final Collection contents = ((ArrayTest) t).get();         assertEquals(2, contents.size());         assertTrue(contents.stream().anyMatch((x) -> x.equals(""one"")));         assertTrue(contents.stream().anyMatch((x) -> x.equals(""two"")));     }          @Test     public void testHybrid() throws JsonParseException, JsonMappingException, IOException {         final String resource = ""/break_file.yml"";          final ObjectMapper mapper = Jackson.newObjectMapper();          // Dropwizard does this even though it is the default         mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);          final TestObject object;         try (final InputStream is = this.getClass().getResourceAsStream(resource)) {             if (is == null) {                 throw new IOException(""Unable to locate resource: "" + resource);             }              object = mapper.readValue(is, TestObject.class);         }          // We never reach here         assertNotNull(object);          assertEquals(6, object.get().getIntValue());          final BaseTest t = object.get().getObject();         assertEquals(TestType.ARRAY, t.getType());         assertTrue(t instanceof ArrayTest);          final Collection contents = ((ArrayTest) t).get();         assertEquals(2, contents.size());         assertTrue(contents.stream().anyMatch((x) -> x.equals(""one"")));         assertTrue(contents.stream().anyMatch((x) -> x.equals(""two"")));     }      /**      * I use enums for types.      *      * @author isaki      */     private static enum TestType {         EMPTY,         ARRAY;     }      /**      * Parent class for child class object property.      *      * @author isaki      */     @JsonAutoDetect(         getterVisibility = Visibility.NONE,         creatorVisibility = Visibility.NONE,         isGetterVisibility = Visibility.NONE,         fieldVisibility = Visibility.NONE,         setterVisibility = Visibility.NONE)     @JsonTypeInfo(         use = JsonTypeInfo.Id.NAME,         include = JsonTypeInfo.As.PROPERTY,         property = ""type"",         visible = true)     @JsonSubTypes({         @Type(name = ""EMPTY"", value = BaseTest.class),         @Type(name = ""ARRAY"", value = ArrayTest.class)     })     private static class BaseTest {          @JsonTypeId         @JsonProperty         private final TestType type;          public BaseTest() {             super();             this.type = null;         }          public final TestType getType() {             return this.type;         }      }      /**      * Implementation of complex object property resolution.      *      * @author isaki      */     private static class ArrayTest extends BaseTest {          @JsonProperty         @JsonDeserialize(as = ImmutableList.class, contentUsing = StringStripDeserializer.class)         private final Collection value;          @SuppressWarnings(""unused"")         public ArrayTest() {             super();             this.value = null;         }          public Collection get() {             return this.value;         }     }      /**      * Special deserializer that illustrates issue.      *      * @author isaki      */     private static final class StringStripDeserializer extends JsonDeserializer {          @Override         public String deserialize(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException {             final ObjectCodec c = p.getCodec();              // BUG: This throws NPE in some cases             final JsonNode t = c.readTree(p);              return t.asText().trim();         }      }      /**      * Complex object contained by outer object.      *      * @author isaki      */     @JsonAutoDetect(         getterVisibility = Visibility.NONE,         creatorVisibility = Visibility.NONE,         isGetterVisibility = Visibility.NONE,         fieldVisibility = Visibility.NONE,         setterVisibility = Visibility.NONE)     private static final class HelloWorld {          @JsonProperty         private final int intValue;          @JsonProperty         private final BaseTest object;          @SuppressWarnings(""unused"")         public HelloWorld() {             super();             this.intValue = 0;             this.object = null;         }          /**          * @return the intValue          */         public int getIntValue() {             return this.intValue;         }          /**          * @return the object          */         public BaseTest getObject() {             return this.object;         }      }      /**      * Outer object      *      * @author isaki      */     @JsonAutoDetect(         getterVisibility = Visibility.NONE,         creatorVisibility = Visibility.NONE,         isGetterVisibility = Visibility.NONE,         fieldVisibility = Visibility.NONE,         setterVisibility = Visibility.NONE)     private static final class TestObject {          @JsonProperty         private final HelloWorld helloWorld;          @SuppressWarnings(""unused"")         public TestObject() {             super();             this.helloWorld = null;         }          public HelloWorld get() {             return this.helloWorld;         }     } } ```  This was done with DropWizard 1.1.0, but can also be surfaced with 1.0.6.","closed","bug,","isaki","2017-03-30T20:39:29Z","2021-03-21T11:10:17Z"
"","2102","Performance issue with logback-acess","There seems to be a serious issue with the logback-access change on dropwizard. Unfortunately I don't have time to isolate the issue and provide a test case to reproduce it at the moment, but I will try to do that as soon as I have the time. I apologize for that but I think it's important enough to submit an issue anyway.  We have a test case for performance which involves 4 different dropwizard services which makes http requests to each other as well as serve requests from outside. We have realized that these services took a really big performance hit after dropwizard upgrade from 1.0.x to 1.1.x. After spending long time to figure out what's going on (insert microservices rant here), I realized that the bottleneck service was hitting the jetty maxThreads very quickly sometimes. Yet it was reporting only milliseconds in the request logs. So it means somewhere in jetty was hanging, leading to thread hogging.  Finally, via profiling the bottleneck service, I came across this: ![image](https://user-images.githubusercontent.com/5628051/28066888-23016966-663f-11e7-8c0e-5c757108b22d.png) Jetty's BlockingArrayQueue is also used by `AsyncNCSARequestLog` it seems.  Reading the dropwizard documentation and release notes, decided to disable the request logging which fixed the performance and thread hogging problem.   ```   requestLog:     type: classic ``` also solves the problem.  Considering the complex nature of our 4 services and the running test which makes many requests to different services, there may be many things triggering this rather than logback-access having problems with heavy load. But there is definitely a problem here.","closed","","natnan","2017-07-11T11:50:25Z","2018-06-25T09:41:19Z"
"","1773","Fixup Jackson 2.8 deprecations","There remains a couple more deprecations in the yaml package where Jackson's `MarkedYAMLException` and `Mark` have been deprecated in favor of the underlying snakeyaml implementation (see https://github.com/FasterXML/jackson-dataformat-yaml/issues/63), but Jackson still throws the deprecated exceptions. Hence not all deprecations have been removed as they are still needed.  cc @cowtowncoder","closed","improvement,","nickbabcock","2016-10-13T01:07:47Z","2016-10-13T06:31:53Z"
"","2400","Remove Guava","There have been regular questions about the removal of Guava from Dropwizard on the mailing list and on GitHub.  Guava has been (or was; see [New Guava compatibility policy](https://groups.google.com/forum/#!msg/guava-discuss/rX-QXo-67ZU/gLEvfV4CAwAJ)) breaking backward compatibility quite often.  That imposed problems to people using Dropwizard to implement an application using another framework pulling in a different version of Guava, for example Apache Spark.  With the removal of Guava, these use cases would be easier to implement, and with Java 8 and later, there isn't too much critical functionality left which Guava contributes to Dropwizard.  This PR removes Guava from Dropwizard and replaces the [Guava Cache](https://github.com/google/guava/wiki/CachesExplained) with [Caffeine](https://github.com/ben-manes/caffeine).  If we wanted to be independent of a specific caching implementation, we could probably use JCache (JSR-107) and [Caffeine's JCache adapter](https://github.com/ben-manes/caffeine/wiki/JCache) internally.","closed","","joschi","2018-06-19T14:45:25Z","2019-09-13T07:05:57Z"
"","2119","Add support for setting several cipher suites for HTTP/2","There are many SSL ciphers which are supported by HTTP/2 clients (see https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility) and the user should have the ability to use them in Dropwizard applications. Currently it's not possible because Dropwizard forces the default cipher `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` defined in the HTTP2 spec.  This change allows users to provide a custom list of supported ciphers, so clients who support more strong ciphers, can use them. The provided list of ciphers MUST contain the `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` cipher as defined in the HTTP2 spec.  Redux of #1978.","closed","improvement,","arteam","2017-08-01T16:36:05Z","2017-08-02T17:57:20Z"
"","2450","Java 10+ compatibility","The version of Jersey (2.25.1) that DW 1.3.5 depends on is not compatible with Java 10 because that version of Jersey has a version check. I discovered this when scanning packages for classes I compiled using Java 10. Specifically, in the repackaged jersey.repackaged.org.objectweb.asm.ClassReader I find this: ``` // checks the class version // added ""support"" for java 9 compiled classes if (readShort(off + 6) > Opcodes.V9) {     throw new IllegalArgumentException(); } ```  Unfortunately DW 1.3.5 is not compatible with the version of Jersey (2.27) that works with Java 10 because that version of Jersey does not contain AbstractValueFactoryProvider (looks like it was removed in Jersey 2.26). Here is the relevant stack trace: ``` java.lang.NoClassDefFoundError: org/glassfish/jersey/server/internal/inject/AbstractValueFactoryProvider 	at java.base/java.lang.ClassLoader.defineClass1(Native Method) 	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:1009) 	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:174) 	at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:801) 	at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:699) 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:622) 	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580) 	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:190) 	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:499) 	at io.dropwizard.jersey.sessions.SessionFactoryProvider$Binder.configure(SessionFactoryProvider.java:56) 	at org.glassfish.hk2.utilities.binding.AbstractBinder.bind(AbstractBinder.java:187) 	at org.glassfish.hk2.utilities.ServiceLocatorUtilities.bind(ServiceLocatorUtilities.java:187) 	at org.glassfish.jersey.inject.hk2.ImmediateHk2InjectionManager.register(ImmediateHk2InjectionManager.java:88) 	at java.base/java.lang.Iterable.forEach(Iterable.java:75) 	at org.glassfish.jersey.model.internal.CommonConfig.configureExternalObjects(CommonConfig.java:664) 	at org.glassfish.jersey.model.internal.CommonConfig.configureMetaProviders(CommonConfig.java:633) 	at org.glassfish.jersey.server.ResourceConfig.configureMetaProviders(ResourceConfig.java:823) 	at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:351) 	at org.glassfish.jersey.server.ApplicationHandler.lambda$initialize$1(ApplicationHandler.java:316) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:316) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:298) 	at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:256) 	at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:315) 	at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:282) 	at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:335) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:178) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:370) 	at javax.servlet.GenericServlet.init(GenericServlet.java:244) ```  Seems there is a bit of a conundrum, no? Any suggestions?  -Ben","closed","","bennyflint","2018-08-01T20:29:41Z","2018-08-01T23:29:46Z"
"","1556","Add Maven profiles for selecting alpn-boot version","The version of `alpn-boot` is dependent on the version of the JVM being used, otherwise the build will fail.  Since not everyone is using the same version of the JVM, this PR adds profiles to `dropwizard-http2` for selecting the correct version of `alpn-boot`.  This is only required for running tests locally and on Travis CI.","closed","improvement,","joschi","2016-05-23T07:43:33Z","2016-05-23T18:11:28Z"
"","2178","dropwizard-example README.md instructions target wrong version","The version in the dropwizard-example pom.xml is 1.2.1-SNAPSHOT. The instructions for Running The Application in the README for the dropwizard-example  still target the 1.2.0 version.","closed","","c-doty","2017-10-18T15:13:02Z","2017-10-18T15:18:06Z"
"","2127","Upgrade to hibernate validator 6.0","The upgrade to hibernate validator 6.0 will not be a drop in replacement as some of the classes in dropwizard-validation need to migrate to javax.transaction interfaces.  https://developer.jboss.org/wiki/HibernateValidatorMigrationGuide#jive_content_id_60x","closed","improvement,","mattnelson","2017-08-07T17:31:09Z","2019-02-24T15:36:37Z"
"","2497","JSON access log URI vs URL defaults","The standard request access logs default[1] to request URL. The JSON access logs introduced in #2232 default[3] to request URI. While it could be argued that a different output format doesn't have to remain passive to the previous layout. It did take a bit to trace down the issue as I assumed switching the format would produce logs with the same composite parts. What this change between uri/url intentional?   [1] https://github.com/dropwizard/dropwizard/blob/v1.3.5/dropwizard-request-logging/src/main/java/io/dropwizard/request/logging/layout/LogbackAccessRequestLayout.java#L27 [2] https://github.com/qos-ch/logback/blob/v_1.2.3/logback-access/src/main/java/ch/qos/logback/access/PatternLayout.java#L113-L114 [3] https://github.com/dropwizard/dropwizard/blob/v1.3.5/dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/AccessJsonLayoutBaseFactory.java#L43","closed","","mattnelson","2018-09-17T16:54:27Z","2018-10-01T14:20:03Z"
"","2352","UnitOfWorkAwareProxyFactory doesn't work with Kotlin classes","The same class in Java works correctly, in Kotlin it causes `org.hibernate.HibernateException: No session currently bound to execution context`","closed","","giordy","2018-05-09T18:35:26Z","2018-05-10T08:16:15Z"
"","2165","API changes report for Dropwizard","The review of API changes for the Dropwizard library since 0.7.0 version: https://abi-laboratory.pro/java/tracker/timeline/dropwizard-core/  Hope it will be helpful for users and maintainers of the library.  The report is generated for jars found at http://central.maven.org/maven2/io/dropwizard/dropwizard-core/ according to https://wiki.eclipse.org/Evolving_Java-based_APIs_2.  Thank you.  ![dropwizard-core-2](https://user-images.githubusercontent.com/1517837/31114058-e489d7fe-a824-11e7-8163-5690548e5bf2.png) ![dropwizard-core-1](https://user-images.githubusercontent.com/1517837/31114059-e48a7bdc-a824-11e7-97c0-2c3aeda76a1a.png)","closed","","lvc","2017-10-03T07:23:58Z","2017-10-09T05:52:00Z"
"","2045","requestContent and responseContent always return ""-"" in request log","the request log config in my config.yaml is like the following ```  requestLog:     appenders:       - type: file         currentLogFilename: ./logs/runtimeService-requests.log         archive: true         archivedLogFilenamePattern: ""./logs/runtimeService-requests-%i.log.gz""         logFormat: ""%h|%t{yyyy/MM/dd HH:mm:ss}|%D|%i{requestContent}|%i{responseContent}""         maxFileSize: 5M         archivedFileCount: 10 ```  But  output of the requestContent and responseContent is always ""-"" I am following the logback instruction here https://logback.qos.ch/manual/layouts.html#AccessPatternLayout Am I missing some configuration? Or is there some way to format the request log via code? Thanks","closed","","Wstunes","2017-05-04T09:51:31Z","2019-01-10T02:16:41Z"
"","1653","MetricsReporters not running in EnvironmentCommand","The reporters via their factory are initialized however it seems that the LifecycleEnvironment is not started and thus the managed reporter object never receives a call to `start()`.  Is this expected?  If so is there a way to achieve reporting metrics via a command?   Dropwizard 0.9.2.","closed","","jmif","2016-07-28T21:19:46Z","2016-08-17T17:27:28Z"
"","2026","[ENHANCEMENT] SubstringMatchingStrategy for metrics","The reason I came across this `problem` (maybe it is meant to be used like the way it is now) is because I use datadog and use a thin library on top of dropwizard (https://raw.githubusercontent.com/coursera/metrics-datadog). Which gave the following description how includes work;  ---  #### Filtering  If you want to filter only a few metrics, you can use the `includes` or  `excludes` key to create a set of metrics to include or exclude respectively.  ~~~yaml metrics:   frequency: 1 minute                       # Default is 1 second.   reporters:     - type: datadog       host:        includes:         - jvm.         - ch. ~~~  The check is very simplistic so be as specific as possible. For example, if  you have ""jvm."", the filter will check if the includes has that value in any  part of the metric name (not just the beginning).  --- After trying a lot of different configurations I checked the code to see if this was really the case. For now I used a regular expression to fix my problem, but I would like to improve the code to adhere to the description above.  Dropwizard's own documentation is very brief about the usage (should it be the complete string or not?); ``` includes	(all)	Metrics to include in reports, by name. When defined, only these metrics will be reported. ```","closed","feature,","jelmerterwal","2017-04-25T18:17:50Z","2017-04-27T19:29:43Z"
"","1878","Serve dropwizard.io over HTTPS","The project's website doesn't have an SSL cert. We should add one.","closed","improvement,","evnm","2017-01-12T03:04:00Z","2018-06-13T03:20:00Z"
"","1781","Remove dead code in the jackson provider","The previous workaround rendered useless by the changes in Jackson 2.8.3. üéâ","closed","improvement,","nickbabcock","2016-10-21T14:41:56Z","2016-10-21T16:01:50Z"
"","1983","Use random UUID for database names in tests","The OS could return the same value for `System.currentTimeMillis()` for a long time span, that means several tests may share the same database during a test run. This could lead to sporadic test failures which we would like to avoid.","closed","improvement,","arteam","2017-03-27T10:46:54Z","2017-03-27T15:24:19Z"
"","2035","More docs for project structure","The organizing your code section has been confusing, as reported in #1979. This PR attempts to fix this üëº   CC @fabriziocucci  Closes #1979","closed","documentation,","nickbabcock","2017-04-28T18:09:28Z","2017-05-10T16:16:47Z"
"","2003","Unhandled exceptions from Application run methods are not well logged.","The only place that logs an unhandled exception from an Application's run method is in Cli.run where it just does:  ```java // Unexpected exceptions should result in non-zero exit status of the process stdErr.println(t.getMessage()); return false;  ```  This is fine, but an unhandled NPE for instance ends up just logging the String `null`. Since NPE's don't have a message.  This is not particularly helpful in diagnosing the situation.  I think this should log the stack trace as well. This affected me when debugging something recently.  Will submit a PR.  Cheers,  Tim","closed","","tbartley","2017-04-11T22:09:59Z","2017-04-12T16:57:52Z"
"","2170","Fix link to Jackson Annotation in Getting Started","The old link seems to not work any longer...","closed","documentation,","herrphon","2017-10-09T15:27:51Z","2017-10-09T16:57:07Z"
"","1763","Edit trustSelfSignedCertificates description","The old description was misleading. One could think `false` meant no self-signed certs could be trusted.","closed","documentation,","ipropper","2016-10-07T02:39:47Z","2016-10-07T18:16:54Z"
"","1593","Support access_token query parameter for OAuth","The OAuth Bearer token spec allows to pass the access token not only in the Authorization header with the Bearer prefix, but also as an access_token query parameter.  See https://tools.ietf.org/html/rfc6750#section-2.3  While it's preferred to use the header for increased security, the token can be helpful at times. - biggest advantage is you can avoid CORS pre-flight requests with the query parameter since they are not triggered when no non-simple header is present - it can be useful when testing/developing where you can simulate requests in a browser tab without a REST client","closed","improvement,","vvondra","2016-06-10T16:26:56Z","2016-06-12T09:08:24Z"
"","2232","Add support for JSON logs in Dropwizard","The new `dropwizard-json-log` module allows users to configure a specific layout to convert logging message to JSON. The module supports event logs and access logs like that:  For general logging: ```yaml     logging:       appenders:         - type: console           layout:             type: json ```  For request logging:  ```yaml     server:       requestLog:         appenders:           - type: console             layout:               type: access-json ```  The default format produces logs like: ```  {""level"":""INFO"",""logger"":""org.eclipse.jetty.server.Server"",""thread"":""main"",""message"":""Started @6505ms"",""timestamp"":""2018-01-03T19:01:37.674Z""} ```  and access logs like  ```     {""method"":""GET"",""userAgent"":""Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0"",""uri"":""/hello-world"",""requestTime"":5,""protocol"":""HTTP/1.1"",""contentLength"":37,""remoteAddress"":""127.0.0.1"",""timestamp"":""2018-01-03T19:04:48.448Z"",""status"":200} ```   Solves #1388, #1451 as an alternative to #2180","closed","feature,","arteam","2017-12-14T23:56:06Z","2018-01-05T20:30:33Z"
"","2051","Decrease allowable tomcat jdbc validation interval to 50ms","The minimum should be lowered because it's sensible to allow for validation intervals of less than a second. For instance, the default validation interval for HikariCP is 500ms. The lower bound of 50ms was chosen as a compromise between a nonsensically low number and 500ms","closed","","nickbabcock","2017-05-09T23:53:26Z","2017-05-10T07:22:34Z"
"","1677","Set FAIL_ON_UNKNOWN_PROPERTIES in DefaultConfigurationFactoryFactory","The logic is moved to DefaultConfigurationFactoryFactory from YamlConfigurationFactory, making it easier to modify with a custom ConfigurationFactoryFactory implementation.  There are some (uncommon) use cases where it's benefitial to update an application without modifying the configuration, which may fail if the application configuration has removed a configuration property.","closed","improvement,","carterkozak","2016-08-06T17:20:46Z","2016-08-06T23:26:51Z"
"","1857","For migrations, construct and configure Database prior to instantiating Liquibase instance","The Liquibase constructor creates an instance of ChangeLogParameters, which configures its parameters based on the currently configured Database.  The result is that expressions are not properly expanded in change sets, for example a custom postgresql index:  CREATE INDEX my_jsonb_index ON ${database.defaultSchemaName}.my_jsonb_table USING GIN (my_jsonb_tbl)  Liquibase at this point has not been supplied the defaultSchemaName, and so inserts 'public'.  By Instantiating the Database before passing to the Liquibase constructor and configuring based on the Namespace, schema and catalog should be set before this point.","closed","","nathklei","2016-12-12T17:33:50Z","2016-12-26T20:33:47Z"
"","1562","Fix deprecation notices in http2 servers","The latest bump in jetty [deprecated some functions](https://github.com/eclipse/jetty.project/blob/c99c02e2f59cc4c65cc9b893710e48eeeb3bef0b/jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java#L109-L117)","closed","improvement,","nickbabcock","2016-05-26T17:51:27Z","2016-05-26T22:51:52Z"
"","1548","dropwizard-jdbi: JodaDateTimeMapper needs index- and name-based constructors to map columns other than the 1st one","the JodaDateTimeMapper is derived from TypedMapper which has a default constructor that uses column 1 for its mapping.  Our use case needs to map more than 1 column via a JodaDateTimeMapper, which won't work with the current code.  I'd suggest the only things necessary are the following constructor signatures:  ```     public JodaDateTimeMapper() { // to prevent breaking existing usages.     }      public JodaDateTimeMapper(int index) {         super(index);     }      public JodaDateTimeMapper(String name) {         super(name);     }  ```","closed","improvement,","vdietsch","2016-05-19T13:39:12Z","2016-06-17T10:28:09Z"
"","2448","Ensure DropwizardResourceConfig#forTesting() is using a random port","The Jersey Test framework is using port 9998/tcp by default for starting the test container.  If tests are running in parallel and multiple tests are trying to start a container on the same port, they will fail with a java.net.BindException: Address already in use.  By using port ""0"" (i. e. a random free port) in tests via `DropwizardResourceConfig#forTesting()`, users won't have to manually set the respective property.","closed","improvement,","joschi","2018-07-30T15:45:51Z","2018-07-30T17:07:47Z"
"","1795","Add support for configuring the blocking timeout for Jetty connectors","The issue reported in #1794.  Jetty 9.3.2.v20150730 introduced a new option for the configuration of HTTP connection factories. The option is called `blockingTimeout` and allows to configure the timeout which applies to all blocking operations in addition to `idleTimeout`. The rationale behind it is to allow to set a timeout for blocking operations which perform I/O activity, but with a slow rate (for example serving a big static file). Such tasks won't exhaust the pool of worker threads which should improve the QoS for a Jetty server.  See: https://dev.eclipse.org/mhonarc/lists/jetty-announce/msg00085.html https://bugs.eclipse.org/bugs/show_bug.cgi?id=472621","closed","improvement,","arteam","2016-11-02T08:53:30Z","2016-11-02T12:35:17Z"
"","1879","HibernateException: No CurrentSessionContext configured! with DW 0.8 -> 1.0.5 migration","The Hibernate configuration for some unit tests of a project I'm working on no longer work when upgrading to 1.0.5 (Hibernate 4.3.x to 5.1).  The classic solution to HibernateException: No CurrentSessionContext configured! seems to be some configuration that we already have:  [Unit test code](https://github.com/carltonwhitehead/coner/blob/master/dropwizard-app/src/test/java/org/coner/hibernate/dao/AbstractDaoTest.java#L33)  The latest dropwizard docs don't mention anything about a change in how to bootstrap/configure hibernate.  The issue is exposed when calling `sessionFactory.getCurrentSession();` for the first time.","closed","stale,","jshort","2017-01-12T05:23:08Z","2019-08-19T16:00:39Z"
"","2426","Fix ResourceURL.isDirectory to handle Jar paths that are URL-escaped.","The heuristic inside the ""jar"" codepath in ResourceURL.isDirectory is splitting the filename from the URL by String indexing.  This means that if the file name would be URL-escaped (e.g. if it has a space in it) then relativeFilePath is still escaped.  This manifests as zipEntry being null, which then causes NullPointerException -> IOException -> ResourceNotFoundException.  Fix this by using entry.getName() instead of taking a URL substring. This works because jarConnection has been formed by correctly parsing the URL.  ###### Problem:   ###### Solution:   ###### Result:","closed","","ewanmellor","2018-07-09T19:18:53Z","2019-03-03T14:09:24Z"
"","2065","Getting started page code doesn't work","The getting started page's code doesn't work - the Optional parameter in the HelloWorldResource class causes an exception to be thrown on server start. The cause of the error can be seen here: https://github.com/dropwizard/dropwizard/issues/1115  Please modify the getting started tutorial to not use an Optional parameter.","closed","","parasgithub","2017-05-25T05:13:18Z","2017-08-24T19:35:28Z"
"","2146","Getting Started guide uses the wrong value for archetypeVersion","The Getting Started guide (http://www.dropwizard.io/1.1.4/docs/getting-started.html) states the following: `-DarchetypeVersion=1.0.0` This is clearly wrong, which has been corrected in the dropwizard/dropwizard-archetypes project's description; it must be set to the desired Dropwizard version.","closed","","evarga","2017-09-03T22:22:53Z","2017-09-14T12:01:55Z"
"","1767","Speed up servlet tester tests by closing connection","The four tests in `BiDiGzipHandlerTest` took at least 10 seconds each. By closing the connection after use, the tests are much much faster. Each test is about ~50ms now.  See related [stackoverflow](http://stackoverflow.com/questions/20428371/why-is-servlettester-in-jetty-9-x-so-slow)","closed","improvement,","nickbabcock","2016-10-07T15:43:38Z","2016-10-07T17:33:49Z"
"","1761","NPE when a Jersey subresource locator method returns Class","The following code will cause DW to throw an NPE:  ` @Path(""/"") @Produces(MediaType.APPLICATION_JSON) public class RootResource {  ``` private final Map> resources;  @SuppressWarnings(""WeakerAccess"") public RootResource() {     this.resources = loadSubResourcesFromServiceLocator(); }  @Path(""{key}"") public Class getSubResource(@PathParam(""key"") String key) {     return resources.get(key); }` ```  The NPE thrown:   > ! java.lang.NullPointerException: null > ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:173) > ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:164) > ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:189) > ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:164) > ! at io.dropwizard.jersey.DropwizardResourceConfig$EndpointLogger.populate(DropwizardResourceConfig.java:159) > ! at io.dropwizard.jersey.DropwizardResourceConfig.getEndpointsInfo(DropwizardResourceConfig.java:130) > ! at io.dropwizard.jersey.DropwizardResourceConfig.logComponents(DropwizardResourceConfig.java:80) > ! at io.dropwizard.jersey.DropwizardResourceConfig$ComponentLoggingListener.onEvent(DropwizardResourceConfig.java:245) > ! at org.glassfish.jersey.server.internal.monitoring.CompositeApplicationEventListener.onEvent(CompositeApplicationEventListener.java:74)  The workaround I've found is to instead return Class where MarkerInterface contains at least one method with a @GET or similar method.","closed","","mrdon2","2016-10-06T17:45:48Z","2016-10-06T18:22:58Z"
"","1894","An HTTP body consisting of a single string is incorrectly deserialized","The following code  ``` Path(""/"") @Produces(MediaType.TEXT_PLAIN) @Consumes(MediaType.APPLICATION_JSON) public class Resource {     @PUT     @Path(""endpoint"")     void endpoint(String jsonBody) {         // resource code;     }  } ```  behaves incorrectly. When posting `foo`, we have `jsonBody.equals(""foo"")`, when it should throw an error because `foo` is not JSON. When posting `""foo""`, we have `jsonBody.equals(""\""foo\"""")`, when it should be deserializing the string.  The same thing happens when returning `String` from a method (it's unquoted, whereas I would expect it to be quoted). The behavior I expect (throwing with no quotes and deserializing the quoted string) is consistent with what other frameworks do (e.g. Flask) and more intuitive.","closed","","jroitgrund","2017-01-18T11:11:28Z","2017-01-18T11:23:07Z"
"","1805","Remove FindBugs from the Dropwizard build process","The FindBugs project is not actively maintained, and I don't remember last time it reproduced an error in our build.  As see it, FindBugs only slow down our builds in Travis. We already use Google's `error-prone` which,  in my opinion,a better tool for catching programming errors:   * Is actively maintained and targets Java 8  * Much faster than FindBugs  * Works on the compiler level  * Produces fewer false positive warnings","closed","","arteam","2016-11-08T15:31:24Z","2018-03-10T12:09:18Z"
"","1921","Remove references to old auth code in docs","The factories were removed when we moved to filter based auth.","closed","documentation,","nickbabcock","2017-02-09T14:29:20Z","2017-02-09T14:44:56Z"
"","2489","Support json log exception type configuration","The exception log format defaults[1,2] to root cause first for all types(console,file,json,etc...). With the non-json types the layout can be overridden to standard stack traces. JSON log format it not currently configurable. Can the option to configure exception implementations be added?  * `exception`   * https://logback.qos.ch/manual/layouts.html#ex   * https://github.com/qos-ch/logback/blob/v_1.2.3/logback-classic/src/main/java/ch/qos/logback/classic/pattern/ThrowableProxyConverter.java * `xException`   * https://logback.qos.ch/manual/layouts.html#xThrowable   * https://github.com/qos-ch/logback/blob/v_1.2.3/logback-classic/src/main/java/ch/qos/logback/classic/pattern/ExtendedThrowableProxyConverter.java * `rootException`   * https://logback.qos.ch/manual/layouts.html#rootException   * https://github.com/qos-ch/logback/blob/v_1.2.3/logback-classic/src/main/java/ch/qos/logback/classic/pattern/RootCauseFirstThrowableProxyConverter.java  `exception` and `xException` appear be identical due to the extended packaging data[3] being disabled by default.  [1] https://www.dropwizard.io/1.3.5/docs/manual/configuration.html#logging [2] https://github.com/dropwizard/dropwizard/blob/v1.3.5/dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/EventJsonLayoutBaseFactory.java#L92 [3] https://logback.qos.ch/manual/configuration.html#packagingData","closed","","mattnelson","2018-09-13T22:34:22Z","2018-09-23T20:10:40Z"
"","1607","fix testing deserialization example","The example of Testing Deserialization won't pass unless we override the equals method in Person class","closed","","youngj523","2016-06-23T02:37:11Z","2016-06-23T06:28:32Z"
"","1575","Update error handling guide in docs","The error handling docs were a bit out of date, so I updated them :smile:  Rendered right on my machine :+1:","closed","documentation,","nickbabcock","2016-05-31T18:54:15Z","2016-06-01T00:35:51Z"
"","2378","Multiple File Appenders Example is wrong","The documentation is dropwizard 1.3.2 states the following:  > You can combine any number of different appenders, including multiple instances of the same appender with different configurations:  ```yaml logging:    # Permit DEBUG, INFO, WARN and ERROR messages to be logged by appenders.   level: DEBUG    appenders:     # Log warnings and errors to stderr     - type: console       threshold: WARN       target: stderr      # Log info, warnings and errors to our apps' main log.     # Rolled over daily and retained for 5 days.     - type: file       threshold: INFO       currentLogFilename: ./logs/example.log       archivedLogFilenamePattern: ./logs/example-%d.log.gz       archivedFileCount: 5      # Log debug messages, info, warnings and errors to our apps' debug log.     # Rolled over hourly and retained for 6 hours     - type: file       threshold: DEBUG       currentLogFilename: ./logs/debug.log       archivedLogFilenamePattern: ./logs/debug-%d{yyyy-MM-dd-hh}.log.gz       archivedFileCount: 6 ```  But the archivedLogFilenamePattern for the second file results in a logback error when starting the application: > The date format in fileNamePattern will result in collisions in the names of archived log files.  The error show the following link for help: [Link](https://logback.qos.ch/codes.html#rfa_collision_in_dateFormat)","closed","","ghost","2018-06-06T07:40:17Z","2018-06-06T08:01:23Z"
"","2431","acceptQueueSize default value bug","The documentation at https://www.dropwizard.io/1.3.5/docs/manual/configuration.html says that `acceptQueueSize` default is ""OS default"". If fact, though, it reads only the first byte of what the OS returns, at least on Linux.  `Files.readAllBytes(Paths.get(""/proc/sys/net/core/somaxconn""));` reads just the first byte, not the entire value of somaxconn. That's a bug in Dropwizard. It results in `2` if somaxconn is set to `2048`.  (Found by Petr Kacer)","closed","","OndraZizka","2018-07-12T21:46:00Z","2018-07-12T22:54:36Z"
"","1753","Prefer use of assertj's java8 exception assertions","The current usage of `fail()` in tests can't beat the messages produced by assertj's built in exception assertions. It also can't beat the conciseness üòÑ   The next step may be to examine if we want to replace `failBecauseExceptionWasNotThrown` with exception assertions","closed","improvement,","nickbabcock","2016-09-30T02:24:41Z","2016-09-30T02:54:51Z"
"","1931","dropwizard-auth: Add support for optional resource protection","The current support for optionally-protected resources isn't great. We require users to implement a custom auth filter to inject a dummy `SecurityContext` for unauth'd requests.  I had occasion to write such an endpoint at work and decided to take a stab at supporting `Optional` principals with the `@Auth` annotation. With this patch, I'm able to do things like this:  ``` @GET public String getGreeting(@Auth Optional userOpt) {   if (userOpt.isPresent()) {     return ""Hello, "" + userOpt.get().getName() + ""!"";   } else {     return ""Greetings, anonymous visitor!""   } } ``` This change breaks down into two steps:  1. A new `ContainerRequestFilter` decorator is used to silence exceptions thrown by failed `AuthFilter` invocations. This results in every request succeeding and principals being injected into the `SecurityContext` of auth'd requests. 2. An `OptionalPrincipalContainerRequestValueFactory` class is used to return the optional principal rather than throwing on its absence.  These two new classes are wired into `AuthDynamicFeature` and `AuthValueFactoryProvider` and their polymorphic equivalents. Tests are added to verify the behavior of each combination and the auth section of the used manual is updated to reflect this new capability.","closed","improvement,","evnm","2017-02-17T00:28:20Z","2017-02-22T02:58:21Z"
"","2365","Update jdbi in dropwizard-jdbi3","The current release of dropwizard-jdbi3 is using version 3.1.0 for jdbi3-core, jdbi3-guava, jdbi3-jodatime2 and jdbi3-sqlobject. Updating to version 3.2.1 will resolve issues people are experiencing with JDK9/10, see https://github.com/jdbi/jdbi/issues/497.","closed","","VibyJocke","2018-05-23T14:24:52Z","2018-05-25T06:50:58Z"
"","1661","Make the aspect easily available to other DI frameworks","The current proxy implementation makes it hard for DI frameworks to play nice with the `@UnitOfWork` annotation. It is required to have an object, its proxy and wire the two in difficult way. For instance, using Guice, there are several solutions, but none are natural.  This simple change makes `UnitOfWorkAspect` public, but only accessible from a `UnitOfWorkAwareProxyFactory` instance.  This way, DI framework users can implement their own `@UnitOfWork` behavior. This moves the responsibility to the user. Therefore a guide has been written under the form of Javadoc for the `UnitOfWorkAspect` class. It basically says how to properly use the aspect, as intended by the original developer of `UnitOfWorkAwareProxyFactory`.  For instance, my original Guice solution took 300 lines of code, made heavy use the included proxy mechanism as well as an extra one and Objenesis, and was prone to memory leaks for some of the slightest changes. This change reduce it to ~20 lines, using the standard Guice way of things.","closed","improvement,","ogregoire","2016-08-02T13:09:27Z","2016-08-04T20:05:58Z"
"","2364","Fix Integration Testing Example","The current example does not work. The DropwizardAppRule allows creating the client using the method.  ###### Problem:   ###### Solution:   ###### Result:","closed","documentation,","mleegwt","2018-05-23T12:30:20Z","2018-06-22T21:50:58Z"
"","2054","Update Validation annotation documentation","The current docs did not make it clear that annotations that were a part of the Default group had no affect if the Validation annotation did not contain the Default group (explicitly or implicitly through inheritance). See PR #2052 for more information.  This commit also adds test cases to make the current behavior explicit so any regressions can be caught in the future.  Closes #2049 Closes #2052","closed","improvement,","nickbabcock","2017-05-11T14:19:11Z","2017-05-15T17:55:25Z"
"","1554","Permit override of default failed command behavior","The current behavior of configuration errors etc. in `Application.run(String...)` is to call `System.exit(1)`. This can play havoc with things like integration tests, such that a hard exit will terminate the testing process.  This change allows folks to override the default behavior to do something other than the `System.exit(1)` call.","closed","improvement,","thomaslee","2016-05-23T02:56:33Z","2016-05-23T07:45:32Z"
"","1628","Compile errors on HttpClientBuilder in dropwizard-client-rc1.0.0-rc3","The client library depends on metrics-httpclient-3.1.2,  but there is no method `setValidateAfterInactivity` in  https://github.com/dropwizard/metrics/blob/v3.1.2/metrics-httpclient/src/main/java/com/codahale/metrics/httpclient/InstrumentedHttpClientConnectionManager.java  you can see the compile issue from https://github.com/dropwizard/dropwizard/blob/v1.0.0-rc3/dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java, line 399","closed","","bruce-genhot","2016-07-11T04:29:06Z","2016-07-11T09:26:57Z"
"","2200","Add tests for fuzzy deserialized enums","The class Enums is used in Jackson (FuzzyEnumModule) and in Jersey (FuzzyEnumParamConverter). Both of these classes have unit tests and they work around the the Enums class (Jersey requires support of deserialization from a `fromString` method, Jackson support of `@JsonCreator` methods and the `@JsonProperty` annotation). It would be to have a unit test which states what kind of deseralizations it supports.  See #2161 and #1909.","closed","improvement,","arteam","2017-11-10T20:38:05Z","2017-11-10T21:21:10Z"
"","2233","Tasks - Error's being logged as WARN","The `io.dropwizard.servlets.tasks.TaskServlet.doPost()` method only catches `Exception`, not `Error`. So when an `AssertionError` is thrown for instance, it is handled by `org.eclipse.jetty.server.HttpChannel.handleException()`, which logs it as `WARN`.  I find it a bit strange that `Exceptions` in a DropWizard task are logged with level `ERROR`, whilst `Error` throwables are logged with level `WARN`. Intentional?","closed","","fipp","2017-12-19T15:19:30Z","2017-12-20T12:06:11Z"
"","1693","Update location of dropwizard-scala repository.","The `dropwizard-scala` docs currently point at my outdated repo, this PR points them to a modern one and I verified this was OK with the owner here: https://github.com/datasift/dropwizard-scala/issues/9  Alternatively this could be dropped from the docs entirely, up to y'all. :)","closed","documentation,","bretthoerner","2016-08-16T16:07:10Z","2016-08-16T16:35:17Z"
"","2171","SubstitutingSourceProvider constructor only takes deprecated StrSubstitutor argument","The [SubstitutingSourceProvider](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-configuration/src/main/java/io/dropwizard/configuration/SubstitutingSourceProvider.java#L27) in dropwizard-configuration currently only has a single public constructor which takes an apache commons [StrSubstitutor](https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/text/StrSubstitutor.html) object from the org.apache.commons.lang3.text package;  The StrSubstitutor class in that package was marked deprecated in favor of one in the [org.apache.commons.text package](https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/StrSubstitutor.html) as of apache commons 3.6, which is now the version brought in by the [Dropwizard Bom](https://github.com/dropwizard/dropwizard/blob/v1.2.0/dropwizard-bom/pom.xml#L46)  Ideally the SubstitutingSourceProvider would be updated to have a constructor or static factory method that takes a non-deprecated class for its configuration, either the one recommended by Apache or potentially a Dropwizard specific class that does not directly depend on apache commons.","closed","","ianferguson","2017-10-11T13:19:10Z","2017-11-23T19:14:10Z"
"","1790","Bump jetty","The [release notes are pretty small](https://github.com/eclipse/jetty.project/blob/206122756f8988cf9e5abf4a4b4da83a3a562e07/VERSION.txt#L3-L22), but contain an important snippet:  > Support certificates hot reload  Which'll set the ground for better integration with Let's Encrypt (for instance), for those eschewing tls termination proxies.  Just wanted to point it out, as, in the future, I may be tinkering with it a bit üòÑ","closed","improvement,","nickbabcock","2016-11-01T02:03:02Z","2016-11-01T07:06:47Z"
"","1986","Fixed typo in javax.el exclusion","The 1.1.0 release introduced a maven dependency conflict which has already been corrected in the 1.1.x branch. However, the fix itself has a typo. This fixes that typo. This will need to be merged into master as well. I have worked around this by forcing the javax.el and javax.el-api versions to 3.0.0 in my own pom for the time being.","closed","","isaki","2017-03-28T16:50:15Z","2017-03-28T18:25:08Z"
"","1887","Replace localhost with 127.0.0.1","Testing a dumb theory on Travis","closed","","jplock","2017-01-16T01:44:32Z","2017-01-16T02:23:23Z"
"","2183","drop-wizard 3.2.3 jars support for IBM JDK 1.6","Team,  **We need drop-wizard 3.2.3 jars support for IBM JDK 1.6**   Metrics-servlets-3.2.3 is having one transitive dependency profiler-1.0.2  We also do not see any mention of support for JDK 1.6. Can we get the built in version for IBM JDK 1.6   Caused by: com.ibm.ws.webcontainer.exception.WebAppNotLoadedException: Failed to load webapp: JVMCFRE003 bad major version; class=com/papertrail/profiler/jaxrs/CpuProfileResource, offset=6         at com.ibm.ws.webcontainer.VirtualHostImpl.addWebApplication(VirtualHostImpl.java:176)         at com.ibm.ws.webcontainer.WSWebContainer.addWebApp(WSWebContainer.java:749)         ... 20 more Caused by: java.lang.UnsupportedClassVersionError: JVMCFRE003 bad major version; class=com/papertrail/profiler/jaxrs/CpuProfileResource, offset=6         at java.lang.ClassLoader.defineClassImpl(Native Method)         at java.lang.ClassLoader.defineClass(ClassLoader.java:273)         at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:74)","closed","","Bhavanish1","2017-10-24T13:38:55Z","2017-10-24T14:00:17Z"
"","1939","Implement TaskServlet::doGet to list tasks lexically.","Tasks are logged on startup but aren't easily accessible otherwise. Implement `TaskServlet::doGet` to print tasks lexically by name.  Example: ``` $ curl http://localhost:8081/tasks echo gc log-level ``` TaskServlet is mapped on ""/tasks/*"" and any GET request not matching root  will yield 404 or 405.  404: Task name is unknown.   405: Task name is registered but must be invoked with POST.","closed","feature,","aaanders","2017-02-26T21:36:10Z","2017-02-27T15:22:07Z"
"","1780","Add example of multipart forms test","Takes @psamsotha [comment](https://github.com/dropwizard/dropwizard/issues/1496#issuecomment-202352516) and adds it to the documentation as it failed my litmus test of a dropwizard feature that has testing documented üòã   Docs will slightly change once #1778 is merged (use `target` instead of `client`), so feel free to merge in any order and I can make the appropriate change.","closed","documentation,","nickbabcock","2016-10-20T18:47:21Z","2016-10-21T14:36:10Z"
"","1793","Use correct alpn-boot for jdk8_u112","Taken from [jetty's pom](https://github.com/eclipse/jetty.project/blob/338e924a5d8f0ce8589a788a85cdc53b20f92030/pom.xml#L1185)","closed","","nickbabcock","2016-11-02T01:27:33Z","2016-11-02T02:30:19Z"
"","2023","Release/1.1.x","sync 1.1.x","closed","","gaojun301","2017-04-23T15:43:03Z","2017-04-23T16:05:56Z"
"","1642","Add a factory for reporting with PickledGraphite","Support for sending pickled graphite metrics was added to https://github.com/dropwizard/metrics/blob/3.2-development/metrics-graphite/src/main/java/com/codahale/metrics/graphite/PickledGraphite.java but a complementary factory implementation has not been added to Dropwizard.  (This is a reminder to myself to do this and submit a PR unless its done in the interim)","closed","","mwhipple","2016-07-24T22:29:33Z","2016-07-25T00:15:32Z"
"","2080","Test for #2046","Sorry for the late response. I had a lot to do the last few weeks. Here is a test for the problem in #2046 . I added an example json config that contains a comment and can only be parsed if the object mapper is configured accordingly.","closed","improvement,","manuel-hegner","2017-06-19T09:36:15Z","2017-07-04T18:40:53Z"
"","2531","Dropwizard-example (Sorry for reissue my problem)","Sorry for re-post my problem... I wish to have a working dropwizard-example project, but even i get branch 1.3.x and put 1.3.7 version on pom.xml i have some errors and problems building it... which (and where) i can get a working version ?  Thanks for your support üëç","closed","","charbonnier666","2018-10-17T09:00:26Z","2018-10-17T09:28:35Z"
"","1836","Allow debugging for `DropwizardTestSupport`","Sometimes, when running integration tests locally, one might want to debug the integration test run (specially while developing the test code). I didn't find a way to do this so I'm presuming this is not possible at the moment. I believe this feature will be highly appreciated by most of the users of this class. Thanks.","closed","","ClintEsteMadera","2016-11-21T16:53:42Z","2016-11-21T18:36:14Z"
"","2000","Ability to specify specific client certificate alias in dropwizard-client TLS configuration","Sometimes it's convenient to use a key store that has more than one private key and certificate in it when authenticating to a server with a certificate.  The dropwizard-client does not currently provide a way to define a `PrivateKeyStrategy` when setting up the`SSLContext`   A simple, configuration based approach is simply to add a `certAlias` parameter to the TLS configuration of the HTTP client and, when set, define a PrivateKeyStrategy that unconditionally returns this configured alias.  I have a pull request to go along with this which I'll submit for 1.2.x.  Thanks,  Tim","closed","","tbartley","2017-04-10T19:11:56Z","2017-04-11T17:45:51Z"
"","2048","Added Java 8 InstantParam with test.","Some java 8 users might want to avoid Joda-Time in favor of Instant","closed","improvement,","lightswitch05","2017-05-08T15:22:23Z","2017-05-09T07:49:16Z"
"","1869","Avoid NPE while processing NPE","Some exceptions, most notably NullPointerException, have null messages. Masking them with a new NullPointerException is unhelpful.","closed","","kjetilv","2017-01-04T12:10:53Z","2017-01-11T00:20:11Z"
"","1656","Remove the test scope from `jetty-client` in the BOM","Some Dropwizard users may want to use this library with the compile scope as an HTTP/2 client. But currently the BOM forces the test scope, so users are forced to declare the dependency with the compile scope in their projects. This especially not very convenient when the library is pulled as a transitive dependency. An example is https://github.com/arteam/dropwizard-http2-client. See this [discussion](https://github.com/arteam/dropwizard-http2-client/issues/1).","closed","improvement,","arteam","2016-07-30T12:51:19Z","2016-08-13T17:01:47Z"
"","1993","Add missing @UnwrapValidatedValue annotations","Some classes/fields were missing the `@UnwrapValidatedValue` annotations in combination with javax.validation annotations.","closed","bug,","joschi","2017-03-31T14:13:52Z","2017-04-03T07:28:43Z"
"","1860","Ability to set HttpProcessor to Instrumented Apache's Http Client","Solves: https://github.com/dropwizard/dropwizard/issues/1441","closed","improvement,","fabito","2016-12-15T12:26:45Z","2016-12-15T15:43:17Z"
"","2032","Fix HttpSessionListener.sessionDestroyed is not being called #2031","Solves: #2031  Also, in order to make it possible to detect degradation caused by Jetty's version upgrade, I added several tests.","closed","bug,","ghost","2017-04-27T18:35:43Z","2017-05-01T00:31:44Z"
"","2025","Use latest version of alpn-boot by default","Solves: #2024","closed","improvement,","ghost","2017-04-24T17:59:46Z","2017-04-24T21:21:36Z"
"","1814","#1289: Enabling configuration option for caching of Mustache Views","Solves [1289](https://github.com/dropwizard/dropwizard/issues/1289).","closed","improvement,","lefloh","2016-11-10T20:11:41Z","2016-11-11T12:30:04Z"
"","2128","Log resource validation failures","So, it seems straightforward to log JSON processing errors (set DEBUG logging for `io.dropwizard.jersey.jackson.JsonProcessingExceptionMapper`). However, I don't see a way to easily log validation errors on the server side.  I suspect the class that should log it is `io.dropwizard.jersey.validation.JerseyViolationExceptionMapper`.  If I'm wrong and this is logged somewhere, please point me in the right direction. If not, please tell me if I have the right class and I will submit a pull request to add logging at the DEBUG level.  Thanks!","closed","","isaki","2017-08-09T19:48:28Z","2017-08-09T20:15:38Z"
"","2345","Embed sphinx docs into dropwizard","So dropwizard uses sphinx to generate all of their documentation on http://www.dropwizard.io/ . The docs still need to be hosted somewhere. Since dropwizard projects are almost always run in webserver mode I was wondering if there was a plugin/extension to automatically generate project specific docs (using sphinx or some other similar tool) and embed them into the dropwizard project itself. it could be hosted on the admin port at something like /docs What would be also interesting is if it could integrate with some rest api documentation tool such as swagger-ui to automatically scrap/build docs from the rest resouces and host them on the admin port at /docs/api (or something along those lines). I understand dropwizard already support hosting of HTML pages and pages generated with template engines such as mustache and Freemarker. In this case all the HTML + javascript would be statically generated so it should theoretically be hostable by dropwizard.  Does something like this already exist or has someone done something similar? Does this seem useful to people or is it really niche? I always found good documentation as one of the weak aspects of most projects, providing a mechanism to easily generated and integrate docs into projects seems like a relatively good idea to me. Reason i mentioned sphinx and swagger is that they both are heavily themable (to match project/company style) and already seemed to be used by dropwizard users.","closed","","jessechahal","2018-05-03T21:34:02Z","2019-03-06T20:24:04Z"
"","2191","Update person.mustache","small spelling error","closed","","anna1go","2017-10-30T02:54:50Z","2017-10-30T08:16:44Z"
"","1560","Surrounded server.stop() and cleanup with a try/catch block, see #1557","small fix for Issue#1557, feel free to adapt/modify this bugfix","closed","improvement,","BusComp","2016-05-25T10:40:03Z","2016-05-25T13:17:29Z"
"","2376","Optional throttling for log appenders","Situation: logs are sent to an external managed service through a specific log appender. Something goes wrong in the application and it generates a lot of logs very quickly. You do not notice the problem immediately. You end up with a hefty bill.  I was thinking of implementing a simple throttling mechanism in `AbstractAppenderFactory` and `AsyncAppenderBase`: maximum M messages over a given duration. Extra messages are discarded and not put into the queue. Of course, this is disabled by default.  Do you think this is something of interest to Dropwizard users? If yes, I will submit a PR.","closed","","ochedru","2018-06-04T08:52:11Z","2018-06-21T12:09:30Z"
"","2320","Remove prerequisites from archetype pom","Since Maven 3.5, maven will warn when using `..` for a non maven-plugin project. Since Dropwizard projects are not maven plugins, we remove it from the archetype pom.  https://maven.apache.org/docs/3.5.0/release-notes.html","closed","improvement,","nickbabcock","2018-03-30T14:15:21Z","2018-06-22T21:50:54Z"
"","1738","Fix path issue to build on windows","Since it looks like we'll be making another 1.0.x, the branch should be build-able on windows  Partial cherry-pick of #1649","closed","improvement,","nickbabcock","2016-09-23T14:35:08Z","2016-09-23T15:41:22Z"
"","1964","Move disabling Javadoc linter from profile to main build","Since Dropwizard is using Java 8 as a baseline, it's not necessary to ""hide"" disabling the Javadoc linter in a profile (`java8-disable-strict-javadoc`).  Additionally, this change enables users of Gradle to use the Dropwizard BOM with the [Nebula Dependency Recommender plugin](https://github.com/nebula-plugins/nebula-dependency-recommender-plugin).  ## Gradle Example  **build.gradle** ``` plugins {     id 'java'     id ""nebula.dependency-recommender"" version ""4.1.0"" }  sourceCompatibility = '1.8' targetCompatibility = '1.8'  // UTF-8 should be standard by now. So use it! [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'  repositories {     mavenCentral() }  dependencyRecommendations {    mavenBom module: ""io.dropwizard:dropwizard-bom:1.1.0-rc3"" }  dependencies {     compile ""io.dropwizard:dropwizard-core"" } ```  **Error without this change** ``` $ gradle build :compileJava Exception while polling provider recommender-9 for version java.lang.IllegalArgumentException: neither model source nor input file are specified         at org.apache.maven.model.building.DefaultModelBuilder.readModel(DefaultModelBuilder.java:439)         [long stack trace shortened for clarity] :compileJava FAILED  FAILURE: Build failed with an exception.  * What went wrong: Could not resolve all dependencies for configuration ':compileClasspath'. > Could not find io.dropwizard:dropwizard-core:.   Searched in the following locations:       https://repo1.maven.org/maven2/io/dropwizard/dropwizard-core//dropwizard-core-.pom       https://repo1.maven.org/maven2/io/dropwizard/dropwizard-core//dropwizard-core-.jar   Required by:       project :  * Try: Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.  BUILD FAILED  Total time: 1.868 secs ```  **Example with this change** ``` $ gradle build :compileJava :processResources NO-SOURCE :classes :jar :assemble :compileTestJava NO-SOURCE :processTestResources NO-SOURCE :testClasses UP-TO-DATE :test NO-SOURCE :check UP-TO-DATE :build  BUILD SUCCESSFUL  Total time: 2.167 secs ```","closed","improvement,","joschi","2017-03-15T13:53:36Z","2017-03-15T14:40:10Z"
"","1584","make HealthCheckRegistry pluggable","Similar to how the ObjectMapper and MetricsRegistry can be customized/swapped in the bootstrap, I would like to be able do the same with HealthCheckRegistry.  We are attempting add some additional information to the existing health check output, and under the current setup it requires us to pass around a separate registry, which is cumbersome.","closed","","gjesse","2016-06-03T16:20:02Z","2016-06-03T20:56:58Z"
"","2033","Add JsonProperty to jdbcInterceptors property","Should have been part of #2030  Also moved the property from the top of the class to where the other properties are to be more consistent.","closed","improvement,","nickbabcock","2017-04-28T03:00:17Z","2017-04-28T13:18:25Z"
"","1899","Add a jetty-alpn version for the JDK 1.8.0u121","Should fix the build on the Travis CI machines, which apparently have been already updated to the new JDK.","closed","","arteam","2017-01-23T19:14:34Z","2017-01-23T21:14:55Z"
"","1602","Correct the name of the lock in @GuardedBy","Should be `bootstrappingLock` instead `bootsrappingLock`.","closed","improvement,","arteam","2016-06-18T09:37:01Z","2016-06-18T11:39:32Z"
"","1813","Bring back request logging with logback-classic","Several users reported that they have issues with the logback-access implementation. See #1801, #1812, #1737. It would be great to allow these users to continue to use `logback-classic`, while they can't move their appenders to `logback-access`.","closed","feature,","arteam","2016-11-10T16:25:23Z","2016-11-15T19:58:22Z"
"","2208","Migrate deprecated classes from commons-lang to commons-text","Several classes and methods from the `commons-lang` package like `StrSubstitutor` and `StringUtils.getLevenshteinDistance` have been moved to a separate library `commons-text`. We should follow this deprecation warning and move our dependencies to the new library.  Unfortunately, it's not possible to make this change for the 1.2.1 version, because it changes the public API.  References #2171","closed","improvement,","arteam","2017-11-13T14:01:21Z","2017-11-13T14:51:59Z"
"","1634","Update testing.rst","Setting out, in, and err to null messed up my unit tests in other classes that capture std out.  I felt setting these back to their original values would help other users who had similar problems.","closed","documentation,","ipropper","2016-07-13T15:08:06Z","2016-07-13T15:41:15Z"
"","1975","Set logging context for file appenders before setting the buffer size","Setting buffer size results in writing an internal log message: `Setting bufferSize to ...`. If the context is not set, then Logback writes a log message: `LOGBACK: No context given for ch.qos.logback.core.FileAppender[null]` to the console log. It's a little bit annoying and we can avoid by setting the context right after instantiating the appenders.  This is related to #1951.","closed","improvement,","arteam","2017-03-23T10:00:40Z","2017-03-23T11:57:37Z"
"","1911","JDK1.8 requirements","Seems JDK 1.8 is required, so it cannot run in Java 7.  io/dropwizard/Application : Unsupported major.minor version 52.0","closed","","robertoschwald","2017-02-02T11:14:37Z","2017-02-02T11:44:51Z"
"","1699","Broken query parameter extraction in POST requests","See post-closure comments on #1606.","closed","bug,","evnm","2016-08-19T04:29:17Z","2017-02-07T02:31:50Z"
"","1557","ServerCommand.run causes NullPointerException in catch block","see io.dropwizard.cli.ServerCommand#run, line 46 `server.stop()` cause NullPointerException when previous start fails.  ``` protected void run(Environment environment, Namespace namespace, T configuration) throws Exception {         final Server server = configuration.getServerFactory().build(environment);         try {             server.addLifeCycleListener(new LifeCycleListener());             cleanupAsynchronously();             server.start();         } catch (Exception e) {             LOGGER.error(""Unable to start server, shutting down"", e);             server.stop();             cleanup();             throw e;         }     } ```  Start fails; jetty not started  ``` 2016-05-24T13:47:00.642+0200  [main] ERROR i.d.cli.ServerCommand: Unable to start server, shutting down org.eclipse.jetty.util.MultiException: Multiple exceptions     at org.eclipse.jetty.server.Server.doStart(Server.java:347)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:43)     at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:41)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76)     at io.dropwizard.cli.Cli.run(Cli.java:75)     at io.dropwizard.Application.run(Application.java:79) ... Caused by: java.sql.SQLRecoverableException: I/O-Fehler: The Network Adapter could not establish the connection     at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:419)     at oracle.jdbc.driver.PhysicalConnection.(PhysicalConnection.java:536)     at oracle.jdbc.driver.T4CConnection.(T4CConnection.java:228)     at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32) ```  Within the catch block `server.stop()` is invoked. The root cause is replaced by an NullPointerException and `cleanup();` will never be reached...  ``` 2016-05-24T13:47:00.662+0200  [main] INFO  o.e.j.s.ServerConnector: Stopped application@6644bdf5{HTTP/1.1,[http/1.1]}{0.0.0.0:7060} Exception in thread ""main"" java.lang.NullPointerException     at org.eclipse.jetty.io.SelectorManager.doStop(SelectorManager.java:274)     at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)     at org.eclipse.jetty.util.component.ContainerLifeCycle.stop(ContainerLifeCycle.java:143)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStop(ContainerLifeCycle.java:161)     at org.eclipse.jetty.server.AbstractConnector.doStop(AbstractConnector.java:305)     at org.eclipse.jetty.server.AbstractNetworkConnector.doStop(AbstractNetworkConnector.java:88)     at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)     at org.eclipse.jetty.server.Server.doStop(Server.java:465)     at org.eclipse.jetty.util.component.AbstractLifeCycle.stop(AbstractLifeCycle.java:89)     at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:46)     at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:41)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:76)     at io.dropwizard.cli.Cli.run(Cli.java:75)     at io.dropwizard.Application.run(Application.java:79) ```  This could be a solution. Surround `server.stop()` with a 2nd `try/catch` block and log a warning.  ``` try {   server.stop(); } catch (Exception e) {    LOGGER.warn(""Stop server fails"", e); } ```","closed","bug,","BusComp","2016-05-24T12:14:21Z","2016-05-25T13:17:47Z"
"","2384","Throttling logging appender","See https://github.com/dropwizard/dropwizard/issues/2376.  This PR implements a throttling mechanism for logging appenders.  The existing parameters limiting the queue size (`queueSize` and `discardingThreshold`) do not prevent the application from flooding a remote logging service. Such services usually become expensive when their usage quota is exceeded.  The proposed feature aims at providing a safety net when the application logging goes out of control.  Two new logging configuration parameters are introduced and can apply to any logging appender: - `throttlingTimeWindow` is a `Duration` defining a sliding window for throttling. By default, it is not set and throttling is disabled. - `maxMessagesPerThrottlingTimeWindow` is the maximum number of messages sent during the throttling time window. Once this number is reached, messages are silently discarded until there is room for new messages in the sliding time window.","closed","feature,","ochedru","2018-06-11T12:18:02Z","2018-06-22T21:50:59Z"
"","1901","Upgrade Jetty to 9.4.1.v20170120","See changelog here: https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.1.v20170120","closed","improvement,","arteam","2017-01-27T17:15:48Z","2017-01-27T18:44:35Z"
"","2002","Update documentation about minimum and maximum number of threads","See #1997 for the details.","closed","documentation,","zloster","2017-04-11T15:29:02Z","2017-04-12T13:26:56Z"
"","1704","bugfix - getting started doc","sayHello     @QueryParam(""name"") doesn't identify Optional   alternate implementation exists at /example/helloworld/core/Template.java","closed","","codebuff","2016-08-22T14:42:30Z","2016-08-22T16:21:06Z"
"","1700","Only TLSv1.2 Seems Supported","Running [sslyze](https://github.com/nabla-c0d3/sslyze) on our production Dropwizard 1.0.0 machines returns the following:  ```   * SSLV2 Cipher Suites:       Server rejected all cipher suites.   * SSLV3 Cipher Suites:       Server rejected all cipher suites.    * TLSV1 Cipher Suites:       Server rejected all cipher suites.   * TLSV1_1 Cipher Suites:       Server rejected all cipher suites.   * TLSV1_2 Cipher Suites:       Preferred:                                TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256             ECDH-570 bits  128 bits                                                                         Accepted:                                 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             ECDH-570 bits  128 bits                                                                           TLS_DHE_RSA_WITH_AES_128_CBC_SHA256               DH-1024 bits   128 bits                                                                           TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256             ECDH-570 bits  128 bits                                                                           TLS_DHE_RSA_WITH_AES_128_GCM_SHA256               DH-1024 bits   128 bits                                                                           TLS_RSA_WITH_AES_128_GCM_SHA256                   -              128 bits                                                                           TLS_RSA_WITH_AES_128_CBC_SHA256                   -              128 bits                                                                    ```  Issues detected so far: - Default `curl` on CentOS 5.11 will not work - `openssl s_client -prexit -tls1 -connect :` can't communicate with the server - Some Java 6/7 clients are unable to communicate with the services.  The error in our logs (under DEBUG) are  ``` DEBUG [2016-08-19 13:38:40,761] org.eclipse.jetty.server.HttpConnection: ! javax.net.ssl.SSLHandshakeException: no cipher suites in common ! at sun.security.ssl.Alerts.getSSLException(Alerts.java:192) ! at sun.security.ssl.SSLEngineImpl.fatal(SSLEngineImpl.java:1666) ! at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:304) ! at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:292) ```  Explicitly setting `supportedProtocols: [SSLv3, TLSv1, TLSv1.1, TLSv1.2]` has no affect on the issues I've pointed out. Jetty even states that it should support more:  ``` DEBUG [2016-08-19 13:29:31,971] org.eclipse.jetty.util.ssl.SslContextFactory: Selected Protocols [TLSv1, TLSv1.1, TLSv1.2] of [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2] ```  Before upgrading to 1.0.0 (so 0.9.2 with exact same config) the machines have the following sslyze output:  ```   * SSLV2 Cipher Suites:       Server rejected all cipher suites.   * SSLV3 Cipher Suites:       Server rejected all cipher suites.    * TLSV1_1 Cipher Suites:       Preferred:                                TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-570 bits  128 bits                                                                         Accepted:                                 TLS_DHE_RSA_WITH_AES_128_CBC_SHA                  DH-1024 bits   128 bits                                                                           TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-570 bits  128 bits                                                                           TLS_RSA_WITH_AES_128_CBC_SHA                      -              128 bits                                                                           TLS_RSA_WITH_RC4_128_MD5                          -              128 bits                                                                           TLS_RSA_WITH_RC4_128_SHA                          -              128 bits                                                                           TLS_ECDHE_RSA_WITH_RC4_128_SHA                    ECDH-570 bits  128 bits                                                                           TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA                 DH-1024 bits   112 bits                                                                           TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              112 bits                                                                           TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               ECDH-570 bits  112 bits                                                                      * TLSV1 Cipher Suites:       Preferred:                                TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-570 bits  128 bits                                                                         Accepted:                                 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-570 bits  128 bits                                                                           TLS_DHE_RSA_WITH_AES_128_CBC_SHA                  DH-1024 bits   128 bits                                                                           TLS_RSA_WITH_AES_128_CBC_SHA                      -              128 bits                                                                           TLS_RSA_WITH_RC4_128_SHA                          -              128 bits                                                                           TLS_ECDHE_RSA_WITH_RC4_128_SHA                    ECDH-570 bits  128 bits                                                                           TLS_RSA_WITH_RC4_128_MD5                          -              128 bits                                                                           TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               ECDH-570 bits  112 bits                                                                           TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA                 DH-1024 bits   112 bits                                                                           TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              112 bits                                                                      * TLSV1_2 Cipher Suites:       Preferred:                                TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             ECDH-570 bits  128 bits                                                                         Accepted:                                 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256             ECDH-570 bits  128 bits                                                                           TLS_DHE_RSA_WITH_AES_128_GCM_SHA256               DH-1024 bits   128 bits                                                                           TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256             ECDH-570 bits  128 bits                                                                           TLS_DHE_RSA_WITH_AES_128_CBC_SHA256               DH-1024 bits   128 bits                                                                           TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA                ECDH-570 bits  128 bits                                                                           TLS_DHE_RSA_WITH_AES_128_CBC_SHA                  DH-1024 bits   128 bits                                                                           TLS_RSA_WITH_AES_128_CBC_SHA256                   -              128 bits                                                                           TLS_RSA_WITH_AES_128_GCM_SHA256                   -              128 bits                                                                           TLS_RSA_WITH_AES_128_CBC_SHA                      -              128 bits                                                                           TLS_RSA_WITH_RC4_128_MD5                          -              128 bits                                                                           TLS_RSA_WITH_RC4_128_SHA                          -              128 bits                                                                           TLS_ECDHE_RSA_WITH_RC4_128_SHA                    ECDH-570 bits  128 bits                                                                           TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA               ECDH-570 bits  112 bits                                                                           TLS_RSA_WITH_3DES_EDE_CBC_SHA                     -              112 bits                                                                           TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA                 DH-1024 bits   112 bits                                                                    ```  I can't find anything in our or Jetty's release notes that would indicate this behavior should have changed.  Aside: setting `supportedCipherSuites` does have an effect so that part of the dropwizard configuration does do it right, but still won't allow tls v1.1","closed","","nickbabcock","2016-08-19T14:00:00Z","2016-08-21T22:18:44Z"
"","1794","Make HttpConfiguration#blockingTimeout configurable","Right now `org.eclipse.jetty.server.HttpConfiguration.setBlockingTimeout(long)`is not configurable via `io.dropwizard.jetty.HttpConnectorFactory`but it probably should be. -1 as default meaning block forever is probably not a good value.","closed","","CodingFabian","2016-11-02T07:27:10Z","2016-11-02T17:38:27Z"
"","2184","Add possibility to configure Jetty's minRequestDataRate","Resolves #2181.","closed","improvement,","patrox","2017-10-24T21:21:41Z","2017-10-26T15:06:59Z"
"","2185","Add support for ServiceUnavailableRetryStrategy","Resolves #2093.","closed","feature,","patrox","2017-10-25T20:52:19Z","2017-10-26T16:04:04Z"
"","1571","Enable lazy-loading of ConfigOverride values via Supplier","Resolves #1532","closed","","choliver","2016-05-29T11:36:40Z","2016-05-29T13:48:56Z"
"","2537","Upgrade dependencies","Replaces #2528  Note: Errorprone/Nullaway are currently not working on JDK11.  It fails to compile.","closed","improvement,","jplock","2018-10-27T13:57:15Z","2018-10-27T19:48:08Z"
"","2193","add immediateFlush option for file logging #2098","replacement for https://github.com/dropwizard/dropwizard/pull/2100","closed","improvement,","pavelkokush","2017-11-03T19:35:09Z","2017-11-09T13:24:01Z"
"","1743","Rename META-INF.services -> META-INF/services for dropwizard-request-logging","Rename META-INF.services -> META-INF/services for dropwizard-request-logging.  Closes https://github.com/dropwizard/dropwizard/issues/1742","closed","bug,","jmoney","2016-09-27T02:05:54Z","2016-10-02T17:08:25Z"
"","2413","Simplify SelfValidatingValidator","Remove use of Javassist from SelfValidatingValidator in favor of plain old Java.","closed","improvement,","joschi","2018-06-26T11:10:05Z","2018-06-27T22:31:27Z"
"","1817","Upgrade Guava to 20.0","Release notes: https://github.com/google/guava/wiki/Release20","closed","improvement,","arteam","2016-11-11T14:15:16Z","2016-11-11T15:48:00Z"
"","1970","Upgrade to metrics 3.2.2","Release notes: https://github.com/dropwizard/metrics/releases/tag/v3.2.2  This release fixes a nasty bug during creating a snapshot which was introduced in the 3.2.*  branch: https://github.com/dropwizard/metrics/pull/1111. The bug affects only `SlidingTimeWindowReservoir`, so its impact not so big, but anyway it would be great to ship the fix in the Dropwizard release.","closed","bug,","arteam","2017-03-20T14:40:29Z","2017-03-21T08:22:44Z"
"","1956","Upgrade Dropwizard Metrics to 3.2.1","Release notes: http://metrics.dropwizard.io/3.2.1/about/release-notes.html#v3-2-1-mar-10-2017","closed","improvement,","arteam","2017-03-12T18:16:30Z","2017-03-12T21:29:32Z"
"","2391","Update release notes with latest versions","Release notes were a bit out of date. I noticed a couple of our releases (v1.3.1 / v1.2.5) and (v1.3.2 / v1.2.6) had the exact same changelog so I condensed them into a single entry. Is this ok, or should I expand them out.","closed","documentation,","nickbabcock","2018-06-13T21:58:00Z","2018-06-22T21:51:00Z"
"","1588","Unable to unit-test custom ConstraintViolationExceptionMapper","Related to: https://github.com/dropwizard/dropwizard/issues/710  If I have ""registerDefaultExceptionMappers: false"" in my server-configuration, I can replace default ConstraintViolationExceptionMapper with my own, it works ok.  However if I wish to unit-test responses created by that custom mappers, it is not possible with ResourceTestRule as it registers ConstraintViolationExceptionMapper in ResourceTestResourceConfig.configure(), so I cannot overwrite that with my own mapper.  I'd wish some way to change this behaviour.","closed","","situokko","2016-06-06T14:13:04Z","2016-06-06T15:00:37Z"
"","1938","Use the new setDefault() option to set the default metric registry","Related to https://github.com/dropwizard/metrics/pull/801","closed","improvement,","jplock","2017-02-25T13:38:04Z","2017-03-05T16:10:35Z"
"","2066","Dependency updates","Regular dependency updates.","closed","improvement,","joschi","2017-05-25T10:26:13Z","2017-05-26T07:44:09Z"
"","2463","Fix new jersey 2.27 warnings","Register instances using an AbstractBinder instead of registering them directly  ###### Problem: This should fix all the warnings in https://github.com/dropwizard/dropwizard/issues/2418  ###### Solution: Instead of registering Resource instances directly, register the .class and let jersey instantiate it. In the case where there are constructor args, use an AbstractBinder that binds the instance to the class.","closed","bug,","josephlbarnett","2018-08-22T16:56:22Z","2018-09-26T10:04:48Z"
"","2207","Upgrade to Hibernate 5.2.12.Final","Refs https://hibernate.atlassian.net/browse/HHH-11996 Fixes #2206","closed","bug,","joschi","2017-11-13T08:39:46Z","2017-11-13T10:05:20Z"
"","2538","Make the usage of Guava optional in all modules","Refs #2535","closed","improvement,","joschi","2018-10-27T19:47:58Z","2019-03-03T10:29:10Z"
"","2263","Force Java 8 as compile target","Refs #2261","closed","bug,","joschi","2018-02-09T10:00:10Z","2018-02-09T16:33:02Z"
"","2134","Dependency updates","Refs #2132","closed","","joschi","2017-08-21T12:37:49Z","2017-08-21T15:04:29Z"
"","1885","Use same JAVA_OPTS in Travis and Circle CI","Refs #1883","closed","","joschi","2017-01-13T14:23:05Z","2017-01-13T14:43:11Z"
"","1647","Jackson 2.8","Refs #1627.  CC: @cowtowncoder","closed","improvement,","joschi","2016-07-26T10:28:57Z","2016-09-30T21:44:31Z"
"","1564","Rename initialStreamSendWindow setting to initialStreamRecvWindow","Refs #1562","closed","","joschi","2016-05-26T23:23:35Z","2016-05-26T23:52:36Z"
"","2067","Refactor of DBIFactory (Issue #2056)","Refactor of DBIFactory (Issue #2056)      - Split DBI construction and configuration into dedicated protected methods. - Added unit tests to verify default configuration.  Please also merge this into master.  Thank you!","closed","improvement,","isaki","2017-06-01T21:52:18Z","2017-06-08T18:57:17Z"
"","1890","Add timeouts for the all tests in the `dropwizard-jersey`module","Recently, the tests for Jersey resources were rather flaky and failed on Travis CI. Unfortunately, we can't get any debug information about it, because they the test suite is killed by the CI environment because it becomes unresponsive. It would be great to have timeouts for each tests, so even in case we have errors, the whole test suite won't fail.  This is achieved by introducing a new class `AbstractJerseyTest` which contains common features of the all tests for Jersey resources. Now the tests are inherited from it and perform HTTP requests with timeouts.","closed","improvement,","arteam","2017-01-17T18:49:24Z","2017-01-23T21:15:22Z"
"","1799","Reload certificate configuration at runtime","Recent Jetty releases have allowed us to reload ssl/tls information at runtime, so it's no longer necessary to restart Dropwizard to install a new certificate. More information can be found: https://github.com/eclipse/jetty.project/issues/918  The motivation behind this PR is that as certificate management starts to be more automatic (looking at Let's Encrypt) and certificates are issues more frequently, the downtime caused by new certificates starts to become palpable. Yes, the service may only be down for a few moments, but any reductions in downtime should be welcomed.  Those who use a TLS termination proxy in front of dropwizard (or use http endpoints) will not be affected.  I implemented a quick check to ensure it's working  ``` keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -keysize 2048  # add to config.yaml # start dropwizard  rm keystore.jks keytool -genkey -keyalg RSA -alias selfsigned2 -keystore keystore.jks -storepass password -keysize 2048 curl -k -X POST 'https://localhost:8081/tasks/ssl-reload' ```  I can confirm that the certificate was indeed changed without needing a restart. üéâ   I marked this PR as RFC (request for comments) to get a feel of opinions. This PR is not ready to be merged.  Questions:  - determine where `SslReloadBundle` / `SslReloadTask` should live. Right now, they reside in the e2e module, which shouldn't be their final resting place üòù    - Add `SslReloadTask` to dropwizard-servlets with other `Tasks`?   - Add `dropwizard-ssl-reload` submodule?   - Something else - is an admin task the right way to reload configuration? Other ideas could be a filewatcher for automatic reloading... - is hooking into jetty's lifecycle handler appropriate? I feel like it resulted in a rather concise and elegant solution (if maybe a bit shortsighted -- ie. too opinionated). - what should the behavior be if one of the new configurations is misconfigured? Stop reloading or continue with the rest?  Todos:   - [x] tests - [x] documentation","closed","improvement,","nickbabcock","2016-11-03T03:13:44Z","2016-11-07T15:44:13Z"
"","1877","Add configuration hooks to UnitOfWorkAwareProxyFactory","Ran into a situation where I want to be able to do some configuration sessions that are set up by the `UnitOfWorkAwareProxyFactory`. Specifically, in our app I wanted to set up a bunch of default hibernate filters that should be turned on for every session.   In our resource methods that use `UnitOfWork`, we do that by implementing Jersey event listeners with lower priority than the UnitOfWork listener. I wanted to do something similar and poke some configuration in between the session being set up, and my code actually running.  With the current state of things (using 1.0.5) that required us to rewrite our own version of `UnitOfWorkAwareProxyFactory`. Additionally, because `UnitOfWorkAspect` is still package private in the latest release, we also had to copy and create our own version of that.  I spiked out what this change might look like in this PR, it simply takes in two lambdas for a before and after configuration and provides the session factory to both. I'm open to feedback on other approaches to solve this, but I figured the discussion is easier if there is some code.  Let me know any feed back on if this change in general seems reasonable, and on the specific implementation I added.","closed","improvement,","scottaj","2017-01-12T01:24:57Z","2021-03-23T22:43:06Z"
"","2250","Support bootstrap logging json format?","Pulled in `1.3.0-rc4` to experiment with json logging before the release. Bootstrap logging[1] defaults to a traditional format. Should there be an option to flex bootstrap logging to json? In the use cases that all logs are sent to log processors (splunk, elk, etc..) they may not be configured to recognize the non-json log event.  > 22:10:37.601 [main] INFO org.eclipse.jetty.util.log - Logging initialized @414ms to org.eclipse.jetty.util.log.Slf4jLog {""level"":""INFO"",""logger"":""io.dropwizard.server.DefaultServerFactory"",""thread"":""main"",""message"":""Registering jersey handler with root path prefix: /"",""timestamp"":""2018-01-21T22:10:40.131Z""}  [1] https://github.com/dropwizard/dropwizard/blob/v1.3.0-rc4/dropwizard-logging/src/main/java/io/dropwizard/logging/BootstrapLogging.java","closed","","mattnelson","2018-01-21T22:22:09Z","2018-02-08T14:34:43Z"
"","2246","Allow dynamic constraint validation messages","Previously, once a validation constraint was evaluated the entire string was cached. The impetus for a cache is that reflection is used to determine if we need to prefix an error message with additional context (eg. ""query parameter x ...""). Repeatedly calculating this prefix is wasteful -- thus the cache was born.  The biggest issue with this cache is that while it worked with all Hibernate Validation default message templates, it failed for message templates that contained the invalid value (eg. ""query parameter x ({validatedValue}) is greater than {value}""), as the same error would be returned regardless of validatedValue. It would also fail for custom constraint validators that didn't return the same message everytime.  The fix is to switch the cache from caching the entire error message to just the error prefix (eg. ""query parameter x"", ""return value"", no prefix).  This has no effect on performance and will allow for more custom validation messages in Dropwizard.  Closes https://github.com/dropwizard/dropwizard/issues/2245 Ref https://github.com/dropwizard/dropwizard/issues/2090 CC'ing users who expressed interest: @imochurad @rtti @peterklijn","closed","bug,","nickbabcock","2018-01-18T13:38:15Z","2018-01-19T14:10:57Z"
"","1742","Discoverable bug for RequestLogFactory","Pretty sure that `META-INF.services` -> `META-INF/services` [here](https://github.com/dropwizard/dropwizard/tree/master/dropwizard-request-logging/src/main/resources/META-INF.services).  This is causing custom RequestLogFactories from not being discovered.  Workaround, in your project add a `io.dropwizard.jackson.Discoverable` file in `META-INF/services` with contents of `io.dropwizard.request.logging.RequestLogFactory` and everything is hunky-dory again!    I _think_ the only reason this works in 1.0 is because `RequestLogFactory` has a default impl class in the jackson annotation.","closed","","jmoney","2016-09-26T21:01:47Z","2016-09-27T05:18:51Z"
"","1683","Add ResourceCollection support ServletEnvironment","PR to support adding a collection of static resource folders in `ServletEnvironment`.   Basically this was done to negate the need for consumers to have a dependency on `jetty-util` library, as they would need to create a `ResourceCollection` if they have multiple resources for serving static content.","closed","improvement,","afrin216","2016-08-10T22:35:22Z","2016-08-13T17:00:56Z"
"","1724","IncompatibleClassChangeError: LoggerContext does not implement org.slf4j.ILoggerFactory","Porting my application to use dropwizard for jetty / jersey and the likes. Cannot get the server to start. I have made sure only slfj jars and logback on the classpath are the dropwizard dependencies.  Dropwizard Version : 1.0.0  Exception trace: `java.lang.IncompatibleClassChangeError: Class ch.qos.logback.classic.LoggerContext does not implement the requested interface org.slf4j.ILoggerFactory     at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:358)     at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:383)     at io.dropwizard.jackson.DiscoverableSubtypeResolver.(DiscoverableSubtypeResolver.java:24)     at io.dropwizard.jackson.Jackson.configure(Jackson.java:61)     at io.dropwizard.jackson.Jackson.newObjectMapper(Jackson.java:23)     at io.dropwizard.setup.Bootstrap.(Bootstrap.java:64)     at io.dropwizard.Application.run(Application.java:72)     at org.apache.ambari.metrics.server.MetricsServerApplication.main(MetricsServerApplication.java:29)`  Attaching my dependency tree for reference. [dep-tree.txt](https://github.com/dropwizard/dropwizard/files/462867/dep-tree.txt)","closed","","sidwagle","2016-09-08T21:41:17Z","2017-02-07T19:06:09Z"
"","2129","Exception Mapper Logging Enhancements","Please see: #2128  Commit notes:  ``` Date:   Wed Aug 9 16:10:01 2017 -0400      Exception mapper logging enhancements          1) Implemented debug logging for JerseyViolationExceptionMapper.     2) Fixed compiler warning regarding serialization for     JerseyViolationException.     3) Wrapped debug statement in JsonPropcessingExeptionMapper with     ""isDebugEnabled""; this will ensure the JVM does not bother loading and     caching the log string unless debug is actually enabled. This will also     allow more aggressive code optimization when running the server JVM. ```","closed","improvement,","isaki","2017-08-09T20:15:00Z","2017-08-18T11:40:55Z"
"","2421","Jetty CVE-2018-12536","Please can we upgrade Jetty version in dropwizard-bom to pull in the fix for CVE-2018-12536? It looks like it was resolved in 9.4.11.v20180605  https://bugs.eclipse.org/bugs/show_bug.cgi?id=535670","closed","security,","dnwe","2018-07-02T13:06:51Z","2018-07-02T14:09:09Z"
"","2526","Fix issue #2500 Include default requestLog format string in documentation","Picked up issue #2500 and added the default log pattern into documentation. I did copy it directly from class LogbackAccessRequestLayoutTest, in order to avoid copy/paste errors.  Any feedback welcome.","closed","documentation,","nitram509","2018-10-11T12:43:06Z","2018-10-11T13:50:05Z"
"","2091","Client ntlm auth","patch for #2084 to allow a NTCredentials instance to be used for proxy auth. I've also updated the doco, however my ServiceUnavailableRetryStrategy is somewhat unreliable at my work, sometimes it works, sometimes it doesnt","closed","feature,","stringy05","2017-06-28T03:40:08Z","2017-07-04T18:47:36Z"
"","1787","Custom Parameter Annotion Not Working","Our Dropwizard 0.6.2 application uses custom parameter annotations. Custom annotations were simple with Jersey 1.x. With Jersey 2.x they are more complicated. I am upgrading our application to the latest Dropwizard and am having trouble getting our custom annotations to work.  I finally have code with will run, however the parameter with the custom annotation is always the empty string. I created a simple application to isolate the creation of a custom annotation. I am emulating the QueryParam annotation to keep things simple.  I appreciate any advice y'all can give.  I have uploaded the code to for my simple application to https://github.com/tmkorte/turbo-fiesta.  Here are that classes:  The annotation:  ``` java @Path(""/greetings/"") @Produces(MediaType.APPLICATION_JSON) public class HelloWorldResource {     @GET     @Timed     @Path(""sayHello"")     public HelloResponse sayHello(@QueryParam(""q"") String queryParam,                                   @MyQueryParam(""m"") String myQueryParam) {         return new HelloResponse(queryParam, myQueryParam);     } } ```  Factory provider with inner classes:  ``` java @Singleton final class MyQueryParamValueFactoryProvider extends AbstractValueFactoryProvider {      @Singleton     static final class InjectionResolver extends ParamInjectionResolver {          /**          * Create new {@link MyQueryParam @FlippedParam} injection resolver.          */         public InjectionResolver() {             super(MyQueryParamValueFactoryProvider.class);         }     }      private static final class MyQueryParamValueFactory extends AbstractContainerRequestValueFactory {          private final MultivaluedParameterExtractor extractor;         private final boolean decode;          MyQueryParamValueFactory(MultivaluedParameterExtractor extractor, boolean decode) {             this.extractor = extractor;             this.decode = decode;         }          public Object provide() {             try {                 return extractor.extract(getContainerRequest().getUriInfo().getQueryParameters(decode));             } catch (ExtractorException e) {                 throw new ParamException.QueryParamException(e.getCause(),                                                              extractor.getName(), extractor.getDefaultValueString());             }         }     }      /**      * Injection constructor.      *      * @param mpep    multivalued map parameter extractor provider.      * @param locator HK2 service locator.      */     @Inject     public MyQueryParamValueFactoryProvider(MultivaluedParameterExtractorProvider mpep, ServiceLocator locator) {         super(mpep, locator, Parameter.Source.QUERY);     }      @Override     public AbstractContainerRequestValueFactory createValueFactory(Parameter parameter) {         String parameterName = parameter.getSourceName();         if (parameterName == null || parameterName.length() == 0) {             // Invalid query parameter name             return null;         }          MultivaluedParameterExtractor e = get(parameter);         if (e == null) {             return null;         }          return new MyQueryParamValueFactory(e, !parameter.isEncoded());     } } ```  Class to do the bindings:  ``` java public class MyQueryParamBinder extends AbstractBinder {     protected void configure() {         bind(MyQueryParamValueFactoryProvider.class)                 .to(ValueFactoryProvider.class)                 .in(Singleton.class);           bind(MyQueryParamValueFactoryProvider.InjectionResolver.class)                 .to(new TypeLiteral>() {                 })                 .in(Singleton.class);     } } ```  Dropwizard application:  ``` java public class ParamAnnotationApplication extends Application {     public static void main(String[] args)             throws Exception {         new ParamAnnotationApplication().run(args);     }      public void run(Configuration configuration, Environment environment)             throws Exception {         environment.jersey().register(new MyQueryParamBinder());         environment.jersey().packages(""works.rivet.example.param"");          environment.jersey().register(new HelloWorldResource());     } } ```  The resource that uses the custom query param annotation, the value of which is always the empty string:  ``` java @Path(""/greetings/"") @Produces(MediaType.APPLICATION_JSON) public class HelloWorldResource {     @GET     @Timed     @Path(""sayHello"")     public HelloResponse sayHello(@QueryParam(""q"") String queryParam,                                   @MyQueryParam(""m"") String myQueryParam) {         return new HelloResponse(queryParam, myQueryParam);     } } ```","closed","","tmkorte","2016-10-25T21:22:27Z","2018-06-24T22:31:45Z"
"","2284","Incompatibility with Jasper Reports","Our company is evaluating Dropwizard for some projects and one of them is an existing multi module Webapp that works perfectly with Tomcat and Jasper. All endpoints are working well wih Dropwizard, except the ones that call Jasper.  When those endpoints are called, Dropwizard returns:                                   HTTP ERROR 500         Problem accessing /boleto/pdf. Reason:                 Request failed.                 In Dropwizard's console is the output:  `WARN  [2018-02-26 17:48:03,359] org.eclipse.jetty.util.thread.QueuedThreadPool: Unexpected thread death: org.eclipse.jetty.util.thread.QueuedThreadPool$2@3a6cf34a in QueuedThreadPool@dw{STARTED,8<=8<=1024,i=3,q=0} Exception in thread ""dw-13"" Exception: net.sf.jasperreports.engine.JRRuntimeException thrown from the UncaughtExceptionHandler in thread ""dw-13""`  The error doesn't happen if I debug in Eclipse, only running outside the IDE. Using Java 1.8, Jasper 6.3.0 and Dropwizard 1.2.4. POMs of the projects are attached.  Any ideas? Thanks.   [dropwizard-pom.txt](https://github.com/dropwizard/dropwizard/files/1759869/dropwizard-pom.txt) [parent-pom.txt](https://github.com/dropwizard/dropwizard/files/1759870/parent-pom.txt) [core-pom.txt](https://github.com/dropwizard/dropwizard/files/1759871/core-pom.txt)","closed","","Rafael-Simonelli","2018-02-26T18:49:05Z","2018-03-01T08:50:09Z"
"","2540","java.lang.VerifyError on 1.3.5, not present in 1.2.8","Our application fails to initialize under DropWizard 1.3.5. Rolling back to 1.2.8 it works fine.   We're still using Java 8. Happens under both Oracle and OpenJDK JVMs, and both OSX and Linux.  ``` Error: A JNI error has occurred, please check your installation and try again Exception in thread ""main"" java.lang.VerifyError: Bad type on operand stack Exception Details:   Location:     io/ourorg/OurApplication.initialize(Lio/dropwizard/setup/Bootstrap;)V @17: invokespecial   Reason:     Type 'io/dropwizard/configuration/EnvironmentVariableSubstitutor' (current frame, stack[4]) is not assignable to 'org/apache/commons/lang3/text/StrSubstitutor'   Current Frame:     bci: @17     flags: { }     locals: { 'io/ourorg/OurApplication', 'io/dropwizard/setup/Bootstrap' }     stack: { 'io/dropwizard/setup/Bootstrap', uninitialized 1, uninitialized 1, 'io/dropwizard/configuration/ConfigurationSourceProvider', 'io/dropwizard/configuration/EnvironmentVariableSubstitutor' }   Bytecode:     0x0000000: 2bbb 0002 592b b600 03bb 0004 5903 b700     0x0000010: 05b7 0006 b600 072b bb00 0859 2ab7 0009     0x0000020: b600 0a2a 2bb7 000b b1                           at java.lang.Class.getDeclaredMethods0(Native Method)         at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)         at java.lang.Class.privateGetMethodRecursive(Class.java:3048)         at java.lang.Class.getMethod0(Class.java:3018)         at java.lang.Class.getMethod(Class.java:1784)         at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)         at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526) (END) ```","closed","","reubenfirmin","2018-11-05T20:56:52Z","2021-06-12T07:00:54Z"
"","2247","Add `dropwizard-jdbi3` to bom","Oops >_>  ###### Problem: I dun goofed and forgot to add `dropwizard-jdbi3` to the project's bom  ###### Solution: Added it to the bom  ###### Result: It's now in the bom","closed","feature,","FredDeschenes","2018-01-19T14:41:20Z","2018-02-09T16:32:38Z"
"","2005","Improve unhandled exception logging in Cli.run","Only log the exception message if there is one and always print the exceptiopn stack trace when Cli.run receives an unhandled exception when invoking Command.run.  Fixes #2003","closed","improvement,","tbartley","2017-04-11T22:31:37Z","2017-05-19T11:42:46Z"
"","2004","Improve unhandled exception logging in Cli.run","Only log the exception message if there is one and always print the exception stack trace when Cli.run receives an unhandled exception when invoking Command.run.  Fixes #2003","closed","","tbartley","2017-04-11T22:24:46Z","2017-04-11T22:42:19Z"
"","1783","Hibernate validator 5.3.0","Only changes were related to validation annotations on types (#1586). Seems like the validation message was updated. Looks to be a step backwards, but it is as [documented](https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#type-arguments-constraints) üòã","closed","improvement,","nickbabcock","2016-10-22T19:25:53Z","2016-10-22T20:55:07Z"
"","2454","Typo on Views page","On the page https://www.dropwizard.io/1.3.5/docs/manual/views.html, there is the sentence:  If your template path contains .ftl, **.flth**, or .ftlx  It should be   If your template path contains .ftl, **.ftlh**, or .ftlx","closed","","phxql","2018-08-13T12:37:16Z","2018-08-15T08:26:34Z"
"","1757","Possible documentation bug or confusing documentation","On page: http://www.dropwizard.io/1.0.2/docs/manual/hibernate.html in the documentation an object of type UserDAO is created in the run method of the application class. The class does not occur anymore in the page, and I cannot find it as any official class on the Internet.  However another class is defined lower down on the page: PersonDAO. From the context I suspect that this is intended to be the same class, but can't confirm it.  Can you please have a look at this, and make any necessary clarifications.  Best regards...","closed","","sorjon02","2016-10-04T06:43:19Z","2016-10-19T14:57:40Z"
"","1708","Example fails to build in Turkish locale","On `mvn package` command of `dropwizard-example`, it fails to build in following SQL statement:  ``` liquibase.exception.DatabaseException: Unknown data type: ""ƒ∞NT""; SQL statement: CREATE TABLE PUBLIC.DATABASECHANGELOGLOCK (ID ƒ∞NT NOT NULL, LOCKED BOOLEAN NOT NULL, LOCKGRANTED TIMESTAMP, LOCKEDBY VARCHAR(255), CONSTRAINT PK_DATABASECHANGELOGLOCK PRIMARY KEY (ID)) [50004-192] [Failed SQL: CREATE TABLE PUBLIC.DATABASECHANGELOGLOCK (ID ƒ∞NT NOT NULL, LOCKED BOOLEAN NOT NULL, LOCKGRANTED TIMESTAMP, LOCKEDBY VARCHAR(255), CONSTRAINT PK_DATABASECHANGELOGLOCK PRIMARY KEY (ID))] ```  You may notice that `ƒ∞NT` does not equal to `INT`, the obvious mistake here is `""int"".toUpperCase()` yields `ƒ∞NT` in `tr-TR` locale. However this should not be locale specific. The OS running maven is OS X 10.11.6 Turkish.  I have no idea about Java workflow, thus I couldn't discriminate if this is caused by framework itself or example project.  Complete output:  ``` $ mvn package [INFO] Scanning for projects... Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-bom/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-bom/1.0.1-SNAPSHOT/maven-metadata.xml (606 B at 0.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-bom/1.0.1-SNAPSHOT/dropwizard-bom-1.0.1-20160819.144851-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-bom/1.0.1-SNAPSHOT/dropwizard-bom-1.0.1-20160819.144851-38.pom (35 KB at 36.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-parent/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-parent/1.0.1-SNAPSHOT/maven-metadata.xml (609 B at 0.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-parent/1.0.1-SNAPSHOT/dropwizard-parent-1.0.1-20160819.144848-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-parent/1.0.1-SNAPSHOT/dropwizard-parent-1.0.1-20160819.144848-38.pom (26 KB at 32.0 KB/sec) [INFO]                                                                          [INFO] ------------------------------------------------------------------------ [INFO] Building Dropwizard Example Application 1.0.1-SNAPSHOT [INFO] ------------------------------------------------------------------------ Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/1.0.1-SNAPSHOT/dropwizard-core-1.0.1-20160819.145014-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/1.0.1-SNAPSHOT/dropwizard-core-1.0.1-20160819.145014-38.pom (4 KB at 5.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-util/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-util/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-util/1.0.1-SNAPSHOT/dropwizard-util-1.0.1-20160819.144856-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-util/1.0.1-SNAPSHOT/dropwizard-util-1.0.1-20160819.144856-38.pom (2 KB at 2.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/core/jackson-annotations/2.7.6/jackson-annotations-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.7.6/jackson-annotations-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.7.6/jackson-annotations-2.7.6.pom (2 KB at 3.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jackson/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jackson/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jackson/1.0.1-SNAPSHOT/dropwizard-jackson-1.0.1-20160819.144902-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jackson/1.0.1-SNAPSHOT/dropwizard-jackson-1.0.1-20160819.144902-38.pom (3 KB at 4.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/core/jackson-core/2.7.6/jackson-core-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.7.6/jackson-core-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.7.6/jackson-core-2.7.6.pom (5 KB at 33.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/core/jackson-databind/2.7.6/jackson-databind-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.7.6/jackson-databind-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.7.6/jackson-databind-2.7.6.pom (6 KB at 35.0 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.7.6/jackson-datatype-guava-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.7.6/jackson-datatype-guava-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.7.6/jackson-datatype-guava-2.7.6.pom (3 KB at 20.0 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatypes-collections/2.7.6/jackson-datatypes-collections-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatypes-collections/2.7.6/jackson-datatypes-collections-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatypes-collections/2.7.6/jackson-datatypes-collections-2.7.6.pom (2 KB at 13.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.7.6/jackson-datatype-jsr310-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.7.6/jackson-datatype-jsr310-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.7.6/jackson-datatype-jsr310-2.7.6.pom (6 KB at 37.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.7.6/jackson-datatype-jdk8-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.7.6/jackson-datatype-jdk8-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.7.6/jackson-datatype-jdk8-2.7.6.pom (3 KB at 18.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/module/jackson-module-afterburner/2.7.6/jackson-module-afterburner-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-afterburner/2.7.6/jackson-module-afterburner-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-afterburner/2.7.6/jackson-module-afterburner-2.7.6.pom (4 KB at 21.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/module/jackson-modules-base/2.7.6/jackson-modules-base-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-base/2.7.6/jackson-modules-base-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-modules-base/2.7.6/jackson-modules-base-2.7.6.pom (3 KB at 16.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.7.6/jackson-datatype-joda-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.7.6/jackson-datatype-joda-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.7.6/jackson-datatype-joda-2.7.6.pom (4 KB at 22.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-validation/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-validation/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-validation/1.0.1-SNAPSHOT/dropwizard-validation-1.0.1-20160819.144908-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-validation/1.0.1-SNAPSHOT/dropwizard-validation-1.0.1-20160819.144908-38.pom (2 KB at 2.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/classmate/1.3.1/classmate-1.3.1.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.3.1/classmate-1.3.1.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.3.1/classmate-1.3.1.pom (6 KB at 35.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-configuration/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-configuration/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-configuration/1.0.1-SNAPSHOT/dropwizard-configuration-1.0.1-20160819.144914-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-configuration/1.0.1-SNAPSHOT/dropwizard-configuration-1.0.1-20160819.144914-38.pom (3 KB at 3.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.7.6/jackson-dataformat-yaml-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.7.6/jackson-dataformat-yaml-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.7.6/jackson-dataformat-yaml-2.7.6.pom (8 KB at 47.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-logging/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-logging/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-logging/1.0.1-SNAPSHOT/dropwizard-logging-1.0.1-20160819.144922-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-logging/1.0.1-SNAPSHOT/dropwizard-logging-1.0.1-20160819.144922-38.pom (3 KB at 3.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-util/9.3.11.v20160721/jetty-util-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-util/9.3.11.v20160721/jetty-util-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-util/9.3.11.v20160721/jetty-util-9.3.11.v20160721.pom (3 KB at 14.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-project/9.3.11.v20160721/jetty-project-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-project/9.3.11.v20160721/jetty-project-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-project/9.3.11.v20160721/jetty-project-9.3.11.v20160721.pom (36 KB at 164.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics/1.0.1-SNAPSHOT/dropwizard-metrics-1.0.1-20160819.144932-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics/1.0.1-SNAPSHOT/dropwizard-metrics-1.0.1-20160819.144932-38.pom (2 KB at 3.1 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-lifecycle/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-lifecycle/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-lifecycle/1.0.1-SNAPSHOT/dropwizard-lifecycle-1.0.1-20160819.144927-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-lifecycle/1.0.1-SNAPSHOT/dropwizard-lifecycle-1.0.1-20160819.144927-38.pom (2 KB at 2.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-server/9.3.11.v20160721/jetty-server-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-server/9.3.11.v20160721/jetty-server-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-server/9.3.11.v20160721/jetty-server-9.3.11.v20160721.pom (3 KB at 19.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-http/9.3.11.v20160721/jetty-http-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-http/9.3.11.v20160721/jetty-http-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-http/9.3.11.v20160721/jetty-http-9.3.11.v20160721.pom (2 KB at 11.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-io/9.3.11.v20160721/jetty-io-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-io/9.3.11.v20160721/jetty-io-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-io/9.3.11.v20160721/jetty-io-9.3.11.v20160721.pom (2 KB at 9.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jersey/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jersey/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jersey/1.0.1-SNAPSHOT/dropwizard-jersey-1.0.1-20160819.144947-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jersey/1.0.1-SNAPSHOT/dropwizard-jersey-1.0.1-20160819.144947-38.pom (4 KB at 5.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.7.6/jackson-jaxrs-json-provider-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.7.6/jackson-jaxrs-json-provider-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.7.6/jackson-jaxrs-json-provider-2.7.6.pom (4 KB at 25.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/jaxrs/jackson-jaxrs-providers/2.7.6/jackson-jaxrs-providers-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-providers/2.7.6/jackson-jaxrs-providers-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-providers/2.7.6/jackson-jaxrs-providers-2.7.6.pom (4 KB at 27.0 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.7.6/jackson-jaxrs-base-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.7.6/jackson-jaxrs-base-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.7.6/jackson-jaxrs-base-2.7.6.pom (2 KB at 11.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.7.6/jackson-module-jaxb-annotations-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.7.6/jackson-module-jaxb-annotations-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.7.6/jackson-module-jaxb-annotations-2.7.6.pom (4 KB at 24.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-webapp/9.3.11.v20160721/jetty-webapp-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-webapp/9.3.11.v20160721/jetty-webapp-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-webapp/9.3.11.v20160721/jetty-webapp-9.3.11.v20160721.pom (3 KB at 16.1 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-xml/9.3.11.v20160721/jetty-xml-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-xml/9.3.11.v20160721/jetty-xml-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-xml/9.3.11.v20160721/jetty-xml-9.3.11.v20160721.pom (2 KB at 9.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-servlet/9.3.11.v20160721/jetty-servlet-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlet/9.3.11.v20160721/jetty-servlet-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlet/9.3.11.v20160721/jetty-servlet-9.3.11.v20160721.pom (3 KB at 14.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-security/9.3.11.v20160721/jetty-security-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-security/9.3.11.v20160721/jetty-security-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-security/9.3.11.v20160721/jetty-security-9.3.11.v20160721.pom (2 KB at 13.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-continuation/9.3.11.v20160721/jetty-continuation-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-continuation/9.3.11.v20160721/jetty-continuation-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-continuation/9.3.11.v20160721/jetty-continuation-9.3.11.v20160721.pom (2 KB at 7.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-servlets/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-servlets/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-servlets/1.0.1-SNAPSHOT/dropwizard-servlets-1.0.1-20160819.144952-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-servlets/1.0.1-SNAPSHOT/dropwizard-servlets-1.0.1-20160819.144952-38.pom (4 KB at 4.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jetty/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jetty/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jetty/1.0.1-SNAPSHOT/dropwizard-jetty-1.0.1-20160819.145001-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jetty/1.0.1-SNAPSHOT/dropwizard-jetty-1.0.1-20160819.145001-38.pom (3 KB at 4.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-servlets/9.3.11.v20160721/jetty-servlets-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlets/9.3.11.v20160721/jetty-servlets-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlets/9.3.11.v20160721/jetty-servlets-9.3.11.v20160721.pom (3 KB at 19.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-request-logging/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-request-logging/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-request-logging/1.0.1-SNAPSHOT/dropwizard-request-logging-1.0.1-20160819.145006-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-request-logging/1.0.1-SNAPSHOT/dropwizard-request-logging-1.0.1-20160819.145006-38.pom (2 KB at 2.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-auth/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-auth/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-auth/1.0.1-SNAPSHOT/dropwizard-auth-1.0.1-20160819.145109-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-auth/1.0.1-SNAPSHOT/dropwizard-auth-1.0.1-20160819.145109-38.pom (2 KB at 2.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-assets/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-assets/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-assets/1.0.1-SNAPSHOT/dropwizard-assets-1.0.1-20160819.145113-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-assets/1.0.1-SNAPSHOT/dropwizard-assets-1.0.1-20160819.145113-38.pom (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-http2/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-http2/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-http2/1.0.1-SNAPSHOT/dropwizard-http2-1.0.1-20160819.145120-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-http2/1.0.1-SNAPSHOT/dropwizard-http2-1.0.1-20160819.145120-38.pom (10 KB at 14.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/http2/http2-server/9.3.11.v20160721/http2-server-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-server/9.3.11.v20160721/http2-server-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-server/9.3.11.v20160721/http2-server-9.3.11.v20160721.pom (3 KB at 14.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/http2/http2-parent/9.3.11.v20160721/http2-parent-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-parent/9.3.11.v20160721/http2-parent-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-parent/9.3.11.v20160721/http2-parent-9.3.11.v20160721.pom (830 B at 5.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/http2/http2-common/9.3.11.v20160721/http2-common-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-common/9.3.11.v20160721/http2-common-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-common/9.3.11.v20160721/http2-common-9.3.11.v20160721.pom (2 KB at 12.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/http2/http2-hpack/9.3.11.v20160721/http2-hpack-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-hpack/9.3.11.v20160721/http2-hpack-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-hpack/9.3.11.v20160721/http2-hpack-9.3.11.v20160721.pom (2 KB at 10.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-alpn-server/9.3.11.v20160721/jetty-alpn-server-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-alpn-server/9.3.11.v20160721/jetty-alpn-server-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-alpn-server/9.3.11.v20160721/jetty-alpn-server-9.3.11.v20160721.pom (3 KB at 18.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-alpn-parent/9.3.11.v20160721/jetty-alpn-parent-9.3.11.v20160721.pom Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-alpn-parent/9.3.11.v20160721/jetty-alpn-parent-9.3.11.v20160721.pom Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-alpn-parent/9.3.11.v20160721/jetty-alpn-parent-9.3.11.v20160721.pom (613 B at 4.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-hibernate/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-hibernate/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-hibernate/1.0.1-SNAPSHOT/dropwizard-hibernate-1.0.1-20160819.145102-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-hibernate/1.0.1-SNAPSHOT/dropwizard-hibernate-1.0.1-20160819.145102-38.pom (3 KB at 3.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-db/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-db/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-db/1.0.1-SNAPSHOT/dropwizard-db-1.0.1-20160819.145040-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-db/1.0.1-SNAPSHOT/dropwizard-db-1.0.1-20160819.145040-38.pom (2 KB at 2.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/apache/tomcat/tomcat-jdbc/8.5.4/tomcat-jdbc-8.5.4.pom Downloading: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-jdbc/8.5.4/tomcat-jdbc-8.5.4.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-jdbc/8.5.4/tomcat-jdbc-8.5.4.pom (2 KB at 10.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/apache/tomcat/tomcat-juli/8.5.4/tomcat-juli-8.5.4.pom Downloading: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-juli/8.5.4/tomcat-juli-8.5.4.pom Downloaded: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-juli/8.5.4/tomcat-juli-8.5.4.pom (2 KB at 8.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5/2.7.6/jackson-datatype-hibernate5-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5/2.7.6/jackson-datatype-hibernate5-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5/2.7.6/jackson-datatype-hibernate5-2.7.6.pom (5 KB at 28.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-hibernate-parent/2.7.6/jackson-datatype-hibernate-parent-2.7.6.pom Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate-parent/2.7.6/jackson-datatype-hibernate-parent-2.7.6.pom Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate-parent/2.7.6/jackson-datatype-hibernate-parent-2.7.6.pom (2 KB at 9.0 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-migrations/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-migrations/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-migrations/1.0.1-SNAPSHOT/dropwizard-migrations-1.0.1-20160819.145057-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-migrations/1.0.1-SNAPSHOT/dropwizard-migrations-1.0.1-20160819.145057-38.pom (2 KB at 3.0 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-freemarker/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-freemarker/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-freemarker/1.0.1-SNAPSHOT/dropwizard-views-freemarker-1.0.1-20160819.145131-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-freemarker/1.0.1-SNAPSHOT/dropwizard-views-freemarker-1.0.1-20160819.145131-38.pom (2 KB at 2.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views/1.0.1-SNAPSHOT/dropwizard-views-1.0.1-20160819.145127-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views/1.0.1-SNAPSHOT/dropwizard-views-1.0.1-20160819.145127-38.pom (2 KB at 1.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-mustache/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-mustache/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-mustache/1.0.1-SNAPSHOT/dropwizard-views-mustache-1.0.1-20160819.145135-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-mustache/1.0.1-SNAPSHOT/dropwizard-views-mustache-1.0.1-20160819.145135-38.pom (2 KB at 2.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/github/spullara/mustache/java/compiler/0.9.3/compiler-0.9.3.pom Downloading: https://repo.maven.apache.org/maven2/com/github/spullara/mustache/java/compiler/0.9.3/compiler-0.9.3.pom Downloaded: https://repo.maven.apache.org/maven2/com/github/spullara/mustache/java/compiler/0.9.3/compiler-0.9.3.pom (4 KB at 25.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/github/spullara/mustache/java/mustache.java/0.9.3/mustache.java-0.9.3.pom Downloading: https://repo.maven.apache.org/maven2/com/github/spullara/mustache/java/mustache.java/0.9.3/mustache.java-0.9.3.pom Downloaded: https://repo.maven.apache.org/maven2/com/github/spullara/mustache/java/mustache.java/0.9.3/mustache.java-0.9.3.pom (4 KB at 26.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics-graphite/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics-graphite/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics-graphite/1.0.1-SNAPSHOT/dropwizard-metrics-graphite-1.0.1-20160819.145138-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics-graphite/1.0.1-SNAPSHOT/dropwizard-metrics-graphite-1.0.1-20160819.145138-38.pom (2 KB at 2.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-testing/1.0.1-SNAPSHOT/maven-metadata.xml Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-testing/1.0.1-SNAPSHOT/maven-metadata.xml (2 KB at 1.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-testing/1.0.1-SNAPSHOT/dropwizard-testing-1.0.1-20160819.145026-38.pom Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-testing/1.0.1-SNAPSHOT/dropwizard-testing-1.0.1-20160819.145026-38.pom (3 KB at 3.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/objenesis/objenesis/2.4/objenesis-2.4.pom Downloading: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.4/objenesis-2.4.pom Downloaded: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.4/objenesis-2.4.pom (3 KB at 16.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/objenesis/objenesis-parent/2.4/objenesis-parent-2.4.pom Downloading: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/2.4/objenesis-parent-2.4.pom Downloaded: https://repo.maven.apache.org/maven2/org/objenesis/objenesis-parent/2.4/objenesis-parent-2.4.pom (17 KB at 115.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/assertj/assertj-core/3.5.2/assertj-core-3.5.2.pom Downloading: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.5.2/assertj-core-3.5.2.pom Downloaded: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.5.2/assertj-core-3.5.2.pom (10 KB at 64.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/1.0.1-SNAPSHOT/dropwizard-core-1.0.1-20160819.145014-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-util/1.0.1-SNAPSHOT/dropwizard-util-1.0.1-20160819.144856-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/core/jackson-annotations/2.7.6/jackson-annotations-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jackson/1.0.1-SNAPSHOT/dropwizard-jackson-1.0.1-20160819.144902-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/core/jackson-core/2.7.6/jackson-core-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/core/jackson-databind/2.7.6/jackson-databind-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.7.6/jackson-datatype-guava-2.7.6.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-util/1.0.1-SNAPSHOT/dropwizard-util-1.0.1-20160819.144856-38.jar (12 KB at 12.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.7.6/jackson-datatype-jsr310-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.7.6/jackson-datatype-jdk8-2.7.6.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jackson/1.0.1-SNAPSHOT/dropwizard-jackson-1.0.1-20160819.144902-38.jar (22 KB at 18.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/module/jackson-module-afterburner/2.7.6/jackson-module-afterburner-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.7.6/jackson-datatype-joda-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-validation/1.0.1-SNAPSHOT/dropwizard-validation-1.0.1-20160819.144908-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-configuration/1.0.1-SNAPSHOT/dropwizard-configuration-1.0.1-20160819.144914-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-core/1.0.1-SNAPSHOT/dropwizard-core-1.0.1-20160819.145014-38.jar (40 KB at 25.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.7.6/jackson-dataformat-yaml-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-logging/1.0.1-SNAPSHOT/dropwizard-logging-1.0.1-20160819.144922-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-util/9.3.11.v20160721/jetty-util-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics/1.0.1-SNAPSHOT/dropwizard-metrics-1.0.1-20160819.144932-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-validation/1.0.1-SNAPSHOT/dropwizard-validation-1.0.1-20160819.144908-38.jar (23 KB at 9.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jersey/1.0.1-SNAPSHOT/dropwizard-jersey-1.0.1-20160819.144947-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.7.6/jackson-jaxrs-json-provider-2.7.6.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-configuration/1.0.1-SNAPSHOT/dropwizard-configuration-1.0.1-20160819.144914-38.jar (24 KB at 10.1 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.7.6/jackson-jaxrs-base-2.7.6.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics/1.0.1-SNAPSHOT/dropwizard-metrics-1.0.1-20160819.144932-38.jar (18 KB at 6.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.7.6/jackson-module-jaxb-annotations-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-server/9.3.11.v20160721/jetty-server-9.3.11.v20160721.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-logging/1.0.1-SNAPSHOT/dropwizard-logging-1.0.1-20160819.144922-38.jar (35 KB at 11.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-io/9.3.11.v20160721/jetty-io-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-webapp/9.3.11.v20160721/jetty-webapp-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-xml/9.3.11.v20160721/jetty-xml-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-continuation/9.3.11.v20160721/jetty-continuation-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-servlets/1.0.1-SNAPSHOT/dropwizard-servlets-1.0.1-20160819.144952-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jetty/1.0.1-SNAPSHOT/dropwizard-jetty-1.0.1-20160819.145001-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jersey/1.0.1-SNAPSHOT/dropwizard-jersey-1.0.1-20160819.144947-38.jar (87 KB at 24.2 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-servlet/9.3.11.v20160721/jetty-servlet-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-security/9.3.11.v20160721/jetty-security-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-servlets/9.3.11.v20160721/jetty-servlets-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-http/9.3.11.v20160721/jetty-http-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-lifecycle/1.0.1-SNAPSHOT/dropwizard-lifecycle-1.0.1-20160819.144927-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-request-logging/1.0.1-SNAPSHOT/dropwizard-request-logging-1.0.1-20160819.145006-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-auth/1.0.1-SNAPSHOT/dropwizard-auth-1.0.1-20160819.145109-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-servlets/1.0.1-SNAPSHOT/dropwizard-servlets-1.0.1-20160819.144952-38.jar (29 KB at 6.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-assets/1.0.1-SNAPSHOT/dropwizard-assets-1.0.1-20160819.145113-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-lifecycle/1.0.1-SNAPSHOT/dropwizard-lifecycle-1.0.1-20160819.144927-38.jar (12 KB at 2.4 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-http2/1.0.1-SNAPSHOT/dropwizard-http2-1.0.1-20160819.145120-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-jetty/1.0.1-SNAPSHOT/dropwizard-jetty-1.0.1-20160819.145001-38.jar (37 KB at 7.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/http2/http2-server/9.3.11.v20160721/http2-server-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/http2/http2-common/9.3.11.v20160721/http2-common-9.3.11.v20160721.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-request-logging/1.0.1-SNAPSHOT/dropwizard-request-logging-1.0.1-20160819.145006-38.jar (9 KB at 1.6 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/http2/http2-hpack/9.3.11.v20160721/http2-hpack-9.3.11.v20160721.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-http2/1.0.1-SNAPSHOT/dropwizard-http2-1.0.1-20160819.145120-38.jar (7 KB at 1.3 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/eclipse/jetty/jetty-alpn-server/9.3.11.v20160721/jetty-alpn-server-9.3.11.v20160721.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-hibernate/1.0.1-SNAPSHOT/dropwizard-hibernate-1.0.1-20160819.145102-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-auth/1.0.1-SNAPSHOT/dropwizard-auth-1.0.1-20160819.145109-38.jar (37 KB at 6.8 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-db/1.0.1-SNAPSHOT/dropwizard-db-1.0.1-20160819.145040-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-assets/1.0.1-SNAPSHOT/dropwizard-assets-1.0.1-20160819.145113-38.jar (4 KB at 0.7 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/apache/tomcat/tomcat-jdbc/8.5.4/tomcat-jdbc-8.5.4.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/apache/tomcat/tomcat-juli/8.5.4/tomcat-juli-8.5.4.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5/2.7.6/jackson-datatype-hibernate5-2.7.6.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/fasterxml/classmate/1.3.1/classmate-1.3.1.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-migrations/1.0.1-SNAPSHOT/dropwizard-migrations-1.0.1-20160819.145057-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-db/1.0.1-SNAPSHOT/dropwizard-db-1.0.1-20160819.145040-38.jar (13 KB at 2.0 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-freemarker/1.0.1-SNAPSHOT/dropwizard-views-freemarker-1.0.1-20160819.145131-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-hibernate/1.0.1-SNAPSHOT/dropwizard-hibernate-1.0.1-20160819.145102-38.jar (23 KB at 3.5 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views/1.0.1-SNAPSHOT/dropwizard-views-1.0.1-20160819.145127-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-mustache/1.0.1-SNAPSHOT/dropwizard-views-mustache-1.0.1-20160819.145135-38.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/com/github/spullara/mustache/java/compiler/0.9.3/compiler-0.9.3.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics-graphite/1.0.1-SNAPSHOT/dropwizard-metrics-graphite-1.0.1-20160819.145138-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-freemarker/1.0.1-SNAPSHOT/dropwizard-views-freemarker-1.0.1-20160819.145131-38.jar (7 KB at 1.0 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-testing/1.0.1-SNAPSHOT/dropwizard-testing-1.0.1-20160819.145026-38.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-migrations/1.0.1-SNAPSHOT/dropwizard-migrations-1.0.1-20160819.145057-38.jar (34 KB at 4.9 KB/sec) Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/objenesis/objenesis/2.4/objenesis-2.4.jar Downloading: http://oss.sonatype.org/content/repositories/snapshots/org/assertj/assertj-core/3.5.2/assertj-core-3.5.2.jar Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views/1.0.1-SNAPSHOT/dropwizard-views-1.0.1-20160819.145127-38.jar (9 KB at 1.2 KB/sec) Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-views-mustache/1.0.1-SNAPSHOT/dropwizard-views-mustache-1.0.1-20160819.145135-38.jar (7 KB at 0.8 KB/sec) Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-metrics-graphite/1.0.1-SNAPSHOT/dropwizard-metrics-graphite-1.0.1-20160819.145138-38.jar (5 KB at 0.6 KB/sec) Downloaded: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-testing/1.0.1-SNAPSHOT/dropwizard-testing-1.0.1-20160819.145026-38.jar (32 KB at 4.1 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.7.6/jackson-annotations-2.7.6.jar Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.7.6/jackson-core-2.7.6.jar Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.7.6/jackson-databind-2.7.6.jar Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.7.6/jackson-datatype-guava-2.7.6.jar Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.7.6/jackson-datatype-jsr310-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.7.6/jackson-annotations-2.7.6.jar (50 KB at 310.6 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.7.6/jackson-datatype-jdk8-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.7.6/jackson-datatype-jdk8-2.7.6.jar (26 KB at 84.8 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-afterburner/2.7.6/jackson-module-afterburner-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-afterburner/2.7.6/jackson-module-afterburner-2.7.6.jar (143 KB at 254.6 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.7.6/jackson-datatype-joda-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.7.6/jackson-datatype-jsr310-2.7.6.jar (87 KB at 154.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.7.6/jackson-dataformat-yaml-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-guava/2.7.6/jackson-datatype-guava-2.7.6.jar (77 KB at 128.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-util/9.3.11.v20160721/jetty-util-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-joda/2.7.6/jackson-datatype-joda-2.7.6.jar (65 KB at 75.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.7.6/jackson-jaxrs-json-provider-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-core/2.7.6/jackson-core-2.7.6.jar (247 KB at 268.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.7.6/jackson-jaxrs-base-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.7.6/jackson-dataformat-yaml-2.7.6.jar (314 KB at 318.1 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.7.6/jackson-module-jaxb-annotations-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-json-provider/2.7.6/jackson-jaxrs-json-provider-2.7.6.jar (17 KB at 14.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-server/9.3.11.v20160721/jetty-server-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/jaxrs/jackson-jaxrs-base/2.7.6/jackson-jaxrs-base-2.7.6.jar (30 KB at 26.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-io/9.3.11.v20160721/jetty-io-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/module/jackson-module-jaxb-annotations/2.7.6/jackson-module-jaxb-annotations-2.7.6.jar (34 KB at 25.8 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-webapp/9.3.11.v20160721/jetty-webapp-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.7.6/jackson-databind-2.7.6.jar (1180 KB at 830.9 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-xml/9.3.11.v20160721/jetty-xml-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-webapp/9.3.11.v20160721/jetty-webapp-9.3.11.v20160721.jar (110 KB at 74.3 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-continuation/9.3.11.v20160721/jetty-continuation-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-io/9.3.11.v20160721/jetty-io-9.3.11.v20160721.jar (110 KB at 74.0 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlet/9.3.11.v20160721/jetty-servlet-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-xml/9.3.11.v20160721/jetty-xml-9.3.11.v20160721.jar (50 KB at 30.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-security/9.3.11.v20160721/jetty-security-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-util/9.3.11.v20160721/jetty-util-9.3.11.v20160721.jar (422 KB at 259.7 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlets/9.3.11.v20160721/jetty-servlets-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-continuation/9.3.11.v20160721/jetty-continuation-9.3.11.v20160721.jar (16 KB at 9.3 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-http/9.3.11.v20160721/jetty-http-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-server/9.3.11.v20160721/jetty-server-9.3.11.v20160721.jar (483 KB at 286.1 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-server/9.3.11.v20160721/http2-server-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlet/9.3.11.v20160721/jetty-servlet-9.3.11.v20160721.jar (114 KB at 65.5 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-common/9.3.11.v20160721/http2-common-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-http/9.3.11.v20160721/jetty-http-9.3.11.v20160721.jar (146 KB at 78.3 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-hpack/9.3.11.v20160721/http2-hpack-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-servlets/9.3.11.v20160721/jetty-servlets-9.3.11.v20160721.jar (85 KB at 45.3 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-alpn-server/9.3.11.v20160721/jetty-alpn-server-9.3.11.v20160721.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-server/9.3.11.v20160721/http2-server-9.3.11.v20160721.jar (35 KB at 18.3 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-jdbc/8.5.4/tomcat-jdbc-8.5.4.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-security/9.3.11.v20160721/jetty-security-9.3.11.v20160721.jar (93 KB at 49.1 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-juli/8.5.4/tomcat-juli-8.5.4.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-common/9.3.11.v20160721/http2-common-9.3.11.v20160721.jar (150 KB at 75.3 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5/2.7.6/jackson-datatype-hibernate5-2.7.6.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/http2/http2-hpack/9.3.11.v20160721/http2-hpack-9.3.11.v20160721.jar (36 KB at 17.6 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.3.1/classmate-1.3.1.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-juli/8.5.4/tomcat-juli-8.5.4.jar (40 KB at 19.4 KB/sec) Downloading: https://repo.maven.apache.org/maven2/com/github/spullara/mustache/java/compiler/0.9.3/compiler-0.9.3.jar Downloaded: https://repo.maven.apache.org/maven2/org/apache/tomcat/tomcat-jdbc/8.5.4/tomcat-jdbc-8.5.4.jar (135 KB at 64.1 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.4/objenesis-2.4.jar Downloaded: https://repo.maven.apache.org/maven2/org/eclipse/jetty/jetty-alpn-server/9.3.11.v20160721/jetty-alpn-server-9.3.11.v20160721.jar (8 KB at 3.6 KB/sec) Downloading: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.5.2/assertj-core-3.5.2.jar Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/jackson/datatype/jackson-datatype-hibernate5/2.7.6/jackson-datatype-hibernate5-2.7.6.jar (21 KB at 9.5 KB/sec) Downloaded: https://repo.maven.apache.org/maven2/com/fasterxml/classmate/1.3.1/classmate-1.3.1.jar (64 KB at 29.3 KB/sec) Downloaded: https://repo.maven.apache.org/maven2/org/objenesis/objenesis/2.4/objenesis-2.4.jar (51 KB at 22.3 KB/sec) Downloaded: https://repo.maven.apache.org/maven2/com/github/spullara/mustache/java/compiler/0.9.3/compiler-0.9.3.jar (98 KB at 43.0 KB/sec) Downloaded: https://repo.maven.apache.org/maven2/org/assertj/assertj-core/3.5.2/assertj-core-3.5.2.jar (1067 KB at 333.8 KB/sec) [INFO]  [INFO] --- maven-enforcer-plugin:1.4.1:enforce (enforce) @ dropwizard-example --- [INFO]  [INFO] --- maven-resources-plugin:2.7:resources (default-resources) @ dropwizard-example --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 10 resources [INFO]  [INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ dropwizard-example --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 23 source files to /Users/Instigater/Development/JavaDeneme/dropwizard/dropwizard-example/target/classes [INFO]  [INFO] --- maven-resources-plugin:2.7:testResources (default-testResources) @ dropwizard-example --- [INFO] Using 'UTF-8' encoding to copy filtered resources. [INFO] Copying 1 resource [INFO]  [INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ dropwizard-example --- [INFO] Changes detected - recompiling the module! [INFO] Compiling 5 source files to /Users/Instigater/Development/JavaDeneme/dropwizard/dropwizard-example/target/test-classes [INFO]  [INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ dropwizard-example --- [INFO] Surefire report directory: /Users/Instigater/Development/JavaDeneme/dropwizard/dropwizard-example/target/surefire-reports  -------------------------------------------------------  T E S T S ------------------------------------------------------- Running com.example.helloworld.IntegrationTest INFO  [2016-08-25 00:23:45,061] org.eclipse.jetty.util.log: Logging initialized @2937ms INFO  [2016-08-25 00:23:45,341] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: / INFO  [2016-08-25 00:23:45,342] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: / INFO  [2016-08-25 00:23:45,344] io.dropwizard.assets.AssetsBundle: Registering AssetBundle with name: assets for path /assets/* INFO  [2016-08-25 00:23:45,708] org.hibernate.Version: HHH000412: Hibernate Core {5.1.0.Final} INFO  [2016-08-25 00:23:45,711] org.hibernate.cfg.Environment: HHH000206: hibernate.properties not found INFO  [2016-08-25 00:23:45,713] org.hibernate.cfg.Environment: HHH000021: Bytecode provider name : javassist INFO  [2016-08-25 00:23:45,736] io.dropwizard.hibernate.SessionFactoryFactory: Entity classes: [com.example.helloworld.core.Person] INFO  [2016-08-25 00:23:45,831] org.hibernate.annotations.common.Version: HCANN000001: Hibernate Commons Annotations {5.0.1.Final} INFO  [2016-08-25 00:23:46,496] org.hibernate.dialect.Dialect: HHH000400: Using dialect: org.hibernate.dialect.H2Dialect INFO  [2016-08-25 00:23:46,963] org.hibernate.type.BasicTypeRegistry: HHH000270: Type registration [java.util.Currency] overrides previous : org.hibernate.type.CurrencyType@119aa36 INFO  [2016-08-25 00:23:47,222] org.hibernate.hql.internal.QueryTranslatorFactoryInitiator: HHH000397: Using ASTQueryTranslatorFactory INFO  [2016-08-25 00:23:47,412] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: / INFO  [2016-08-25 00:23:47,412] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: / INFO  [2016-08-25 00:23:47,422] io.dropwizard.server.ServerFactory: Starting hello-world                            web-scale hello world dP for the web                                                  88   .d8888b. dP.  .dP .d8888b. 88d8b.d8b. 88d888b. 88 .d8888b.   88ooood8  `8bd8'  88'  `88 88'`88'`88 88'  `88 88 88ooood8   88.  ...  .d88b.  88.  .88 88  88  88 88.  .88 88 88.  ...   `88888P' dP'  `dP `88888P8 dP  dP  dP 88Y888P' dP `88888P'                                         88                                         dP  INFO  [2016-08-25 00:23:47,698] org.eclipse.jetty.setuid.SetUIDListener: Opened application@208f0007{HTTP/1.1,[http/1.1]}{0.0.0.0:54935} INFO  [2016-08-25 00:23:47,699] org.eclipse.jetty.setuid.SetUIDListener: Opened admin@3a90c13c{HTTP/1.1,[http/1.1]}{0.0.0.0:54936} INFO  [2016-08-25 00:23:47,701] org.eclipse.jetty.server.Server: jetty-9.3.11.v20160721 INFO  [2016-08-25 00:23:48,647] io.dropwizard.jersey.DropwizardResourceConfig: The following paths were found for the configured resources:      GET     /filtered/hello (com.example.helloworld.resources.FilteredResource)     GET     /hello-world (com.example.helloworld.resources.HelloWorldResource)     POST    /hello-world (com.example.helloworld.resources.HelloWorldResource)     GET     /hello-world/date (com.example.helloworld.resources.HelloWorldResource)     GET     /people (com.example.helloworld.resources.PeopleResource)     POST    /people (com.example.helloworld.resources.PeopleResource)     GET     /people/{personId} (com.example.helloworld.resources.PersonResource)     GET     /people/{personId}/view_freemarker (com.example.helloworld.resources.PersonResource)     GET     /people/{personId}/view_mustache (com.example.helloworld.resources.PersonResource)     GET     /protected (com.example.helloworld.resources.ProtectedResource)     GET     /protected/admin (com.example.helloworld.resources.ProtectedResource)     GET     /views/iso88591.ftl (com.example.helloworld.resources.ViewResource)     GET     /views/iso88591.mustache (com.example.helloworld.resources.ViewResource)     GET     /views/utf8.ftl (com.example.helloworld.resources.ViewResource)     GET     /views/utf8.mustache (com.example.helloworld.resources.ViewResource)  INFO  [2016-08-25 00:23:48,649] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@70881123{/,null,AVAILABLE} INFO  [2016-08-25 00:23:48,653] io.dropwizard.setup.AdminEnvironment: tasks =       POST    /tasks/echo (com.example.helloworld.tasks.EchoTask)     POST    /tasks/log-level (io.dropwizard.servlets.tasks.LogConfigurationTask)     POST    /tasks/gc (io.dropwizard.servlets.tasks.GarbageCollectionTask)  INFO  [2016-08-25 00:23:48,659] org.eclipse.jetty.server.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@448462f0{/,null,AVAILABLE} INFO  [2016-08-25 00:23:48,673] org.eclipse.jetty.server.AbstractConnector: Started application@208f0007{HTTP/1.1,[http/1.1]}{0.0.0.0:54935} INFO  [2016-08-25 00:23:48,673] org.eclipse.jetty.server.AbstractConnector: Started admin@3a90c13c{HTTP/1.1,[http/1.1]}{0.0.0.0:54936} INFO  [2016-08-25 00:23:48,674] org.eclipse.jetty.server.Server: Started @6551ms liquibase.exception.DatabaseException: Unknown data type: ""ƒ∞NT""; SQL statement: CREATE TABLE PUBLIC.DATABASECHANGELOGLOCK (ID ƒ∞NT NOT NULL, LOCKED BOOLEAN NOT NULL, LOCKGRANTED TIMESTAMP, LOCKEDBY VARCHAR(255), CONSTRAINT PK_DATABASECHANGELOGLOCK PRIMARY KEY (ID)) [50004-192] [Failed SQL: CREATE TABLE PUBLIC.DATABASECHANGELOGLOCK (ID ƒ∞NT NOT NULL, LOCKED BOOLEAN NOT NULL, LOCKGRANTED TIMESTAMP, LOCKEDBY VARCHAR(255), CONSTRAINT PK_DATABASECHANGELOGLOCK PRIMARY KEY (ID))]  Results :  Tests run: 0, Failures: 0, Errors: 0, Skipped: 0  [INFO] ------------------------------------------------------------------------ [INFO] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Total time: 01:34 min [INFO] Finished at: 2016-08-25T03:23:49+03:00 [INFO] Final Memory: 38M/326M [INFO] ------------------------------------------------------------------------ [ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.18.1:test (default-test) on project dropwizard-example: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.18.1:test failed: The forked VM terminated without properly saying goodbye. VM crash or System.exit called? [ERROR] Command was /bin/sh -c cd /Users/Instigater/Development/JavaDeneme/dropwizard/dropwizard-example && /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/bin/java -jar /Users/Instigater/Development/JavaDeneme/dropwizard/dropwizard-example/target/surefire/surefirebooter1210564822092594568.jar /Users/Instigater/Development/JavaDeneme/dropwizard/dropwizard-example/target/surefire/surefire3243729552107946173tmp /Users/Instigater/Development/JavaDeneme/dropwizard/dropwizard-example/target/surefire/surefire_02449307767322656187tmp [ERROR] -> [Help 1] [ERROR]  [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR]  [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException ```","closed","bug,","i386-64","2016-08-25T00:33:02Z","2018-04-08T15:50:37Z"
"","2528","WIP: Update build dependencies","NullAway just merged in Errorprone 2.3.2 support the other day, so a new release may be imminent.","closed","improvement,","jplock","2018-10-17T01:25:16Z","2018-10-27T13:04:10Z"
"","1850","Do you plan to add some DI framework as official module ?","Now, we use the guice or spring is more difficult, and having some compatibility problem. so if official can integrating guice or spring will more effective","closed","","itgo067","2016-12-09T09:11:36Z","2017-10-15T08:30:35Z"
"","2508","Remove openjdk9 and openjdk10 from Travis","Now that JDK11 is officially released, we can probably stop building on openjdk9 and 10","closed","improvement,","jplock","2018-09-27T14:29:20Z","2018-09-27T15:40:17Z"
"","1934","add ResourceTestRule.Builder#addResource(Class clazz) method","Now in order to add a request scoped resource to a test rule you need to use `addProvider(Class)` method, e.g: ``` public static final ResourceTestRule RULE = ResourceTestRule.builder()           .addProvider(SessionResource.class)           .build(); ``` This is a little bit confusing, since providers in Jersey terms are something which lay between the servlet and a resource. `addResource(Object resource)` on the other hand adds only singletons, which sometimes does not really fit needs of an application.","closed","","yateam","2017-02-21T06:35:31Z","2019-02-08T23:51:57Z"
"","1960","Support jdbc interceptors configuration in DataSourceFactory","Now DataSourceFactory.build doesn't support PoolProperties.setJdbcInterceptors So it's not very handy to configure/manage this option: ``` final ManagedDataSource dataSource = dbConfig.build(environment.metrics(), getName()); ((ManagedPooledDataSource) dataSource).setJdbcInterceptors(""org.apache.tomcat.jdbc.pool.interceptor.SlowQueryReport(threshold=200);""); ```","closed","","ololoken","2017-03-13T15:42:20Z","2017-04-26T16:04:13Z"
"","2209","how to enable stagemonitor (application monitoring)","Not sure how to enable the stagemonitor servletplugin given the instructions.  I have an open issue at stagemonitor - https://github.com/stagemonitor/stagemonitor/issues/346 , but figure the dropwizard devs might know better?  Basic configuration step outlined here - https://github.com/stagemonitor/stagemonitor/wiki/Step-1%3A-In-Browser-Widget  For testing purposes, i have a clean version of the dropwizard example app installed, with a minimal commit that adds the ServletPlugin.Initializer.onStartup call -   https://github.com/qmnonic/dropwizard/tree/master/dropwizard-example   Logs show an error trying to add the stagemonitor servlet, running as `mvn -Denforcer.skip=true package`:  ``` INFO  [2017-11-09 04:37:17,418] org.eclipse.jetty.setuid.SetUIDListener: Opened application@507f7cd1{HTTP/1.1,[http/1.1]}{0.0.0.0:50040} INFO  [2017-11-09 04:37:17,419] org.eclipse.jetty.setuid.SetUIDListener: Opened admin@349996a6{HTTP/1.1,[http/1.1]}{0.0.0.0:50041} INFO  [2017-11-09 04:37:17,422] org.stagemonitor.web.servlet.configuration.ConfigurationServlet: Registering configuration Endpoint /stagemonitor/configuration. You can dynamically change the configuration by issuing a POST request to /stagemonitor/configuration?key=stagemonitor.config.key&value=configValue&stagemonitor.password=password. If the password is not set, dynamically changing the configuration is not available. The password can be omitted if set to an empty string. ERROR [2017-11-09 04:37:17,422] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down ! java.lang.IllegalStateException: null ! at org.eclipse.jetty.servlet.ServletContextHandler$Context.addServlet(ServletContextHandler.java:1262) ! at org.stagemonitor.web.servlet.ServletPlugin$Initializer.onStartup(ServletPlugin.java:468) ! at com.example.helloworld.HelloWorldApplication$4.lifeCycleStarting(HelloWorldApplication.java:90) ! at org.eclipse.jetty.util.component.AbstractLifeCycle.setStarting(AbstractLifeCycle.java:188) ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:67) ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53) ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44) ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85) ! at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:227) ! at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:141) ! at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:154) ! at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46) ! at org.junit.rules.RunRules.evaluate(RunRules.java:20) ! at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ! at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:369) ! at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:275) ! at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:239) ! at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:160) ! at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:373) ! at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:334) ! at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:119) ! at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:407) [ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 4.368 s <<< FAILURE! - in com.example.helloworld.IntegrationTest ```","closed","","qmnonic","2017-11-13T17:55:21Z","2017-11-14T04:31:58Z"
"","2282","Release notes not updated with 1.2.2, 1.2.3 and 1.2.4","No release notes for the latest 1.2.x version?  https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst","closed","documentation,","lazee","2018-02-23T11:54:17Z","2018-02-25T20:24:14Z"
"","1971","Release/1.1.x","New pull request","closed","","sachin681","2017-03-21T08:16:47Z","2017-03-21T08:19:23Z"
"","1827","It loses logs when the request log format is customized","My dropwizard version is 1.0.4 Now my request log is like this in the base.yml requestLog:     appenders:       - type: file         currentLogFilename: ./logs/runtimeService-requests.log         archive: true         logFormat: ""%h|%reqParameter{something}|%t|%s|%b|%U|%i{Referer}|%i{User-Agent}""  The log format is customized because I want to get some parameters out in the url. But the problem is that if I have a sequence of rapid requests to the server like 1000 requests, it only logs about 50 messages in the log file. I doubt it's because the log formatting costs much.  And if I try the classic request log configuration which generates logs in common log format, which does not meet my requirement. Like the following configuration. requestLog:     type: classic   And send 1000 requests to the server. The 1000 request can be all logged into the log file. Nothing missing.  Why does it lose logs when I use custom request log format? Now the documentation about request log has too many TODOs. Could someone please add some custom information to it? And will it be same situation in the logging configuration in addition to the requestLog configuration? Please help.","closed","","Wstunes","2016-11-16T14:07:47Z","2016-11-28T08:00:38Z"
"","2468","Minor documentation typo fixes.","Mostly some accidental duplication of words that slowed down the flow and readability.","closed","documentation,","Sounie","2018-08-26T13:41:14Z","2018-08-27T13:18:37Z"
"","2435","log generation issue","Morning,  I am running dropwizard version 1.1.0 and I have the follow log appender setup in my .yaml file     ``` - type: file       threshold: DEBUG       archive: true       archivedFileCount: 5       currentLogFilename: ./logs/ArchiveServiceSwagger.log       archivedLogFilenamePattern: ./logs/ArchiveServiceSwagger-%i-%d.log       timeZone: UTC       maxFileSize: 10MB ```  Yet my log directory looks like;    ```   10264 -rw-rw-r--. 1 approc approc   10510054 Jul 18 09:34 ArchiveServiceSwagger-77-2018-07-18.log   10276 -rw-rw-r--. 1 approc approc   10515242 Jul 18 09:32 ArchiveServiceSwagger-76-2018-07-18.log   10296 -rw-rw-r--. 1 approc approc   10535880 Jul 18 09:30 ArchiveServiceSwagger-75-2018-07-18.log   10272 -rw-rw-r--. 1 approc approc   10513062 Jul 18 09:29 ArchiveServiceSwagger-74-2018-07-18.log   10288 -rw-rw-r--. 1 approc approc   10528749 Jul 18 09:27 ArchiveServiceSwagger-73-2018-07-18.log   10272 -rw-rw-r--. 1 approc approc   10511653 Jul 18 09:26 ArchiveServiceSwagger-72-2018-07-18.log   10276 -rw-rw-r--. 1 approc approc   10518165 Jul 18 09:24 ArchiveServiceSwagger-71-2018-07-18.log   10264 -rw-rw-r--. 1 approc approc   10505723 Jul 18 09:22 ArchiveServiceSwagger-70-2018-07-18.log   10312 -rw-rw-r--. 1 approc approc   10554559 Jul 18 09:21 ArchiveServiceSwagger-69-2018-07-18.log   10252 -rw-rw-r--. 1 approc approc   10493471 Jul 18 09:19 ArchiveServiceSwagger-68-2018-07-18.log   10292 -rw-rw-r--. 1 approc approc   10532419 Jul 18 09:18 ArchiveServiceSwagger-67-2018-07-18.log   10284 -rw-rw-r--. 1 approc approc   10523174 Jul 18 09:16 ArchiveServiceSwagger-66-2018-07-18.log   10256 -rw-rw-r--. 1 approc approc   10496866 Jul 18 09:15 ArchiveServiceSwagger-65-2018-07-18.log   10248 -rw-rw-r--. 1 approc approc   10488519 Jul 18 09:13 ArchiveServiceSwagger-64-2018-07-18.log   10248 -rw-rw-r--. 1 approc approc   10486384 Jul 18 09:12 ArchiveServiceSwagger-63-2018-07-18.log   10268 -rw-rw-r--. 1 approc approc   10509761 Jul 18 09:10 ArchiveServiceSwagger-62-2018-07-18.log   10264 -rw-rw-r--. 1 approc approc   10502969 Jul 18 09:09 ArchiveServiceSwagger-61-2018-07-18.log   ...    removed for shortness    ...   10264 -rw-rw-r--. 1 approc approc   10504788 Jul 18 01:16 ArchiveServiceSwagger-9-2018-07-18.log   10312 -rw-rw-r--. 1 approc approc   10551799 Jul 18 01:15 ArchiveServiceSwagger-8-2018-07-18.log   10256 -rw-rw-r--. 1 approc approc   10496976 Jul 18 01:13 ArchiveServiceSwagger-7-2018-07-18.log   10272 -rw-rw-r--. 1 approc approc   10512332 Jul 18 01:11 ArchiveServiceSwagger-6-2018-07-18.log   10280 -rw-rw-r--. 1 approc approc   10525307 Jul 18 01:10 ArchiveServiceSwagger-5-2018-07-18.log   10260 -rw-rw-r--. 1 approc approc   10499978 Jul 18 01:08 ArchiveServiceSwagger-4-2018-07-18.log   10280 -rw-rw-r--. 1 approc approc   10519384 Jul 18 01:07 ArchiveServiceSwagger-3-2018-07-18.log   10248 -rw-rw-r--. 1 approc approc   10487501 Jul 18 01:05 ArchiveServiceSwagger-2-2018-07-18.log   10304 -rw-rw-r--. 1 approc approc   10546229 Jul 18 01:03 ArchiveServiceSwagger-1-2018-07-18.log   10268 -rw-rw-r--. 1 approc approc   10508520 Jul 18 01:02 ArchiveServiceSwagger-0-2018-07-18.log  ``` Am I misunderstanding the meaning of the archivedFileCount setting; as I thought I would end up with a rolling set of 5 ~ 10MB log files  Any help or pointers that can be offered would be great, as currently I need to manually delete these files to stop the vm from running out of space (which could be scripted but feels like solving the symptom not the problem)","closed","","thogar-computer","2018-07-19T10:55:12Z","2018-09-23T19:25:30Z"
"","1851","Mockito should be a test dependency","Mockito is being exposed as a compile dependency to dependents of dropwizard, which may force them to upgrade to Mockito 2 before they are ready.","closed","","umcodemonkey","2016-12-09T20:12:02Z","2016-12-12T16:30:11Z"
"","1957","Support disabled and enabled attributes for metrics","Metrics 3.2.* allows to configure the set of attributes which can be disabled for a reporter. It would be nice to provide the ability to set them via the YAML config the same way we provide that for metric names.","closed","feature,","arteam","2017-03-12T18:27:58Z","2017-03-14T15:08:12Z"
"","1969","metrics version 3.1.4","Metrics 3.1.3 and 3.1.4 contains some bug fixes, with are quite useful.","closed","bug,","osigida","2017-03-20T11:08:39Z","2017-03-22T21:06:36Z"
"","1546","setContextPath doesn't seem to work.","Maybe it's just me doing something wrong, but in my run(con,env) method, i do the following: `environment.getApplicationContext().setContextPath(""/rest"");  environment.jersey().register(HelloWorldEndpoint.class);`  The HelloWorldEndpoint has the **@Path(""/hello"")** annotation.  When i launch dropwizard however (without config, just using the **server** command), my endpoint is available on _localhost:8080/hello_, not on _localhost:8080/rest/hello_ wich i would expect.  I have tried this in multiple versions, but it doesn't seem to work. Versions tried: - 1.0.0-rc2 - 0.9.2 - 0.8.5  Logs for 1.0.0-rc2 list: _Registering jersey handler with root path prefix: /_","closed","","TomCools","2016-05-14T13:41:51Z","2016-05-26T16:02:41Z"
"","2265","Refactor tests for JSON layout log factories","Make them deserialized directly without using the console appender. This way the coverage tool should be able to recognize that the class is covered during a test run. Let's check whether it's true.","closed","","arteam","2018-02-09T18:29:44Z","2018-02-09T19:03:39Z"
"","2513","dropwizard-parent:1.3.6 is missing in jCenter","Looks like the latest Dropwizard release (1.3.6) wasn't fully deployed to jCenter: https://jcenter.bintray.com/io/dropwizard/dropwizard-parent/  Looks like it does exist in Maven Central: http://central.maven.org/maven2/io/dropwizard/dropwizard-parent/1.3.6/","closed","","seanstaley","2018-10-01T16:19:57Z","2018-10-03T02:58:29Z"
"","2148","Update to Jersey 2.26","Looks like a new version came out a couple days ago. I believe Jersey is now Java 8 and implements jax-rs api 2.1, but I couldn't find rendered release notes.  There is bit of a migration -- I couldn't just update the pom üòÑ   Migration doc is here: https://github.com/jersey/jersey/blob/12e5d8bdf22bcd2676a1032ed69473cf2bbc48c7/docs/src/main/docbook/migration.xml  EDIT: Quick thoughts:  We'll need to add  ```xml                      org.glassfish.jersey.inject             jersey-hk2          ```  Also [where did AbstractContainerRequestValueFactory go?](https://github.com/jersey/jersey/issues/3630)","closed","improvement,","nickbabcock","2017-09-08T18:02:48Z","2018-06-23T12:37:38Z"
"","2488","Support json log exception stack filtering","Logback supports the ability to filter[1] out stack frames from the exception[2] with the format template of `%exception{full, io.dropwizard,org.apache}` syntax. With json log format we lost the ability to support this type of filtering. I think it can be reintroduced by adding configuration and setting[3] those on the `ThrowableHandlingConverter`[4].  [1] http://jira.qos.ch/browse/LOGBACK-540 [2] https://logback.qos.ch/manual/layouts.html#ex [3] https://github.com/qos-ch/logback/blob/v_1.2.3/logback-core/src/main/java/ch/qos/logback/core/pattern/DynamicConverter.java#L54 [4] https://github.com/dropwizard/dropwizard/blob/v1.3.5/dropwizard-json-logging/src/main/java/io/dropwizard/logging/json/EventJsonLayoutBaseFactory.java#L91","closed","","mattnelson","2018-09-13T21:34:03Z","2018-09-23T20:11:08Z"
"","1916","Expose neverBlock option for async appender","logback offers an option, `neverBlock`, to make it so that an async appender will drop events rather than block when the queue fills. The default for this option is `false`, meaning the async appender will, in fact, block. I'd like to guard against this scenario in my application and prevent threads from backing up waiting on the appender by setting the option to `true`.  I'd propose Dropwizard config expose this option in the configuration block.","closed","improvement,","markelliot","2017-02-06T18:00:06Z","2017-02-07T02:42:11Z"
"","2419","Support MDC on access logs","Logback does not currently support[1] MDC on access logs. There is a comment[2] on that JIRA that shows a workaround via a custom encoder. The example is for json. I'm wondering if the json logs introduced in #2232 would be able to be extended to also support this workflow.  [1] https://jira.qos.ch/browse/LOGBACK-1016 [2] https://jira.qos.ch/browse/LOGBACK-1016?focusedCommentId=19139&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-19139","closed","stale,","mattnelson","2018-06-28T18:39:22Z","2020-12-30T06:56:03Z"
"","2241","Unable to validate nested configs via annotations","Let's say that I have a main config as such:  ``` java public class MyLovelyConfig extends Configuration {    @NotNull   @JsonProperty(""mongoDB"")   private MongoDBConfig mongoDBConfig; } ```  Upon service start, Dropwizard validates this property 'mongoDB 'and spits out the corresponding error if it was indeed null. Works as advertised, great!  Now, what's MongoDBConfig? It's another nested config.  ``` java public class MongoDBConfig {      @NotNull   @JsonProperty   private List nodes; } ```  Now, if the 'nodes' here are not specified in the config, I was expecting an error message as well. Except I am not getting any. I tried it again with MongoDBConfig extending the Configuration class, but the result was still the same.  Is a nested config validation simply not supported (yet)?   EDIT:  I dug a little further and it looks like this feature is not supported when I look at the following method: io.dropwizard.configuration.BaseConfigurationFactory#validate  ``` java     private void validate(String path, T config) throws ConfigurationValidationException {         if (validator != null) {             final Set> violations = validator.validate(config);             if (!violations.isEmpty()) {                 throw new ConfigurationValidationException(path, violations);             }         }     } ``` Essentially only the main config is validated. I don't see Java's Validator performing nested lookups.  Would it be possible to request this as a feature for Dropwizard?","closed","","alexplischke","2018-01-12T18:51:05Z","2018-01-12T19:28:59Z"
"","1880","Can't send mock object for testing POST action","Let's say I have an entity like this:  ``` public class User {     @JsonProperty     private long id;      public long getId() {         return this.id;     }      public User() {     }      public User(long id) {         this.id = id;     } } ```  Then assuming I have created UsersResource class with post action (POST /users) which accept the User entity, I created UsersResourceTest:  ``` public class UsersResourceTest {      private static final UserStore dao = mock(UserStore.class);      @ClassRule     public static final ResourceTestRule resources = ResourceTestRule.builder()         .addResource(new UserResource(dao))         .build();       ...      @Test     public void testPostUser() {         User user = mock(User.class);         when(user.getId()).thenReturn(1L);         final Response response = resources.client().target(""/users"").request().post(Entity.json(user));         assertEquals(response.getStatus(), 201);     } } ```  When I run the test, I got error:  > ERROR [2017-01-13 12:03:18,502] org.glassfish.jersey.test.inmemory.InMemoryConnector: Error while writing entity to the output stream. > ! java.lang.StackOverflowError: null > ! at java.lang.ClassLoader.defineClass1(Native Method) > ! at java.lang.ClassLoader.defineClass(ClassLoader.java:760) > ! at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) > ! at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) > ! at java.net.URLClassLoader.access$100(URLClassLoader.java:73) > ! at java.net.URLClassLoader$1.run(URLClassLoader.java:368) > ! at java.net.URLClassLoader$1.run(URLClassLoader.java:362) > ! at java.security.AccessController.doPrivileged(Native Method) > ! at java.net.URLClassLoader.findClass(URLClassLoader.java:361) > ! at java.lang.ClassLoader.loadClass(ClassLoader.java:424) > ! at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) > ! at java.lang.ClassLoader.loadClass(ClassLoader.java:357) > ! at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:697) > ! ... 1011 common frames omitted > ! Causing: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: org.mockito.internal.stubbing.InvocationContainerImpl[""invocationForStubbing""]->org.mockito.internal.invocation.InvocationMatcher[""invocation""]->org.mockito.internal.creation.bytebuddy.InterceptedInvocation[""mock""]->...  But if I changed the code not to send mock object as post data, the test is working fine:  ```     @Test     public void testPostUser() {         User user = new User(1L);         final Response response = resources.client().target(""/users"").request().post(Entity.json(user));         assertEquals(response.getStatus(), 201);     } ```  So how do I send mock object for testing post action? Is it not possible?  FYI I'm using dropwizard v1.0.5.","closed","","s101d1","2017-01-13T05:27:49Z","2017-01-16T12:03:04Z"
"","1972","docs: Fix `IllegalArgumentException` misspelling","Just noticed this misspelling in the user manual.","closed","documentation,","evnm","2017-03-21T17:03:48Z","2017-03-21T17:37:38Z"
"","2132","Guava 23 for DW 1.2?","Just checked the Release candidate. It is on Guava 22  I very much know how much of a pain Guava can be. Most of our codebases currently managed to settle on 23 as common denominator. Is there anything that holds back upgrading to 23 for DW 1.2?","closed","","CodingFabian","2017-08-18T12:29:25Z","2017-08-21T15:04:30Z"
"","2481","testing.rst: Make example use diamond operator","Just a tiny change in a code example in the documentation: Use the diamond operator to make it more modern/readable.","closed","documentation,","minisu","2018-09-06T10:04:28Z","2018-09-06T23:41:47Z"
"","2493","Migrate tests to JUnit 5.4.0","JUnit5 has been slowly getting among the community over the past years and it looks like stable enough for us to migrate.","closed","feature,","arteam","2018-09-15T21:28:55Z","2019-03-03T08:12:21Z"
"","2176","Correctly set up SO_LINGER for the HTTP connector","Jetty's `ServerConnector` accepts `soLingerTime` in milliseconds, rather than in seconds as `Socket.setSoLinger` does [1]. Dropwizard on the other hand after parsing the YML configuration and extracting the `soLingerTime` parameter passes it to Jetty in seconds. As a result, the configuration gets really confusing for users, because the configuration value is more than the actual SO_LINGER timeout by 1000 times.  The fix is to pass the configuration value to Jetty's `ServerConnector` in milliseconds.  [1]: http://www.eclipse.org/jetty/documentation/9.4.x/configuring-connectors.html  Fixes #2175","closed","bug,","arteam","2017-10-17T09:14:32Z","2017-10-17T09:38:08Z"
"","2495","Upgrade jetty to latest 9.4.12 in 1.2.x release","Jetty has already been upgraded to 9.4.12 in master. Can we also upgrade the jetty in 1.2.x release?","closed","","debraj-manna","2018-09-17T08:46:23Z","2019-02-03T18:20:53Z"
"","2480","Upgrade to Jetty 9.4.12","Jetty 9.4.12 is now out.  It includes many bug fixes and improvements to HTTP/2 and general security.  If you choose to upgrade to Jetty 9.4.12, please be aware of the changed default Cipher exclusion list.  See eclipse/jetty.project#2807 for details.","closed","security,","joakime","2018-09-05T14:41:50Z","2018-09-15T17:34:47Z"
"","2125","JerseyClientConfiguration in client manual is missing mutator","JerseyClientConfiguration in client manual is missing mutator, here: [Dropwizard Client](https://github.com/dropwizard/dropwizard/blob/master/docs/source/manual/client.rst)  This is only minor issue, but easy/quick to fix.  Missing snippet: ```     @JsonProperty(""jerseyClient"")     public void setJerseyClientConfiguration(JerseyClientConfiguration jerseyClient) {         this. jerseyClient = jerseyClient;     } ```","closed","","tasosz","2017-08-04T09:48:48Z","2017-08-04T12:27:27Z"
"","2287","Jersey test client does not support PATCH requests","Jersey test client provided by `DropwizardAppRule` does not support `PATCH` requests (Exception stack trace is attached). I suggest setting `JerseyClientBuilder.property(HttpUrlConnectorProvider.SET_METHOD_WORKAROUND, true)`  in `DropwizardAppRule.clientBulder` to fix this issue. Happy to submit a pull request.  ``` avax.ws.rs.ProcessingException: java.net.ProtocolException: Invalid HTTP method: PATCH  	at org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:287) 	at org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:252) 	at org.glassfish.jersey.client.JerseyInvocation$3.call(JerseyInvocation.java:724) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:315) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:297) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:228) 	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:444) 	at org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:720) 	at org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:459) 	at co.wrisk.scoring.it.QuoteTestIT.shouldSelectQuoteItem(QuoteTestIT.kt:743) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runners.Suite.runChild(Suite.java:128) 	at org.junit.runners.Suite.runChild(Suite.java:27) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.net.ProtocolException: Invalid HTTP method: PATCH 	at java.net.HttpURLConnection.setRequestMethod(HttpURLConnection.java:440) 	at sun.net.www.protocol.http.HttpURLConnection.setRequestMethod(HttpURLConnection.java:552) 	at org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:347) 	at org.glassfish.jersey.client.internal.HttpUrlConnector.apply(HttpUrlConnector.java:285) 	... 54 more ```","closed","","aharin","2018-03-01T12:13:30Z","2018-03-01T13:30:34Z"
"","2234","Jersey @Context injection is not possible on ConstraintValidator instances","Jersey runtime allows for `@Context` injection on `ConstraintValidator` instances ([see manual](https://jersey.github.io/documentation/latest/bean-validation.html#bv.injecting)) via its `InjectingConstraintValidatorFactory` that is configured as the default `ConstraintValidatorFactory` implementation.  Somewhere between Dropwizard 0.9.2 and 1.1.3, the implementation of `dropwizard-validation` has changed such that these injections are no longer possible. To reproduce, use `@Context` injection in the constructor or field of a custom `ConstraintValidator`, and set it to validate a resource method parameter.  Ideally, it should be possible to continue to make use of this useful Jersey feature.","closed","needs code,","mszabo-wikia","2017-12-20T00:53:13Z","2018-09-06T23:09:12Z"
"","1715","Allow for passing a filter as a class","Jersey does not behave exactly the same when registering object and class during a DynamicFeature configuration.  This commit allows for both behaviour to be exploited in AuthDynamicFeature.  This fixes #1630.  @evnm @psamsotha please review and tell me if we need more doc that what I added :)","closed","improvement,","victornoel","2016-09-01T15:22:29Z","2019-09-16T11:27:40Z"
"","1721","JerseyClientBuilder can create rx-capable client","Jersey allows for clients to have a reactive api if created appropriately: https://jersey.java.net/documentation/latest/rx-client.html  This functionality for creating an rx-capable client is not currently in dropwizard, which may lead users down the wrong path. They'll try wrapping the dropwizard configured client like so (Java8 example):  ``` java RxCompletionStage.from(client); ```  This is very bad because this will not use the executor carefully crafted by dropwizard, but instead use `ForkJoinPool#commonPool`, which is, by default, created to only have as many threads as there are numbers of CPUs - 1. The end result is that many requests will end up blocking, the exact opposite of what a user may think by using this API.  This commit introduces an rx-capable client that wraps the dropwizard client with the dropwizard created executor so that both `async` and `rx` methods can take advantage of the same thread pool, something that is more intuitive than the current behavior.  Jersey supports four different reactive libraries and this commit works with any of them and all future versions.  An alternative implementation would be to expose the executor that dropwizard cofigures, but I find the approach taken in this commit better.","closed","improvement,","nickbabcock","2016-09-07T02:53:55Z","2016-09-21T14:45:43Z"
"","1807","Upgrade DropWizard 1.0.x to Jersey 2.23.2","Jersey 2.23.2 mostly contains documentation fixes, but it also includes an update to HK2 dependency which is purported to fix issues with @BeanParam / @FormParam when paired with dropwizard-guice: https://java.net/jira/browse/HK2-300  It would be nice if DropWizard 1.0.4 (or later) could be updated to the latest minor release of Jersey to resolve this issue.","closed","","pkwarren","2016-11-08T18:15:31Z","2016-11-10T10:31:40Z"
"","2040","Run dropwizard application after creating package with debian.","Jenkins build create a single jar file, How can I run this app after that?  **java -jar test.jar  server config.yml**  This above command is not going to work. because once Jenkins builds it its only offer single .jar file.  Do we need to ship .yml file and keystrore file with .jar file? Is there any alternative for this?   It that possible if can directly run with  **java -jar test.jar**","closed","","ghost","2017-05-01T15:17:46Z","2017-05-18T20:56:39Z"
"","2062","Updating all jersey URL's to new Jersey home","java.net site has closed. Updating all jersey URL's to new Jersey home.","closed","","sankate","2017-05-18T23:03:48Z","2017-05-18T23:23:45Z"
"","1586","Allow Dropwizard constraints to be applied to type","Java 8 allows the following code to be valid:  ``` java @Valid List<@OneOf({""one"", ""two"", ""three""}) String> bar; ```  But as the annotations are defined know, they will fail to compile. The fix is simple, add `TYPE_USE` to the constraint annotation.","closed","improvement,","nickbabcock","2016-06-03T17:01:39Z","2017-03-23T09:38:06Z"
"","2498","Add Jadira upgrade to 1.1.0 notes","Jadira was upgraded in the Hibernate 5.2 upgrade here(https://github.com/dropwizard/dropwizard/pull/1871/files) but not added to the release notes. Jadira 5.0.0 is incompatible with Hibernate 5.2 as well.","closed","documentation,","Will-Sommers","2018-09-17T16:59:39Z","2018-09-23T19:26:24Z"
"","2019","Upgrade to Jackson 2.8.8.1","jackson's patch release to fix https://github.com/FasterXML/jackson-databind/issues/1599","closed","","qinfchen","2017-04-21T19:53:02Z","2017-04-21T20:00:18Z"
"","2511","Add safe Jackson deserializers to prevent a DoS attack","Jackson uses `BigDecimal` for deserialization of `java.time` instants and durations. The problem is that if the users sets a very big number in the scientific notation (like `1e1000000000`), it takes forever to convert `BigDecimal` to `BigInteger`, and then to convert it to a long value. An example of the stack trace:  ```java @Test(timeout = 2000) public void parseBigDecimal(){     new BigDecimal(""1e1000000000"").longValue(); }  org.junit.runners.model.TestTimedOutException: test timed out after 2000 milliseconds 	at java.math.BigInteger.squareToomCook3(BigInteger.java:2074) 	at java.math.BigInteger.square(BigInteger.java:1899) 	at java.math.BigInteger.squareToomCook3(BigInteger.java:2053) 	at java.math.BigInteger.square(BigInteger.java:1899) 	at java.math.BigInteger.squareToomCook3(BigInteger.java:2051) 	at java.math.BigInteger.square(BigInteger.java:1899) 	at java.math.BigInteger.squareToomCook3(BigInteger.java:2049) 	at java.math.BigInteger.square(BigInteger.java:1899) 	at java.math.BigInteger.squareToomCook3(BigInteger.java:2049) 	at java.math.BigInteger.square(BigInteger.java:1899) 	at java.math.BigInteger.squareToomCook3(BigInteger.java:2055) 	at java.math.BigInteger.square(BigInteger.java:1899) 	at java.math.BigInteger.squareToomCook3(BigInteger.java:2049) 	at java.math.BigInteger.square(BigInteger.java:1899) 	at java.math.BigInteger.pow(BigInteger.java:2306) 	at java.math.BigDecimal.bigTenToThe(BigDecimal.java:3543) 	at java.math.BigDecimal.bigMultiplyPowerTen(BigDecimal.java:3676) 	at java.math.BigDecimal.setScale(BigDecimal.java:2445) 	at java.math.BigDecimal.toBigInteger(BigDecimal.java:3025) ```  A fix would be to reject big decimal values outside of the Instant and Duration ranges.  See: [1] https://github.com/FasterXML/jackson-databind/issues/2141 [2] https://reddit.com/r/java/comments/9jyv58/lowbandwidth_dos_vulnerability_in_jacksons/","closed","security,","arteam","2018-09-30T17:45:23Z","2019-01-04T13:13:10Z"
"","2392","Update to latest security fixes for Jackson","Jackson released security fixes last week for a few CVEs. It would be good if DropWizard is updated to include them:  * Jackson 2.9.6: https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.6 * Jackson 2.8.11.2: https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.8","closed","security,","pkwarren","2018-06-13T23:01:03Z","2018-06-22T21:51:00Z"
"","2393","Update jackson version to 2.9.6. Fixes #2392","Jackson patched a [2.9.6](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.6) version with some security fixes.  ###### Problem: Jackson 2.9.5 contains the following CVEs  - CVE-2018-12022 - CVE-2018-12023  ###### Solution: Upgrade to jackson 2.9.6 which contains patches for both of these CVEs  ###### Result: CVEs are patched","closed","security,","jmoney","2018-06-14T01:04:16Z","2018-06-22T21:51:00Z"
"","2190","Add support for parametrized commands with parametrized configurations","Jackson is able to deserialize parametrized configuration classes, so we should support configured commands with them. To figure out the type, we need to check the raw type one of the type arguments and check if it's can be cast to the `Configuration` class.  Simply put, for the class `RunDbVacuum extends ConfiguredCommand>`, `Generics` should be able to figure out that we need to deserialize the config as `ReplicaConfig`.  Resolves #2187","closed","","arteam","2017-10-26T22:40:13Z","2017-10-30T18:03:21Z"
"","2057","Update to Jackson 2.9","Jackson 2.9 greatly simplifies exception handling with the new exception, `InvalidDefinitionException`.  This PR technically breaks behavior for custom deserializers, but I believe it is now the correct behavior. If a deserializer fails to to deserialize input then a 400 should be returned as it denotes unexpected input. A 500 should only be returned if a deserializer encountered an error unrelated to the input (if it read from a non-existant file or db...(not saying it's a good design)). Added a test case to assert this.  Do not merge this PR as Jackson 2.9 is not actually released. I'm not sure when it will be released, but I figured it would be a good idea to know what to expect.","closed","improvement,","nickbabcock","2017-05-11T19:15:40Z","2017-07-31T15:46:46Z"
"","1568","Enhance PooledDataSourceFactory Interface","It would be very helpful if the PooledDataSourceFactory interface defined the method:  ``` ManagedDataSource build(MetricRegistry metricRegistry, HealthCheckRegistry healthCheckRegistry, String name); ```  Having that, different connection pooling libraries could register their build-in health checks to the registry. For example hikariCP has already implmemented the following health checks https://github.com/brettwooldridge/HikariCP/wiki/Dropwizard-HealthChecks","closed","","tdakanalis","2016-05-27T15:26:58Z","2016-05-30T09:54:15Z"
"","2264","ConsoleReporterFactory - not honoring expansions","It would be nice to have the ability to limit the metric expansions emitted to the console.  ``` metrics:     - type: console       output: stdout       excludes:         - ch.         - jvm.       expansions:         - COUNT ```","closed","","roryodonnell","2018-02-09T10:04:02Z","2018-02-09T16:18:07Z"
"","2038","HTML error responses","It would be nice to have proper support for HTML error responses (and other non-JSON content types too). Writing your own `ExceptionMapper` gets most of the way but is a bit ugly, and it doesn't seem to work at all for `AbstractParam` validation.  I've put together a tentative solution consisting of an `ErrorResponseProvider` interface that can be hooked up to your app's error views.  ```java public interface ErrorResponseProvider {      Response getResponse(ErrorMessage errorMessage);      Response getValidationResponse(ValidationErrorMessage errors);      boolean isAcceptable(); }  ```  It works with `LoggingExceptionMapper` and `JerseyViolationExceptionMapper` and I've managed to integrate with `AbstractParam` too although that was a bit more tricky.  Here's an outline of the solution: https://gist.github.com/BenScholl/95236ce186f05d0f5bdd46f1e5dc93ad  Any comments would be much appreciated.  Ben","closed","improvement,","BenScholl","2017-04-30T14:56:53Z","2017-06-08T18:17:07Z"
"","2295","Include OWASP dependency check for vulnerabilities as part of standard build","It would be great to have a report for vulnerabilities as part of the Dropwizard build.  https://github.com/jeremylong/DependencyCheck","closed","needs code,","synergiator","2018-03-06T09:57:54Z","2018-04-13T23:29:26Z"
"","1589","Expose ability to override ServletConfig values (ex ""healthcheckUri"" and ""pingUri"")","It would be great to be able to expose the ability via app.yml to override the AdminServlet.healthcheckUri and AdminServlet.pingServlet to some custom path that we want to expose these on our application.   This is just a nice to have not a necessary thing as it is cosmetic. Thoughts here are that the codahale classes allow this to happen so they should be expose up through the DropWizard ApplicationConfig classes as well.  Reference: http://stackoverflow.com/questions/26528666/dropwizard-override-the-url-for-the-healthcheck-endpoint","closed","stale,","tmack8001","2016-06-06T20:39:00Z","2019-09-03T00:00:58Z"
"","2094","Inconsistent versions of jersey-common included in 1.1.2","It seems the latest version `1.1.2` is pulling in version `2.25.1` of `jersey-client` and `jersey-server` but version `2.23.1` of `jersey-common`. This is causing my tests to explode with the same error as this guy:  https://stackoverflow.com/questions/42444039/jersey-client-nosuchmethoderror-org-glassfish-jersey-client-clientrequest-getle","closed","","Jamalarm","2017-06-29T20:19:06Z","2017-06-30T07:56:14Z"
"","2515","Dropwizard Assets 1.3.7 Missing from Central","It seems that this artifact is missing:  `Could not resolve dependencies for project : Could not find artifact io.dropwizard:dropwizard-assets:jar:1.3.7 in central (https://repo.maven.apache.org/maven2) -> [Help 1]`","closed","","isaki","2018-10-03T15:09:29Z","2018-10-03T18:56:44Z"
"","1786","Java 8 LocalDate QueryParam","It seems that parsing of Java 8 `LocalDate` as QueryParam is not liked. I get the following error on startup when trying with a simple controller.  ``` java     @GET     public Integer testRatas(@QueryParam(""foo"") final LocalDate foo) {         return 1;     } ```  ``` Caused by: org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialisation. [[FATAL] No injection source found for a parameter of type public java.lang.Integer resources.ForexRatesResource.testRatas(java.time.LocalDate) at index 0.; source='ResourceMethod{httpMethod=GET, consumedTypes=[], producedTypes= [application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class  resources.ForexRatesResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@517a2b0]}, definitionMethod=public  java.lang.Integer resources.ForexRatesResource.testRatas(java.time.LocalDate), parameters= [Parameter [type=class java.time.LocalDate, source=foo, defaultValue=null]], responseType=cla ss java.lang.Integer}, nameBindings=[]}']     at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:555)     at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184)     at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350)     at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347)     at org.glassfish.jersey.internal.Errors.process(Errors.java:315)     at org.glassfish.jersey.internal.Errors.process(Errors.java:297)     at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255)     at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:347)     at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:392)     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:177)     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:369)     at javax.servlet.GenericServlet.init(GenericServlet.java:244)     at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:640)     ... 46 more ```","closed","","Gabology","2016-10-25T14:31:01Z","2021-09-20T08:14:47Z"
"","2261","Dropwizard 1.3.0rc5 fails with UnsupportedClassVersionError on Java 8","It seems like Dropwizard 1.3.0rc5 is compiled with JDK 9 and it's failing on JDK 8. Not sure whether it's intentional or not.  > Exception in thread ""main"" java.lang.UnsupportedClassVersionError: io/dropwizard/Application has been compiled by a more recent version of the Java Runtime (class file version 53.0), this version of the Java Runtime only recognizes class file versions up to 52.0 > 	at java.lang.ClassLoader.defineClass1(Native Method)","closed","bug,","ramsrib","2018-02-08T22:13:49Z","2018-02-09T22:00:48Z"
"","1862","Safer and more flexible AbstractDAO for dropwizard-hibernate","It might be nice to have either a different [AbstractDAO](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java) type that handles calls to things like `uniqueResult()` a bit better, since it currently throws a `HibernateException` if there is more than one row.  Could I extend the functionality to include other calls? or add a different type?  Things like allowing varargs for `Criteria` in other would make things a bit nicer to look at as well for implementing classes.  I end up having to write wrappers most of the time when I implement the `AbstractDAO`.","closed","stale,","dotCipher","2016-12-16T23:49:14Z","2019-08-19T16:00:40Z"
"","2527","Update release-notes.rst for 1.3.6 and 1.3.7","It looks like these were never documented in https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst . Would be nice to add so that folks can understand the high level change set.","closed","","bobtiernay-okta","2018-10-13T22:24:35Z","2018-12-05T02:04:37Z"
"","1967","Make AllowedMethodsFilter immutable","It looks like that the set of allowed methods in `AllowedMethodsFilter` is not modified after it was created. We could embrace it and make immutable during the creation time. This also should provide some performance benefits, because immutable hash tables could be optimized during construction times (e.g. they can use linear probing instead chaining)","closed","improvement,","arteam","2017-03-19T14:31:06Z","2017-03-20T10:35:47Z"
"","1591","Remove a first sync call workaround in HTTP2 integration tests","It looks like that the latest versions of Jetty fixed the bug which the inability to perform the first call asynchronously. Let's remove the workaround for this bug and keep tests more simple.","closed","improvement,","arteam","2016-06-10T06:40:07Z","2016-06-10T07:08:12Z"
"","1789","Size based rollover logging still broken in 1.0.2","It looks `maxFileSize` handling was not fixed in #1691. Since upgrading past 0.9.3 the following configuration results in no request log at all:  ``` server:   type: default   applicationConnectors:     - type: http       port: 80   adminConnectors:     - type: http       port: 8081   registerDefaultExceptionMappers: false   requestLog:     appenders:       - type: console       - type: file         currentLogFilename: /var/log/service_name/request.log         archivedLogFilenamePattern: /var/log/service_name/request.log.%i         maxFileSize: 50MB ```  The following configuration results in a working request log at `/var/log/service_name/request.log`:  ``` server:   type: default   applicationConnectors:     - type: http       port: 80   adminConnectors:     - type: http       port: 8081   registerDefaultExceptionMappers: false   requestLog:     appenders:       - type: console       - type: file         currentLogFilename: /var/log/service_name/request.log         archivedLogFilenamePattern: /var/log/service_name/request.log.%d ```  I tested these using 1.0.2, and can confirm that the full configuration (only slightly more complex) works in 0.9.2 and 0.9.3, and fails in 1.0.0, 1.0.1 and 1.0.2.  Size based log rotation is important for my project because we're working with limited disk space.","closed","bug,","looppair","2016-10-28T14:22:17Z","2016-11-26T22:12:45Z"
"","1980","Allow system/default timezone in logging configuration","It is currently required to set the Timezone for a logging appender. Either it defaults to UTC or an explicit value has to be set. It is not possible to set it to the system/vmdefault timezone.   A suggested edit is to change the AbstractAppenderFactory where the the setTimeZone allows a String instead of a TimeZone object. This way a special value could be introduced (i.e. 'default' or null) , another bonus is that unknown ZoneIds can be logged. A potential disadvantage is that it may affect existing configuration which uses the special value, which now defaults to 'GMT' as per Javadoc.   Because code says more than a thousand words, an example test-case:  ```java import java.io.IOException; import java.util.TimeZone;  import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.core.JsonParseException; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.google.common.collect.Lists;  import org.junit.Assert; import org.junit.Test; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  public class TimezoneTest {      @Test     public void testTimezoneDefault() throws JsonParseException, JsonMappingException, IOException {         ObjectMapper mapper = new ObjectMapper();         TestTimezone readValue = mapper.readValue(""{\""zone\"":\""default\""}"", TestTimezone.class);         Assert.assertEquals(TimeZone.getDefault(), readValue.getZone());     }      @Test     public void testTimezoneUTC() throws JsonParseException, JsonMappingException, IOException {         ObjectMapper mapper = new ObjectMapper();         TestTimezone readValue = mapper.readValue(""{\""zone\"":\""UTC\""}"", TestTimezone.class);         Assert.assertEquals(TimeZone.getTimeZone(""UTC""), readValue.getZone());     }      public static class TestTimezone {         private TimeZone zone;         private static final Logger LOG = LoggerFactory.getLogger(TimezoneTest.TestTimezone.class);          public TestTimezone() {          }          @JsonProperty         public void setZone(String zone) {             if (zone.equals(""default"")) {                 this.zone = TimeZone.getDefault();             } else {                 if (!Lists.newArrayList(TimeZone.getAvailableIDs()).contains(zone)) {                     LOG.info(""Unknown timezone {} provided, using GMT as per Java documentation"", zone);                 }                 this.zone = TimeZone.getTimeZone(zone);             }         }          @JsonProperty         public TimeZone getZone() {             return zone;         }     } } ```","closed","","Sijmen","2017-03-24T08:00:53Z","2017-03-27T15:24:39Z"
"","2163","Liquibase dependency (3.5.3) doesn't work with Java 9","It appears to throw a StringOutOfBoundsException while parsing the new Java version.  Its expecting a 3 character version string (eg. '1.9') but it receives '9'.    A pull request has been created here: https://github.com/liquibase/liquibase/pull/688","closed","blocked,","eodonohoe","2017-09-26T19:38:09Z","2018-06-22T12:16:31Z"
"","1987","Adding support for fromString() for Enums in the FuzzyEnumParamConverter","Issue: https://github.com/dropwizard/dropwizard/issues/1985  Summary: Somewhere before versions `1.0` or `1.1` `@PathParam` objects that were `Enum` were able to be mapped by Jackson to their types. That is also described in the `@PathParam` documentation: `Have a static method named valueOf or fromString that accepts a single String argument`. However, that rule is being overriden by the logic in `FuzzyEnumParamConverterProvider` part of `dropwizard-jersey` which does not look for `fromString` method but directly tries to parse an `Enum` by performing some operations such as removing whitespace, mapping `.` or `-` characters to `_`  I think that this change (or a similar change) would allow for the original behavior to be restored.","closed","","stefan-zh","2017-03-28T21:39:57Z","2017-10-31T14:08:42Z"
"","2143","Configurable prudent mode","Issue refference : https://github.com/dropwizard/dropwizard/issues/2142  Users will able to enable prudent mode in JSON config file.","closed","blocked,","genz10","2017-09-02T03:33:40Z","2019-08-11T11:19:29Z"
"","1613","Upgrade to Jackson 2.7.4 as a proper fix for #1600","Issue #1600 doesn't quite include the correct fix for CVE-2016-3720, because the fix to Jackson is included in 2.7.4 (https://github.com/FasterXML/jackson-dataformat-xml/issues/199) rather than the 2.6 patch version we upgraded to.  To fix in Dropwizard, the Jackson version needs updating to 2.7.4. Doing so locally gives me a few errors when running `mvn install`:  ``` Running io.dropwizard.util.SizeTest Tests run: 20, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.151 sec <<< FAILURE! - in io.dropwizard.util.SizeTest serializesCorrectlyWithJackson(io.dropwizard.util.SizeTest)  Time elapsed: 0.095 sec  <<< ERROR! java.lang.NoSuchMethodError: com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;     at com.fasterxml.jackson.databind.cfg.MapperConfig.(MapperConfig.java:50)     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:543)     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:460)     at io.dropwizard.util.SizeTest.serializesCorrectlyWithJackson(SizeTest.java:496)  deserializesCorrectlyWithJackson(io.dropwizard.util.SizeTest)  Time elapsed: 0 sec  <<< ERROR! java.lang.NoClassDefFoundError: Could not initialize class com.fasterxml.jackson.databind.SerializationConfig     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:543)     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:460)     at io.dropwizard.util.SizeTest.deserializesCorrectlyWithJackson(SizeTest.java:517)  Running io.dropwizard.util.JarLocationTest Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 sec - in io.dropwizard.util.JarLocationTest Running io.dropwizard.util.DurationTest Tests run: 24, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.152 sec <<< FAILURE! - in io.dropwizard.util.DurationTest serializesCorrectlyWithJackson(io.dropwizard.util.DurationTest)  Time elapsed: 0.095 sec  <<< ERROR! java.lang.NoClassDefFoundError: Could not initialize class com.fasterxml.jackson.databind.SerializationConfig     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:543)     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:460)     at io.dropwizard.util.DurationTest.serializesCorrectlyWithJackson(DurationTest.java:810)  deserializesCorrectlyWithJackson(io.dropwizard.util.DurationTest)  Time elapsed: 0 sec  <<< ERROR! java.lang.NoClassDefFoundError: Could not initialize class com.fasterxml.jackson.databind.SerializationConfig     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:543)     at com.fasterxml.jackson.databind.ObjectMapper.(ObjectMapper.java:460)     at io.dropwizard.util.DurationTest.deserializesCorrectlyWithJackson(DurationTest.java:837)  Running io.dropwizard.util.SizeUnitTest Tests run: 25, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 sec - in io.dropwizard.util.SizeUnitTest  Results :  Tests in error:   DurationTest.deserializesCorrectlyWithJackson:837 ¬ª NoClassDefFound Could not ...   DurationTest.serializesCorrectlyWithJackson:810 ¬ª NoClassDefFound Could not in...   SizeTest.deserializesCorrectlyWithJackson:517 ¬ª NoClassDefFound Could not init...   SizeTest.serializesCorrectlyWithJackson:496 ¬ª NoSuchMethod com.fasterxml.jacks...  Tests run: 71, Failures: 0, Errors: 4, Skipped: 0 ```","closed","","ajlanghorn","2016-06-27T13:37:26Z","2018-08-10T15:59:42Z"
"","2437","Hamcrest upgrade planned?","Is there Hamcrest upgrade to 2.0.0.0 planned?   Hamcrest 2.x supports Java 7+ better (`@SafeVarargs`) and improved support for Java 8 i 9 is being discussed.  Hamcrest 1.x is not developed anymore.","closed","","volphy","2018-07-19T20:10:02Z","2018-07-27T07:41:00Z"
"","2412","Dropwizard with no logback + Log4j 1.x +  Log4jALA","Is there good integration point for Dropwizard with no logback and to use log4j 1.x instead log4j 2.x which will redirect the logs to Azure LogAnalytics using  Log4jALA appender. I tried to following the dropwizard no logback dependency, to use SLF4J to use external logging, i.e Log4j2.x as provided by Arteam demo app.   Log4jALA appender library which uses log4j 1.x, so need to use Dropwizard with nologback and use log4j 1.x. I tried my best, it doesn't log message to external logging instead uses default.  https://github.com/ptv-logistics/Log4jALA  Logs are not redirecting to Log4jALA, console and file.  gradle.build snippet: dependencies {     compile (""io.dropwizard:dropwizard-core:1.3.0"") {         exclude group: 'org.eclipse.jetty.orbit'    		exclude group:""ch.qos.logback"", module:""logback-core""        		exclude group:""ch.qos.logback"", module:""logback-classic""        		exclude group:""ch.qos.logback"", module:""logback-access""        		exclude group:""org.slf4j"", module:""log4j-over-slf4j""       }     compile ""io.dropwizard:dropwizard-assets:1.3.0""     compile ""io.dropwizard:dropwizard-client:1.3.0""     compile ""io.dropwizard:dropwizard-testing:1.3.0""     compile ""com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.3""     compile ""org.projectlombok:lombok:1.16.2""     compile ""javax.servlet:javax.servlet-api:3.1.0""     compile ""com.microsoft.azure:azure-storage:$azureStorageVersion""     compile ""com.pros.cloud.security:cloud-auth-client-dropwizard-pre1:$loginPortalClientVersion""     compile ""com.microsoft.azure:applicationinsights-core:$appInsightsSdkVersion""     compile group: 'com.github.ptv-logistics', name: 'log4jala', version: ""1.0.4""     compile 'org.owasp.esapi:esapi:2.0.1'     compile ""org.jsoup:jsoup:$jsoupVersion""     compile 'net.jodah:failsafe:1.0.5'     testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: ""$dropwizardVersion""     testCompile 'junit:junit:4.12'     testCompile 'org.mockito:mockito-core:1.9.5' }","closed","","reksomu371","2018-06-25T22:35:32Z","2018-06-26T22:03:52Z"
"","1966","Restrict access to specified IP addresses","Is there any way in Dropwizard (I'm using 0.9.3) to restrict access to specified IP addresses?   The bindHost parameter in configuration yml can only bind one IP address available on the machine where Dropwizard application runs, so can not satisfy my requirement. I want to specify any IP addresses, no matter local or remote.  Jetty can satisfy my requirement as can be seen [here](http://www.eclipse.org/jetty/documentation/current/ipaccess-handler.html). But I can't find an API in Dropwizard that allows me to add the IPAccessHandler.","closed","","zheng-wang","2017-03-16T07:05:36Z","2017-03-16T08:25:25Z"
"","1870","Assets Bundles with HTTP Basic Athentication","Is there any information related to $Subject when it comes to dropwizard.   Static contents are initialized as :          bootstrap.addBundle(new AssetsBundle(""/assets"", ""/ui"", ""index.html""));","closed","","sandakith","2017-01-06T20:55:46Z","2017-03-08T11:21:07Z"
"","1711","Find the execution time of a code block using timers","Is there a way that I can log the execution time of a code block, each time it is called? I do not want the mean rate and stuff of this timer as this method is not called that frequently but takes a considerable amount of time when called. So is there a way that I can print the execution time of each call? Also how can I get answers for the below questions  How can I investigate the reason for the spikes in the values? How will I know when the Max time event occurred so that I can go through the logs and see the possible reasons? Any help would be much appreciated.","closed","","mayooran99","2016-08-27T11:56:46Z","2016-08-29T19:25:10Z"
"","1580","Dagger 2","Is it possible to use Dagger 2 with dropwizard ?   I keep getting `org.glassfish.hk2.api.UnsatisfiedDependencyException: There was no object available for injection at SystemInjecteeImpl`  [This blog post](https://metabroadcast.com/blog/dagger-through-a-wizard https://github.com/ljeyaratnam/hello-world) explains how to do it but in [their repo ](https://github.com/ljeyaratnam/hello-world) dagger 2 isn't even used (DI is done by HK2)  My google-fu has failed to find other examples","closed","","Allsimon","2016-06-02T15:58:58Z","2017-06-05T10:24:56Z"
"","1635","Return version of Dropwizard JAR on health endpoint","Is it possible to print the version of the Dropwizard JAR on the health check endpoint?  Or alternatively is there a version endpoint?","closed","","darrenhaken","2016-07-14T01:43:05Z","2016-07-26T19:29:50Z"
"","2036","Command line input along with server","Is it possible to accept more command line argument along with ""server"" command.   Eg: java -jar {path_to_jar} server config.yml addtional_arg_name addtional_arg_value","closed","","itachi3","2017-04-29T07:12:16Z","2017-06-20T13:24:39Z"
"","1728","Runtime Configuration","is any plan to split the existing configuration into startup time configuration and runtime configuration allowing admins to modify certain configuration without the need to restart the server, such as loggers.","closed","stale,","qinfchen","2016-09-15T17:34:39Z","2019-09-03T00:00:55Z"
"","2201","Simplify concurrency handling in SelfValidatingValidator","Instead of synchronizing on ""methodMap"", we could use a `ConcurrentMap` and the `putIfAbsent` method, because a cashable value depends only from the key.  References: #2150","closed","improvement,","arteam","2017-11-10T21:06:56Z","2017-11-10T21:40:48Z"
"","2516","Deprecate Bundle in favor of ConfiguredBundle","Instead of supporting two types of bundles, `Bundle` and `ConfiguredBundle`, this change deprecates `Bundle` in favor of `ConfiguredBundle` in a backward-compatible way.  Closes #1360 Closes #2512","closed","","joschi","2018-10-03T15:16:41Z","2018-10-03T20:26:42Z"
"","1727","Should OptionalMessageBodyWriter return 404 when the response is Optional.empty()","Instead of returning NotFoundException for Optional.empty(), should it return 204 instead 404 based on the definition of the status codes below?  _404_ client error  > The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.  _204_ success  > The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant. >  > If the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view. >  > The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields. >  > Wikipedia > The server successfully processed the request, but is not returning any content. >  > Status when wrapped responses (e.g. JSEND) are not used and nothing is in the body (e.g. DELETE).  http://www.restapitutorial.com/httpstatuscodes.html","closed","","qinfchen","2016-09-15T17:29:58Z","2016-10-25T15:15:08Z"
"","1698","Log Jetty initialized SSLContext not the Default","Instead of listing supported cipher suites, protocols, etc of the default SSLContext algorithm, log what Jetty's will actually use, which as of this commit is a ""TLS"" SSLContext. This will also future proof the logging if this property ever becomes configurable in Dropwizard.","closed","improvement,","nickbabcock","2016-08-18T20:30:39Z","2016-08-19T06:56:53Z"
"","2304","Allow lazy initialization of resources in ResourceTestRule","Instead of eagerly initializing resource instances added to `ResourceTestRule` or `Resource`, we now allow using a `Supplier` which can be used to lazily initialize the resources or providers used in `ResourceTestRule`.  Additionally, this change set adds an adapter for `MockitoJUnit` which allows to use a Mockito JUnit Rule in `RuleChain` for defining an execution order for rules.  Closes #1800","closed","feature,","joschi","2018-03-13T17:22:33Z","2018-03-14T14:56:39Z"
"","2014","Add flag to make ThreadNameFilter optional","Include a flag enableThreadNameFilter in AbstractServerFactory to allow disabling of the ThreadNameFilter's installation. Existing default behavior is preserved.  Fixes #2013.","closed","","markelliot","2017-04-18T03:50:13Z","2017-04-18T06:56:15Z"
"","2112","Remove Dropwizard's Jackson dependency on Logback","In the move to allow users plug in custom logging implementations except Logback, we should make all Logback dependencies in Dropwizard optional. Currently, our Jackson mapper is dependent on Logback for deserializing logging `Level` in the configuration. It's forces every Dropwizard app to have a runtime dependency on Logback. To avoid this we could remove `Level` deserializers and move converting a string text level to Logback's level to `DefaultLoggingFactory`. Since `DefaultLoggingFactory` can be replaced by `√àxternalLoggingFactory` this allows users to run Dropwizard app without a Logback dependency.","closed","improvement,","arteam","2017-07-27T10:56:58Z","2018-08-30T00:42:00Z"
"","1979","Improve ""Organizing Your Project"" section of Dropwizard Core manual","In the `Organizing Your Project` section of the Dropwizard Core manual, I think the following could be improved:  > In general, we recommend you separate your projects into three Maven modules: project-api, project-client, and project-application.  > project-api should contain your Representations; project-client should use those classes and an HTTP client to implement a full-fledged client for your application, and project-application should provide the actual application implementation, including Resources.  It would be nice to provide a little bit more context on **why** splitting a Dropwizard project into those three modules is such a good idea. And if that's really the case, it would also be nice to update the [dropwizard-example](https://github.com/dropwizard/dropwizard/tree/master/dropwizard-example) to reflect this recommendation.","closed","documentation,","fabriziocucci","2017-03-23T22:33:38Z","2017-05-10T16:16:47Z"
"","1594","JUnit rule for testing database interactions","In several projects, I wrote a test code which allows testing of database interactions independently of `@UnitOfWork` annotations only present on resource methods. So I thought this might be useful to others as well. I rewrote it to be similar to other existing JUnit rule that are part of the `dropwizard-testing` module. I hope I followed all the coding conventions.  I added Hibernate and H2 to the dependencies of the testing module using scopes which hopefully don't pollute the classpath of users who are not interested in database testing (`provided` and `test`, respectively).  I also added a small section to the ""Testing Dropwizard"" part of the manual explaining how to use this rule.  Let me know if you have questions are if anything is missing.","closed","","rbarbey","2016-06-12T08:58:43Z","2016-08-27T14:02:06Z"
"","2303","Starting two services on the same port results in unexpected behaviour","In our integration tests we were starting two separate drop wizard services, a mistake was made where they were both configured to start on the same port.  We get an `java.lang.IllegalArgumentException: A metric named org.eclipse.jetty.util.thread.QueuedThreadPool.dw.utilization already exists 	at com.codahale.metrics.MetricRegistry.register(MetricRegistry.java:91)`, the root cause of which was difficult to debug, overriding the metric registry with one which suppressed the exception allowed the service to resume until a `java.net.BindException: Address already in use: bind`. Changing the port and reverting the implementation meant the registry issue went away.  We've also seen a similar issue on our build server, we would guess when a test service has not been shutdown gracefully during a previous build.  I'm not sure what behavior would cause two services to share a metric registry if they attempt to start on the same port, but it is an issue that it hides the BindException.","closed","","aedwards-act","2018-03-13T12:32:15Z","2021-03-04T07:11:49Z"
"","2007","Support Handle binding to applications connectors","In order to support the publishing of different resources in different ports of the same application, extend the current capacity to setup multiple application ports with a way to bind these ports to Bundles. For example, defining in config.yml ```yaml server:   applicationConnectors:     - type: http       port: ${DW_HTTP_PORT:-9080}     - type: http       port: ${DW_SWAGGER_PORT:-9180}       label: swagger ``` and in the Application.initialize ```java bootstrap.addBundle(new SwaggerBundle(),""swagger""); ``` resulting in swagger serving on 9180 and the other bundles serving in 9080.","closed","stale,","leoconco","2017-04-12T21:11:36Z","2019-08-19T16:00:37Z"
"","2403","Add more Java versions to Travis CI build matrix","In order to cover the Java/JDK versions we want to support with Dropwizard with Travis CI, this pull request adds OpenJDK 8 through 11 (EA) to the Travis CI build matrix.  There were some minor changes in the Maven build, mostly adding build profiles for the respective Java/JDK versions.  The following issues are open until Java 11 is completely supported without hacks:  * https://github.com/jboss-javassist/javassist/pull/198 * https://liquibase.jira.com/browse/CORE-3262 (this also affects Java 10)","closed","improvement,","joschi","2018-06-20T16:31:40Z","2018-07-02T12:32:15Z"
"","1802","Base Factory class to build objects based Environment","In my projects, I basically have the following class copied/pasted everywhere  ``` /**  * Factory class for building returnable types provided the current {@code Environment}.  *   * @see {link Environment}  */ @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = ""type"") public interface EnvironmentProvidedFactory extends Discoverable {      T build(Environment environment); } ```  I was looking at refactoring it to a shared library on our stack but wanted to ask here first.  Would this be useful for possibly others if this was added to dropwizard proper?  We have found it extremely useful for configuring **bundles** using this approach so we have a standard interface they all implement and can register as a type to be easily loaded and swapped out in the YAML.","closed","stale,","jmoney","2016-11-04T21:10:54Z","2019-08-19T16:00:42Z"
"","2440","Async JerseyHttpClient max threads and maxconnections","In jersey client configuration there are two parameters as described below.  maxThreads: 128 maxConnections: 1024  If I am making http calls asynchronously can this 128 threads acquire 1024 http connections. If not then it will not make any sense to keep maxConnections > maxThreads then why there default values are given that way.","closed","stale,","arpit728","2018-07-20T14:13:32Z","2019-08-19T14:01:56Z"
"","1919","Document use of @Session in the user manual","In fielding a question about session management in the #dropwizard-user IRC channel, I realized that the [@Session](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/Session.java) annotation isn't documented in the user manual. Ditto for the adjacent [flash functionality](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/sessions/Flash.java), which I didn't even know existed.  We should add a section to the user manual which explains what this stuff can do and how it works.","closed","stale,","evnm","2017-02-08T04:47:19Z","2019-08-19T16:00:38Z"
"","1752","StreamingOutput Resource not respecting flush, versions 0.8.x and later","In DW versions 0.7.1 and before a StreamingOutput Resource will immediately return the HTTP response headers and any HTTP response body as soon as the OutputStream has `flush()` called.  In DW versions 0.8.x and later, it would appear that some sort of buffer is not respecting the `flush()` call. If not enough data is streamed, there will be no HTTP data is sent until the stream is closed.  Please see the code  below:  [dwex_07plus.tar.gz](https://github.com/dropwizard/dropwizard/files/501649/dwex_07plus.tar.gz)  Steps to reproduce (0.7.1): 1. Make sure that `dropwizard.version` is set to `0.7.1` in `pom.xml`. 2. Package it: `mvn clean package` 3. Start server: `java -jar target/dwex_07plus-0.0.1.jar server example.yml` 4. In separate console: `curl -i http://localhost:8080/hello-world/streaming` 5. Note how the HTTP response headers and flushed data comes back ASAP.  Steps to reproduce (0.8.x and later): 1. Make sure that `dropwizard.version` is set to `0.8.0` or later in `pom.xml`. 2. Package it: `mvn clean package` 3. Start server: `java -jar target/dwex_07plus-0.0.1.jar server example.yml` 4. In separate console: `curl -i http://localhost:8080/hello-world/streaming` 5. Note how not HTTP response headers nor flushed data comes back for some time (about 30s). After the delay, the response headers and all buffered data is returned and subsequent HTTP response body is written.","closed","","j7m4","2016-09-29T20:43:19Z","2016-09-30T13:52:38Z"
"","1558","server attribute requestLog does not allow snake case","in Dropwizard version 1.0.0-rc2 currently https://github.com/dropwizard/dropwizard/blob/49ea3ed32b01c3990f00a878d665f2cbf384d00f/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java#L266 marks the name of the requestLog property to be explicitly camel case. I am using the SNAKE_CASE jackson extension and it is very un-intuitive to have one random property that is not snake case.   In my app initialize I am doing  ``` bootstrap.getObjectMapper().setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE); ```  so that all jersey requests with json use snake case (which affects the configuration as well)","closed","","camerondavison","2016-05-24T16:51:37Z","2016-10-28T02:05:59Z"
"","2072","Validation of associated entities","In current version I found out that it is impossible to validate any associated entities for domain classes with `@ValidationMethod`. To better demonstrate what is the problem, imagine situation like this: You have two classes `SecretProject` and `User` and your goal is to allow only `Users` with permission `Admin` to be able to be associated to `SecretProject` so you choose to create `@ValidationMethod` which will check if `User` had the right permission. (Code is 100% not complete with all annotations it should have, it there just as an example)  ```java public class User {    private Set roles;    public Set getRoles() {     return roles;   } } ``` ```java public class SecretProject {    private User user;    public User getUser() {     return user;   }    @ValidationMethod(message = ""Only admin can have SecretProject assigned."")   public boolean isUserAdmin() {     return user.getRoles().contains(""ADMIN"");   } } ``` You also create endpoint that will validate this entity before doing anything else, like this ```java public Response create(@NotNull @Valid SecretProject project) {    // DAO code } ``` ```js {    ""user"": {""id"": 1} } ``` But when using this endpoint with request entity specified above it throws NPE while validating because at the time of validation, Dropwizard didn't fetch `User`.  As use case I don't think it is that specific or that it doesn't make sense. Is there any workaround? Do I have to use different validation method? Do you think that it is feature that Dropwizard should have, or it is not in a scope of things that `@ValidationMethod` should do? Or am I wrong completely?","closed","","pehala","2017-06-07T10:46:52Z","2017-07-26T21:43:26Z"
"","1937","If a logback appender fails to initialize due to a warning, this warning is not displayed","In `io.dropwizard.logging.DefaultLoggingFactory.configure(...)`, errors encountered while setting up a log appender can be displayed by another (non-failing) appender.  This is done via the logback helper method `ch.qos.logback.core.util.StatusPrinter.printIfErrorsOccurred(LoggerContext)`.  As the name suggests, this prints errors, but not warnings.  We currently have a network appender which fails with a warning.  (That's a problem to file with another project.)  So, as a result of our appender failing with a warning rather than an error, and DefaultLoggingFactory only printing errors, we don't see any indication of the problem.  My suggested fix is pretty simple: in DefaultLoggingFactory, change- ``` StatusPrinter.printIfErrorsOccured(loggerContext); ``` to- ``` StatusPrinter.printInCaseOfErrorsOrWarnings(loggerContext, 0); ```","closed","stale,","wg-tsuereth","2017-02-24T22:39:33Z","2019-08-19T16:00:38Z"
"","2496","DropwizardTestSupport sets ConfigurationFactoryFactory to early","in [DropwizardTestSupport](https://github.com/dropwizard/dropwizard/blob/fb58944deddfa2925adb2fd4a3b4c3dba5998cd7/dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java#L221) the test support class sets the bootstrap ConfigurationFactoryFactory before initializing the application. Should this not happen after the initialization since the application itself could change the FactoryFactory?","closed","needs code,","manuel-hegner","2018-09-17T10:39:04Z","2018-11-16T02:21:45Z"
"","1655","Bogus commit to see if Code Climate is listening.","Ignore‚Ä¶this is just to test the Code Climate webhook.","closed","","ryankennedy","2016-07-30T05:41:54Z","2016-08-02T12:56:40Z"
"","2361","JerseyClientBuilder not working with resteasy-client","If you use JerseyClientBuilder with resteasy-client dependency:  ```      org.jboss.resteasy     resteasy-client     3.5.1.Final  ```  occurs an Exception:  ``` javax.ws.rs.ProcessingException: java.lang.ClassCastException: org.jboss.resteasy.client.jaxrs.internal.ClientRequestContextImpl cannot be cast to org.glassfish.jersey.client.ClientRequest ```   To reproduce you can put the maven dependency of resteasy-client on [dropwizard-example](https://github.com/dropwizard/dropwizard/tree/master/dropwizard-example) and use like that:  ``` javax.ws.rs.client.Client client = new JerseyClientBuilder(environment)         .using(configuration.getJerseyClientConfiguration())         .build(getName());  client.target(""http://www.google.com.br"").request().get(); ```","closed","","anetogit","2018-05-19T22:47:45Z","2019-03-23T00:22:34Z"
"","2362","Unexpected Bean Validation problem","If you try to validate a QueryParam with a Pattern constraint:  ``` @GET @Path(""/test"") @Produces(MediaType.TEXT_PLAIN) public Response test(         @QueryParam(""year"") @Pattern(regexp = ""[0-9+]"", message = ""must be a number"") Integer year,         @QueryParam(""keywords"") @NotBlank String keywords) {     return Response.ok().entity(year).build(); } ```  I got a ValidationExceptionMapper:  ``` WARN  [2018-05-20 03:07:04,222] org.glassfish.jersey.server.validation.internal.ValidationExceptionMapper: Unexpected Bean Validation problem. ! javax.validation.UnexpectedTypeException: HV000030: No validator could be found for constraint 'javax.validation.constraints.Pattern' validating type 'java.lang.Integer'. Check configuration for 'test.query param year' ! at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.throwExceptionForNullValidator(ConstraintTree.java:228) ! at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getConstraintValidatorNoUnwrapping(ConstraintTree.java:309) ! at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getConstraintValidatorInstanceForAutomaticUnwrapping(ConstraintTree.java:243) ! at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.getInitializedConstraintValidator(ConstraintTree.java:164) ! at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:109) ! at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:88) ! at org.hibernate.validator.internal.metadata.core.MetaConstraint.validateConstraint(MetaConstraint.java:73) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForGroup(ValidatorImpl.java:1439) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateParametersForSingleGroup(ValidatorImpl.java:1247) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateParametersForGroup(ValidatorImpl.java:1179) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateParametersInContext(ValidatorImpl.java:1101) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:302) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:256) ! at io.dropwizard.jersey.validation.DropwizardConfiguredValidator.validateResourceAndInputParams(DropwizardConfiguredValidator.java:45) ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:134) ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$ResponseOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:160) ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1655) ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:35) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:45) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) ! at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) ! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) ! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:239) ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:52) ! at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:724) ! at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:67) ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56) ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ! at org.eclipse.jetty.server.Server.handle(Server.java:531) ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:352) ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:260) ! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:281) ! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:102) ! at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:760) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:678) ! at java.lang.Thread.run(Thread.java:748) 0:0:0:0:0:0:0:1 - - [20/May/2018:03:07:04 +0000] ""GET /hello-world/test HTTP/1.1"" 500 176 ""-"" ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36"" 3 ```  Example of request: ``` curl -X GET \   http://localhost:8080/hello-world/test \   -H 'cache-control: no-cache' ```","closed","","anetogit","2018-05-20T03:08:24Z","2018-05-20T17:55:21Z"
"","2441","ResourceConfigurationSourceProvider should fails with IOException if resource does not exsit in the classpath","If you try to use `ResourceConfigurationSourceProvider` and there are no resource on the classpath `SubstitutingSourceProvider` will fail with NPE  ``` java.lang.NullPointerException         at com.google.common.io.ByteStreams.toByteArray(ByteStreams.java:163)         at io.dropwizard.configuration.SubstitutingSourceProvider.open(SubstitutingSourceProvider.java:38)         at  ... ```  It's  happens b/c `ClassLoader.getResourceAsStream(String name)` does not throw IO for not existing resources.  ``` ...      * @return  An input stream for reading the resource, or null      *          if the resource could not be found ... ```  So `SubstitutingSourceProvider` just simply thinks it's good stream and gets NPE.","closed","stale,","sigarev","2018-07-20T22:11:52Z","2019-08-19T14:01:53Z"
"","1876","Protect against NPE from rogue deserializers","If someone defines a custom jackson deserializer, throws a custom `JacksonMappingException`, and overrides `getMessage()` to return `null`, `JsonProcessingExceptionMapper` will have a NPE as reported in #1869. If someone creates such a devious deserializer, it should be treated as a server error, hence a 500 status code is returned.  Closes #1869  thanks @kjetilv cc @cowtowncoder so that he is aware of this edge case. Not 100% what the behavior of 2.9 will/should be in this situation, but I figured I'd give you a heads up in case this changes anything.","closed","improvement,","nickbabcock","2017-01-10T20:52:54Z","2017-01-11T00:20:11Z"
"","1982","Improve error handling for Jersey's Exception that caused by client","If sending a POST request with a `Content-Type` header that is not `application/x-www-form-urlencoded` and using `@FormParam` in resource method, an `IllegalStateException` will be thrown by Jersey and logged at ERROR level by `LoggingExceptionMapper`. Also, this is the same behavior as https://java.net/jira/browse/JERSEY-2636.  This indicates that **users can easily output ERROR level logs in server side**. Therefore, I would like to prevent this.  ### Steps to reproduce  1. Create a new resource class and method that given the `@POST` and `@FormParam`. Note: `@Consumes` is optional because ignoring.  ```java @Path(""/"") public class EchoResource {     @POST     @Consumes(MediaType.APPLICATION_FORM_URLENCODED)     public String echo(@FormParam(""msg"") String msg) {         return msg;     } } ```  2. Send the POST request without a `Content-Type` header, the *500 Internal Server Error* is returned and logged at ERROR level.  ``` $ curl -i -XPOST localhost:8080/ HTTP/1.1 500 Internal Server Error Date: Sun, 26 Mar 2017 03:20:17 GMT Content-Type: application/json Content-Length: 110  {""code"":500,""message"":""There was an error processing your request. It has been logged (ID 76abeb6446b86576).""} ```  ``` ERROR [2017-03-26 03:20:17,068] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: 76abeb6446b86576 ! java.lang.IllegalStateException: The @FormParam is utilized when the content type of the request entity is not application/x-www-form-urlencoded ! at org.glassfish.jersey.server.internal.inject.FormParamValueFactoryProvider$FormParamValueFactory.ensureValidRequest(FormParamValueFactoryProvider.java:183) ! at org.glassfish.jersey.server.internal.inject.FormParamValueFactoryProvider$FormParamValueFactory.getForm(FormParamValueFactoryProvider.java:167) ! at org.glassfish.jersey.server.internal.inject.FormParamValueFactoryProvider$FormParamValueFactory.provide(FormParamValueFactoryProvider.java:118) ! at org.glassfish.jersey.server.spi.internal.ParamValueFactoryWithSource.provide(ParamValueFactoryWithSource.java:71) ! at org.glassfish.jersey.server.spi.internal.ParameterValueHelper.getParameterValues(ParameterValueHelper.java:90) ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$AbstractMethodParamInvoker.getParamValues(JavaResourceMethodDispatcherProvider.java:127) ... ```  ### Impact  Probably, this change does not affected to users using the past version, because If bound an `ExceptionMapper` at `Application#run(Configuration, Environment)`, this mappers register in the HK2 container before Dropwizard's ExceptionMapper(s) that is bound by the `ExceptionMapperBinder`.  Please refer to the following references for details.  Reference 1: [HK2 API documentation](https://hk2.java.net/2.5.0-b32/api-overview.html#Looking_up_services) > Services are sorted by (in order) the service ranking, the largest locator id (so that services in children are picked before services in parents) and smallest service id (so that older services are picked prior to newer services). Therefore the best instance of a service is a service with the highest ranking or largest service locator id or the lowest service id. The ranking of a service is found in its Descriptor and can be changed at any time at run time. The locator id of a service is a system assigned value for the Descriptor when it is bound into the ServiceLocator and is the id of that ServiceLocator. The service id of a service is a system assigned value for the Descriptor when it is bound into the ServiceLocator. The system assigned value is a monotonically increasing value. Thus if two services have the same ranking the best service will be associated with the oldest Descriptor bound into the system.  Reference 2: [org.glassfish.jersey.internal.ExceptionMapperFactory#find(Class, T)](https://github.com/jersey/jersey/blob/2.25.1/core-common/src/main/java/org/glassfish/jersey/internal/ExceptionMapperFactory.java#L122)","closed","improvement,","ghost","2017-03-26T03:56:52Z","2017-03-27T14:06:25Z"
"","2049","@NotNull does not work with @Validated(Test.class) annotation","If I annotate a resource method param with @NotNull and @Valid and send a null entity, I correctly get a 400 back. If I annotate it with @NotNull and @Validated and send a null entity again it works.  But If I annotate it with @NotNull and @Validated(TestValidated.class) and try to send a null entity, it does not do the null check. Sample code:  ```java public class Person {     @NotEmpty(groups = TestValidated.class)     private String name;     private String email; }  public class HelloWorldApplication extends Application{   @Override     public void run(HelloWorldConfiguration configuration,             Environment environment) {         environment.jersey().register(new HelloWorldResource());         environment.jersey().register(new ValidationExceptionMapper());         environment.jersey().enable(                 ""jersey.config.beanValidation.enableOutputValidationErrorEntity.server"");     }  @Path(""/hello"") @Produces(MediaType.APPLICATION_JSON) public class HelloWorldResource {     @POST     public Person sayHello(@Validated @NotNull Person person) {         String name = person.getName(); // get a NPE         return new Person(""test"", ""test@test.com"");     } } ```","closed","","anujkumar04","2017-05-08T23:08:21Z","2017-05-15T17:55:25Z"
"","2011","Document caveat of bean-spec compliant endpoints","If endpoints are written in a way that comply with bean-spec property and have validation annotations on them, they will be additionally executed as part of the validation logic.  I dug into the code and there is very little we can do in this regard. I tried coding a way to exclude certain properties that are annotated with `javax.ws.rs` annotations, but I had no luck -- we'd have to write our own `Validator`, so I thought the best solution would be to just document this small downside.  Only 1.0.0 and 1.1.0 users should be affected.  CC @scottaj   Closes #2008","closed","documentation,","nickbabcock","2017-04-14T00:12:39Z","2017-04-14T00:46:37Z"
"","1855","Switch cert and peer validation to false by default","If any either of these two options are enabled, a HTTPs enabled Dropwizard app will most likely fail to start with cryptic error messages. Since Jetty has these options disabled by default, we should follow their lead and disable these options as well.  Future work includes adding in additional certificate features as Certificate Revocation List (CRL),  CRL Distribution Points Protocol (CRLDP), On-Line Certificate Status Protocol (OCSP)  This may be considered a bugfix and is a candidate for either 1.0.x or 1.1","closed","bug,","nickbabcock","2016-12-11T20:51:59Z","2016-12-12T19:49:55Z"
"","1941","Logging disabled after uncaught exception","If an uncaught exception is thrown in the `run` method of the `Application` class, this cannot be logged by the `main` method which started the application. Logging in the shutdown hook and ucaught exception handler is also disabled. This is due to the fact that in the event of a shutdown Dropwizard [runs a cleanup](https://github.com/dropwizard/dropwizard/blob/7295c5faf42840325c161cc82ad4ed1db2bf8419/dropwizard-core/src/main/java/io/dropwizard/cli/ConfiguredCommand.java#L88) method in `ConfiguredCommand`, which stops the logging. In the event of an unexpected exception logging is required in order to debug the program.  This issue is similar to #1119.  I've got two workarounds:  1.  Catch all exceptions in the `run` method of the `Application`. However the method signature suggests that exceptions should be handled and can be thrown. The disadvantage is that logging in the shutdown hook and the uncaught exception handler will not work.  2. Create a new command `start` which extends `ServerCommand` and overrides the `cleanup` method with a no-op. This keeps the logging alive till the last moment of shutdown.   I would like configuration or a command option in order to prevent the logging from stopping instead of the current workarounds.   Class to reproduce the situation. Ran it in eclipse with console logging. I'm using version 1.0.2.  ```java import java.lang.Thread.UncaughtExceptionHandler;  import org.eclipse.jetty.util.component.LifeCycle; import org.eclipse.jetty.util.component.LifeCycle.Listener; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import io.dropwizard.Application; import io.dropwizard.Configuration; import io.dropwizard.setup.Environment;  public class DropwizardExample extends Application {     private static final Logger LOG = LoggerFactory.getLogger(DropwizardExample.class);      public static void main(String[] args) throws Throwable {         LOG.info(""Uninitialized logger"");         enableShutdownLogging();         enableUncaughtExceptionLogging();         try {             new DropwizardExample().run(new String[] { ""server"" });         } catch (Throwable e) {             LOG.info(""Cant see me, now can you?"");             LOG.error(""O no..."", e);             System.out.println(""You see me, but no timestamp and no appenders"");             throw e;         }         LOG.info(""Finished running"");     }      @Override     public void run(Configuration configuration, Environment environment) throws Exception {         LOG.info(""You can see me..."");         environment.lifecycle().addLifeCycleListener(new Listener() {              @Override             public void lifeCycleStopping(LifeCycle event) {                 LOG.info(""stopping"");                 System.out.println(""Stopping in sysout"");             }              @Override             public void lifeCycleStopped(LifeCycle event) {                 LOG.info(""stopped"");                 System.out.println(""Stopped in sysout"");             }              @Override             public void lifeCycleStarting(LifeCycle event) {                 LOG.info(""starting"");                 System.out.println(""Starting in sysout"");             }              @Override             public void lifeCycleStarted(LifeCycle event) {                 LOG.info(""started"");                 System.out.println(""Started in sysout"");             }              @Override             public void lifeCycleFailure(LifeCycle event, Throwable cause) {                 LOG.info(""failed"", cause);                 System.out.println(""Failed in sysout"");             }         });         throw new UnsupportedOperationException(""Fail..."");     }      private static void enableUncaughtExceptionLogging() {         LOG.info(""enabling uncaught exception logging"");         final UncaughtExceptionHandler originalUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();         Thread.setDefaultUncaughtExceptionHandler((t, e) -> {             LOG.error(""Uncaught exception in thread {}"", t.getName(), e);             System.err.println(""Uncaught caught in thread "" + t.getName() + "" (syserr logging)"");             if (originalUncaughtExceptionHandler != null) {                 originalUncaughtExceptionHandler.uncaughtException(t, e);             }         });     }      private static void enableShutdownLogging() {         LOG.info(""enabling shutdown logging"");         Runtime.getRuntime().addShutdownHook(new Thread() {             @Override             public void run() {                 System.err.println(""Logging that the shutdown hook is called."");                 LOG.info(""Stopping"");             }         });     } } ```","closed","bug,","Sijmen","2017-02-27T08:25:50Z","2017-03-06T17:34:16Z"
"","1551","Add CacheBuilderSpecSerializer","If a configuration has a default value for a CacheBuilderSpec (e.g. `CacheBuilderSpec cacheBuilderSpec = CacheBuilderSpec.disableCaching();`) and the value is not overridden in the configuration file, we need to serialize the object before parsing the configuration so that it can be properly instantiated in the `Configuration` class.","closed","bug,","tburch","2016-05-20T20:59:11Z","2016-05-21T08:31:06Z"
"","2212","Timers with exponentially-decaying reservoirs","I've used Timers for meter API calls with different frequency which is chaging over time. I faced up problem with some metrics with low calls count, that old metrics are kept for very long time. In result, graphs in Graphite show inaccurate values - old ones. The problem has been described in this article ""Don‚Äôt use Timers with exponentially-decaying reservoirs in Graphite' (http://taint.org/2014/01/16/145944a.html).  Author said that:  >  In reality, if the frequency of updates to such a timer drops off, it could take a lot longer, and if you stop updating a timer which uses this reservoir type, it‚Äôll never decay at all. The GraphiteReporter will dutifully capture the percentiles, min, max, etc. from that timer‚Äôs reservoir every minute thereafter, and record those to Graphite using the current timestamp ‚Äî even though the data it was derived from is becoming more and more ancient.  Workaround suggested by author is:  > What we eventually did in our code was to use this Reporter class instead of GraphiteReporter; it clears all Timer metrics‚Äô reservoirs after each write to Graphite. This is dumb and dirty, reaching across logical class boundaries, but at the same time it‚Äôs simple and comprehensible behaviour: with this, we can guarantee that the percentile/min/max data recorded at timestamp T is measuring events in that timestamp‚Äôs 1-minute window ‚Äî not any time before that. This is exactly what you want to see in a time-series graph like those in Graphite, so is a very valuable feature for our metrics, and one that others have noted to be important in comparable scenarios elsewhere.  What is your reccomendation to deal with such problem?","closed","","LukaszP1","2017-11-16T09:07:01Z","2017-11-16T09:53:54Z"
"","2318","Problem with Jackson reflection and (I think) Javax.activation","I've used dropwizard-core 1.3.0 targeting jdk 9. Don't know if it's something related to jdk 9. I've run the simple program of the Getting Started guide on the website.  **Here's the problem with Jackson reflection:**  WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/Users/fabio/IdeaProjects/smartcity/build/libs/hello-1.0-SNAPSHOT.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int) WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release  **And here's the one with javax (I think), which disappear if I use the VM parameter ""--add-modules java.activation"" (Why?)**  WARN  [2018-03-30 01:39:45,151] org.glassfish.jersey.internal.Errors: The following warnings have been detected: WARNING: HK2 service reification failed for [org.glassfish.jersey.message.internal.DataSourceProvider] with an exception: MultiException stack 1 of 2 java.lang.NoClassDefFoundError: javax/activation/DataSource 	at java.base/java.lang.Class.getDeclaredConstructors0(Native Method) 	at java.base/java.lang.Class.privateGetDeclaredConstructors(Class.java:3110) 	at java.base/java.lang.Class.getDeclaredConstructors(Class.java:2314) 	at org.jvnet.hk2.internal.Utilities$3.run(Utilities.java:1308) 	at org.jvnet.hk2.internal.Utilities$3.run(Utilities.java:1304) 	at java.base/java.security.AccessController.doPrivileged(Native Method) 	at org.jvnet.hk2.internal.Utilities.getAllConstructors(Utilities.java:1304) 	at org.jvnet.hk2.internal.Utilities.findProducerConstructor(Utilities.java:1247) 	at org.jvnet.hk2.internal.DefaultClassAnalyzer.getConstructor(DefaultClassAnalyzer.java:83)         ...","closed","blocked,","fabionebbia","2018-03-30T01:37:23Z","2019-04-22T10:20:08Z"
"","1772","Missed dependency? java.lang.IllegalStateException: It appears there is no ServiceLocatorGenerator installed","I've upgraded from Dropwizard 0.8 to 1.0.2. Running my unit tests, I'm seeing this error. Is there a dependency I should be including that Dropwizard doesn't get transitively?  ``` java.lang.RuntimeException: java.lang.ClassNotFoundException: Provider org.glassfish.jersey.internal.RuntimeDelegateImpl could not be instantiated: java.lang.IllegalStateException: It appears there is no ServiceLocatorGenerator installed.      at javax.ws.rs.ext.RuntimeDelegate.findDelegate(RuntimeDelegate.java:152)     at javax.ws.rs.ext.RuntimeDelegate.getInstance(RuntimeDelegate.java:120)     at javax.ws.rs.core.UriBuilder.newInstance(UriBuilder.java:95)     at javax.ws.rs.core.UriBuilder.fromPath(UriBuilder.java:148)     at com.kessel.SmokeTest.testFetch(CustomerConfigHubRepositoryTest.java:32)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.junit.runner.JUnitCore.run(JUnitCore.java:137)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119)     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:498)     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144) Caused by: java.lang.ClassNotFoundException: Provider org.glassfish.jersey.internal.RuntimeDelegateImpl could not be instantiated: java.lang.IllegalStateException: It appears there is no ServiceLocatorGenerator installed.     at javax.ws.rs.ext.FactoryFinder.newInstance(FactoryFinder.java:122)     at javax.ws.rs.ext.FactoryFinder.find(FactoryFinder.java:225)     at javax.ws.rs.ext.RuntimeDelegate.findDelegate(RuntimeDelegate.java:135)     ... 31 more Caused by: java.lang.IllegalStateException: It appears there is no ServiceLocatorGenerator installed.     at com.squarespace.jersey2.guice.GuiceServiceLocatorGeneratorStub.create(GuiceServiceLocatorGeneratorStub.java:50)     at org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.internalCreate(ServiceLocatorFactoryImpl.java:312)     at org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.create(ServiceLocatorFactoryImpl.java:293)     at org.glassfish.jersey.internal.inject.Injections._createLocator(Injections.java:138)     at org.glassfish.jersey.internal.inject.Injections.createLocator(Injections.java:109)     at org.glassfish.jersey.internal.RuntimeDelegateImpl.(RuntimeDelegateImpl.java:63)     at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)     at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)     at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)     at java.lang.reflect.Constructor.newInstance(Constructor.java:423)     at java.lang.Class.newInstance(Class.java:442)     at javax.ws.rs.ext.FactoryFinder.newInstance(FactoryFinder.java:118)     ... 33 more ```","closed","","chriskessel","2016-10-12T22:45:58Z","2018-07-04T14:56:35Z"
"","2385","Problem with liquibase 3.6.0 update on latest release","I've updated Dropwizard to the version `1.3.3`, which upgrades Liquibase from `3.5.5` to `3.6.0`, but when I try to run the `db migrate` command it's returning the following message:  ``` INFO  [2018-06-11 14:06:14,959] liquibase.lockservice.StandardLockService: Successfully released change log lock liquibase.exception.MigrationFailedException: Migration failed for change set database/db.changelog-1.1.xml::4::mauricio:      Reason: java.lang.IllegalStateException: Cannot find generators for database class liquibase.database.core.MySQLDatabase, statement: liquibase.statement.core.CopyRowsStatement@1ba7db2a 	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:637) 	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:53) 	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:78) 	at liquibase.Liquibase.update(Liquibase.java:202) 	at liquibase.Liquibase.update(Liquibase.java:179) 	at liquibase.Liquibase.update(Liquibase.java:175) 	at liquibase.Liquibase.update(Liquibase.java:168) 	at io.dropwizard.migrations.DbMigrateCommand.run(DbMigrateCommand.java:68) 	at io.dropwizard.migrations.DbCommand.run(DbCommand.java:55) 	at io.dropwizard.migrations.AbstractLiquibaseCommand.run(AbstractLiquibaseCommand.java:68) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87) 	at io.dropwizard.cli.Cli.run(Cli.java:78) 	at io.dropwizard.Application.run(Application.java:93) 	at com.objectedge.middleware.MiddlewareApplication.main(MiddlewareApplication.java:145) Caused by: java.lang.IllegalStateException: Cannot find generators for database class liquibase.database.core.MySQLDatabase, statement: liquibase.statement.core.CopyRowsStatement@1ba7db2a 	at liquibase.sqlgenerator.SqlGeneratorFactory.generateSql(SqlGeneratorFactory.java:221) 	at liquibase.sqlgenerator.SqlGeneratorFactory.generateSql(SqlGeneratorFactory.java:208) 	at liquibase.database.core.SQLiteDatabase.getAlterTableSqls(SQLiteDatabase.java:148) 	at liquibase.sqlgenerator.core.AddColumnGeneratorSQLite.generateSql(AddColumnGeneratorSQLite.java:80) 	at liquibase.sqlgenerator.core.AddColumnGeneratorSQLite.generateSql(AddColumnGeneratorSQLite.java:21) 	at liquibase.sqlgenerator.SqlGeneratorChain.generateSql(SqlGeneratorChain.java:30) 	at liquibase.sqlgenerator.SqlGeneratorFactory.generateSql(SqlGeneratorFactory.java:223) 	at liquibase.executor.AbstractExecutor.applyVisitors(AbstractExecutor.java:25) 	at liquibase.executor.jvm.JdbcExecutor.access$500(JdbcExecutor.java:38) 	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:338) 	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:57) 	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:125) 	at liquibase.database.AbstractJdbcDatabase.execute(AbstractJdbcDatabase.java:1229) 	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1211) 	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:600) 	... 13 more ```  I've found that the problem was in a `addColumn` statement, which under the hood liquibase is trying get the `SqlGenerator` for that statement, but is returning for the wrong one (`liquibase.sqlgenerator.core.AddColumnGeneratorSQLite`).  It seems this was already reported (here: https://liquibase.jira.com/browse/CORE-3200) and fixed in the version `3.6.1`.  Can you please update the version of Liquibase dependency from `3.6.0` to `3.6.1`?  Thanks in advance.","closed","","dev-marc-laurent","2018-06-11T14:20:47Z","2018-06-14T06:22:03Z"
"","2302","Issues with default JerseyClientBuilder","I've started using Dropwizard (1.2.4) recently and have been getting some weird behavior using the Jersey Client obtained through Dropwizard. I've followed the configuration steps from here (http://www.dropwizard.io/1.2.2/docs/manual/client.html#jersey-client) and have not overwritten any of the default configurations in my `.yml`.   When I retrieve the client via Dropwizard's `JerseyClientBuilder` to make a request I get a 403 response return. When I retrieve the client via `javax.ws.rs.client.ClientBuilder` the request goes through fine.  I'm calling the downstream like: ```java  Order order = new Order();  // Set values within order (left out for readability)  client.target(""https://sample.com"")             .path(""/orders"")             .request()             .header(""Authorization"", ""XXX"")             .post(Entity.json(order)); ```  Order is a simple POJO that looks like below with each of the classes within it being simple POJOs: ```java public class Order {     private Amount totalAmount;     private Consumer consumer;     private Merchant merchant;     // Getters and setters for each of the variables above } ```  The client is instantiated like below in `Application.run` with client1 getting 403 and client2 getting a successful response: ```java final Client client1 = new JerseyClientBuilder(environment).using(configuration.getJerseyClientConfiguration()).build(getName()); final Client client2 = ClientBuilder.newBuilder().build(); ```  Another funny behavior with the client instantiated through the `JerseyClientBuilder` is that when I convert the `order` object into a JSON string using `Jackson.newObjectMapper().writeValueAsString(order)` request fails. When the JSON string has `\n` characters via `Jackson.newObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(order)` the request succeeds.  Is there a configuration I need to set somewhere or is this possibly a bug?","closed","","andrewoh531","2018-03-13T10:24:26Z","2018-06-22T12:10:57Z"
"","1603","Add helper functions for getting listening ports and IP addresses","I've had to do this a few times now in [dropwizard-consul](https://github.com/smoketurner/dropwizard-consul/blob/master/consul-core/src/main/java/com/smoketurner/dropwizard/consul/core/ConsulServiceListener.java#L46) and [dropwizard-discovery](https://github.com/dropwizard/dropwizard-discovery/blob/master/src/main/java/io/dropwizard/discovery/core/CuratorAdvertisementListener.java#L41) and we provide this in [DropwizardTestSupport](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/DropwizardTestSupport.java#L204), so I figured we could add these helper methods to the `ServerLifecycleListener` directly.","closed","improvement,","jplock","2016-06-19T13:33:14Z","2016-08-04T18:06:38Z"
"","1686","Inconsistent request logging","I've created this on the back of #1672 where my late comments may have been missed.  The problem looks a bit trickier than just removing the prepareForDeferredProcessing() call. If you run the hello world application in dropwizard-example for instance and hit the /hello-world resource the logging of the requests themselves become inconsistent.  There seems to be another race to call [`appendLoopOnAppenders`](https://github.com/qos-ch/logback/blob/658963544cc08059fc3cec48f5d35f650de5f6df/logback-core/src/main/java/ch/qos/logback/core/spi/AppenderAttachableImpl.java#L45) in [`RequestLogImpl`](https://github.com/qos-ch/logback/blob/658963544cc08059fc3cec48f5d35f650de5f6df/logback-access/src/main/java/ch/qos/logback/access/jetty/RequestLogImpl.java#L138) and [`AsyncAppenderBase`](https://github.com/qos-ch/logback/blob/658963544cc08059fc3cec48f5d35f650de5f6df/logback-core/src/main/java/ch/qos/logback/core/AsyncAppenderBase.java#L265) where they both end up calling `doAppend` in  [`UnsynchronizedAppenderBase`](https://github.com/qos-ch/logback/blob/658963544cc08059fc3cec48f5d35f650de5f6df/logback-core/src/main/java/ch/qos/logback/core/UnsynchronizedAppenderBase.java#L60).","closed","","tjcutajar","2016-08-12T11:50:05Z","2017-02-09T12:42:20Z"
"","2158","Jersey Jackson Integration","I've been working to integrate `org.glassfish.jersey.security ¬ª oauth2-client` with my Dropwizard 1.1.2 app.  The `oauth2-client` package has dependency on ` org.glassfish.jersey.media ¬ª jersey-media-json-jackson`.  `jersey-media-jackson-json` has a class `JacksonFeature`.  This class [registers](https://github.com/jersey/jersey/blob/master/media/json-jackson/src/main/java/org/glassfish/jersey/jackson/JacksonFeature.java#L85) several `JacksonJaxbJsonProvider` related classes that seem to be overriding the Dropwizard JSON Providers.  For example, when I include this dependency the `JavaTimeModule` and `Jdk8Module` that are registered via `io.dropwizard.jackson.Jackson` are not included.  `JacksonFeature` attempts to [detect](https://github.com/jersey/jersey/blob/master/media/json-jackson/src/main/java/org/glassfish/jersey/jackson/JacksonFeature.java#L73) other registered features by looking for a `org.glassfish.jersey.internal.JSON_FEATURE` being set on the `FeatureContext`.  I'm able to disable this module with this line in my `Application#run` method:  ``` environment.jersey().getResourceConfig().property(InternalProperties.JSON_FEATURE, """"); ```  However this does not feel like the proper solution and I don't know enough about Jersey and the Jersey / Jackson integration to determine the proper way to fix this.  Is this something that Dropwizard should be setting or does the `JacksonFeature` need better detection?","closed","","jmif","2017-09-20T21:04:37Z","2019-02-20T19:29:38Z"
"","1922","Convencience AbstractDAO method for Query","I've been migrating our codebase to 1.1 and this popped up to be one missing thing from my previous PR:  Since the old Query object is now deprecated, this helper eases migration to the new structure.  Quick follow up to #1871   Code before: ```java Query query = currentSession().createQuery(hql, getEntityClass()); ```  Code after: ```java Query query = query(hibernateQuery); ```  btw for our pretty large app the migration has been fairly smooth, `HashLoginService` changed in Jetty, the Hibernate upgrade needs a few things here and there, and Liquibase now forces a default schema, otherwise it seems much much easier than 0.9 -> 1.0","closed","improvement,","vvondra","2017-02-10T18:43:24Z","2017-02-11T00:10:12Z"
"","1666","Refactored DropwizardAppRule support running different EnvironmentCommands","I'm working on writing a [gRPC](http://www.grpc.io/) `EnvironmentCommand` for running gRPC in Dropwizard and needed the ability to be able to use a `DropwizardAppRule` for testing.   This pull request adds constructor parameters to `DropwizardAppRule` and `DropwizardTestSupport` so you can specify a `Function` that will instantiate the `EnvironmentCommand` that's run from `DropwizardTestSupport`. `ServerCommand` was used everywhere as a default to maintain backwards compatibility.","closed","improvement,","tburch","2016-08-03T20:45:33Z","2017-10-30T11:51:20Z"
"","1756","Replacing tomcat-jdbc with HikariCP?","I'm wondering if we should migrate the default `dropwizard-db` implementation to https://github.com/brettwooldridge/HikariCP?  There are a few implementations of this already as bundles: - https://github.com/mtakaki/dropwizard-hikaricp - https://github.com/DeloitteDigitalUK/dropwizard-hikaricp - https://github.com/saem/dropwizard-hikaricp","closed","","jplock","2016-10-02T17:08:01Z","2016-10-02T17:14:18Z"
"","2536","How to get links to works with ingress controller secondary path, e.g. /admin","I'm using nginx-ingress on AKS Kubernetes with my application on `/` route and admin on `/admin`, and things work if I explicitly add the /admin part to the path, e.g. http://my-host/admin/metrics, but the links are still http://my-host/metrics.   Is there a dropwizard configuration to make this work?","closed","","charlesritchea","2018-10-26T20:16:31Z","2018-10-30T13:26:52Z"
"","1943","Dropwizard 1.0.6 is using SNAPSHOT version of Jetty","I'm using Dropwizard 1.0.6 on a production system, which is apparently experiencing some thread and memory leaking along with near-100% CPU usage.   The profiler shown that the number of active threads is incrementing along time and that the threads are hitting the CPU at some locking mechanism on Jetty (sorry, I didn't take a snapshot at the profiler by then)   The application receives about 460 calls/seconds from about 5 IP addresses at peak time and after a few hours we can already see the increasing CPU usage and thread count. After a few days, it start to get `java.lang.OutOfMemoryException`s due to heap limits.  As a mitigation measure, I've limited the `maxThreads` to 64 to prevent the thread pool from growing out of our control. I'm waiting to see how that comes out.  Nonetheless, I've noticed that dropwizard 1.0.6 is using a SNAPSHOT version of jetty 9.3, which made me wonder if it shouldn't be using a RELEASE version...  This is the line of the log at startup that dumps the jetty version ``` INFO  [2017-02-28 07:54:30,869] org.eclipse.jetty.server.Server: jetty-9.3.z-SNAPSHOT ```","closed","","nmcc","2017-02-28T08:33:31Z","2017-02-28T08:53:21Z"
"","1621","Database exceptions can't be handled with @UnitOfWork","I'm using Dropwizard 1.0.0-rc3.  A constraint violation occurs on the database level when `@UnitOfWork` tries to commit (I guess that's the moment, actually). Yet no exception is thrown when I have the hand on the code.  I would expect to be able to handle this error gracefully. [The documentation has nothing on the subject](http://www.dropwizard.io/0.9.2/docs/manual/hibernate.html).  You can reproduce with my (under development) application. Just **send twice** the following request to localhost:8080.  ``` Method: POST URL: http://localhost:8080/books MediaType: application/json Json: {""isbn"":""978-0618640157"",""title"":""The Lord of the rings""} ```  Relevant files: - [`migrations.xml`](https://github.com/ogregoire/alexandria/blob/3a219efd4fe9b0d5dc887f26054eb7ee17e88721/src/main/resources/migrations.xml): puts some unique constraint on the table - [`BookResource.java`](https://github.com/ogregoire/alexandria/blob/3a219efd4fe9b0d5dc887f26054eb7ee17e88721/src/main/java/be/ogregoire/alexandria/core/book/BookResource.java): the resource where no exception is thrown. - [`BookDAO.java`](https://github.com/ogregoire/alexandria/blob/3a219efd4fe9b0d5dc887f26054eb7ee17e88721/src/main/java/be/ogregoire/alexandria/core/book/BookDAO.java): fairly simple AbstractDAO implementation  If I'm doing something wrong, please advise and/or redirect to the appropriate documentation page.","closed","stale,","ogregoire","2016-07-07T14:04:33Z","2019-09-03T00:00:57Z"
"","1701","Can't add a ConfiguredBundle in another ConfiguredBundle without warnings","I'm using Dropwizard 1.0.0 and am running into an issue where I'm trying to have nested `ConfiguredBundle`s, so users only need to call `addBundle` for the top-level bundle. The problem is that the top-level bundle cannot call `addBundle` for its nested bundle using generics without getting warnings. Here is an example:  ``` // Bundle to be nested public class InnerBundle implements ConfiguredBundle {...}  // Bundle intended to be added by a consumer public class OuterBundle implements ConfiguredBundle {     // Add the InnerBundle as a nested bundle     @Override     public void initialize(Bootstrap bootstrap) {         ConfiguredBundle bundle = new InnerBundle<>();         bootstrap.addBundle(bundle);     } } ```  The call to `bootstrap.addBundle(bundle)` fails because `addBundle` takes a `? super T` where `T` is in the context of `Bootstrap`: https://github.com/dropwizard/dropwizard/blob/v1.0.0/dropwizard-core/src/main/java/io/dropwizard/setup/Bootstrap.java#L147. So it would seem to me that in the call to `addBundle`, the `ConfiguredBundle` must have a generic type that is a supertype of `Configuration` (by the signature of `addBundle`) but also a subtype of `Configuration` (by the signature of `initialize` which takes `Bootstrap`). In other words, the ConfiguredBundle must have generic type `Configuration`, which seems very restrictive.  Is this analysis correct and is this the intended behavior?","closed","stale,","msbit01","2016-08-19T19:48:32Z","2019-09-03T00:00:56Z"
"","1945","UnitOfWorkAwareProxyFactory not creating transaction","I'm trying to use `UnitOfWorkAwareProxyFactory` along with PasswordAuthenticator for AuthFilter.  But it's not working as expected, it seems like UnitOfWorkAwareProxyFactory is not creating hibernate session.  I'm using `1.1.0-rc1` version of dropwizard.  This is my code: ``` final UserDAO userDAO = new UserDAO(hibernate.getSessionFactory());  PasswordAuthenticator passwordAuthenticator = new UnitOfWorkAwareProxyFactory(hibernate)                 .create(PasswordAuthenticator.class, UserDAO.class, userDAO);  environment.jersey().register(new AuthDynamicFeature(new BasicCredentialAuthFilter.Builder()                 .setAuthenticator(passwordAuthenticator)                 .setAuthorizer(new PasswordAuthorizer())                 .setPrefix(""Basic"")                 .buildAuthFilter())); ``` I'm getting this exception,   ``` ERROR [2017-03-01 05:01:11,844] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: cb8b3bead28c905a ! org.hibernate.HibernateException: No session currently bound to execution context ! at org.hibernate.context.internal.ManagedSessionContext.currentSession(ManagedSessionContext.java:58) ! at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:456) ! at io.dropwizard.hibernate.AbstractDAO.currentSession(AbstractDAO.java:44) ! at io.dropwizard.hibernate.AbstractDAO.namedQuery(AbstractDAO.java:65) ! at com.inventorbit.startomatic.db.UserDAO.findByUsernameAndPassword(UserDAO.java:19) ! at com.inventorbit.startomatic.auth.PasswordAuthenticator.authenticate(PasswordAuthenticator.java:25) ! at com.inventorbit.startomatic.auth.PasswordAuthenticator_$$_jvst2cb_6._d0authenticate(PasswordAuthenticator_$$_jvst2cb_6.java) ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ! at java.lang.reflect.Method.invoke(Method.java:498) ! at io.dropwizard.hibernate.UnitOfWorkAwareProxyFactory.lambda$create$0(UnitOfWorkAwareProxyFactory.java:81) ! at com.inventorbit.startomatic.auth.PasswordAuthenticator_$$_jvst2cb_6.authenticate(PasswordAuthenticator_$$_jvst2cb_6.java) ! at com.inventorbit.startomatic.auth.PasswordAuthenticator.authenticate(PasswordAuthenticator.java:15) ! at io.dropwizard.auth.AuthFilter.authenticate(AuthFilter.java:136) ! at io.dropwizard.auth.basic.BasicCredentialAuthFilter.filter(BasicCredentialAuthFilter.java:28) ! at org.glassfish.jersey.server.ContainerFilteringStage.apply(ContainerFilteringStage.java:132) ! at org.glassfish.jersey.server.ContainerFilteringStage.apply(ContainerFilteringStage.java:68) ! at org.glassfish.jersey.process.internal.Stages.process(Stages.java:197) ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:318) ```","closed","","ramsrib","2017-03-01T05:19:46Z","2017-03-01T19:13:40Z"
"","2332","Add exception mapper for constraint violation in hibernate orm","I'm trying to map the `ConstraintViolation` exception from hibernate to return `409` http response, but the jersey exception mapper is not able to catch it.  ``` @Provider public class MyExceptionMapper implements ExceptionMapper {    private static final Logger LOGGER =       LoggerFactory.getLogger(JerseyViolationExceptionMapper.class);    public Response toResponse(final JerseyViolationException exception) {     LOGGER.debug(""Handled by custom exception mapper"", exception);     return Response.status(409).build();   } } ```  Actual Exception: ```  0:0:0:0:0:0:0:1 - - [25/Apr/2018:19:05:53 +0000] ""POST /users HTTP/1.1"" 500 110 ""-"" ""curl/7.54.0"" 12 ERROR [2018-04-25 19:05:53,100] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: c96f7625a7326594 ! org.h2.jdbc.JdbcSQLException: Unique index or primary key violation: ""UK_21GCRPXWQST2MVHVQ4MO8F6UY_INDEX_B ON PUBLIC.USER_INFO(NAME) VALUES ('sri', 1)""; SQL statement: ! /* insert com.dropwizard.example.User */ insert into user_info (name, number, id) values (?, ?, ?) [23505-197] ! at org.h2.message.DbException.getJdbcSQLException(DbException.java:357) ! ... ! at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175) ! ... 74 common frames omitted ! Causing: org.hibernate.exception.ConstraintViolationException: could not execute statement ! at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:112) ! ... 66 common frames omitted ! Causing: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement ! at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:149) ! ... ! at java.base/java.lang.Thread.run(Thread.java:844) ```   Created an example to demonstrate this issue (with test case). https://github.com/ramsrib/dropwizard-exception-mapper-example  I think the **hibernate** wraps the `ConstraintViolationException` with `PersistenceException`. And the exception binder only looks for the exact exception type and it's not able to find and so throws 500 .","closed","stale,","ramsrib","2018-04-25T19:07:35Z","2019-08-19T14:02:17Z"
"","2500","Include default requestLog format string in documentation","I'm trying to just slightly tweak the requestLog, but I can't for the life of my find the default format string. Please include it in the entry for requestLog","closed","documentation,","charlesritchea","2018-09-19T13:27:56Z","2018-10-11T15:56:36Z"
"","1674","Dropwizard Request timeout","I'm trying to ensure that requests timeout after a suitable period.  Looking through the docs the idleTimeout config param should define that (default 30 seconds).  I tried running a request with a Thread.sleep for > 30 seconds and it didn't time out to the client. Any idea why this might be?","closed","","darrenhaken","2016-08-05T22:47:48Z","2020-07-16T12:40:44Z"
"","1824","RFC7230 compliance cannot be disabled in Jetty","I'm terminating TLS in nginx, but I still want access to the full client certificate in my application, until I upgraded dropwizard I did that by putting the client certificate in a header in nginx by using this config line: proxy_set_header X-SSL-CERT $ssl_client_cert;  The result is that nginx inserts a multi-line header value containing the PEM encoded client certifcate, something that has been deprecated by RFC7230 and although the issue has been known for years by nginx, no alternative has surfaced, see: https://bugs.eclipse.org/bugs/show_bug.cgi?id=483795  I would like to be able to turn off RFC7230 compliance in Jetty until I can get a compliant nginx deployed.  Would it be possible to add a httpCompliance field of the type org.eclipse.jetty.http.HttpCompliance to HttpConnectorFactory that will cause the org.eclipse.jetty.server.HttpConnectionFactory to be created with the specificed org.eclipse.jetty.http.HttpCompliance parameter?","closed","","dren-dk","2016-11-16T10:37:00Z","2016-11-16T13:27:17Z"
"","1954","Unknown class in Dropwizard guide","I'm reading docs from dropwizard home. In Dropwizard core, in Configuration section, i see a **MessageQueueFactory.class** and **MessageQueueClient.class**, and the class **MessageQueueClient** have **close()** method, but i can't find **MessageQueueClient.class**'s location and don't know how to create **MessageQueueClient.class**.  Here is link to that docs and photo of code block in docs: [http://www.dropwizard.io/1.0.6/docs/manual/core.html](url) ![capture](https://cloud.githubusercontent.com/assets/13777242/23781452/fd2a7aae-057f-11e7-854f-0e895733c4c0.PNG)  Please help me how to create that **MessageQueueClient.class** , thanks so much!  @tommorris @codahale @brianm @xaviershay @bretthoerner","closed","","kahd1993","2017-03-10T03:55:37Z","2017-03-10T04:58:38Z"
"","1690","Allow overriding of configuration class","I'm opening this PR to get your thoughts on removing the final modifier from `Application#getConfigurationClass`. My use-case is creating a reusable subclass of `Application` so that we have less boilerplate and duplication in each of our REST APIs (of which we have ~400). I put our subclass in a gist [here](https://gist.github.com/jhaber/136d46c6c795117d5a5c56d035cac434#file-restapplication-java), a usage would look like:  ``` java public class Main {    public static void main(String... args) throws Exception {     RestApplication.newBuilder().modules(new MyGuiceModule()).build().run(args);   } } ```  This works, but only as long as everyone is using the same configuration class. We would like to allow users to subclass our default configuration, which we could do by modifying our subclass to look like [this](https://gist.github.com/jhaber/136d46c6c795117d5a5c56d035cac434#file-restapplication2-java) (note the [override](https://gist.github.com/jhaber/136d46c6c795117d5a5c56d035cac434#file-restapplication2-java-L32-L35)). The only issue we're running into is that this method is final.","closed","improvement,","jhaber","2016-08-15T16:26:53Z","2016-08-17T23:51:01Z"
"","1792","Dropwizard fails reading config.yml with Retrofit2 converter-jackson","I'm on dropwizard 0.8 (1.0 has some sort of circular Jersey/Guice startup race condition) and I'm adding Retrofit2 as a way to talk to another REST service.  If I add in the dependency for Retrofit's jackson support to Gradle I'll see the following error. Not even using anything from it, just having added that dependency. Presumably some sort of low level initialization with yml->object mapping gets hosed and that's why it's failing to read the config.yml?   Hoping for something I can change at startup, a way to tell Dropwizard not to look at the Retrofit classes?  If I take out that convert-jackson dependency line, the config.yml parsing works just fine again.  ```     compile group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.1.0'     compile group: 'com.squareup.retrofit2', name: 'converter-jackson', version: '2.1.0' ``` ``` src/dist/config.yml has an error:   * Unrecognized field at: server.requestLog     Did you mean?:       - adminConnectors       - adminContextPath       - adminMaxThreads       - adminMinThreads       - applicationConnectors         [1 more] ```","closed","","chriskessel","2016-11-01T19:56:27Z","2016-11-09T01:05:03Z"
"","1687","Should serialize and deserialize hibernate @Transient properties","I'm not sure if this is a Dropwizard issue or Jackson issue. But the choice to NOT serialize or deserialize based on the hibernate annotation @Transient when I'm serializing and deserializing between Java objects and JSON is unreasonable to me especially when we have the annotation @JsonProperty that is just for that.","closed","","sunshineo","2016-08-12T20:35:59Z","2016-11-14T00:06:58Z"
"","2425","Could not resolve type id 'h2' - h2 parameter not recognised","I'm getting the following exception when trying to use the h2 applicationConnector:   * Failed to parse configuration at: server.applicationConnectors.[1]; Could not resolve type id 'h2' as a subtype of [simple type, class io.dropwizard.jetty.ConnectorFactory]: known type ids = [http, https] (for POJO property 'applicationConnectors')  This is my config:   # server settings server:   rootPath: /1.0/top/   applicationConnectors:     - type: http       port: 8080     - type: h2       port: 8445       maxConcurrentStreams: 1024       initialStreamRecvWindow: 65535       keyStorePath: /space/tls/keyStore # required       keyStorePassword: changeit       trustStorePath: /space/tls/trustStore # required       trustStorePassword: changeit       supportedCipherSuites: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256   adminConnectors:     - type: http       port: 8081","closed","","ngton","2018-07-09T13:57:26Z","2018-07-09T14:53:29Z"
"","2476","Failed to parse configuration at: server.requestLog; Type ch.qos.logback.access.spi.IAccessEvent not present (through reference chain: com.sri.tmctrivia.experimental.HelloWorldConfiguration[""server""]->io.dropwizard.server.SimpleServerFactory[""requestLog""])","I'm getting an error with dropwizard 1.3.5 that appears related to https://github.com/dropwizard/dropwizard/pull/2112. I am trying to use dropwizard with log4j2 in a larger project. I can get that to work with the example hello-world code, but it fails with the larger project.   In the working hello-world code, I get output starting with  ``` $ java -cp target/dhw-1.1-SNAPSHOT.jar com.whatever.HelloWorldApplication  server hello-world.yml  2018-08-29 15:52:13,283	Croft.local	main	 INFO	HelloWorldApplication.bootstrapLogging	Overriding bootstrapLogging() to do nothing Overriding bootstrapLogging() to do nothing 2018-08-29 15:52:13,569	Croft.local	main	 INFO	Version.	HV000001: Hibernate Validator null 2018-08-29 15:52:13,840	Croft.local	main	 INFO	Log.initialized	Logging initialized @1005ms to org.eclipse.jetty.util.log.Slf4jLog 2018-08-29 15:52:14,129	Croft.local	main	 INFO	SimpleServerFactory.configure	Registering jersey handler with root path prefix: /application 2018-08-29 15:52:14,130	Croft.local	main	 INFO	SimpleServerFactory.configure	Registering admin handler with root path prefix: /admin ``` In my larger project, which is trying to run the same code but from a much larger jar file, I get error output I'll paste below, in which the logback class not being found is ch.qos.logback.access.spi.IAccessEvent. The hello-world.yml file is the same one as from above. How can I figure out what is causing this to happen?   I've tried looking at the mvn dependency:tree output in the two cases, but nothing unreasonable jumped out at me. The META-INF/services/io.dropwizard.logging.AppenderFactory in both jars contains: ``` io.dropwizard.logging.ConsoleAppenderFactory io.dropwizard.logging.FileAppenderFactory io.dropwizard.logging.SyslogAppenderFactory io.dropwizard.logging.TcpSocketAppenderFactory io.dropwizard.logging.UdpSocketAppenderFactory ```  ``` $ java -cp target/whatever-1.1-SNAPSHOT-withdependencies.jar com.whatever.HelloWorldApplication server hello-world.yml 2018-08-29 16:52:18,282	Croft.local	main	 INFO	HelloWorldApplication.bootstrapLogging	Overriding bootstrapLogging() to do nothing Overriding bootstrapLogging() to do nothing 2018-08-29 16:52:18,630	Croft.local	main	 INFO	Version.	HV000001: Hibernate Validator null 2018-08-29 16:52:19,018	Croft.local	main	 INFO	Log.initialized	Logging initialized @1338ms to org.eclipse.jetty.util.log.Slf4jLog io.dropwizard.configuration.ConfigurationParsingException: hello-world.yml has an error:   * Failed to parse configuration at: server.requestLog; Type ch.qos.logback.access.spi.IAccessEvent not present (through reference chain: com.sri.tmctrivia.experimental.HelloWorldConfiguration[""server""]->io.dropwizard.server.SimpleServerFactory[""requestLog""])  	at io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:279) 	at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:156) 	at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:89) 	at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:126) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:74) 	at io.dropwizard.cli.Cli.run(Cli.java:78) 	at io.dropwizard.Application.run(Application.java:93) 	at com.whatever.HelloWorldApplication.main(HelloWorldApplication.java:18) Caused by: com.fasterxml.jackson.databind.JsonMappingException: Type ch.qos.logback.access.spi.IAccessEvent not present (through reference chain: com.sri.tmctrivia.experimental.HelloWorldConfiguration[""server""]->io.dropwizard.server.SimpleServerFactory[""requestLog""]) 	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:391) 	at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:351) 	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(BeanDeserializerBase.java:1711) 	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:290) 	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:189) 	at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:120) 	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:130) 	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) 	at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254) 	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:136) 	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:252) 	at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:155) 	at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3984) 	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2276) 	at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:127) 	... 6 more Caused by: java.lang.TypeNotPresentException: Type ch.qos.logback.access.spi.IAccessEvent not present 	at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:117) 	at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125) 	at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) 	at sun.reflect.generics.visitor.Reifier.reifyTypeArguments(Reifier.java:68) 	at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:138) 	at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) 	at sun.reflect.generics.visitor.Reifier.reifyTypeArguments(Reifier.java:68) 	at sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:138) 	at sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) 	at sun.reflect.generics.repository.ConstructorRepository.getParameterTypes(ConstructorRepository.java:94) 	at java.lang.reflect.Executable.getGenericParameterTypes(Executable.java:283) 	at java.lang.reflect.Method.getGenericParameterTypes(Method.java:283) 	at com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getParameterType(AnnotatedMethod.java:145) 	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getPrimaryType(POJOPropertyBuilder.java:342) 	at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getRawPrimaryType(POJOPropertyBuilder.java:358) 	at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.filterBeanProps(BeanDeserializerFactory.java:625) 	at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(BeanDeserializerFactory.java:495) 	at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer(BeanDeserializerFactory.java:227) 	at com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:137) 	at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:411) 	at com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349) 	at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264) 	at com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244) 	at com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142) 	at com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(DeserializationContext.java:444) 	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDefaultImplDeserializer(TypeDeserializerBase.java:220) 	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(TypeDeserializerBase.java:159) 	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113) 	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97) 	at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254) 	at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:136) 	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:288) 	... 17 more Caused by: java.lang.ClassNotFoundException: ch.qos.logback.access.spi.IAccessEvent 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	at java.lang.Class.forName0(Native Method) 	at java.lang.Class.forName(Class.java:348) 	at sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114) 	... 48 more ```","closed","","rvsasseen","2018-08-30T01:09:38Z","2020-12-21T07:33:56Z"
"","2417","Disable protocols less secure than tls v1.2 by default","I'm feeling this out -- feel free to discuss üòÑ   ###### Problem: Thanks to https://github.com/dropwizard/dropwizard/pull/2405 we'll see the following on startup for an HTTPS connector:  ``` Enabled protocols: [TLSv1, TLSv1.1, TLSv1.2] Disabled protocols: [SSLv2Hello, SSLv3] ```  You may recall that nearly two years ago I tripped up upgrading to Dropwizard 1.0 as [only TLSv1.2 seemed supported](https://github.com/dropwizard/dropwizard/issues/1700), so why is Dropwizard logging that TLSv1 and TLSv1.1 is enabled? Jetty would serve TLSv1.1 requests when the server runtime and client could agree on a cipher suite (nothing surprising here).  But by default, openssl could not communicate via TLSv1.1 with a Dropwizard server running on the latest oracle / openjdk versions. This can be verified with [sslyze](https://github.com/nabla-c0d3/sslyze), where it only lists TLS v1.2 cipher suites as possible. While one can use an alternate provider on the server (bouncycastle) -- if by default Dropwizard doesn't expose a non-TLSv1.2 cipher suite, what's the point of enabling TLSv1 and TLSv1.1?   ###### Solution: Double down on the statement that [that only TLSv1.2 is enabled by default](https://github.com/dropwizard/dropwizard/issues/1700), by disabling everything that is less secure.  ###### Result: Secure by default! If someone has allowed TLSv1.1 cipher suites they'll now need to reset the `excludeProtocols` to the defaults  ```yaml server:     applicationConnectors:         - type: https           port: 0           keyStorePath: keystore.jks           excludedProtocols: ```  On startup we'll see:  ``` Enabled protocols: [TLSv1.2] Disabled protocols: [SSLv2Hello, SSLv3, TLSv1, TLSv1.1] ```  When TLS v1.3 becomes supported, it will automatically be picked up and enabled.","closed","security,","nickbabcock","2018-06-27T22:20:48Z","2018-06-28T10:40:46Z"
"","2398","ClassNotFoundException for DropwizardTestResourceConfig","I'm encountering a strange error during a very simple scenario:  Attempting to use a `ResourceTestRule` to verify the behaviour of a resource class.   The test is set up as follows, which is an almost exact replica of the example given in the documentation:  ``` public class HelloWorldTest {     @ClassRule     public static final ResourceTestRule resources = ResourceTestRule.builder()             .addResource(new HelloWorld())             .build();      @Test     public void test1() throws IOException {         String s = resources.target(""/hello-world"").request().get(String.class);         System.out.println(s);     } } ``` This results in the following error during test setup:   ``` java.lang.NullPointerException   at java.util.Objects.requireNonNull(Objects.java:203)   at io.dropwizard.testing.common.Resource.after(Resource.java:213)   at io.dropwizard.testing.junit.ResourceTestRule$1.evaluate(ResourceTestRule.java:102)   at org.junit.rules.RunRules.evaluate(RunRules.java:20)   at org.junit.runners.ParentRunner.run(ParentRunner.java:363)   at org.junit.runner.JUnitCore.run(JUnitCore.java:137)   at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)   at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)   at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)   at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) ``` With the aid of an exception breakpoint, I tracked down the actual error, which appears to a failure to load the class `io.dropwizard.testing.common.DropwizardTestResourceConfig`, somewhere in the `io.dropwizard.testing.common.Resource#before` method.  I'm at my wits end. Can anyone replicate this issue, or have a suggestion as to how it can be resolved?  My DW dependencies are as follows:      compile ""io.dropwizard:dropwizard-core:1.3.2""     compile ""io.dropwizard:dropwizard-jdbi3:1.3.2""     compile ""io.dropwizard:dropwizard-migrations:1.3.2""     compile ""io.dropwizard:dropwizard-testing:1.3.2""  I do realize that the final dependency should probably be `testCompile`. I've attempted an upgrade to 1.3.4, but this did not impact the issue.","closed","","haasted","2018-06-18T14:33:15Z","2018-06-19T08:45:59Z"
"","2084","NTLM Proxy Auth for the HTTP client","I'm doing some work at BigCorp who use Windows and NTLM proxies everywhere,  so I need my client to be able to authenticate against a proxy using NTLM.  I've written a patch for it in dropwizard-client, basic outline is: - Change the AuthConfiguration, adding NTLM requrired fields such as    - realm   - domain   - hostname   - a credentialType parameter, which determines which implementation of the Credential interface to use  The alter the proxy creation part of the createClient method to provide a NTLM aware   ```      if (auth != null) {         if (credentialsProvider == null) {             credentialsProvider = new BasicCredentialsProvider();         }         // set the AuthScope         AuthScope authScope = new AuthScope(httpHost, auth.getRealm(), auth.getAuthScheme());          // set the credentials type         Credentials credentials = null;         if (null != auth.getCredentialType() && auth.getCredentialType().equalsIgnoreCase(AuthConfiguration.NT_AUTH_TYPE)) {             credentials = new NTCredentials(auth.getUsername(), auth.getPassword(), auth.getHostname(), auth.getDomain());         } else {             credentials = new UsernamePasswordCredentials(auth.getUsername(), auth.getPassword());         }          credentialsProvider.setCredentials(authScope, credentials);     } }  ```  Works on my machine :)","closed","","stringy05","2017-06-23T06:00:06Z","2017-07-04T18:48:26Z"
"","2401","NoClassDefFoundError: IllegalName when serializing MetricRegistry","I'm attempting to use an `ObjectMapper` to write my `Environment`'s `MetricRegistry` as a string, but am getting a strange error (on a freshly cloned build of Dropwizard, as well as `1.3.x`):  com.fasterxml.jackson.databind.JsonMappingException: Failed to load class 'com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool$$Lambda$82/1170032467$Access4JacksonSerializer9243fc45': IllegalName: com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool$$Lambda$82/1170032467$Access4JacksonSerializer9243fc45 (through reference chain: com.codahale.metrics.MetricRegistry[""metrics""]->java.util.Collections$UnmodifiableMap[""org.eclipse.jetty.util.thread.QueuedThreadPool.dw-admin.size""]) 	at com.example.helloworld.IntegrationTest.itShouldSerializeMetricsAsJSON(IntegrationTest.java:108) Caused by: java.lang.IllegalArgumentException: Failed to load class 'com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool$$Lambda$82/1170032467$Access4JacksonSerializer9243fc45': IllegalName: com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool$$Lambda$82/1170032467$Access4JacksonSerializer9243fc45 	at com.example.helloworld.IntegrationTest.itShouldSerializeMetricsAsJSON(IntegrationTest.java:108) Caused by: java.lang.NoClassDefFoundError: IllegalName: com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool$$Lambda$82/1170032467$Access4JacksonSerializer9243fc45 	at com.example.helloworld.IntegrationTest.itShouldSerializeMetricsAsJSON(IntegrationTest.java:108)   Simple reproduction using `dropwizard-example` application, by adding the following test to `com.example.helloworld.IntegrationTest`:     @Test     public void itShouldWriteMetricRegistryAsString() throws JsonProcessingException     {         String json = RULE.getObjectMapper().writeValueAsString( RULE.getEnvironment().metrics() );     }","closed","","cmckn","2018-06-19T17:47:04Z","2019-02-09T01:01:21Z"
"","2406","dropwizard-example database setup - migrations.xml does not exist","I'm attempting to follow the readme directions to get the dropwizard-example application running. It appears to generate the jar successfully, but the db migrate fails saying that the migrations.xml file does not exist. I cracked open the generated jar file and it's definitely not there. Is it supposed to be? I'm new to java - I'm probably missing something really obvious.  Here's the output for the migrate command:  java -jar target/dropwizard-example-1.4.0-SNAPSHOT.jar db migrate example.yml INFO  [2018-06-22 22:31:07,811] liquibase.executor.jvm.JdbcExecutor: SELECT COUNT(*) FROM PUBLIC.DATABASECHANGELOGLOCK INFO  [2018-06-22 22:31:07,816] liquibase.executor.jvm.JdbcExecutor: SELECT COUNT(*) FROM PUBLIC.DATABASECHANGELOGLOCK INFO  [2018-06-22 22:31:07,820] liquibase.executor.jvm.JdbcExecutor: SELECT LOCKED FROM PUBLIC.DATABASECHANGELOGLOCK WHERE ID=1 INFO  [2018-06-22 22:31:07,859] liquibase.lockservice.StandardLockService: Successfully acquired change log lock INFO  [2018-06-22 22:31:07,897] liquibase.lockservice.StandardLockService: Successfully released change log lock liquibase.exception.ChangeLogParseException: **migrations.xml does not exist**         at liquibase.parser.core.xml.XMLChangeLogSAXParser.parseToNode(XMLChangeLogSAXParser.java:106)         at liquibase.parser.core.xml.AbstractChangeLogParser.parse(AbstractChangeLogParser.java:15)         at liquibase.Liquibase.getDatabaseChangeLog(Liquibase.java:217)         at liquibase.Liquibase.update(Liquibase.java:190)         at liquibase.Liquibase.update(Liquibase.java:179)         at liquibase.Liquibase.update(Liquibase.java:175)         at liquibase.Liquibase.update(Liquibase.java:168)         at io.dropwizard.migrations.DbMigrateCommand.run(DbMigrateCommand.java:68)         at io.dropwizard.migrations.DbCommand.run(DbCommand.java:55)         at io.dropwizard.migrations.AbstractLiquibaseCommand.run(AbstractLiquibaseCommand.java:68)         at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87)         at io.dropwizard.cli.Cli.run(Cli.java:78)         at io.dropwizard.Application.run(Application.java:93)         at com.example.helloworld.HelloWorldApplication.main(HelloWorldApplication.java:38)","closed","","mikey-t","2018-06-22T22:33:16Z","2018-06-23T20:08:18Z"
"","1623","Upgrade to jackson 2.7.5+","I'd recommend upgrading to 2.7.5+ of jackson before the 1.0 release.  It has some fairly critical bug fixes in there.  2.7.0-2.7.4 is broken in my mind, especially if you do any sort of complex object structured serialization.  There was a fairly big re-write of some of the generic type system between 2.6 and 2.7.","closed","improvement,","brentryan","2016-07-08T02:40:59Z","2016-07-08T07:43:29Z"
"","2438","*Question* Understanding the relation between jersey client and server","I'd like to understand the relation between the dropwizard jersey server and the client in order to pass authentication details to a downstream service call.  There should be some way for linking the ContainerRequest and the ClientRequest . But I'm struggling with setting this up.   My working setup: - dropwizard 1.3.5 - Weld CDI linked with the jersey HK2 internal CDI","closed","stale,","oliver-steinbrecher","2018-07-19T20:24:01Z","2019-08-19T14:02:03Z"
"","2013","Make ThreadNameFilter optional","I'd like to sometimes disable ThreadNameFilter because I don't want to share actual request information outside of request logs, and I would like to, generally, include thread name in my service logs.  I'm happy to make a PR to add an option to disable the ThreadNameFilter in AbstractServerFactory, if this seems acceptable.","closed","","markelliot","2017-04-17T20:04:01Z","2017-05-19T13:35:54Z"
"","1747","Update jackson v2.7.6 -> v2.7.8","I'd like to propose an update to jackson to v2.7.8.  [Here](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.7.8) are the release notes.  Of particular interest is https://github.com/FasterXML/jackson-databind/issues/1383","closed","","jmoney","2016-09-28T01:10:35Z","2016-09-30T14:06:14Z"
"","1680","Ability to return non-zero status codes from Commands","I'd like to have the ability to return a non-zero exit code from a command. My current use case is that I run migrations prior to deploying my application, but would like to fail the application deployment if the migrations are not successfully run based on the status code returned from the migration command.  Would a change with this functionality added be welcomed?","closed","improvement,","tburch","2016-08-08T17:48:58Z","2018-07-12T21:27:40Z"
"","1815","healthcheck json is not pretty printed","I'd like to have my healthcheck response to be pretty printed.  The following code doesn't seem to affect it `        environment.getObjectMapper().enable(SerializationFeature.INDENT_OUTPUT)`  How can I enable pretty printing of the healthcheck (i. e. the response of http://localhost:9081/healthcheck)","closed","","mrkam","2016-11-11T01:28:39Z","2016-11-26T22:13:47Z"
"","1616","Running healthcheck on the same port as API routes (i.e. 8080)","I'd like to be able to run the healthcheck on the standard endpoint rather than via the admin port. I am trying to set this up with ElasticBeanstalk and it's proving a challenge mapping multiple ports from a load balancer.  I couldn't see how to do this via the documentation.   Can anyone help?","closed","","darrenhaken","2016-07-01T23:55:43Z","2016-07-02T02:09:21Z"
"","1914","Upgrade hibernate-core to latest released version","I'd like to be able to programmatically set the time zone that JDBC uses, but this functionality wasn't introduced until HIbernate 5.2.3 (see http://in.relation.to/2016/09/12/jdbc-time-zone-configuration-property/). I'm happy to make the (small) change in a PR. Would this be something that could be included in `1.0.6`?","closed","","tburch","2017-02-02T22:27:47Z","2017-02-02T22:28:22Z"
"","2053","Adding resources to DAOTestRule","I would like to add my named-queries.hbm.xml file as a resource. This can be done by allowing the resources to be set as part of the DAOTestRule.Builder  All we have to do is `resources.forEach(config::addResource)` in the build method.  Let me know if this makes sense. I can raise a PR.","closed","improvement,","aakn","2017-05-10T14:12:48Z","2018-03-11T00:22:11Z"
"","1788","Allow user to override configured JsonProvider","I wondered if I could create a custom JsonProvider where I could read and write a special payload at the top the body (don't ask why, it's just a thought experiment):  ``` json /* I'm a special header */ {     ""check"": ""mate"" } ```  This PR allows a user configured `JacksonJaxbJsonProvider` or another appropriate class to take priority over the dropwizard configured class (`JacksonMessageBodyProvider`).  I believe this PR closes #1005  @jplock I used App1 in dropwizard-e2e, not sure if it is too early to call it a theme, but so far it is about overriding defaults üòã","closed","improvement,","nickbabcock","2016-10-27T01:10:10Z","2016-11-22T14:16:44Z"
"","1648","HK2 classes missing","I was just trying out the latest Dropwizard 1.0.0 release, my tests fails to run throwing the following error  ``` java.lang.NoClassDefFoundError: org/glassfish/hk2/utilities/cache/ComputationErrorException     at org.jvnet.hk2.external.generator.ServiceLocatorGeneratorImpl.initialize(ServiceLocatorGeneratorImpl.java:68)     at org.jvnet.hk2.external.generator.ServiceLocatorGeneratorImpl.create(ServiceLocatorGeneratorImpl.java:103)     at org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.internalCreate(ServiceLocatorFactoryImpl.java:265)     at org.glassfish.hk2.internal.ServiceLocatorFactoryImpl.create(ServiceLocatorFactoryImpl.java:225)     at org.glassfish.jersey.internal.inject.Injections._createLocator(Injections.java:138)     at org.glassfish.jersey.internal.inject.Injections.createLocator(Injections.java:123)     at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:330)     at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:392)     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:177)     at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:369)     at javax.servlet.GenericServlet.init(GenericServlet.java:244)     at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:640)     at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:419)     at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:875)     at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:349)     at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:772)     at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:262)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:106)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)     at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:103)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:106)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.doStart(GzipHandler.java:231)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:106)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:106)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)     at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:252)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)     at org.eclipse.jetty.server.Server.start(Server.java:411)     at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:106)     at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)     at org.eclipse.jetty.server.Server.doStart(Server.java:378)     at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)     at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53)     at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85)     at io.dropwizard.testing.DropwizardTestSupport.startIfRequired(DropwizardTestSupport.java:194)     at io.dropwizard.testing.DropwizardTestSupport.before(DropwizardTestSupport.java:112)     at io.dropwizard.testing.junit.DropwizardAppRule.before(DropwizardAppRule.java:128)     at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:46)     at org.junit.rules.RunRules.evaluate(RunRules.java:20)     at org.junit.runners.ParentRunner.run(ParentRunner.java:363)     at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)     at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)     at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)     at java.lang.reflect.Method.invoke(Method.java:497)     at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)     at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)     at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)     at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)     at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75) Caused by: java.lang.ClassNotFoundException: org.glassfish.hk2.utilities.cache.ComputationErrorException     at java.net.URLClassLoader.findClass(URLClassLoader.java:381)     at java.lang.ClassLoader.loadClass(ClassLoader.java:424)     at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)     at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ```  I am not sure its a dropwzard specific issue, but i use guice for injection so could this be the culprit?","closed","","sheldon-sminq","2016-07-27T06:11:49Z","2016-07-27T07:58:27Z"
"","1673","It's too hard to turn off Gzip selectively","I wanted to use [Jersey's SSE](https://jersey.java.net/documentation/latest/sse.html) support with Dropwizard 1.0 however just as described in [JERSEY-3000](https://java.net/jira/browse/JERSEY-3000) Dropwizard by _default_ has GZip-Compression. I somehow didn't want to go the easy way (_just turn off Gzip_), so I tried _a lot_: - modifying response headers in JAX-RS by `@Context`ing all kind of ServletContexts - intercepting in Jersey with a [Pre-Matching filter](https://jersey.java.net/documentation/latest/filters-and-interceptors.html#d0e9678) as well as a name-bound interceptor - servlet filters  Digging deeper I finally hit the underlying [Jetty `GzipHandler`](http://www.eclipse.org/jetty/documentation/9.4.x/gzip-filter.html) which happens to have the perfect `excludedPath` (exclude a path from Gzip treatment) _and_ [`excludedMimeTypes`](http://download.eclipse.org/jetty/9.3.9.v20160517/apidocs/org/eclipse/jetty/server/handler/gzip/GzipHandler.html) (exclude a MIME type) methods that would not require me to re-create the _positive_ whitelist of stuff that shall be Gzipped (supported in configuration)...  I guess this should be the result of `getApplicationContext().getGzipHandler()` but this one is `null` no matter where in the lifecycle. I ended up learning something about Jetty and came up with this (which works nicely):  ``` java //env.getApplicationContext().getGzipHandler(); // <-- this is always null? why?!? env.lifecycle().addServerLifecycleListener(new ServerLifecycleListener() {     @Override     public void serverStarted(Server server) {         Handler handler = server.getHandler();         LOG.debug(""Disable GZip for SSE: Starting with handler {}"", handler);         while (handler instanceof HandlerWrapper) {             handler = ((HandlerWrapper) handler).getHandler();             LOG.debug(""Disable GZip for SSE: Found handler {}"", handler);             if (handler instanceof BiDiGzipHandler) {                 LOG.info(""Excluding mime-type {} from gzip compression handler"", SseFeature.SERVER_SENT_EVENTS);                 ((BiDiGzipHandler) handler).addExcludedMimeTypes(SseFeature.SERVER_SENT_EVENTS);             }         }     } }); ```  I really think either MIME type `text/event-stream` should be excluded by default **or** flushing fixed somehow **or** at the blacklist be exposed for configuration **or** some special annotation to whitelist... No idea what is the most _idiomatic_ way...","closed","","LeDominik","2016-08-05T18:21:03Z","2016-09-13T04:47:54Z"
"","1932","Validation messages from annotations in interface","I wanted to put all JAX-RS and validation annotations in an interface and simply implement the interface in a resource class. This works fine, apart from the validation messages becoming: `method_name.arg0 is not a valid email address`, whereas if the annotations were on the resource field, it would be: `form field username is not a valid email address`","closed","improvement,","JChrist","2017-02-20T11:41:08Z","2017-03-06T21:54:36Z"
"","2141","Using PatternLayout in File Appender logging DW 1.1.0","I want to log api requests into file logger. I have explored [Request Log](http://www.dropwizard.io/1.1.0/docs/manual/configuration.html#request-log) and it lead to [Access Pattern Layout](https://logback.qos.ch/manual/layouts.html#AccessPatternLayout). But im unsure of how to configure the logger which can log `INFO   [2017-09-01 07:05:14,602] u.p.a.u.AuditMessage - something i'm logging` and  `0:0:0:0:0:0:0:1 - - [01/Sep/2017:07:05:14 +0000] ""POST /api/mobile/user/login HTTP/1.1"" 200 1737 ""http://localhost:8080/"" ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36"" 102` into same file. As i want the log file to be archived and rotated","closed","","kedarjavalkar","2017-09-01T08:56:57Z","2018-06-22T12:13:26Z"
"","1823","could i get multiple result by jdbi?","i want to get multiple result set by the following code, how to get each result? String strSql = ""select * from department;select * from employee;select * from usersetting;"";","closed","","maobulang","2016-11-16T07:07:16Z","2016-11-18T08:42:11Z"
"","2327","How to set a maximum MultiPart Form Data size without persisting full file on disk?","I want to check the file size before the file is persisted in the backend. I used a POST Multipart upload.   After checking the issue #1657 the solution was to [ByteStreams.limit](https://google.github.io/guava/releases/19.0/api/docs/com/google/common/io/ByteStreams.html#limit%28java.io.InputStream,%20long%29). But as @pavelkokush mentioned that would mean to persist the file first.   So I was wondering how the file size check could be implemented.","closed","","LeducH","2018-04-10T14:44:56Z","2018-06-09T14:07:15Z"
"","1822","how can I read configurations from database instead of yml","I want to boot my application using configuration from database instead of yml file. I am not able to access the database in run method of my application.  getting following exception. I tried adding @unitofwork on the run method but same error.  ```Exception in thread ""main"" org.hibernate.HibernateException: No session currently bound to execution context 	at org.hibernate.context.internal.ManagedSessionContext.currentSession(ManagedSessionContext.java:75) 	at org.hibernate.internal.SessionFactoryImpl.getCurrentSession(SessionFactoryImpl.java:1014) 	at io.dropwizard.hibernate.AbstractDAO.currentSession(AbstractDAO.java:36) 	at io.dropwizard.hibernate.AbstractDAO.criteria(AbstractDAO.java:46)```","closed","","ajak6","2016-11-16T01:07:45Z","2017-03-08T11:20:45Z"
"","1963","Add a lifecycle.Managed for AutoClosable's instances","I used ExecutorServiceManager as a guide.","closed","feature,","frojasg","2017-03-14T23:50:37Z","2017-03-15T18:26:46Z"
"","1624","Getting Error on entity persistence using hibernate","I tried to upgrade my dropwizard from 0.8.2 to 1.0.0-r3, but got below error when persisting an entity by using hibernate   ``` ! java.lang.NoSuchMethodError: org.hibernate.event.spi.EventSource.accessTransaction()Lorg/hibernate/Transaction; ! at org.hibernate.envers.internal.synchronization.AuditProcessManager.get(AuditProcessManager.java:34) ! at org.hibernate.envers.event.spi.EnversPostInsertEventListenerImpl.onPostInsert(EnversPostInsertEventListenerImpl.java:36) ! at org.hibernate.action.internal.EntityIdentityInsertAction.postInsert(EntityIdentityInsertAction.java:156) ! at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:102) ! at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:597) ! at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:232) ! at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:213) ! at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:256) ! at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:318) ! at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:275) ! at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:182) ! at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:113) ! at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:192) ! at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:177) ! at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:97) ! at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:73) ! at org.hibernate.internal.SessionImpl.fireSaveOrUpdate(SessionImpl.java:651) ! at org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:643) ! at org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:638) ! at io.dropwizard.hibernate.AbstractDAO.persist(AbstractDAO.java:154) ! at no.trinnvis.dabih.db.AccountDAO.create(AccountDAO.java:26) ! at no.trinnvis.dabih.resources.AccountsResource.createAccount(AccountsResource.java:327) ! at no.trinnvis.dabih.resources.AccountsResource.post(AccountsResource.java:310) ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ! at java.lang.reflect.Method.invoke(Method.java:497) ! at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81) ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144) ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161) ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$VoidOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:143) ```","closed","","bruce-genhot","2016-07-08T08:29:06Z","2016-07-29T10:17:57Z"
"","1710","x509 certificate validation fails unconditionally if no revocation check mechanism is configured","I tried to setup HTTPS client certificate authentication and continuously experienced this kind of exception:  ``` ERROR [2016-08-26 07:28:48,244] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down ! sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target ! at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:146) ! at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:131) ! at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280) ! at org.eclipse.jetty.util.security.CertificateValidator.validate(CertificateValidator.java:248) ! ... 15 common frames omitted ! Causing: java.security.cert.CertificateException: Unable to validate certificate: unable to find valid certification path to requested target ! at org.eclipse.jetty.util.security.CertificateValidator.validate(CertificateValidator.java:256) ! at org.eclipse.jetty.util.security.CertificateValidator.validate(CertificateValidator.java:189) ```  This error is quite generic and misleading and I spent a whole day figuring it out. One usually expects this kind of errors to be something about certificate chains or malconfigured x509 extensions.  The problem occurs already when enabling `validateCerts` (what no one does in regular HTTPS setup as the server does not need to care whether is own certificate is valid). The crux is in `org.eclipse.jetty.util.security.CertificateValidator` which clearly says  > Convenience class to handle validation of certificates, aliases and keystores Allows specifying Certificate Revocation List (CRL), as well as enabling CRL Distribution Points Protocol (CRLDP) certificate extension support, and also enabling On-Line Certificate Status Protocol (OCSP) support. IMPORTANT: at least one of the above mechanisms _MUST_ be configured and operational, otherwise certificate validation _WILL FAIL_ unconditionally.  Neither the Dropwizard documentation nor any tutorial / blog post ever pointed this out. I suggest to either add it to the documentation or to even add a check to config file validation that assures that at least one revocation check method (CRL, CRLDP or OCSP) is enabled.","closed","needs code,","lpeterse","2016-08-26T07:53:42Z","2017-02-02T03:59:49Z"
"","2379","Hibernate Constraint Composition is not working","I tried to create a **constraint composition** but it doesn't work. Only **custom constraints** are working.  Example of constraint composition: https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-constraint-composition  I tried a code similar to this one: ``` @NotNull @Size(min = 2, max = 14) @Target({ METHOD, FIELD, ANNOTATION_TYPE, TYPE_USE }) @Retention(RUNTIME) @Constraint(validatedBy = { }) @Documented public @interface Test {      String message() default ""test"";      Class[] groups() default { };      Class[] payload() default { }; } ```  ``` @GET @Path(""/test"") public Response test(@QueryParam(value = ""test"") @Test String test) {     return Response.ok().build(); } ```","closed","","anetogit","2018-06-06T21:09:10Z","2018-06-08T23:14:45Z"
"","1760","Unable to package dropwizard-example","I tried packaging the dropwizard-example on my machine (MacBook Pro Mid-2014 running macOS v 10.12 with Apache Maven 3.3.9 (installed via Homebrew 1.0.6)) which was unsuccessful.   I first ran the `mvn package` with a clean local maven repository (deleted ~/.m2/) with the following message output.  ``` bash mvn package [INFO] Scanning for projects... Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-bom/1.0.1-SNAPSHOT/maven-metadata.xml Downloading: http://oss.sonatype.org/content/repositories/snapshots/io/dropwizard/dropwizard-bom/1.0.1-SNAPSHOT/dropwizard-bom-1.0.1-SNAPSHOT.pom [ERROR] [ERROR] Some problems were encountered while processing the POMs: [ERROR] Non-resolvable import POM: Could not find artifact io.dropwizard:dropwizard-bom:pom:1.0.1-SNAPSHOT in sonatype-nexus-snapshots (http://oss.sonatype.org/content/repositories/snapshots) @ line 38, column 25 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-core:jar is missing. @ line 49, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-auth:jar is missing. @ line 53, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-assets:jar is missing. @ line 57, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-http2:jar is missing. @ line 61, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-hibernate:jar is missing. @ line 65, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-migrations:jar is missing. @ line 69, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-views-freemarker:jar is missing. @ line 73, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-views-mustache:jar is missing. @ line 77, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-metrics-graphite:jar is missing. @ line 81, column 21 [ERROR] 'dependencies.dependency.version' for com.h2database:h2:jar is missing. @ line 85, column 21 [ERROR] 'dependencies.dependency.version' for io.dropwizard:dropwizard-testing:jar is missing. @ line 89, column 21 [ERROR] 'dependencies.dependency.version' for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar is missing. @ line 94, column 21 [ERROR] 'dependencies.dependency.version' for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:jar is missing. @ line 109, column 21  @ [ERROR] The build could not read 1 project -> [Help 1] [ERROR] [ERROR]   The project io.dropwizard:dropwizard-example:1.0.1-SNAPSHOT (/Users/jwiegand/Workspace/experiments/dropwizard/dropwizard-example/pom.xml) has 14 errors [ERROR]     Non-resolvable import POM: Could not find artifact io.dropwizard:dropwizard-bom:pom:1.0.1-SNAPSHOT in sonatype-nexus-snapshots (http://oss.sonatype.org/content/repositories/snapshots) @ line 38, column 25 -> [Help 2] [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-core:jar is missing. @ line 49, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-auth:jar is missing. @ line 53, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-assets:jar is missing. @ line 57, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-http2:jar is missing. @ line 61, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-hibernate:jar is missing. @ line 65, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-migrations:jar is missing. @ line 69, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-views-freemarker:jar is missing. @ line 73, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-views-mustache:jar is missing. @ line 77, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-metrics-graphite:jar is missing. @ line 81, column 21 [ERROR]     'dependencies.dependency.version' for com.h2database:h2:jar is missing. @ line 85, column 21 [ERROR]     'dependencies.dependency.version' for io.dropwizard:dropwizard-testing:jar is missing. @ line 89, column 21 [ERROR]     'dependencies.dependency.version' for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar is missing. @ line 94, column 21 [ERROR]     'dependencies.dependency.version' for org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:jar is missing. @ line 109, column 21 [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException ```  The issue is the repository in the pom.xml does not have the version specified in the `` property. This should probably be updated one of three ways:  1. Update the repository referenced with the latest dropwizard version (oss.sonatype.org) 2. Change the repository in the pom.xml (Maven Central has the latest version) 3. Change the version in the pom.xml in the dropwizard-example directory (1.0.0-rc5-SNAPSHOT worked)","closed","","jrwiegand","2016-10-06T12:57:05Z","2016-10-06T15:24:51Z"
"","2020","noob experience","I thought it might be nice to read about the experience of a java noob diving into the dropwizard documentation.  * http://www.dropwizard.io/1.1.0/docs/getting-started.html#creating-a-configuration-class What is the purpose of this configuration class? With methods of setDefaultName it looks like a model to me, isn't this stuff suppose to go into entities? * `When this class is deserialized from the YAML file` which yaml file? Why is it deserialized? Why are we now talking about yaml when the configuration file itself is litered with JsonProperty annotations?  in IRC dreamreal (Joseph Ottinger. Used to be the editor of Java Developer Journal and then TheServerSide.com) has to say the following about it  ```  what's the purpose of this Configuration class?  http://www.dropwizard.io/1.1.0/docs/getting-started.html#creating-a-configuration-class   i see in the example methods like setDefaultName .. seems more like a model to me ..  it's a model for the *application*  don't really want to model my application at this moment  it also says  ""When this class is deserialized from the YAML file, ""  which YAML file ?  you're going to write a YAML file.  Well, default name is for the app to spit out by default. So that's your ""application model.""  Like if your app is to say ""Hello, world"" where ""world"" is paramaterized, ""world"" is the ""default name.""  spit out where ?  I don't know what the tutorial does - but given dropwizrd, I'm assuming it's going to start a webapp where you hit http://localhost/something  and yes, it'll be http://localhost:port/hello-world  and yes, it'll be http://localhost:8081/hello-world based on the rest of the configuration  ok that's not so obvious yet ..  i'll make notes  It is a tutorial that actually progresses as it goes along. I don't understand tutorial writers who do that, though.  I mean, why don't they SAY ""this is what we're working toward"" at the very beginning?  ""Getting Started will guide you through the process of creating a simple Dropwizard Project: Hello World."" ... no ""We're going to say 'hello world' through an HTTP endpoint, allowing us to change defaults through configuration and using a data representation model that we can change to fit our needs...""  that way, the ""configuration"" makes more sense and you know you're going to be creating something on the web... ```  * Loading templates and default values from YML seems not really necessary to get going, would be better if this was more obvious in the code itself. Later i would not put my html templates in yaml files anyway so i don't understand this choice for the tutorial.  -- edit and add more later maybe","closed","","flip111","2017-04-22T14:11:45Z","2017-05-18T20:55:44Z"
"","1985","Enum `fromStringFuzzy` should trim() and replace inner whitespace with '_'","I think that the `Enums` class in `io.dropwizard.util` should `trim()` whitespace around the String and then convert inner whitespace to `_`. This way you can use space characters as delimiters too. ```java final String text = value.trim()             .replaceAll(""\\s+"", ""_"") // <- space can be used as a delimiter too             .replace('-', '_')             .replace('.', '_'); ```  Somewhere before version `1.0` or `1.1` of Dropwizard it was possible to use the `fromString()` method on Enums to convert Strings to the right Enum, but not they all go through `Enums.fromStringFuzzy()`, which eliminates any custom conversion logic.  That would be a different issue, but wouldn't it be helpful to check whether the custom `Enum` class actually implements a `fromString()` and only in case it doesn't, fall back to `final Enum constant = Enums.fromStringFuzzy(value, constants);` I guess this logic would go somewhere in `FuzzyEnumParamConverterProvider`","closed","","stefan-zh","2017-03-27T19:51:41Z","2017-11-23T19:16:43Z"
"","1944","JUnit 5 support in dropwizard-testing","I think `dropwizard-testing` module doesn't support JUnit 5 yet.  Mainly the rules/class rules written in Junit 4 (in dropwizard-testing) doesn't work in Junit 5.   FYI, Frameworks like Mockito now officially supports JUnit 5.","closed","improvement,","ramsrib","2017-03-01T03:28:29Z","2019-05-21T19:54:38Z"
"","2027","Testing Resources with @Context HttpServletResponse parameters","I suspect this is an identical issue to https://github.com/dropwizard/dropwizard/issues/651 but haven't been able to come up with a working answer -- I'm using dropwizard version 0.6.2 (It isn't possible at this time to upgrade).  I have resources where we use `@Context` e.g.: ``` @GET @Path(""/{fileId}/data"") @Produces(""application/octet-stream"") public Response getData( 			@Context HttpServletResponse response, 			@ApiParam(value = ""ID of the target file"", required = true) @PathParam(""fileId"") Id fileId ) { //.... response.setHeader(/*...*/); //... stream is some StreamingOutput return Response.ok(stream).build();   } ```  I would like to be able to test these endpoints using dropwizard-testing, but hit the same error as the other issue:  ``` SEVERE: Missing dependency for method public javax.ws.rs.core.Response MyResource.getData(javax.servlet.http.HttpServletResponse,org.vena.id.Id,) throws java.lang.Exception at parameter at index 0 ```  `ResourceTestRule` doesn't seem to exist in dropwizard 0.6.2 --- are there any alternatives ?","closed","","digital-abyss","2017-04-25T22:05:12Z","2017-04-26T14:08:17Z"
"","2111","Testing Jersey resource with expected Exception","I seem to be unable to test a resource with JUnit where I expect to get a HTTP forbidden 403 response, which I do - but the test seem to think it's an error 500.  I tried multiple things like try-catching, but the response is just not correct. I throw a forbidden, but get an internal error back..  ```java @PUT @Timed @UnitOfWork @ExceptionMetered @Path(""/{id}/password"") public void editPassword(@RestrictedTo User authUser, @PathParam(""id"") LongParam id, @Valid EditPasswordRequest request) {         throw new ForbiddenException(""test""); } ```  ```java @Test public void testChangePasswordIncorrectOldPassword() {         final EditPasswordRequest request = new EditPasswordRequest(""foo"", ""bar"");          ClientResponse response = configureAsClient(""/api/users/1/password"")             .type(USERS_V1)             .accept(USERS_V1)             .entity(request, USERS_V1)             .put(ClientResponse.class);          assertThat(response.getStatus()).isEqualTo(403);     } ```  ```bash Jul 25, 2017 9:15:15 AM com.sun.jersey.api.container.filter.LoggingFilter filter INFO: 1 * Server in-bound request 1 > PUT /api/users/1/password 1 > Content-Type: application/vnd.app.users-v1+json 1 > Accept: application/vnd.app.users-v1+json 1 > Authorization: Bearer {redacted} 1 >  {""currentPassword"":""wrong password"",""newPassword"":""new password""}  09:15:15.145 [main] DEBUG o.h.v.i.m.d.ConstraintDescriptorImpl - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, groups=[Ljava.lang.Class;@669513d8, payload=[Ljava.lang.Class;@3a1d593e}, constraintType=GENERIC}. 09:15:15.152 [main] DEBUG o.h.v.i.m.d.ConstraintDescriptorImpl - Adding composing constraint: ConstraintDescriptorImpl{annotation=javax.validation.constraints.NotNull, payloads=[], hasComposingConstraints=true, isReportAsSingleInvalidConstraint=false, elementType=FIELD, definedOn=DEFINED_LOCALLY, groups=[interface javax.validation.groups.Default], attributes={message={javax.validation.constraints.NotNull.message}, groups=[Ljava.lang.Class;@2c177f9e, payload=[Ljava.lang.Class;@5db4c359}, constraintType=GENERIC}. 09:15:15.210 [main] ERROR i.d.j.errors.LoggingExceptionMapper - Error handling a request: 1c35fa531ee6a2ef io.github.nicksen.jersey.exceptions.ForbiddenException: Hej 	at com.company.app.core.AbstractResource.forbidden(AbstractResource.java:23) ~[classes/:na] 	at com.compay.app.resources.UserResource.editPassword(UserResource.java:201) ~[classes/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112] 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112] 	at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$VoidOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:167) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.codahale.metrics.jersey.InstrumentedResourceMethodDispatchProvider$TimedRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:30) ~[metrics-jersey-3.0.2.jar:3.0.2] 	at com.codahale.metrics.jersey.InstrumentedResourceMethodDispatchProvider$ExceptionMeteredRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:69) ~[metrics-jersey-3.0.2.jar:3.0.2] 	at io.dropwizard.jersey.guava.OptionalResourceMethodDispatchAdapter$OptionalRequestDispatcher.dispatch(OptionalResourceMethodDispatchAdapter.java:37) ~[dropwizard-jersey-0.7.1.jar:0.7.1] 	at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:302) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.uri.rules.ResourceObjectRule.accept(ResourceObjectRule.java:100) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84) ~[jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1542) [jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1473) [jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1419) [jersey-server-1.18.1.jar:1.18.1] 	at com.sun.jersey.test.framework.impl.container.inmemory.TestResourceClientHandler.handle(TestResourceClientHandler.java:119) [jersey-test-framework-inmemory-1.18.1.jar:1.18.1] 	at com.company.app.core.HmacClientFilter.handle(HmacClientFilter.java:35) [test-classes/:na] 	at com.sun.jersey.api.client.Client.handle(Client.java:652) [jersey-client-1.18.1.jar:1.18.1] 	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682) [jersey-client-1.18.1.jar:1.18.1] 	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) [jersey-client-1.18.1.jar:1.18.1] 	at com.sun.jersey.api.client.WebResource$Builder.put(WebResource.java:529) [jersey-client-1.18.1.jar:1.18.1] 	at com.company.app.resources.UserResourceTest.testChangePasswordIncorrectOldPassword(UserResourceTest.java:57) [test-classes/:na] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_112] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_112] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_112] 	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_112] 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [junit-4.12.jar:4.12] 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12] 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [junit-4.12.jar:4.12] 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.12.jar:4.12] 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) [junit-4.12.jar:4.12] 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) [junit-4.12.jar:4.12] 	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239) [junit-4.12.jar:4.12] 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [junit-4.12.jar:4.12] 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) [junit-4.12.jar:4.12] 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12] 	at org.junit.runners.Suite.runChild(Suite.java:128) [junit-4.12.jar:4.12] 	at org.junit.runners.Suite.runChild(Suite.java:27) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12] 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12] 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [junit-4.12.jar:4.12] 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) [junit-rt.jar:na] 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51) [junit-rt.jar:na] 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:na] 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:na] Jul 25, 2017 9:15:15 AM com.sun.jersey.api.container.filter.LoggingFilter$Adapter finish INFO: 1 * Server out-bound response 1 < 500 1 < Content-Type: application/vnd.app.users-v1+json 1 <  {""message"":""There was an error processing your request. It has been logged (ID 1c35fa531ee6a2ef).""}  Jul 25, 2017 9:15:15 AM com.sun.jersey.test.framework.spi.container.inmemory.InMemoryTestContainerFactory$InMemoryTestContainer stop INFO: Stopping low level InMemory test container  org.junit.ComparisonFailure:  Expected :403 Actual   :500     	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at com.company.app.resources.UserResourceTest.testChangePasswordIncorrectOldPassword(UserResourceTest.java:59) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) 	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) 	at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239) 	at org.junit.rules.RunRules.evaluate(RunRules.java:20) 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runners.Suite.runChild(Suite.java:128) 	at org.junit.runners.Suite.runChild(Suite.java:27) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)   Process finished with exit code 255 ```","closed","","n1mda","2017-07-25T07:32:31Z","2022-01-02T18:02:13Z"
"","1578","Remove @Ignore from DropwizardApacheConnectorTest","I rebased this branch on the master and re-ran it on Travis twice and it passed (twice!).  So here's to being optimistic :tada:","closed","","nickbabcock","2016-06-01T16:34:31Z","2016-06-03T21:00:04Z"
"","1610","Replaced my GitHub handle with my real name in contributors file","I noticed you only have my GitHub handle in the contributors file. So I've updated my own entry in the contributors file to include my name :smiley_cat:","closed","","RawToast","2016-06-23T14:20:05Z","2016-06-24T06:22:04Z"
"","2137","docs: Fix broken link in user manual to Hibernate grouped constraints docs","I noticed today that a link in the user manual to a section of Hibernate Validator's user manual is broken. This change updates the link to point to the appropriate section of Hibernate's stable docs.  Not sure if we care about pinning the user manual to a specific version of the docs. The only past version of their docs that I can find online is [5.1](https://docs.jboss.org/hibernate/validator/5.1/reference/en-US/html/chapter-groups.html#chapter-groups), which is a few minor versions behind where Dropwizard is, at 5.4.","closed","documentation,","evnm","2017-08-24T21:56:36Z","2017-09-08T15:20:14Z"
"","1612","Jackson unable to process JSON","I noticed this error stack when switching from 1.0.0-rc2 to 1.0.0-rc3. When I switched back, I no longer had the issue. I see the issue after I connect with a client app and request data.   Forgive me if I'm just dumping an error stack on you, I'm still pretty new to this. I'm not really sure if this is really an issue or if the rc3 build is just exposing a bug in my app.  ``` WARN  [2016-06-24 13:07:16,580] org.hibernate.engine.jdbc.spi.SqlExceptionHelper: SQL Error: 0, SQLState: null ERROR [2016-06-24 13:07:16,581] org.hibernate.engine.jdbc.spi.SqlExceptionHelper: Could not set parameter at position 4, parameter length is 3 DEBUG [2016-06-24 13:07:16,621] io.dropwizard.jersey.jackson.JsonProcessingExceptionMapper: Unable to process JSON ! java.sql.SQLException: Could not set parameter at position 4, parameter length is 3 ! at org.mariadb.jdbc.internal.util.ExceptionMapper.getSqlException(ExceptionMapper.java:149) ! at org.mariadb.jdbc.MariaDbServerPreparedStatement.setParameter(MariaDbServerPreparedStatement.java:129) ! at org.mariadb.jdbc.AbstractMariaDbPrepareStatement.setDate(AbstractMariaDbPrepareStatement.java:341) ! at org.mariadb.jdbc.AbstractMariaDbPrepareStatement.setDate(AbstractMariaDbPrepareStatement.java:356) ! at org.hibernate.type.descriptor.sql.DateTypeDescriptor$1.doBind(DateTypeDescriptor.java:53) ! at org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:74) ! at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:253) ! at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:248) ! at org.hibernate.loader.Loader.bindNamedParameters(Loader.java:2094) ! at org.hibernate.loader.Loader.bindParameterValues(Loader.java:2014) ! at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1943) ! at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1896) ! at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1874) ! at org.hibernate.loader.Loader.doQuery(Loader.java:919) ! at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:336) ! at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:306) ! at org.hibernate.loader.Loader.loadCollectionSubselect(Loader.java:2385) ! ... 84 common frames omitted ! Causing: org.hibernate.exception.GenericJDBCException: could not load collection by subselect: [com.myapp.core.Postable.persistentComments#<3052, 4003, 3652, 4052, 6, 3702, 4502, 4503, 2552, 4152, 4552, 4553>] ! at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:47) ! at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:111) ! at org.hibernate.loader.Loader.loadCollectionSubselect(Loader.java:2392) ! at org.hibernate.loader.collection.SubselectCollectionLoader.initialize(SubselectCollectionLoader.java:63) ! at org.hibernate.persister.collection.AbstractCollectionPersister.initialize(AbstractCollectionPersister.java:682) ! at org.hibernate.event.internal.DefaultInitializeCollectionEventListener.onInitializeCollection(DefaultInitializeCollectionEventListener.java:75) ! at org.hibernate.internal.SessionImpl.initializeCollection(SessionImpl.java:2004) ! at org.hibernate.collection.internal.AbstractPersistentCollection$4.doWork(AbstractPersistentCollection.java:562) ! at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:246) ! at org.hibernate.collection.internal.AbstractPersistentCollection.initialize(AbstractPersistentCollection.java:558) ! at org.hibernate.collection.internal.AbstractPersistentCollection.read(AbstractPersistentCollection.java:131) ! at org.hibernate.collection.internal.AbstractPersistentCollection$1.doWork(AbstractPersistentCollection.java:160) ! at org.hibernate.collection.internal.AbstractPersistentCollection$1.doWork(AbstractPersistentCollection.java:145) ! at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:246) ! at org.hibernate.collection.internal.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:144) ! at org.hibernate.collection.internal.PersistentBag.size(PersistentBag.java:261) ! at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:102) ! at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25) ! at com.fasterxml.jackson.datatype.hibernate5.PersistentCollectionSerializer.serialize(PersistentCollectionSerializer.java:255) ! at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:672) ! at com.fasterxml.jackson.module.afterburner.ser.ObjectMethodPropertyWriter.serializeAsField(ObjectMethodPropertyWriter.java:40) ! at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:678) ! ... 65 common frames omitted ! Causing: com.fasterxml.jackson.databind.JsonMappingException: could not load collection by subselect: [com.myapp.core.Postable.persistentComments#<3052, 4003, 3652, 4052, 6, 3702, 4502, 4503, 2552, 4152, 4552, 4553>] (through reference chain: java.util.TreeSet[0]->com.myapp.core.Event[""persistentComments""]) ! at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:378) ! at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:338) ! at com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(StdSerializer.java:342) ! at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:686) ! at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:157) ! at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:149) ! at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:112) ! at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25) ! at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:130) ! at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1428) ! at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:930) ! at com.fasterxml.jackson.jaxrs.base.ProviderBase.writeTo(ProviderBase.java:635) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:265) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:250) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ! at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:106) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ! at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:86) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ! at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1130) ! at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:711) ! at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444) ! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434) ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:329) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1689) ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:50) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:44) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1174) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1106) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240) ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) ! at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:396) ! at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68) ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56) ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) ! at org.eclipse.jetty.server.Server.handle(Server.java:524) ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:319) ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:253) ! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273) ! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95) ! at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) ```","closed","","tmcdevitt85","2016-06-24T13:30:51Z","2016-07-26T19:34:52Z"
"","1601","Add a test for building the HTTPS connector","I noticed that we don't have a test for building the HTTPS connector in `HttpsConnectionFactory`. There is a lot of things are going on during this process (building a SSL context factory, logging supported ciphers, setting metric names, using correct instrumented connectors and so on), so it makes sense to test it independently from other components. I think it would be great to have a test which verifies that we correctly configure Jetty on the SSL side.  As a result, this should allow to spot possible bugs earlier during future Jetty updates.","closed","improvement,","arteam","2016-06-18T09:32:42Z","2016-06-18T11:40:34Z"
"","2060","Change the log file charset","I noticed that the non-ascii characters in the Dropwizard application logFile are getting replaced with `?`.  For example, when you do: ```             LOGGER.info(""√§""); ``` one would see: INFO  [date] [logger] - ?  I believe this is because the log file uses us-ascii charset for us. ``` $ file -i our-service.log our-service.log: text/plain; charset=us-ascii ``` I checked that the default charset on a host should be set to UTF-8 ``` $ echo $LC_CTYPE UTF-8 ```  Is it possible to change the charset to UTF-8 for application log files? I tried to add ```     appenders:            charset: UTF-8 ``` to the file appender, but the Configuration did not like that.  I tested both dw0.7 and dw1.0.2","closed","","mi5c","2017-05-18T00:50:43Z","2017-05-18T17:03:47Z"
"","2227","io.dropwizard.jersey.jsr310 is missing a ParamConverterProvider","I noticed that the dropwizard-jersey module has AbstractParam impls for the major java.time classes but does not have a ParamConverterProvider for those classes. Was it intentionally left out to encourage the usage of the AbstractParam directly or is this something that dw users should be expected to implement themselves.  Here's a few examples using a LocalDate QueryParam.  Using a custom ParamConverterProvider... ```     @GET     @Path(""doSomething"")     public TestResponseObject @QueryParam(""checkinDate"") final LocalDate checkinDate) {         ....     } ```  Using an LocalDateParam... ```     @GET     @Path(""doSomething"")     public TestResponseObject @QueryParam(""checkinDate"") final LocalDateParam checkinDate) {         ....     } ```","closed","stale,","bryanrcampbell","2017-12-12T20:27:32Z","2019-08-19T14:02:24Z"
"","2357","Custom config entry always throws ConfigurationParsingException","I must be stupid. I can't get the configuration to accept custom entries.  According to the docs it should be sufficient to just add the field to my Configuration. Let's say I want a simple text field *x*:  ```yml logging:   level: Info   ...  x: y ```  ```java public class MyConfig extends Configuration {     @NotEmpty     private String x;      @JsonProperty     public String getX() { return x; }      @JsonProperty     public void setX(String x) { this.x = x; } } ```  But as soon as I add anything non-standard to my config.yml I end up with:  ``` io.dropwizard.configuration.ConfigurationParsingException: config.yml has an error:   * Unrecognized field at: smtpConfiguration     Did you mean?:       - logging       - metrics       - server          at io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:279)         at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:140)         at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:89)         at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:126)         at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:74)         at io.dropwizard.cli.Cli.run(Cli.java:78)         at io.dropwizard.Application.run(Application.java:93)         at xyz.main(xyz.java:45) Caused by: com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""x"" (class io.dropwizard.Configuration), not marked as ignorable (3 known properties: ""server"", ""logging"", ""metrics""]) ... ```  I also tried some nested things with a custom class with getters and setters for the fields. I also tried a ConfigurationFactory but that didn't help either. Also tried `@JsonProperty(""x"")`.  What am I missing?","closed","","black-snow","2018-05-14T11:09:20Z","2018-05-14T15:09:20Z"
"","1930","How can I get config value in yml file in normal java class?","I know we can get config value in yml file in the subclass of Application, but now I am trying to get the config value in other java normal class, I have tried to @Inject the ApiConfiguration to that normal java class, but it can not get the value.   My question is : if possible to get the config value in the normal class? if yes. how?  Thank you.","closed","","jay-genhot","2017-02-14T03:31:27Z","2017-02-15T08:58:30Z"
"","1657","How to set a maximum MultiPart Form Data size?","I know `MultiPartFeature` is provided by the `jersey-media-multipart` library but I was wondering if it is possible to set `MultipartConfig` from the Dropwizard `Environment` object or in any other way?","closed","","cgendreau","2016-07-30T16:49:12Z","2016-11-17T08:06:24Z"
"","1920","Bump archetype maven compiler plugin","I keep running into compiler bugs using the given archetype compiler version, and I have to keep remembering to update to a new version.","closed","improvement,","nickbabcock","2017-02-09T14:20:30Z","2017-02-09T15:39:09Z"
"","2525","fix typos","I just stumbled upon some typos in the documentation.  In Detail: * A few times, 'Dropwizard' did not start with upper case. * 'subcommand' is not known to leo.org  Any Feedback welcome.","closed","documentation,","nitram509","2018-10-11T12:31:54Z","2018-10-11T14:53:42Z"
"","1856","Improve visibility for logging configuration options in documentation","I just recently discovered that with the logging configuration defaults for [Discarding Threshold](https://github.com/dropwizard/dropwizard/blob/7295c5faf42840325c161cc82ad4ed1db2bf8419/dropwizard-logging/src/main/java/io/dropwizard/logging/AbstractAppenderFactory.java#L69-L71), logging events of level TRACE, DEBUG and INFO will be discarded when the blocking queue has 20% capacity remaining.     The documentation for discarding threshold and queue size options are hideen in the Dropwizard Javadocs in AbstractAppenderFactory. For more visibility, I feel it may be beneficial to include it [here](http://www.dropwizard.io/1.0.5/docs/manual/configuration.html#logging) or [here](http://www.dropwizard.io/1.0.5/docs/manual/core.html#logging). If others feel the same, I'll go ahead and raise a PR.  PS: I came across this blog entry regarding logback logging - http://blog.takipi.com/how-to-instantly-improve-your-java-logging-with-7-logback-tweaks/","closed","","dennyac","2016-12-12T12:04:44Z","2016-12-26T20:35:22Z"
"","2439","@UnitOfWork connection leak","I have used @UnitOfWork on non jersey resource methods, using `UnitOfWorkAwareProxyFactory` but I am facing connection leaks. While reading [here](https://github.com/scottescue/dropwizard-entitymanager/issues/41) I have find that I will manually need to close the connection when I use @UnitOfWork on non-jersey resource methods.  Can anyone explain why do I need to manually close the connection while using @UnitOfWork. A detailed explanation on this would be really appreciated.","closed","stale,","arpit728","2018-07-20T12:09:16Z","2019-08-19T14:01:58Z"
"","2309","Hidden variable method behind static method","I have just notice that if I have the following;   ``` java @GET @Path(""instances/{type}"") @Timed	 public String instanceType(@PathParam(""type"") Optional type)  { 	return ""you found the URL GET instances/""+type.get(); }	  @POST @Path(""instances/apples"") @Timed	 public String postInstanceApples(@HeaderParam(""Authorization"") Optional auth, Apples data)  {		 	return ""you found the URL POST instances/apples"";	 }	 	 @POST @Path(""instances/oranges"")	 @Timed	 public String postInstanceOranges(@HeaderParam(""Authorization"") Optional auth, Oranges data)  { 	return ""you found the URL POST instances/oranges""; } ```  I get a 405 error when I try GET /instance/apples This seems odd behaviour, I would have thought dropwizard would first look at the incoming request‚Äôs method (GET/POST) then try and match the URL.   However is seems that the URL is matched first, then the method. Is this the correct behaviour?    I have attached a zip file with a coded example showing the problem..  [testDrop.zip](https://github.com/dropwizard/dropwizard/files/1819192/testDrop.zip)","closed","","thogar-computer","2018-03-16T12:56:04Z","2018-06-08T23:29:51Z"
"","1800","Add method ResourceTestRule#addResource(Supplier lambda)","I have injection f/w which imitates the CDI container using my `InjectionRunner`. The f/w does not provide the instances of mocked beans at the creation time of `@Rule` `ResourceTestRule` because it is technically not possible in JUnit. Simply update the `apply()` method in the way that the resources are taken from suppliers at the beginning of the method. This means we can lazily fetch the resources to the rule. ```         public Builder addResource(Supplier resource) {             singletons.add(resource); -> change to Set of Suppliers             return this;         } ```","closed","feature,","Tibor17","2016-11-04T01:59:48Z","2018-03-14T14:54:48Z"
"","2387","Rules and Class Rules with Cucumber-JVM and Dropwizard","I have Cucumber as my testing framework, developing in IntellijIDEA IDE, and was trying to use the DAOTestRule class to test my hibernate persistence layer. I noticed that the before() and after() functions don't get called.  Further investigation revealed it is a known issue and that Cucumber ignores @Rule and @ClassRule annotations when gathering its annotated functions from step classes. Therefore, the following class will give an error:      public class MyTestSteps {      Person saved;     Person unsaved;     PersonDAO personDAO;      @Rule     public DAOTestRule myDAORule = DAOTestRule             .newBuilder()             .addEntityClass(Person.class)             .build();       @Before(""@DAOTests"")      public void beforeDaoTests(){             personDAO = new PersonDAO(myDAORule.getSessionFactory());      }          @Given(""^I have an Object to persist$"")     public void iHaveAnObjectToPersist() throws Throwable {         unsaved = new Person(""John"", ""Doe"");     }      @When(""^I save it using the DAO$"")     public void iSaveItUsingTheDAO() throws Throwable {        saved = myDAORule.inTransaction(() -> personDAO.create(unsaved));            }       @Then(""^It is added to the database$"")     public void itIsAddedToTheDatabase() throws Throwable {         Assert.assertThat(saved.getId(),greaterThan(0L));     }     } The error would be on the DAO.create() function:      org.hibernate.HibernateException: No session currently bound to execution context  I can't call the before() and after() myself, since they are protected. so one way is to wrap DAOTestRule in a new object, expose the before() and after(), and call them in the @Before and @After functions:      ....     public MyExtendedDAOTestRule myDAORule = MyExtendedDAOTestRule             .newBuilder()             .addEntityClass(Person.class)             .build();      @Before(""@DAOTest"")     public void beforeDaoTests() throws Throwable {         myDAORule.before();     }      @After(""@DAOTest"")     public void afterDaoTests() {         myDAORule.after();     }     ....  And it will work. is this the simplest/only way? is there an important reason for before and after to be protected?","closed","","ralemy","2018-06-12T15:55:39Z","2018-09-24T21:41:40Z"
"","2313","DropwizardAppRule use of ConfigOverride changes default config","I have an integration test that needs to emulate 2 pods in a cluster. Since I can't change the IP, I'm changing the port using ConfigOverride passed to the DropwizardAppRule like this: ```kotlin       private fun createPodRule(vararg overrides: ConfigOverride): DropwizardAppRule {             return DropwizardAppRule(                     IntegrationTestApplication::class.java,                     ""etc/processor.yaml"", *(configOverrides + overrides)             )         } ```  For my first pod, I just use the defaults and don't pass in any overrides, but for my second pod, I override the application and admin ports.  What I'm expecting to happen is that the first pod uses the ports from the yaml file, but what ends up happening is that both rules use the override ports  If I explicitly override the ports for both rules, than everything works as expected.","closed","","charlesritchea","2018-03-21T19:21:41Z","2018-03-21T20:01:03Z"
"","2423","Is it possible to register resources outside the default subroute?","I have an Application with base URL Pattern set as follows:  `environment.jersey().setUrlPattern(""/api/some-info/*"");`  But now I need to register my authentication resource and I need it to be outside the `""/api/some-info/*""` subroute. Is it possible? How can I do so?  Thanks.","closed","","Rafael-Simonelli","2018-07-03T14:19:27Z","2018-07-12T12:00:33Z"
"","1614","CachingAuthenticator does not block subsequent requests for same authorization","I have a situation where multiple requests hit the server at roughly the same time, each of these request is using the same authorization.  If the CachingAuthenticator does not yet have an entry for that authorization then each of these requests will fall through to the canonical authenticator.  Coded as it is, this is less efficient than it could be.  Perhaps this should be coded with the CacheLoader pattern, such that following concurrent requests to the cache are blocked until the canonical authenticator has returned a value??","closed","improvement,","windbender","2016-06-28T17:33:01Z","2016-09-25T14:45:24Z"
"","1829","ConfiguredValidator - Accepting multiple validators","I have a question about the ConfiguredValidator. It's mentioned in the code that having multiple validators is not allowed ([here](https://github.com/dropwizard/dropwizard/blob/7295c5faf42840325c161cc82ad4ed1db2bf8419/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/DropwizardConfiguredValidator.java#L72))  I think it should be allowed. an example use case for that will be when validating multiple entities in a call:  ``` public Response addBook( @Auth @Validated(Validations.Existing.class) Author author, @Validated(Validations.New.class) Book book) {} ```  This gives the ability to the entities themselves to define rules for validations inside the entity class.  If you think this is a good idea I might be able to add this and create a PR for it.  If it's not a good idea, I appreciate if you can let me know what's the alternative approach.","closed","blocked,","aminy","2016-11-16T19:46:12Z","2018-06-24T22:43:30Z"
"","2216","Documentation missing for the release v1.1.6","I have a pull request for publishing the documentation for the release v1.1.6 https://github.com/dropwizard/dropwizard/pull/2215","closed","","sankate","2017-11-21T21:54:41Z","2017-11-22T14:44:27Z"
"","2139","FormDataParam default to null?","I have a method that accepts type Multipart Form Data. I want to be able to hit this endpoint sometimes without the specified `@FormDataParam(""file"")`, but right now when I leave it out the method returns a 400 bad request immediately. Is there a way I can set it up so that I can leave it out? Or is there some way I can set a default value for this (i.e. to null?). I wanted to try `@DefaultValue(null)` but the compiler didn't like that. Any help would be appreciated. My method declaration is below:  ```java @POST @Path(""/publish"") @Consumes(MediaType.MULTIPART_FORM_DATA) public Response publish(@Auth Key key,                           @QueryParam(""email"") String email,                           @HeaderParam(""password"") String password,                           @QueryParam(""type"") PublishType type,                           @QueryParam(""message"") String message,                           @FormDataParam(""file"") InputStream inputStream,                           @FormDataParam(""file"") FormDataContentDisposition                               contentDispositionHeader,                           @FormDataParam(""title"") @DefaultValue("""") String videoTitle) { // code here } ```","closed","","RohanNagar","2017-08-30T05:50:16Z","2017-09-01T06:40:53Z"
"","2377","Unable to run file logging","I have a dropwizard service (version 1.2.2) which has been running for months with logging to console. I wanted to now log to file so I added the following extra lines to my config file:  ``` logging:    # Permit DEBUG, INFO, WARN and ERROR messages to be logged by appenders.   level: INFO   appenders:     - type: file       currentLogFilename: ./log/taskiir-service.log       threshold: ALL       archive: true       archivedLogFilenamePattern: ./log/taskiir-service-%d.log       archivedFileCount: 5       timeZone: UTC  ```  However upon start-up I immediately get an error as shown here below. My project is within Eclipse. I am guessing I am missing something.  Any help much appreciated.   Error:  ```   io.dropwizard.configuration.ConfigurationParsingException: taskiir-service.yml has an error:   * Failed to parse configuration at: logging.appenders.[0]; Could not resolve type id 'file' as a subtype of [simple type, class io.dropwizard.logging.AppenderFactory]: known type ids = [] (for POJO property 'appenders')  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.anton.taskiirservice.TaskiirService.TaskiirAPIConfiguration[""logging""]->io.dropwizard.logging.DefaultLoggingFactory[""appenders""]->java.util.ArrayList[0])      at io.dropwizard.configuration.ConfigurationParsingException$Builder.build(ConfigurationParsingException.java:276)     at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:157)     at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:92)     at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:124)     at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:72)     at io.dropwizard.cli.Cli.run(Cli.java:75)     at io.dropwizard.Application.run(Application.java:93)     at com.anton.taskiirservice.TaskiirService.TaskiirAPIApplication.main(TaskiirAPIApplication.java:59) Caused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'file' as a subtype of [simple type, class io.dropwizard.logging.AppenderFactory]: known type ids = [] (for POJO property 'appenders')  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.anton.taskiirservice.TaskiirService.TaskiirAPIConfiguration[""logging""]->io.dropwizard.logging.DefaultLoggingFactory[""appenders""]->java.util.ArrayList[0])     at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)     at com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException(DeserializationContext.java:1615)     at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(DeserializationContext.java:1186)     at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleUnknownTypeId(TypeDeserializerBase.java:291)     at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(TypeDeserializerBase.java:162)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:113)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:97)     at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254)     at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:287)     at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:244)     at com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)     at com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:519)     at com.fasterxml.jackson.module.afterburner.deser.SettableObjectMethodProperty.deserializeAndSet(SettableObjectMethodProperty.java:47)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:287)     at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:189)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:120)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:178)     at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:105)     at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:254)     at com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)     at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:251)     at com.fasterxml.jackson.module.afterburner.deser.SuperSonicBeanDeserializer.deserialize(SuperSonicBeanDeserializer.java:155)     at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:3972)     at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2264)     at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:128)     ... 6 more   ```","closed","","AntonQUT","2018-06-05T05:26:58Z","2019-02-08T23:54:03Z"
"","2262","Dropwizard 1.3.0-rc5 breaks kapt annotation processing","I have a Dropwizard Project setup in Kotlin(1.2.21) with kapt for annotation processing(I use Dagger 2 for dependency injection).  Since I wanted to use jdbi3, I updated my dropwizard dependency from 1.2.2 to 1.3.0-rc5. Kapt refuses to process annotations anymore after upgrading the dependency with the following error:  ```java org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':kaptKotlin'.         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:100)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:70)         at org.gradle.api.internal.tasks.execution.OutputDirectoryCreatingTaskExecuter.execute(OutputDirectoryCreatingTaskExecuter.java:51)         at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:62)         at org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54)         at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:60)         at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:97)         at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:87)         at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:52)         at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)         at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)         at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)         at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.run(DefaultTaskGraphExecuter.java:248)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:199)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:110)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:241)         at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:230)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.processTask(DefaultTaskPlanExecutor.java:123)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.access$200(DefaultTaskPlanExecutor.java:79)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:104)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:98)         at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.execute(DefaultTaskExecutionPlan.java:626)         at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.executeWithTask(DefaultTaskExecutionPlan.java:581)         at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.run(DefaultTaskPlanExecutor.java:98)         at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)         at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)         at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) Caused by: org.gradle.api.GradleException: Internal compiler error. See log for more details         at org.jetbrains.kotlin.gradle.tasks.TasksUtilsKt.throwGradleExceptionIfError(tasksUtils.kt:9)         at org.jetbrains.kotlin.gradle.internal.KaptTask.compile(KaptTask.kt:116)         at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:46)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:39)         at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:26)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:780)         at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:747)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:121)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)         at org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:199)         at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:110)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:110)         at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:92)         ... 29 more ```  I tried each of the Dropwizard RC versions from 1.3.0-rc1 to rc4 and all of them work perfectly fine, so this is due to something that was introduced between rc4 and rc5.  I am using the following dropwizard modules: - core - jdbi - migrations - auth - assets - testing  I'll be glad to provide any other information that might help. Over the weekend, I'll try to setup a similar project in pure Java and see if the issue affects kapt only.","closed","","vinaysshenoy","2018-02-09T09:02:59Z","2018-02-09T17:34:10Z"
"","2268","ProxyServlet does not set Content-Length correctly for gzipped content","I have a Dropwizard application that uses a Jetty ProxyServlet to forward HTTP traffic. This works great when the HTTP traffic is not gzipped. When the HTTP traffic is gzipped, the proxy forwards a bad HTTP request.  The problem appears to be that when Dropwizard receives a gzipped HTTP request, the BiDiGzipHandler processes the request before the ProxyServlet. When the BiDiGzipHandler runs, it decompresses the payload and strips the `Content-Encoding: gzip` header. It does not modify the `Content-Length` header to reflect the length of the decompressed payload. When the ProxyServlet processes the request, it blindly copies the now incorrect `Content-Length` header (that reflects the length of the gzipped payload). It forwards the decompressed payload as the body though. When the request is received, you can see that the `Content-Length` does not reflect the length of the actual HTTP body.  I set up a simple test to demonstrate the problem.  I am running Dropwizard 1.0.0. I configured a ProxyServlet to forward all HTTP traffic matching the _/echo_ path.  ``` // Register echo proxy ServletRegistration echoServletRegistration =     environment.servlets().addServlet(""EchoServlet"", new ProxyServlet.Transparent()); echoServletRegistration.addMapping(""/echo/*""); echoServletRegistration.setInitParameter(""prefix"", ""/echo""); echoServletRegistration.setInitParameter(     ""proxyTo"", ""http://localhost:47899""); ```  I CURLed a normal HTTP POST to Dropwizard and used netcat to print what the proxy forwarded:  _test.sh_ ``` #!/bin/bash  curl --data '@data.txt' \      -H ""Content-Type: application/json"" \      -X POST \      http://localhost:8080/echo ```  _data.txt_ (length 19 bytes) ``` Hello, Dropwizard! ```  _netcat output_ ``` $ nc -l 47899 POST / HTTP/1.1 User-Agent: curl/7.57.0 Accept: */* Content-Type: application/json Via: http/1.1 Jordans-MacBook-Pro.local X-Forwarded-For: 127.0.0.1 X-Forwarded-Proto: http X-Forwarded-Host: localhost:8080 X-Forwarded-Server: 127.0.0.1 Host: localhost:47899 Content-Length: 18  Hello, Dropwizard! ```  You can see the problem when I did the same thing gzipped.  _gzip-test.sh_ ``` #!/bin/bash  curl --data-binary '@data.txt.gz' \      -H ""Content-Type: application/json"" \      -H ""Content-Encoding: gzip"" \      -X POST \      http://localhost:8080/echo ```  _data.txt.gz_ (length 48 bytes) ``` √£‚à´√ô}Zdata.txt√õH√ï‚Ä¶‚Ä¶‚óäQp)¬†/(≈ì¬®J,JQ‚Ä∞}9¬°‚àÇ ```  _netcat output_ ``` $ nc -l 47899 POST / HTTP/1.1 User-Agent: curl/7.57.0 Accept: */* Content-Type: application/json Via: http/1.1 Jordans-MacBook-Pro.local X-Forwarded-For: 127.0.0.1 X-Forwarded-Proto: http X-Forwarded-Host: localhost:8080 X-Forwarded-Server: 127.0.0.1 Host: localhost:47899 Content-Length: 48  Hello, Dropwizard! ```  I'm not really sure how to proceed. I think what I'd like is to remove the BiDiGzipHandler from the filter chain so the proxy just passes along the gzipped payload. Alternatively, I'm fine with passing the unzipped payload through the proxy if that's easier.  Is this a bug? Is there a work around in the meantime?  Thank you for all your help!","closed","bug,","jplace","2018-02-09T20:52:38Z","2018-02-10T14:45:29Z"
"","2533","DropWizardAppRule replaces custom sessionHandler","I have a Dropwizard app I'm trying to upgrade from 1.0.0 to 1.3.6 it has a custom redis session handler and the upgrade moves to Jetty 9.4 which has a completely new session abstraction.  I'm trying to write a test to prove my new session data store works (as multiple applications share the session and I don't want to upgrade them all at the same time).  I'll try and generate a minimal example but thought I'd ask the question in case there was some knowledge I was missing...  So, I have a test class  ``` public class DoesMySessionSaveToRedis { } ```  and give it a DropwizardAppRule  ``` public class DoesMySessionSaveToRedis {     @ClassRule     public static final DropwizardAppRule RULE = new DropwizardAppRule<>(       TheApplication.class,       new TheConfiguration()); } ```  that has a test method that posts to an end point which I know causes session interactions.  then checks for the session in Redis.  I can see that my session data store is registered.  ``` @Override     public void run(TheConfiguration configuration,                     Environment environment) {          final TheResource resource = new TheResource();         environment.jersey().register(resource);          final SessionHandler sessionHandler = new SessionHandler();         sessionHandler.setSessionCookie(""MY_DESIRED_COOKIE_NAME"");         final NullSessionCache sessionCache = new NullSessionCache(sessionHandler);         sessionCache.setSaveOnInactiveEviction(true);          final RedisSessionDataStore sessionDataStore = new RedisSessionDataStore(new JedisPool(), new RedisConfiguration(configuration.getTimeout()));         sessionCache.setSessionDataStore(sessionDataStore);          environment.getApplicationContext().setSessionHandler(sessionHandler);     } ```  I can step through in the debugger and see that the application registers the session handler  When the AppRule actually runs it creates a `DropwizardTestSupport` which creates and `run`s a `ServerCommand`. When that `ServerCommand` runs it registers a `NullSessionDataStore` replacing my redis session data store.  Am I trying to do something impossible? Or doing it in the wrong way?","closed","","pauldambra","2018-10-18T11:04:29Z","2018-10-18T17:34:02Z"
"","2090","Due to caching of constraint violation messages wrong message is being displayed.","I have a bean, that has a field annotated with several validation annotations. ```@NotEmpty``` ```@NotBlankElements``` One of them is a standard annotation, one is custom built.  The problem is that if in the first call to API I place request that causes first validation to fail, it's constraint violation message gets cached for 1 hour time. Then I place request with slightly modified payload that causes second annotation to fail. But I get exactly the same constraint validation message.  I would like these messages to exactly reflect what part of payload was wrong.  `ConstraintMessage.getMessage(violation, invocable);` This is the place where I obtain bad error message. `violation` object itself is holding proper message.","closed","","imochurad","2017-06-27T15:08:33Z","2017-09-01T14:41:54Z"
"","2336","@SelfValidation methods in base class are not recognised","I have a base class with some general validations that apply to all subclasses and so I would like do the following: ``` @SelfValidating public class BaseClass {     @SelfValidation     public void appliesToAllSubclasses(ViolationCollector collector) {     } }  public class SubClass extends BaseClass { } ```  I expected that validating an instance of SubClass would call BaseClass.appliesToAllSubClasses, it doesn't and I get the following message in the logs: ``` 08:16:45.188 [main] ERROR io.dropwizard.validation.selfvalidating.SelfValidatingValidator - The class class SubClass is annotated with @SelfValidating but contains no valid methods that are annotated with @SelfValidation ```  ```     @Test     public void selfValidatingSubclass() {         BaseClass baseClass = new SubClass();         Validator validator = Validation.buildDefaultValidatorFactory().getValidator();         validator.validate(baseClass);     } ```  If I annotate SubClass with @SelfValidating as well then I get two log messages rather than one.","closed","stale,","dave1e6","2018-04-30T22:18:24Z","2019-08-19T14:02:14Z"
"","2194","Version 1.1.6 not available on maven central","I get errors when building my project using `1.1.6`. Everything works fine with `1.1.5`. My assumption is, that the version was not properly published to maven central (see [maven central](https://search.maven.org/#search|gav|1|g%3A""io.dropwizard""%20AND%20a%3A""dropwizard-parent""), version `1.1.6` is not listed):  ``` Non-resolvable import POM: Failure to find io.dropwizard:dropwizard-bom:pom:1.1.6 in ... ```","closed","","scho","2017-11-06T09:07:55Z","2017-11-06T10:32:05Z"
"","1785","Defining Hibernate @TypeDefs at the package level (package-info.java)","I ended up extending the [SessionFactoryFactory](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/SessionFactoryFactory.java) from `dropwizard-hibernate` in my project in order to attach a custom `NamingStrategyDelegator` with custom naming strategies.  When I set the `@TypeDefs`block within the same package as my entities I get errors on startup when referring to the types by name in my entities.  Example in my `package-info.java`:  ``` @TypeDefs({         @TypeDef(name = ""UUID"",                 defaultForType = UUID.class,                 typeClass = org.hibernate.type.PostgresUUIDType.class }) ```  Within an `@Entity` class:  ```     @Id     @Column(nullable = false, unique = true, updatable = false)     private UUID hash; ```  Error:  ``` org.hibernate.MappingException: Could not determine type for: UUID     at org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:519)     at org.hibernate.cfg.SetSimpleValueTypeSecondPass.doSecondPass(SetSimpleValueTypeSecondPass.java:42)     at org.hibernate.cfg.Configuration.processSecondPassesOfType(Configuration.java:1472)     at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1420)     at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1846)         at my.custom.project.bundles.hibernate.MyProjectSessionFactoryFactory.buildSessionFactory(MyProjectSessionFactoryFactory.java:106) ```  I could attach all annotations to the classes for the `@TypeDefs` but I would prefer to have them at the package level.  How should I be going about this?","closed","stale,","dotCipher","2016-10-25T00:08:03Z","2021-01-04T17:06:54Z"
"","2081","Test for Generics class","I create a test class for the Generics class in dropwizard-util.","closed","improvement,","manuel-hegner","2017-06-19T10:30:01Z","2017-06-19T14:43:48Z"
"","1874","jetty 9.4 support","I couldn't find any activity about jetty 9.4 and it seems 1.1.0 release will also be 9.3 based.  Any plans about it?  I'm asking mainly for unix domain socket support, which will probably require some dropwizard changes in order to support it with yaml. Or we can also live with our own ConnectorFactory until the changes are there I suppose.","closed","improvement,","natnan","2017-01-10T15:30:23Z","2017-01-17T17:53:49Z"
"","1611","Can dropwizard be packaged as war?","I cannot seem to find that in the documentation.","closed","","franz-see","2016-06-24T11:21:46Z","2016-06-28T08:19:52Z"
"","1867","dropwizard-testing 1.0.5 (and earlier) JARs from maven don't contain DAOTestRule","I can see that the DAOTestRule.java file (https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DAOTestRule.java) was created on Aug 27 2016 but it's still not part of the latest Nov 2016 JAR on maven. Is this intentional or was this somehow missed?  I can see that there's an example (https://github.com/dropwizard/dropwizard/blob/master/dropwizard-example/src/test/java/com/example/helloworld/db/PersonDAOTest.java) that uses DAOTestRule but this currently doesn't work because dropwizard-testing doesn't contain it.","closed","","shashankchakelam","2016-12-29T11:02:59Z","2016-12-29T13:34:46Z"
"","2182","Content-Encoding: gzip header is not returned","I am using Unirest for making api calls. I used ""Accept-Encoding: gzip"" header as part of my request. However, the response headers do not include ""Content-Encoding: gzip"". Am I doing something wrong here?  `HttpRequest restHttpRequest = Unirest.get(""http://localhost:8080/foo/bar"")             .header(""Accept-Encoding"", ""gzip"")             .queryString(""param1"", ""val1"");     HttpResponse httpResponse = restHttpRequest.asString();     System.out.println(httpResponse.getHeaders().get(""Content-Encoding""));`  Response size is bigger than the default minimumEntitySize. Would appreciate if you can provide any pointers. Thanks!","closed","","kewats","2017-10-23T09:36:40Z","2021-03-24T05:14:14Z"
"","2486","Conflicting guava library on classpath","I am using dropwizard and querydsl and they have conflict because the version of guava library is different and incompatible classes. Please use `maven-shade-plugin` and reallocate the packages `com.guava.common` to `com.querydsl.core.com.google.common` which avoids these problems in many projects and many conflicting dependencies. It is better than removing guava and better than writing own utilities.","closed","","Tibor17","2018-09-08T10:53:31Z","2018-09-08T11:02:38Z"
"","2452","Multiple www-authenticate headers","I am using dropwizard 1.3.4 to manage a double authentications scheme basic+oauth.  ```     AuthFilter basicAuthFilter = new BasicCredentialAuthFilter.Builder()           .setAuthenticator(userAuthenticator)           .setRealm(""my-basic-realm"")           .setPrefix(""Basic"")           .buildAuthFilter();  AuthFilter oauthFilter = new OAuthCredentialAuthFilter.Builder()           .setAuthenticator(userTokenAuthenticator)           .setRealm(""my-oauth-realm"")           .setPrefix(""Bearer"")           .buildAuthFilter();  List filters = Lists.newArrayList(basicAuthFilter, oauthFilter);  environment.jersey().register(new AuthDynamicFeature(new ChainedAuthFilter(filters))); environment.jersey().register(RolesAllowedDynamicFeature.class); environment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class)); ```  when the authentication fails I correctly receive a 401 but the header www-authenticate always contains one challenge (basic or bearer).  I am asking if it is possible to include both basic and bearer or having multiple www-authenticate headers.  Thank you for your time and help!","closed","stale,","Sessa93","2018-08-03T12:11:23Z","2019-08-19T14:01:48Z"
"","1935","Jersey Client does not post form data correctly by default","I am using dropwizard 1.0.6.  I used Jersey Client to send a post request to a server and it gzips the form data without setting proper headers. As a result, the server uses gzipped form data as plain data. When I do setGzipEnabledForRequests(false) it is working correctly.  Sample code ```         WebTarget webTarget = client.target(""http://httpbin.org/post"");         MultivaluedMap formData = new MultivaluedHashMap();         formData.add(""username"", ""guest"");         String response = webTarget.request().post(Entity.form(formData), String.class); ```","closed","","MaxMao","2017-02-21T14:18:26Z","2017-02-22T07:44:52Z"
"","2079","io.dropwizard.jetty.MutableServletContextHandler.requests metrics not accurate for async requests?","I am using dropwizard 1.0.2, and when trying to export some metrics on RESTful request endpoints.  One of the metrics used is io.dropwizard.jetty.MutableServletContextHandler.requests.  The metrics seemed correct for synchronously handled requests. But for requests that are handled asynchronously, the number reported is almost always around 1.5e9 (nano seconds), which is around 1.5 seconds, even if the responses got returned relatively quickly. Is there a way to configure/fix this?  Thanks in advance.","closed","","raynorchenfr","2017-06-16T20:02:59Z","2017-06-20T17:33:29Z"
"","1769","java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getStatus()","I am using Dropwizard 1.0.2 .  resources:  ``` package com.bocom.forward.resources;  import javax.ws.rs.Consumes; import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.Produces; import javax.ws.rs.core.MediaType;  import com.bocom.forward.views.DeviceListView;  @Path(""/devices"") @Produces(MediaType.TEXT_HTML) @Consumes(MediaType.APPLICATION_JSON) public class DeviceInfo {     @GET     public DeviceListView  fetch() {         return  new DeviceListView();     }   } ```  view:  ``` public class DeviceListView extends View {      private final  Map forwardDeviceMap;      private final  Map kafkaMap;      public DeviceListView() {         super(""DeviceDataForwardStatusList.ftl"",StandardCharsets.UTF_8);         this.forwardDeviceMap=ForwardServerZK.getForwardDeviceMap();         this.kafkaMap = KafkaConsumerMap.kafkaMap;     }      public Map getForwardDeviceMap() {         return forwardDeviceMap;     }      public Map getKafkaMap() {         return kafkaMap;     }  } ```  ``` WARN   [08:21:24.175] [dw-397] o.e.j.s.HttpChannel -  //11.136.0.52:9999/devices  java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getStatus()I     at com.codahale.metrics.jetty9.InstrumentedHandler.updateResponses(InstrumentedHandler.java:291)     at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:254)     at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51)     at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:459)     at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68)     at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56)     at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169)     at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)     at org.eclipse.jetty.server.Server.handle(Server.java:524)     at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:319)     at org.eclipse.jetty.server.HttpConnection.onFillable(H ```  `mvn  dependency:tree:`  ``` [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ forwardserverdw --- [INFO] cn.bocom.spzh.its.srv:forwardserverdw:jar:0.0.1 [INFO] +- io.dropwizard:dropwizard-core:jar:1.0.2:compile [INFO] |  +- io.dropwizard:dropwizard-util:jar:1.0.2:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.6:compile [INFO] |  |  +- com.google.guava:guava:jar:19.0:compile [INFO] |  |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile [INFO] |  |  \- joda-time:joda-time:jar:2.9.4:compile [INFO] |  +- io.dropwizard:dropwizard-jackson:jar:1.0.2:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.7.6:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.6:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.7.6:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.7.6:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.7.6:compile [INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.7.6:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.7.6:compile [INFO] |  |  \- ch.qos.logback:logback-classic:jar:1.1.7:compile [INFO] |  +- io.dropwizard:dropwizard-validation:jar:1.0.2:compile [INFO] |  |  +- org.hibernate:hibernate-validator:jar:5.2.4.Final:compile [INFO] |  |  |  +- javax.validation:validation-api:jar:1.1.0.Final:compile [INFO] |  |  |  +- org.jboss.logging:jboss-logging:jar:3.2.1.Final:compile [INFO] |  |  |  \- com.fasterxml:classmate:jar:1.1.0:compile [INFO] |  |  \- org.glassfish:javax.el:jar:3.0.0:compile [INFO] |  +- io.dropwizard:dropwizard-configuration:jar:1.0.2:compile [INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.7.6:compile [INFO] |  |  |  \- org.yaml:snakeyaml:jar:1.15:compile [INFO] |  |  \- org.apache.commons:commons-lang3:jar:3.4:compile [INFO] |  +- io.dropwizard:dropwizard-logging:jar:1.0.2:compile [INFO] |  |  +- io.dropwizard.metrics:metrics-logback:jar:3.1.2:compile [INFO] |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.21:compile [INFO] |  |  +- ch.qos.logback:logback-core:jar:1.1.7:compile [INFO] |  |  +- org.slf4j:log4j-over-slf4j:jar:1.7.21:compile [INFO] |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.21:compile [INFO] |  |  \- org.eclipse.jetty:jetty-util:jar:9.3.9.v20160517:compile [INFO] |  +- io.dropwizard:dropwizard-metrics:jar:1.0.2:compile [INFO] |  +- io.dropwizard:dropwizard-jersey:jar:1.0.2:compile [INFO] |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.23.1:compile [INFO] |  |  |  +- org.glassfish.jersey.core:jersey-common:jar:2.23.1:compile [INFO] |  |  |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.23.1:compile [INFO] |  |  |  |  \- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile [INFO] |  |  |  +- org.glassfish.jersey.core:jersey-client:jar:2.23.1:compile [INFO] |  |  |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile [INFO] |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.23.1:compile [INFO] |  |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile [INFO] |  |  |  +- org.glassfish.hk2:hk2-api:jar:2.4.0-b34:compile [INFO] |  |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.4.0-b34:compile [INFO] |  |  |  |  \- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.4.0-b34:compile [INFO] |  |  |  +- org.glassfish.hk2.external:javax.inject:jar:2.4.0-b34:compile [INFO] |  |  |  \- org.glassfish.hk2:hk2-locator:jar:2.4.0-b34:compile [INFO] |  |  |     \- org.javassist:javassist:jar:3.18.1-GA:compile [INFO] |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.23.1:compile [INFO] |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.23.1:compile [INFO] |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.1.2:compile [INFO] |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.7.6:compile [INFO] |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.7.6:compile [INFO] |  |  |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.7.6:compile [INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.23.1:compile [INFO] |  |  |  \- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.23.1:compile [INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:9.3.9.v20160517:compile [INFO] |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile [INFO] |  |  |  \- org.eclipse.jetty:jetty-io:jar:9.3.9.v20160517:compile [INFO] |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.3.9.v20160517:compile [INFO] |  |  |  \- org.eclipse.jetty:jetty-xml:jar:9.3.9.v20160517:compile [INFO] |  |  \- org.eclipse.jetty:jetty-continuation:jar:9.3.9.v20160517:compile [INFO] |  +- io.dropwizard:dropwizard-servlets:jar:1.0.2:compile [INFO] |  |  \- io.dropwizard.metrics:metrics-annotation:jar:3.1.2:compile [INFO] |  +- io.dropwizard:dropwizard-jetty:jar:1.0.2:compile [INFO] |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.1.2:compile [INFO] |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.3.9.v20160517:compile [INFO] |  |  |  \- org.eclipse.jetty:jetty-security:jar:9.3.9.v20160517:compile [INFO] |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.3.9.v20160517:compile [INFO] |  |  \- org.eclipse.jetty:jetty-http:jar:9.3.9.v20160517:compile [INFO] |  +- io.dropwizard:dropwizard-lifecycle:jar:1.0.2:compile [INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile [INFO] |  +- io.dropwizard.metrics:metrics-jvm:jar:3.1.2:compile [INFO] |  +- io.dropwizard.metrics:metrics-servlets:jar:3.1.2:compile [INFO] |  |  \- io.dropwizard.metrics:metrics-json:jar:3.1.2:compile [INFO] |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.1.2:compile [INFO] |  +- io.dropwizard:dropwizard-request-logging:jar:1.0.2:compile [INFO] |  |  \- ch.qos.logback:logback-access:jar:1.1.7:compile [INFO] |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile [INFO] |  \- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile [INFO] +- io.dropwizard:dropwizard-metrics-graphite:jar:1.0.2:compile [INFO] |  \- io.dropwizard.metrics:metrics-graphite:jar:3.1.2:compile [INFO] +- io.dropwizard:dropwizard-assets:jar:1.0.2:compile [INFO] +- io.dropwizard:dropwizard-views-freemarker:jar:1.0.2:compile [INFO] |  +- io.dropwizard:dropwizard-views:jar:1.0.2:compile [INFO] |  \- org.freemarker:freemarker:jar:2.3.23:compile [INFO] +- org.apache.kafka:kafka-clients:jar:0.8.2.1:compile [INFO] |  +- org.slf4j:slf4j-api:jar:1.7.6:compile [INFO] |  +- net.jpountz.lz4:lz4:jar:1.2.0:compile [INFO] |  \- org.xerial.snappy:snappy-java:jar:1.1.1.6:compile [INFO] +- org.apache.kafka:kafka_2.10:jar:0.8.2.1:compile [INFO] |  +- com.yammer.metrics:metrics-core:jar:2.2.0:compile [INFO] |  +- org.scala-lang:scala-library:jar:2.10.4:compile [INFO] |  +- org.apache.zookeeper:zookeeper:jar:3.4.6:compile [INFO] |  |  +- jline:jline:jar:0.9.94:compile [INFO] |  |  |  \- junit:junit:jar:3.8.1:compile [INFO] |  |  \- io.netty:netty:jar:3.7.0.Final:compile [INFO] |  \- net.sf.jopt-simple:jopt-simple:jar:3.2:compile [INFO] +- com.101tec:zkclient:jar:0.5:compile [INFO] |  \- log4j:log4j:jar:1.2.15:compile [INFO] |     \- javax.mail:mail:jar:1.4:compile [INFO] |        \- javax.activation:activation:jar:1.1:compile [INFO] +- commons-configuration:commons-configuration:jar:1.10:compile [INFO] |  +- commons-lang:commons-lang:jar:2.6:compile [INFO] |  \- commons-logging:commons-logging:jar:1.1.1:compile [INFO] +- commons-beanutils:commons-beanutils:jar:1.9.3:compile [INFO] |  \- commons-collections:commons-collections:jar:3.2.2:compile [INFO] +- commons-dbutils:commons-dbutils:jar:1.6:compile [INFO] +- commons-io:commons-io:jar:2.5:compile [INFO] +- org.apache.httpcomponents:httpclient:jar:4.5.2:compile [INFO] |  +- org.apache.httpcomponents:httpcore:jar:4.4.4:compile [INFO] |  \- commons-codec:commons-codec:jar:1.9:compile [INFO] +- org.apache.httpcomponents:httpmime:jar:4.5.2:compile [INFO] +- com.cloudhopper.proxool:proxool:jar:0.9.1:compile [INFO] |  \- avalon-framework:avalon-framework-api:jar:4.3:compile (version selected from constraint [4.1.5,)) [INFO] |     \- avalon-logkit:avalon-logkit:jar:2.1:compile [INFO] |        +- javax.servlet:servlet-api:jar:2.3:compile [INFO] |        +- geronimo-spec:geronimo-spec-javamail:jar:1.3.1-rc3:compile [INFO] |        \- geronimo-spec:geronimo-spec-jms:jar:1.1-rc4:compile [INFO] +- com.cloudhopper.proxool:proxool-cglib:jar:0.9.1:compile [INFO] +- com.oracle:ojdbc6:jar:11.2.0:compile [INFO] +- it.sauronsoftware.cron4j:cron4j:jar:2.2.5:compile [INFO] +- org.jdom:jdom:jar:1.1.3:compile [INFO] +- com.github.adyliu:zkclient:jar:2.1.1:compile [INFO] \- its-hessian:its-hessian:jar:1.0:system ```","closed","","gogo649","2016-10-08T01:15:37Z","2018-01-08T11:23:59Z"
"","1720","MethodNotFound in Jetty-Server","I am using Dropwizard 1.0 and it looks like the versions listed in the bom are not correct.  Here is the code from   ```         if (!isAsyncSupported()) {             baseRequest.setAsyncSupported(false, null);         }         try {             servlet.service(request, response);         } finally {             baseRequest.setAsyncSupported(asyncSupported, null);         } ```  The problem is that the BOM for dropwizard **1.0** is using jetty-server [9.3.9.v20160517](https://mvnrepository.com/artifact/io.dropwizard/dropwizard-bom/1.0.0)  That version of jetty-server does not have the methods they are trying to use does not have it.  Here is a sample exception  ``` WARN  2016-09-04 04:06:40,677 /0F77FF7D77F74C01A6CFECF56436EDAF/169AD10DA09C44B29805D51A49F1A705 [dw-41] org.eclipse.jetty.servlet.ServletHandler: Error for /lookup/test java.lang.NoSuchMethodError: org.eclipse.jetty.server.Request.setAsyncSupported(ZLjava/lang/String;)V     at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:51)     at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1685)     at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34) ```","closed","","fzakaria","2016-09-04T04:21:04Z","2016-09-04T18:26:49Z"
"","2162","RxClient does not release connections","I am using a RxClient to make async requests but in one usecase I want to make a synchronous request. When doing this the thread seems to never be returned to the pool.   Using metrics I see that leased-connections in the pool is forever growing until it is full.   ``` ""org.apache.http.conn.HttpClientConnectionManager.accountClient.leased-connections"": {             ""value"": 265         } ```  My code below, notice that I am NOT calling rx() on the client:    ``` java RxClient client = new JerseyClientBuilder(environment) .using(config) .buildRx(""accountClient"", RxObservableInvoker.class);  Response response = client.target(uri) .request() .get() ```  Dropwizard 1.1.0","closed","","danpeter","2017-09-25T12:17:11Z","2017-09-25T15:42:34Z"
"","2371","layout doesn't work with syslog appender","I am trying to use the `layout` option for the logging configuration to write json formatted logs to syslog using the `syslog` appender. The layout option works fine with `console` and `file` appender. I could see logs written in json format. But the same is not working for `syslog`. The logs written to syslog are not in json format. I don't get any exception parsing yaml configuration while starting the application that means `layout` can be specified for `syslog` appender. The documentation also doesn't mention any restriction on using `layout` with any particular type of appender.   Below is my configuration:   configuration.yml: ```   appenders:     - type: console       layout:          type: json     - type: file       threshold: INFO       logFormat: ""%-6level [%d{HH:mm:ss.SSS}] [%t] %logger{5} - %X{code} %msg %n""       currentLogFilename: /tmp/application.log       archivedLogFilenamePattern: /tmp/application-%d{yyyy-MM-dd}-%i.log.gz       archivedFileCount: 7       timeZone: UTC       maxFileSize: 10MB       layout:         type: json     - type: syslog       host: localhost       port: 514       facility: local0       threshold: ALL       layout:          type: json ``` Am i missing something here. Is the `layout` option usable only with specific appenders? Is it possible to get syslog to use the `layout` option to write log messages in json format to syslog?  I have included the dependency for `dropwizard-json-logging` in my pom.   Does #2232 adds support for any specific appenders?","closed","","prathamesh13","2018-05-30T04:43:50Z","2018-06-02T10:52:13Z"
"","2078","Logging endpoint/task info and newlines","I am running a service in docker with the splunk logging driver[1]. The new lines that are used during startup to log out the endpoints[2,3] and tasks[4] are corrupting the log processing because of the empty new lines that are padding the lists. It may be an issue with our configuration, but I wanted to put out a feeler to see if anyone else had run into this issue. The issue can be bypassed by changing the log levels to WARN. But I like having the endpoints/tasks logged on startup and will be investigating some other options to keep this functionality. The resolution may involve removing the new lines or adding some whitespace to the empty lines.  [1] https://docs.docker.com/engine/admin/logging/splunk/ [2] https://github.com/dropwizard/dropwizard/blob/v1.1.1/dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java#L126 [3] https://github.com/dropwizard/dropwizard/blob/v1.1.1/dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java#L156 [4] https://github.com/dropwizard/dropwizard/blob/v1.1.1/dropwizard-core/src/main/java/io/dropwizard/setup/AdminEnvironment.java#L62-L74","closed","","mattnelson","2017-06-16T20:00:27Z","2017-06-23T15:53:20Z"
"","1729","Add `characterEncoding` and `useUnicode` to JDBC properties.","I am proposing the addition of these two properties as part of the example because they required in the DW 1.0 app I am currently working on. It is worth noting that the DB is MySQL, so this is potentially only an issue with MySQL implementations. Omitting `characterEncoding` and `useUnicode` does not cause anything to fail but it prevents the app from properly enforcing UTF-8. A simple example includes persisting and retrieving the ‚Ñ¢ symbol.","closed","documentation,","sam-berry","2016-09-16T03:36:48Z","2016-09-19T14:09:22Z"
"","1619","Getting  error java.io.IOException: Broken pipe when streaming for large audio file","I am getting this error when receiving data from large streaming file.  ```  java.io.IOException: Broken pipe ! at sun.nio.ch.FileDispatcherImpl.write0(Native Method) ~[na:1.8.0_60] ! at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) ~[na:1.8.0_60] ! at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) ~[na:1.8.0_60] ! at sun.nio.ch.IOUtil.write(IOUtil.java:65) ~[na:1.8.0_60] ! at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471) ~[na:1.8.0_60] ! at org.eclipse.jetty.io.ChannelEndPoint.flush(ChannelEndPoint.java:170) ~[jetty-io-9.2.13.v20150730.jar:9.2.13.v20150730] ! ... 76 common frames omitted ! Causing: org.eclipse.jetty.io.EofException: null ```  I am using this these version of jersey in pom.xml   ```              org.glassfish.jersey.core             jersey-client             2.22.1                 org.glassfish.jersey.core             jersey-common             2.22.1  ```","closed","","jain0882-zz","2016-07-06T15:38:46Z","2016-08-19T15:11:06Z"
"","1574","Provide a MessageBodyWriter for ValidationErrorMessage","I am getting the following error message:  ``` org.glassfish.jersey.message.internal.MessageBodyProviderNotFoundException: MessageBodyWriter not found for media type=text/html, type=class io.dropwizard.jersey.validation.ValidationErrorMessage, genericType=class io.dropwizard.jersey.validation.ValidationErrorMessage.     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:247) ~[jersey-common-2.22.1.jar:na]     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ~[jersey-common-2.22.1.jar:na]     at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:106) ~[jersey-server-2.22.1.jar:na]     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ~[jersey-common-2.22.1.jar:na]     at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:86) ~[jersey-server-2.22.1.jar:na] ```  Shouldn't Dropwizard provide a `MessageBodyWriter` for this out of the box? Am I missing something?","closed","","cowwoc","2016-05-30T22:19:22Z","2019-03-21T13:39:36Z"
"","2520","No such servlet JerseyServletContainer","I am facing this issue rarely when I start the application on the prod environment after running two or three times it is getting failed to start the server, and then when I restart the application it works.  I have attached the screenshot of the error.  ![dropwizard servelet](https://user-images.githubusercontent.com/16426709/46477526-769b8f80-c808-11e8-9c8e-13028f836785.PNG)  Thanks","closed","","ansarisufiyan777","2018-10-04T13:35:53Z","2018-10-09T12:55:40Z"
"","2204","Enable NullAway errorprone checks","https://github.com/uber/NullAway","closed","improvement,","jplock","2017-11-11T14:25:09Z","2017-11-16T03:11:31Z"
"","2147","Upgrade to Jackson 2.9.1","https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.1","closed","","joschi","2017-09-08T15:13:40Z","2017-09-08T16:47:45Z"
"","2477","https://dropwizard.io has invalid certificate","https://dropwizard.io has invalid certificate (looks like it is a certificate from github.com)  https://www.dropwizard.io works fine.","closed","","kisg","2018-09-01T16:32:23Z","2018-09-04T19:47:07Z"
"","2449","Upgrade to Maven Compiler plugin 3.8.0","https://blog.soebes.de/blog/2018/07/30/apache-maven-compiler-plugin-version-3-dot-8-0-released/","closed","improvement,","joschi","2018-07-30T15:46:04Z","2018-07-30T17:08:33Z"
"","2074","Dropwizard testing documentation is outdated","http://www.dropwizard.io/1.1.0/docs/manual/testing.html#non-junit  The JerseyClient code is incorrect; it looks like this might have been carried forward from an older version of the API.","closed","documentation,","jottinger","2017-06-09T17:29:34Z","2019-02-13T01:50:44Z"
"","1740","Documentation issue for dropwizard 1.0 Validations","http://www.dropwizard.io/1.0.0/docs/manual/validation.html#extending says   > The The method used to determine what status code to return based on violations is ConstraintViolations.determineStatus  However the method `io.dropwizard.validation.ConstraintViolations#determineStatus` no longer exists in 1.0.  Could use some documentation love on what to do here.","closed","documentation,","jmoney","2016-09-24T00:43:53Z","2016-09-26T17:09:10Z"
"","1936","Upgrade to Dropwizard Metrics 3.2.0","http://metrics.dropwizard.io/3.2.0/about/release-notes.html","closed","improvement,","arteam","2017-02-24T16:39:30Z","2017-02-24T19:31:54Z"
"","2544","Upgrade to Hibernate ORM 5.3.7.Final","http://in.relation.to/2018/10/17/hibernate-orm-537-final-out/  Refs https://hibernate.atlassian.net/browse/HHH-12964 Closes #2542","closed","","joschi","2018-11-09T19:25:23Z","2018-11-10T18:31:35Z"
"","1978","Make sure that supported cipher suite is used, but not at the expense of others","HTTP/2 demands that ""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"" is supported. Dropwizard provides for this by _only_ letting users utilise that cipher suite.  However, there are many other HTTP/2 supported cipher suites, which at present Dropwizard does not let people use.  Here, we simply make sure that cipher exists in the supported list.","closed","needs code,","j-baker","2017-03-23T12:30:43Z","2017-08-02T17:58:37Z"
"","2093","Add ServiceUnavailableRetryStrategy to the client","HTTP Client allows you to setup a ServiceUnavailableRetryStrategy to deal with error responses from Origin servers. I'd like to add this to the Dropwizard client  Basically add this to HttpClientBuilder.java ```     public HttpClientBuilder using(ServiceUnavailableRetryStrategy serviceUnavailableRetryStrategy)      {         this.serviceUnavailableRetryStrategy = serviceUnavailableRetryStrategy;         return this;     }      // ... then in createClient       protected ConfiguredCloseableHttpClient createClient(             ... snip ...          if (serviceUnavailableRetryStrategy != null) {             builder.setServiceUnavailableRetryStrategy(serviceUnavailableRetryStrategy);         }   ```  And the same sort of thing in JerseyClientBuilder.","closed","improvement,","stringy05","2017-06-29T12:26:43Z","2017-10-26T16:03:37Z"
"","2149","Dropwizard application 0.9 memory usage?","How to find the memory usage? how much memory does dropwizard consume usually?","closed","","ghost","2017-09-12T09:42:22Z","2017-09-12T09:59:42Z"
"","1946","HTTP/2 Support in dropwizard","How to enable HTTP/2 support in dropwizard? I couldn't find any documentation or reference for to http2 connector.  By default, it's using HTTP/1.1 only.  ``` INFO  [2017-03-03 03:33:49,374] org.eclipse.jetty.server.AbstractConnector: Started application@69c33ea2{SSL,[ssl, http/1.1]}{0.0.0.0:8443} INFO  [2017-03-03 03:33:49,374] org.eclipse.jetty.server.AbstractConnector: Started admin@59e0d521{HTTP/1.1,[http/1.1]}{0.0.0.0:8081} ```   Note: I'm using 1.1.0-rc1 version of dropwizard.","closed","","ramsrib","2017-03-03T03:41:53Z","2017-03-06T12:45:17Z"
"","2510","how to debug in IntelliJ IDEA ?","how to debug in IntelliJ IDEA ? could some provide some info about this? thanks .","closed","","honglou2001","2018-09-30T07:38:34Z","2018-10-21T18:31:03Z"
"","1902","How do I get a host of the current application?","How do I get a host of the current application?  I need full host, port, etc. in one of my services but I could not figure how I would get them in the application?","closed","","yateam","2017-01-29T06:33:59Z","2017-01-30T06:23:43Z"
"","1875","Upgrade Jetty to 9.4.0.v20161208","Hopefully, it's just a version bump.  Resolves #1874.","closed","improvement,","arteam","2017-01-10T16:47:37Z","2017-01-17T18:30:59Z"
"","2169","Remove beta from PMD and checkstyle in CodeClimate config","Hopefully it will fix the build there...","closed","","arteam","2017-10-05T13:40:07Z","2017-10-05T14:53:48Z"
"","2259","Update AbstractDAO to use JPA CriteriaQuery API","Hibernate's Criteria API (org.hibernate.Criteria) was deprecated and the dropwizard's AbstractDAO class was using that API. It also causes logs to be flooded with this warning.  `WARN org.hibernate.orm.deprecation: HHH90000022: Hibernate's legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead`  Is there any plans to refactor AbstractDAO to use JPA Criteria API?","closed","","ramsrib","2018-02-08T02:42:24Z","2019-02-08T03:55:40Z"
"","1846","Do you plan to support hibernate multitenancy?","Hibernate provides support for multitenant application. See [here](http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#multitenacy) I sort of implemented it in my service: I added `@MultiTenantUnitOfWork` annotation which is similar to `@UnitOfWork` except that when it opens sessions it sets a tenant id: `session = sessionFactory.withOptions().tenantIdentifier(tenantId).openSession();` In order to make this work I had to completely rewrite dropwizard-hibernate in my application.   I am interested if you planning to support hibernate multitenancy in dropwizard?","closed","","yateam","2016-12-01T08:29:34Z","2019-02-09T00:13:11Z"
"","2028","Add new criteriaQuery method to avoid hibernate criteria deprecations.","Hibernate deprecated `session.createCriteria()`.  I added a `criteriaQuery()` method as a migration path away from `criteria()`. I considered `createCriteriaUpdate` and `createCriteriaDelete` methods as well, but wasn't sure if they would be wanted. Please let me know your thoughts.","closed","improvement,","lightswitch05","2017-04-26T02:53:13Z","2017-04-27T07:17:07Z"
"","1671","JerseyClient ExecutorService not Shutdown gracefully","Hi:  I am looking at https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/DropwizardExecutorProvider.java  which provides an executor service to Jersey Client for Async Execution. I think that, because of NO-OP implementation of dispose method, any async requests waiting in queue are just killed like that.  It would be good to have an implementation for dispose which calls shutdown and awaitTermination(With Configurable wait time maybe). This will make sure that any async() WebTargets submitted already are given time to complete in case DW Service is being closed/terminated.","closed","bug,","saumitrabhave","2016-08-05T10:09:15Z","2016-08-09T06:07:33Z"
"","2503","How do I get the number of active connections if using jdbi","Hi.  I'm using Dropwizard (latest version) with JDBI 3. My connection pool config is something like this: ```  minSize: 1   maxSize: 3   initialSize: 1 ```  I now want to construct a metric that is getting the number of connections that are currently open. How do I get this number?  Thanks","closed","","orangecoding","2018-09-24T10:31:31Z","2019-02-08T02:57:36Z"
"","1826","Backport of httpCompliance to Release/1.0.x","Hi, what is the ETA for 1.1.0?  I'd very much like to avoid having to drag around a local fork, so how do you guys feel about having the httpCompliance setting backported to 1.0.x?","closed","improvement,","dren-dk","2016-11-16T13:36:15Z","2017-03-09T10:18:51Z"
"","2314","Testing metric presence using ResourceTestRule","Hi, I'm writing an integration test to see if a resource method marked with `@Metered` correctly creates and updates a metric in the `MetricRegistry`. I thought that the code ``` MetricRegistry metrics = new MetricRegistry();  @Rule ResourceTestRule resource = ResourceTestRule.builder()   .addResource(HelloWorldResource())   .addProvider(InstrumentedResourceMethodApplicationListener(metrics)   .build(); ``` would made the trick but that's not true. Any idea how I could do it?","closed","","gmariotti","2018-03-23T12:22:03Z","2018-03-23T12:58:46Z"
"","1706","connectionTimeout on io.dropwizard.client.JerseyClientConfiguration","Hi, I'm running DropWizard 0.9.1 and have recently looked at the Integration Testing (JUnit) example located at this page:  http://www.dropwizard.io/0.9.1/docs/manual/testing.html#id2  My problem is that the `jerseyClient` i get from using `JerseyClientBuilder` defaults to a timeout of 500 ms. This is so short that some of my tests fails.   Looking at `io.dropwizard.client.JerseyClientConfiguration`, I don't see any `connectionTimeout` attribute like in `io.dropwizard.client.HttpClientConfiguration`. Is this on purpose, or could it be updated to contain this attribute?  Cheers, Terje Andersen","closed","","fipp","2016-08-23T10:27:44Z","2016-09-07T15:29:22Z"
"","1962","Load Node dist inside Jetty & Dropwizard","Hi, I have a frontend in angularjs/nodejs, my question is can I load dist inside my dropwizard backend and jetty ? to launch only one server and have only one package","closed","","charbonnier666","2017-03-14T16:06:06Z","2017-03-14T17:32:27Z"
"","2006","io.dropwizard.jetty.MutableServletContextHandler.updateBean","Hi, I am using Dropwizard V1.1.0 ```     compile 'io.dropwizard:dropwizard-core:1.1.0'     compile 'io.dropwizard:dropwizard-client:1.1.0'     compile 'io.dropwizard:dropwizard-forms:1.1.0'     testCompile 'io.dropwizard:dropwizard-testing:1.1.0' ``` I am getting a: No such instance method: ‚Äòvoid io.dropwizard.jetty.MutableServletContextHandler.updateBean (java.lang.Object, java.lang.Object, boolean)  It starts on Environment.java, line 67:  ``` this.servletContext = new MutableServletContextHandler(); ``` That takes to HandleWrapper (of package org.eclipse.jetty.server.handler)  where it tries to execute: ```   updateBean(old,_handler,true); ``` Which does not exist (updateBean(Object, Object) exists)  Somewhere its pulling a different Jetty binary, but I have been trying to figure it out with no results.  If you have an suggestions, or ideas on how to tackle this, it will be greatly appreciated. I am trying to move from DropWizard 0.9.1 to 1.1.0  Thanks in advance","closed","","SenhorCastor","2017-04-12T17:34:49Z","2017-04-12T18:25:40Z"
"","2083","DropwizardClientRule does not support forms","Hi, `DropwizardClientRule` does not support forms.  My test resource class is: ``` @Path(""/"") public class FakeResource {     @POST     @Path(""controllers"")     public Response addController(@FormDataParam(""file"") InputStream is){         ...     } } ``` When I run the test case, an error occursÔºö ``` ERROR [2017-06-22 11:40:15,974] org.glassfish.jersey.internal.Errors: Following issues have been detected:  WARNING: No injection source found for a parameter of type public javax.ws.rs.core.Response ... addControllerjava.io.InputStream) at index 0. ``` I tried adding the `MultiPartBundle` to the FakeApplication initialize method, the problem solved: ```     @Override     public void initialize(Bootstrap bootstrap) {          bootstrap.addBundle(new MultiPartBundle());          super.initialize(bootstrap);     } ```","closed","","pipiliang","2017-06-22T11:46:02Z","2017-06-29T14:07:44Z"
"","2422","Logging MDC variables in jetty request log","Hi,   I want to log some of the attributes from `MDC` into request log. Dropwizard, by default, uses `logback-access` which doesn't support logging `MDC` variables (https://logback.qos.ch/manual/layouts.html#logback-access).  Is there a way to add some custom data(user-info, request params) to request logs?","closed","","simarpreets","2018-07-02T13:22:22Z","2018-07-02T13:31:27Z"
"","2124","DBIHealthCheck depends on DBI implementation rather than its abstraction","Hi, When using DBIHealthCheck it requires DBI as constructor param which makes it possible to init only in place where DBI is created.  When trying to move that to separate method like that  ```     @Nonnull     @EagerLoad     public static HealthCheckRegistry buildHealthChecks(Environment environment, IDBI idbi) throws ClassNotFoundException {         environment.healthChecks().register(""database"", new DBIHealthCheck((DBI) idbi, VALIDATION_QUERY));         return environment.healthChecks();     } ``` its producing error like this ``` Caused by: java.lang.ClassCastException: $IDBI_a3a4209300b4 cannot be cast to org.skife.jdbi.v2.DBI 	at FrontendModule.buildHealthChecks(FrontendModule.java:145) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 	at java.lang.reflect.Method.invoke(Method.java:498) 	at org.apache.tapestry5.ioc.internal.util.MethodInvoker.invoke(MethodInvoker.java:52) 	... 35 more ```  when I changed param type in buildHealthChecks to DBI I get ```  No service implements the interface org.skife.jdbi.v2.DBI ```  IMO solution for this would be to use IDBI in DBIHealthCheck. DBIHealthCheck is only calling open method on DBI which is actually part of IDBI interface. Apart from that it good practice to depend on abstraction rather than implementation.","closed","","smifun","2017-08-04T07:39:10Z","2017-08-10T15:26:58Z"
"","1684","PoolingClientConnectionManager doesn't pick up HTTPS settings","Hi, There is a bug in PoolingHttpClientConnectionManager that ignores the SSL settings : https://java.net/jira/browse/JERSEY-3051  Is there a way of manually picking up the SSL settings with Dropwizard?   Currently I was using:  ``` java  private ClientFactory(JerseyClientBuilder builder) {         PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();         connectionManager.setMaxTotal(100);         connectionManager.setDefaultMaxPerRoute(20);         builder.using(new ApacheConnectorProvider());         builder.withProperty(ApacheClientProperties.CONNECTION_MANAGER, connectionManager);         client = builder.build(clientName);     } ```","closed","","moezubair","2016-08-11T15:42:46Z","2016-08-11T17:22:05Z"
"","1810","DW 1.0.0, leaking connections with Mysql and JDBI","Hi, I've got a stateless restful webservice application which works fine (i.e. the functionality does not throw exceptions) but under some load, it seems to leak connections - one a minute or so. Over time, MySQL finally reaches a connection limit and blocks further connections (then the DW logger throws 'connection pool empty' type messages). I've got both interactive_timeout and wait_timeout set to 30 on the MySQL instance, and am reasonably sure I'm not opening connections (handles) and not closing them. Are there Tomcat connection pool configuration options I should be using to free up connections (and where should they be entered? In the YML file I presume, but it is unclear in what form)  and why are they leaking in the first place? Any suggestions? I'm running on MS Windows servers, and have around 1000 users accessing the DW app servers, with several queries per second. Thanks Chris","closed","","chrischarlton001","2016-11-09T14:36:00Z","2016-11-09T17:18:19Z"
"","2136","enhanced bootstrapping flow documentation","Hi, I created the original document for internal use - but thought of contributing it back to the community. This pull request is just to check you are interestested in this contribution, before I invest extra effort. A concept being used is ""simplified code"" -> showing code, but in a simpler form that is easier to follow.  Work still needed: * Translate two code snippets from kotlin --> java (we use kotlin) * Style and grammar * Some formatting * Add links  I'll need you to: * review the content is correct and accurate / suggest fixes. * grammar review will be appreciated as well, as I'm not a native english speaker.  Just answer on the commit which way you want to go.","closed","documentation,","baronlior","2017-08-24T06:35:03Z","2017-08-25T16:56:20Z"
"","2372","Could not configure template exception handler","Hi, I am using dropwizard 1.0.5 with freemarker for some web pages. As suggested by [Freemarker](https://freemarker.apache.org/docs/pgui_config_errorhandling.html), I am trying to change  template exception handler configuration from **_debug_** to **_rethrow_**. I follow the steps decribed in [Dropwizard-Views configuration](https://www.dropwizard.io/1.0.5/docs/manual/views.html) with different configurations;    ``` views:   .ftl:     template_exception_handler: rethrow ``` ``` views:   .ftl:     templateExceptionHandler: rethrow ``` ``` views:   .ftl:     TemplateExceptionHandler: rethrow ``` Also, I try version 1.3.2 with following configurations; ``` views:   freemarker:     template_exception_handler: rethrow ``` ``` views:   freemarker:     templateExceptionHandler: rethrow ``` ``` views:   freemarker:     TemplateExceptionHandler: rethrow ``` But I am seeing the error on the page as;   > FreeMarker template error (DEBUG mode; use RETHROW in production!)  What should I do to configure this? What am I missing?","closed","","monler","2018-05-30T08:49:57Z","2018-08-31T14:09:11Z"
"","1573","Can't register custom exceptionmapper","Hi, I am using dropwizard 0.9.2 for my REST API. Here is my setup. This is the main app `VehicleService.java`  ``` public void run(VehicleServiceConfiguration vehicleServiceConfiguration, Environment environment) throws Exception {         ConcurrentMap vehicleStore = new ConcurrentHashMap<>();         IVehicleRepository vehicleRepo = new InMemoryVehicleRepository(vehicleStore);         final VehicleResource resource = new VehicleResource(vehicleRepo);         environment.jersey().register(new VehicleServiceExceptionMapper());         environment.jersey().register(resource);     } ```  So I am registering a `VehicleServiceExceptionMapper` which looks like this:  ``` @Provider public class VehicleServiceExceptionMapper implements ExceptionMapper {     public Response toResponse(VehicleServiceException exception) {         RuntimeException ex = exception.get();         if (ex instanceof VehicleNotFoundException) {             VehicleNotFoundException vnfe = (VehicleNotFoundException) ex;             String responseType;             if (vnfe.getType() == ResponseType.JSON) {                 responseType = ""text/json"";             } else {                 responseType = ""text/xml"";             }             return Response.status(404).entity(vnfe.getMessage()).type(responseType).build();         }         return Response.status(500).entity(exception.getMessage()).type(""text/json"").build();     } }     ```  and I read other similar issues here on github and found out i need to disable the default exception mappers in my `config.yaml` like:  ``` server:   registerDefaultExceptionMappers: false ```  so after all this setup, I still don't see my exception mapper being called for `VehicleServiceExceptions`. Here is how I am throwing them: in `VehicleResource.java`  ``` @PUT     @Consumes(MediaType.APPLICATION_JSON)     public void updateJson(VehicleJson vehicle) {         try {             repository.update(new Vehicle(vehicle));         } catch (NoSuchElementException ex) {             throw new VehicleNotFoundException(""vehicle id "" + vehicle.getId() + "" doesn't exist"", ResponseType.JSON);         }     } ```  I tried adding the default exception mappers back in. When I do that, the `LoggingExceptionMapper` catches my exception and converts it to a default response. My code is here: [https://github.com/tanviapte/VehicleService](url) From what I see this looks like an issue. I'd be happy to help fix it if there is one. Has anyone run in to this? Is there a known solution to this problem?","closed","","tanviapte","2016-05-30T02:23:35Z","2016-08-29T21:18:36Z"
"","2047","maven-shade-plugin has detected that some .class files are present in two or more JARs.","Hi,  when running Dropwizard 1.1.0 without any other dependencies I get   ``` [WARNING] javax.el-2.2.4.jar, javax.el-3.0.0.jar define 74 overlappping classes: [WARNING]   - com.sun.el.lang.ExpressionBuilder$NodeSoftReference [WARNING]   - com.sun.el.parser.AstDiv [WARNING]   - com.sun.el.parser.ELParserTokenManager [WARNING]   - com.sun.el.parser.JJTELParserState [WARNING]   - com.sun.el.MethodExpressionImpl [WARNING]   - com.sun.el.parser.AstDotSuffix [WARNING]   - com.sun.el.lang.FunctionMapperImpl$Function [WARNING]   - com.sun.el.parser.AstChoice [WARNING]   - com.sun.el.parser.AstOr [WARNING]   - com.sun.el.parser.AstGreaterThan [WARNING]   - 64 more... [WARNING] javax.el-api-2.2.4.jar, javax.el-3.0.0.jar define 31 overlappping classes: [WARNING]   - javax.el.ELException [WARNING]   - javax.el.CompositeELResolver [WARNING]   - javax.el.MethodInfo [WARNING]   - javax.el.BeanELResolver$SoftConcurrentHashMap [WARNING]   - javax.el.ELContext [WARNING]   - javax.el.ELContextListener [WARNING]   - javax.el.VariableMapper [WARNING]   - javax.el.ValueReference [WARNING]   - javax.el.CompositeELResolver$CompositeIterator [WARNING]   - javax.el.ResourceBundleELResolver [WARNING]   - 21 more... [WARNING] maven-shade-plugin has detected that some .class files [WARNING] are present in two or more JARs. When this happens, only [WARNING] one single version of the class is copied in the uberjar. [WARNING] Usually this is not harmful and you can skeep these [WARNING] warnings, otherwise try to manually exclude artifacts [WARNING] based on mvn dependency:tree -Ddetail=true and the above [WARNING] output [WARNING] See http://docs.codehaus.org/display/MAVENUSER/Shade+Plugin ```  when building the project.  regards","closed","","SimonsUnikaNamn","2017-05-08T07:49:11Z","2017-06-20T13:26:50Z"
"","1809","Improve the exploitation of EnvironmentCommand for user-defined Commands","Hi,  When one has defined an `EnvironmentCommand`, upon execution, some information is logged by the `DefaultServerFactory` even though this information actually pertains to the `ServerCommand`: ``` INFO  [2016-11-09 09:58:20,660] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: / INFO  [2016-11-09 09:58:20,660] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: / ```  It would be better if it was only logged when using the `ServerCommand` so as not to pollute user defined commands output.","closed","stale,","victornoel","2016-11-09T10:02:42Z","2019-08-19T16:00:42Z"
"","2044","No error reported, but  ""RuntimeExecutorsBinder$BackgroundSchedulerLiteral"" message ends execution","Hi,  Upgrading from DW 0.8.4 to 1.1.0-1, I followed the dropwizard/wiki/Upgrade-guides. On launch, all resources load cleanly and other startup activities log as expected, but the final three lines are: ``` INFO       [15:36:49.052] [main] o.e.j.s.AbstractConnector -  Started application@1178369d{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}  INFO       [15:36:49.053] [main] o.e.j.s.AbstractConnector -  Started admin@2313de2a{HTTP/1.1,[http/1.1]}{0.0.0.0:8081}  org/glassfish/jersey/server/internal/RuntimeExecutorsBinder$BackgroundSchedulerLiteral ``` The app has terminated. What is this last line from jersey trying to tell me? Can I extract more detailed logging to find the error? The end of the 8.4 startup log looked like this:  ```  INFO       [16:17:22.442] [main] o.e.j.s.h.ContextHandler -  Started i.d.j.MutableServletContextHandler@4d527116{/,null,AVAILABLE}  INFO       [16:17:22.452] [main] o.e.j.s.ServerConnector -  Started application@5e1f3c74{HTTP/1.1}{0.0.0.0:8080}  INFO       [16:17:22.453] [main] o.e.j.s.ServerConnector -  Started admin@1e94fe1d{HTTP/1.1}{0.0.0.0:8081}  INFO       [16:17:22.453] [main] o.e.j.s.Server -  Started @43754ms  ```","closed","","dbaronster","2017-05-03T21:30:04Z","2017-05-04T18:51:06Z"
"","1561","#1278 pull request for FileAppenderFactory","Hi,  this pull request is with regards to:   FileAppenderFactory not valid for null currentLogFilename #1278  First time pull request, let me know if there is something I forgot.   This fix adds:  - New validation based on the archived configuration to allow for null currentFileNames in case one wants to use the rolling policies file policy instead  - Tests to assure that validation works and the rolling policy's filename is used instead.","closed","","pandaadb","2016-05-26T12:39:25Z","2016-05-26T17:00:03Z"
"","1750","AssetBundle does not handle very large files + streaming","Hi,  My usecase: I wanted to have some large files to be accessible from the `AssetServlet`. For this, I added a location to my classpath so I could treat them as resources. In a later version I simply copied the `AssetServlet` and overwrote the `loadAsset` method to load the files straight from the file system.  I found a few issues with the servlet:  - The bundle does not handle very large files (well). It loads them into memory and access the byte array directly. With very large files and small heap, I believe this will cause memory issues. The Asset should probably use streaming instead of loading assets into memory.  - The bundle does not handle large files with range requests. The range requests are designed to only use integer values, so any range offset > MAX_INT will cause in a `NumberFormatException`.  - The `AssetServlet` makes the loadAsset method private. This was a bit annoying for me since I had to copy/paste the bundle to load the assets differently (e.g. not from the classpath). It would be nice if this could be visible so once could simply extend the Servlet and load the assets in whichever way. - the `ByteRange` class does not handle offset > MAX_INT.   For other reasons I had to switch to a jersey-resource, but essentially I added some code to make this possible:  - I made a copy of `ByteRange` that uses long values.  - I added a helper method that splits a `ByteRange` that handles > MAX_INT into pairs of (offset,length) chunks. This could probably also be handled by splitting it into multiple `ByteRange` objects instead. This is because java NIO restricts memory mapped files to MAX_INT as well and bigger chunks have to be read one-by-one and written into the output stream.   I don't know if the `AssetServlet` is designed in this way for a reason I am missing (possibly not wanting to access big resources as assets?) If so, please correct me and close the issue :) Otherwise, I'd be happy to try and create a pull request adding my code.   Regards,  Artur","closed","stale,","pandaadb","2016-09-28T16:22:26Z","2019-09-03T00:00:54Z"
"","2308","dropwizard-announce list?","Hi,  It would be great if there was a dropwizard-announce list that we could use to get a notification of new releases etc.  (I'm aware of dropwizard-user)  Thanks","closed","","willp-bl","2018-03-16T10:34:10Z","2018-03-16T11:20:32Z"
"","2245","Custom messages in constraint validators are incorrectly cached","Hi,  It seems DropWizard caches the message of validators but does not correctly invalidate cache. Take the following example:  ```java public class SomeService extends Application {      public static void main(final String[] args) throws Exception {     new SomeService().run(args);   }    @Override   public void run(final SomeServiceConfiguration configuration, final Environment environment) throws Exception {     environment.jersey().register(new SomeResource());   } } ```  ```java @Path(""/something"") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public class SomeResource {    public SomeResource() {}    @PUT   @Path(""/"")   public Something something(@NotNull @Valid Something something) {     return something;   } } ```  ```java import javax.validation.constraints.Min;  public class Something {    public int getNumber() {     return number;   }    public void setNumber(final int number) {     this.number = number;   }    @Min(value = 42, message = ""The value ${validatedValue} is less then {value}, you are wrong."")   public int number; } ```  Now sending something like `{ ""number"": 1 }` will great me with a 422 (unprocessable entity) with the error:  ```json {     ""errors"": [         ""number The value 1 is less then 42, you are wrong.""     ] } ```  Awesome so far, but, when sending another body to this endpoint, for example `{ ""number"": 2 }` it will keep greeting me with the old message (containing the number 1).  It seems to be comparable to [this issue](https://github.com/dropwizard/dropwizard/issues/2090), but I fail to see how this is not a bug?  I'm using Dropwizard 1.2.1, but have detected this problem over a year ago in older versions of DropWizard as well.","closed","","peterklijn","2018-01-18T12:56:31Z","2018-01-18T23:14:20Z"
"","2388","Hibernate: DataSourceFactory dynamic passwords","Hi,  I'm looking at using rotation passwords for database connection. Currently the database password is hardcoded in the config.yml. Can someone point me in the right direction so I can make this rotating ?","closed","","DrMattFaulkner","2018-06-12T16:03:10Z","2018-09-24T21:42:00Z"
"","2485","NoClassDefFoundError: com/google/common/util/concurrent/FutureFallback","Hi,  I'm having trouble upgrading to later versions of Dropwizard. The error I'm getting is:  NoClassDefFoundError: com/google/common/util/concurrent/FutureFallback   I can see that the class has been deprecated, but what version of Guava is Dropwizard using? My pom configuration currently looks like this:  `   io.dropwizard   dropwizard-core   1.3.5     io.dropwizard   dropwizard-views-freemarker     io.dropwizard   dropwizard-auth `","closed","","james-millner","2018-09-07T09:17:18Z","2018-09-10T08:00:03Z"
"","1707","Relative logfile location changed in 1.0","Hi,  I recently upgraded a project from 0.9.3 to 1.0, and noticed some odd behaviour in terms of request logging. Previously, given an absolute path, logs would be written to a location based on the location of the JAR on disk. For instance, if I dumped my JAR in `/var/apps/foo`, and my logfile location was `logs/foo.log`, then I could expect my log file - on disk - to appear at `/var/apps/foo/logs/foo.log`.  With 1.0, it appears that the log files are created relative to the location from where the JVM process is started. This particular project uses Upstart to manage the running of the application, and the JVM process is started from inside Upstart. Therefore, the log file gets created relative to the Upstart log path, at `/var/log/upstart/foo.log`.  I've not yet fully worked out why this is, but I imagine the change might be due to a downstream dependency change. Any pointers to how to revert this back to the previous behaviour are welcome.","closed","","ajlanghorn","2016-08-23T17:19:05Z","2016-08-27T03:54:58Z"
"","1839","Base AssetServlet on Jetty's DefaultServlet?","Hi,  I noticed some issues about the `AssetServlet`'s missing functionalities (e.g., #1750) and myself was wondering how to activate the exploitation of pre-gzipped assets as handled by Jetty's `DefaultServlet` (instead of doing on the fly gzipping).  I was wondering if it wouldn't make sense to base `AssetServlet`'s on `DefaultServlet` directly‚Ä¶ I have no idea how hard it would be, but for sure people would enjoy the extra functionalities it provides!","closed","stale,","victornoel","2016-11-24T14:11:03Z","2019-08-19T16:00:41Z"
"","1844","The polymorphic auth feature SHOULD NOT be used with any other AuthDynamicFeature. Doing so may have undesired effects.","Hi,  I notice that there's one line in dropwizard doc *The polymorphic auth feature SHOULD NOT be used with any other AuthDynamicFeature. Doing so may have undesired effects.*  Are there any plans to support the coexistence of polymorphic and other dynamic feature? I have a use case, let's say, I have three auth filters, A1, A2 and B.   A1 and A2 are supposed to be chained to protect some resources with principal A,  B is used to protect other resources with principal B.  I'm using a chained auth filter (let's call it A) to register A1 and A2, then using polymorphic auth feature to register A and B. Is that the right way to do it?   Thanks, hw","closed","","huaweigu","2016-11-29T20:10:22Z","2016-11-29T21:29:36Z"
"","1806","UnitOfWorkApplicationListener doesn't seem to work with sub-resources","Hi,  I have this kind of resource definition: ```java @Singleton @Path(""/workspaces"") public class WorkspacesResource {      @POST     @Consumes(MediaType.APPLICATION_JSON)     @Produces(MediaType.APPLICATION_JSON)     @UnitOfWork     public Workspace create(NewWorkspace ws, @Pac4JProfile CockpitProfile profile) {         WorkspacesDAO.DbWorkspace w = workspaces.create(ws.name, profile.getUser());          return new Workspace(Long.toString(w.getId()), w.getName(),                 w.getUsers().stream().map(UsersDAO::username).toArray(String[]::new));     }      @Path(""/{wsId}"")     public Class workspaceResource() {         return WorkspaceResource.class;     }      @Singleton     public static class WorkspaceResource {          @GET         @Produces(MediaType.APPLICATION_JSON)         @UnitOfWork(readOnly = true, transactional = false)         public WorkspaceTree get(@PathParam(""wsId"") long wsId, @Pac4JProfile CockpitProfile profile) {             DbWorkspace w = getWorkspace(wsId, profile);              return new WorkspaceTree(Long.toString(w.getId()), w.getName());          }          @Path(""/buses"")         public Class getBuses() {             return BusesResource.class;         }     } } ```  And while the `UnitOfWork` annotations on `WorkspacesResource`'s methods initialise the `Session` as needed, the annotations on `WorkspaceResource` do not! I checked in debug what happens inside `UnitOfWorkApplicationListener.registerUnitOfWorkAnnotations(ResourceMethod)` and it does seem that the method is registered as it should for the sub-resources!  In case it is a bug, would you have a workaround for this until it is fixed? Thanks :)","closed","bug,","victornoel","2016-11-08T15:52:48Z","2017-03-14T18:08:23Z"
"","1579","Custom Auth configuration for different APIs","Hi,  I have few APIs which are authenticated by BasicAuth and some by Bearer token, currently I am using a ChainedAuthFilter and annotating my resource method with @Auth annotation, and the auth is enabled, but for all the APIs both the types of Auth (Basic & Bearer) are enabled, I want to restrict APIs to use only a specific type of Authentication mechanism. I am thinking to create a custom annotation say @BasicAuth which when applied to a resource will enable basic auth, this would require changes in the AuthDynamicFeature","closed","","vivekkothari","2016-06-01T18:29:58Z","2016-07-20T05:21:32Z"
"","1953","DropwizardConfiguredValidator wrongly calls an annotated Resource method","Hi,  I have a resource with the following defined in it: ```     @GET     @Produces(MediaType.APPLICATION_JSON + "";qs=1"")     @Valid     public WorkspaceFullContent get() {         ...     } ```  And I don't know why, when a request arrives for another annotated method of this resource, DropwizardConfiguredValidator decides to call `get()`!  Important points:  - If I rename it with anything that does not start with `get` everything is fine.  - If I¬†remove the `@Valid` annotation, then it works.  I suppose there is something in JAX-RS about validating a resource before executing one of its method, but I'm not sure it is expected that JAX-RS annotated should be considered as getters on the resource‚Ä¶  An exception (caused by my code in the `get()` resource method) is following, so that you can see where this happens exactly: ``` WARN  [2017-03-09 12:05:48,749] org.glassfish.jersey.server.validation.internal.ValidationExceptionMapper: Unexpected Bean Validation problem. ! javax.ws.rs.WebApplicationException: HTTP 403 Forbidden ! at org.ow2.petals.cockpit.server.resources.WorkspaceResource.checkAccess(WorkspaceResource.java:100) ! at org.ow2.petals.cockpit.server.resources.WorkspaceResource.lambda$0(WorkspaceResource.java:110) ! at org.jooq.impl.DefaultDSLContext.lambda$transactionResult0$0(DefaultDSLContext.java:468) ! at org.jooq.impl.Tools$10$1.block(Tools.java:3291) ! at java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3323) ! at org.jooq.impl.Tools$10.get(Tools.java:3288) ! at org.jooq.impl.DefaultDSLContext.transactionResult0(DefaultDSLContext.java:505) ! at org.jooq.impl.DefaultDSLContext.transactionResult(DefaultDSLContext.java:438) ! at org.ow2.petals.cockpit.server.resources.WorkspaceResource.get(WorkspaceResource.java:108) ! ... 40 common frames omitted ! Causing: java.lang.reflect.InvocationTargetException: null ! at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ! at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ! at java.lang.reflect.Method.invoke(Method.java:498) ! at org.hibernate.validator.internal.util.ReflectionHelper.getValue(ReflectionHelper.java:245) ! ... 35 common frames omitted ! Causing: javax.validation.ValidationException: HV000090: Unable to access get. ! at org.hibernate.validator.internal.util.ReflectionHelper.getValue(ReflectionHelper.java:251) ! at org.hibernate.validator.internal.engine.ValidatorImpl.getValue(ValidatorImpl.java:1714) ! at org.hibernate.validator.internal.engine.ValidatorImpl.getValue(ValidatorImpl.java:1685) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:647) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:416) ! at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:205) ! at io.dropwizard.jersey.validation.DropwizardConfiguredValidator.validate(DropwizardConfiguredValidator.java:112) ! at io.dropwizard.jersey.validation.DropwizardConfiguredValidator.validateResourceAndInputParams(DropwizardConfiguredValidator.java:42) ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:134) ! at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:205) ! at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99) ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389) ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347) ! at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102) ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) ! at org.glassfish.grizzly.servlet.FilterChainImpl.doFilter(FilterChainImpl.java:147) ! at org.glassfish.grizzly.servlet.FilterChainImpl.invokeFilterChain(FilterChainImpl.java:106) ! at org.glassfish.grizzly.servlet.ServletHandler.doServletService(ServletHandler.java:224) ! at org.glassfish.grizzly.servlet.ServletHandler.service(ServletHandler.java:173) ! at org.glassfish.grizzly.http.server.HttpHandler$1.run(HttpHandler.java:224) ! at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:593) ! at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:573) ! at java.lang.Thread.run(Thread.java:745) ```","closed","","victornoel","2017-03-09T11:06:34Z","2017-03-09T13:39:05Z"
"","1744","@Context for HttpServletRequest in Features not injected with ResourceTestRule","Hi,  I am trying to use `ResourceTestRule` as following:  ```     @ClassRule     public static final ResourceTestRule resources = ResourceTestRule.builder()             .setTestContainerFactory(new JettyTestContainerFactory()).addResource(new UserSession())             .addProvider(pac4jFeature()).build(); ```  With `pac4jFeature()` returning a `Feature` that registers two `Feature`s, and one of these expects `HttpServletRequest` to be injected via `@Context` annotation. It works perfectly when executing dropwizard normally but not when executing the test.  I think it should work and I found some SO thread discussing it with solutions that resembles a lot what is implemented in `ResourceTestRule`, but maybe there is small differences I can't see [here](http://stackoverflow.com/questions/29386360/jersey2-unit-testing-httpservletrequest-is-null) and [here](http://stackoverflow.com/questions/17973277/problems-running-jerseytest-when-dealing-with-httpservletresponse).","closed","","victornoel","2016-09-27T12:02:51Z","2016-09-27T13:14:01Z"
"","1609","@Auth protects the resource but the user is null","Hi,  I am having some issues with the @Auth User user returning null instead of the value which is given in the Authenticator.   I have tracked it down to   ParameterValueHelper.getParameterValues which finds a parameter but returns null.   I am able to protect the resource by checking against a valid token in the authenticator but I am not able to retrieve the user in the resource.  Hope this makes sense  regards","closed","","SimonsUnikaNamn","2016-06-23T13:10:20Z","2017-02-03T11:30:14Z"
"","1576","Dropwizard config validation prints attribute name instead of JsonProperty alias","Hi,  happens with happens Dropwizard 1.0.0-RC2.  When I have a config property, e.g.  ``` java @NotNull @JsonProperty(""foo"") private String baz; ```  and the config file does not include `foo`, I get a validation error telling me that `baz` is missing.  This confuses users when e.g. the documentation only contains the aliased property names.  I guess this happens because the validation doesn't know anything about the alias from the `JsonProperty` annotation.","closed","stale,","msteinhoff","2016-05-31T20:14:29Z","2019-09-03T00:00:58Z"
"","2120","Jackson dependency needs to be updated from 2.8.9 to 2.9.0","Hi,  As confirmed in this https://github.com/FasterXML/jackson-modules-java8/issues/33, Jackson 2.8.9 has an error, which is fixed in 2.9.0. Can you confirm whether this will be fixed in a new release of dropwizard soon?  Thanks, Hugh","closed","bug,","hugh-emerson","2017-08-02T16:56:15Z","2017-08-24T08:10:07Z"
"","1630","@Context or @Session injection not working in ContainerRequestFilter","Hi,  According to Jersey people, this (at least with `@Context`) should be supported since Jersey 2.4 (see [JERSEY-1960](https://java.net/jira/browse/JERSEY-1960) but I'm trying with dropwizard 0.9.3 and and the context simply does not get injected. I also tried with the dropwizard's `@Session` annotation but it's the same.   Is that normal or is there a bug somewhere?  Note: my filter is registered via `AuthDynamicFeature` (because it's an alternative authentication filter based on the content session, maybe it's not the best way to do that?).   Thanks!","closed","","victornoel","2016-07-11T13:45:33Z","2020-05-20T20:00:18Z"
"","2524","KeepAlive in Dropwizard Configuration","Hi! We are using Dropwizard 1.3.5.  First let me explain our current setup. We are using Dropwizard to configure an HTTP client used to send requests the an AWS ELB. The ELB then sends requests to our database instances.  Our ELB idle timeout is 60 seconds. The ELB responds to the client request with a `Connection: Keep-Alive` header but does not send a `keep-alive:...` header. In other words **the ELB expects the client to keep connections alive indefinitely until the ELB decides to terminate the connections**.  In the Dropwizard configuration we can only set the keep alive duration to 0 or greater. Dropwizard also overrides the `DefaultConnectionReuseStrategy` such that we can never fall into this case in the Apache HttpClient: https://github.com/apache/httpcomponents-client/blob/6f4550ff977a8f497822a17115572dcdb6e715b6/httpclient/src/main/java/org/apache/http/impl/conn/BasicHttpClientConnectionManager.java#L301. That case is the case that allows connections to be kept alive indefinitely.  It seems like a bug that we cannot create persistent connections using any keepAlive setting in Dropwizard. Is there a workaround or fix for this issue?","closed","stale,","nirajpatel","2018-10-10T05:20:55Z","2019-08-19T14:01:40Z"
"","1873","Feature Request: Support logging via syslog unix socket","Hi! I'm working on deploying an application that's using Dropwizard and am interested if it's possible for Dropwizard to support logging to a syslog unix socket (specifically it'd be `/dev/log`). I noticed in the docs here: http://www.dropwizard.io/1.0.5/docs/manual/core.html#syslog-logging that logging to a unix socket isn't support: ``` Because Java doesn‚Äôt use the native syslog bindings, your syslog server must have an open network socket. ```  Is this a strict limitation within Java? Or, would this be something Dropwizard could implement and simply hasn't based on need? Happy to provide any additional information that might help!","closed","","jaredledvina","2017-01-09T21:21:46Z","2017-01-10T08:20:43Z"
"","2348","Custom ExceptionMapper for AuthorizationExceptions is not working","Hi!  I'm using Dropwizard 1.2.4 and I have an ExceptionMapper for AuthorizationException, it's the first thing I register in Jersey, but whenever I need to throw and AuthenticationException, the mapper gets bypassed.  What am I doing wrong? Here follows the configurations and classes:  (config.yml)  server:   registerDefaultExceptionMappers: false  (ExceptionMapper)  ``` @Provider public class AuthenticationExceptionMapper implements ExceptionMapper { 	@Override 	public Response toResponse(AuthenticationException e) { 		// returns my custom Response (never happens) 	} } ```  (Authentication)  ``` @Override public Optional authenticate(String token) throws AuthenticationException { 	try { 		// my code to authenticate the user 	} catch (Exception e) { 		// my code to check the exception 		if (condition) { 			throw new AuthenticationException(message, e); 		} 	}  } ```  (Registration in Jersey)  ``` public void register(Environment environment) { 	Authenticator auth = new MyAuthenticator(); 	Authorizer authorizer = new MyAuthorizer(); 	 	OAuthCredentialAuthFilter filter = new OAuthCredentialAuthFilter 		.Builder() 		.setAuthenticator(auth) 		.setAuthorizer(authorizer) 		.setPrefix(""Bearer"") 		.buildAuthFilter(); 		 	AuthenticationExceptionMapper exceptionMapper = new AuthenticationExceptionMapper(); 	AuthDynamicFeature authDynamicFeature = new AuthDynamicFeature(filter); 		 	JerseyEnvironment jersey = environment.jersey(); 	jersey.register(exceptionMapper); 	jersey.register(authDynamicFeature); 	jersey.register(RolesAllowedDynamicFeature.class); 		 	// registers resources and health checks } ```","closed","","Rafael-Simonelli","2018-05-07T14:03:38Z","2018-05-07T16:11:14Z"
"","1990","Application start fails due to ""java.lang.ClassCastException: io.dropwizard.util.Size cannot be cast to java.util.Optional""","Hi!  Has anyone seen this error already? I am using Dropwizard 1.1.0. It happens while validating some fields (e.g. `inputBufferSize` field) in `io.dropwizard.jetty.HttpConnectorFactory` even if I do not specify a `server` block in my configuration YAML, so the default values are used.  ``` java.lang.ClassCastException: io.dropwizard.util.Size cannot be cast to java.util.Optional 	at org.hibernate.validator.internal.engine.valuehandling.OptionalValueUnwrapper.handleValidatedValue(OptionalValueUnwrapper.java:20) 	at org.hibernate.validator.internal.engine.ValueContext.getCurrentValidatedValue(ValueContext.java:121) 	at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:110) 	at org.hibernate.validator.internal.engine.constraintvalidation.ConstraintTree.validateConstraints(ConstraintTree.java:87) 	at org.hibernate.validator.internal.metadata.core.MetaConstraint.validateConstraint(MetaConstraint.java:73) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateMetaConstraint(ValidatorImpl.java:620) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraint(ValidatorImpl.java:583) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForSingleDefaultGroupElement(ValidatorImpl.java:527) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForDefaultGroup(ValidatorImpl.java:495) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateConstraintsForCurrentGroup(ValidatorImpl.java:460) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:410) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:761) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:684) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:419) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraint(ValidatorImpl.java:761) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateCascadedConstraints(ValidatorImpl.java:684) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validateInContext(ValidatorImpl.java:419) 	at org.hibernate.validator.internal.engine.ValidatorImpl.validate(ValidatorImpl.java:207) 	at io.dropwizard.configuration.BaseConfigurationFactory.validate(BaseConfigurationFactory.java:237) 	at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:129) 	at io.dropwizard.configuration.BaseConfigurationFactory.build(BaseConfigurationFactory.java:92) 	at io.dropwizard.cli.ConfiguredCommand.parseConfiguration(ConfiguredCommand.java:124) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:72) 	at io.dropwizard.cli.Cli.run(Cli.java:74) 	at io.dropwizard.Application.run(Application.java:89) ```  The same also occurs sometimes for `io.dropwizard.util.Duration` (e.g. `idleTimeout` field).  Best regards Maksym","closed","blocked,","maksymgendin","2017-03-30T12:33:02Z","2018-03-12T09:36:40Z"
"","1590","+ take the tcp backlog from OS","Hi there.    I've noticed that the acceptQueueSize of the http connector, does not take the OS setting as detailed in the documentation:  http://www.dropwizard.io/0.9.2/docs/manual/configuration.html  ``` acceptQueueSize (OS default)    The size of the TCP/IP accept queue for the listening socket. ```  Meaning that the tcp backlog on the socket isn't that of the OS setting (somaxcon).  When you do not specify the `acceptQueueSize` on the `ServerConnector`, Jetty is reverting to the default JDK setting as set in the `java.net.ServerSocket`, example (jdk8 - I check jdk6 has the same default of 50):  ```     public ServerSocket(int port, int backlog, InetAddress bindAddr) throws IOException {         setImpl();         if (port < 0 || port > 0xFFFF)             throw new IllegalArgumentException(                        ""Port value out of range: "" + port);         if (backlog < 1)           backlog = 50;         try {             bind(new InetSocketAddress(bindAddr, port), backlog);         } catch(SecurityException e) {             close();             throw e;         } catch(IOException e) {             close();             throw e;         }     }  ```  This is currently the case for our dropwizard apps in production (I performed an strace to 100% check this was the case - `strace -e trace=network -f`  - an `ss -lt` will also show it you)  ``` [pid  9831] bind(56, {sa_family=AF_INET6, sin6_port=htons(6000), inet_pton(AF_INET6, ""::"", &sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = 0 [pid  9831] listen(56, 50)  ```  This pull requests uses the same logic that Netty uses, to read the somaxconn setting from the environment, and set the `acceptQueueSize` to the OS value if readable.  or the defaults of 128 for *nix systems and 200 for windows.  Let me know if you need more information. thanks /dom","closed","improvement,","tootedom","2016-06-09T12:59:15Z","2016-06-09T15:26:22Z"
"","2064","How to disable Resource Logging","Hi There,  Using DropWizard in current project, good job guys, works like a charm.  I scanned documentation and all available info online a could not figure out how to turn off logging for only one particular logger. The one which produces following line  0:0:0:0:0:0:0:1 - - [22/May/2017:20:41:19 +0000] ""GET /carrier/boardingPasses?airport=ATL√ótamp=2017-05-08T18%3A32%3A58.987Z&frequentFlyerNumber=1000000000 HTTP/1.1"" 404 43 ""-"" ""PostmanRuntime/3.0.11-hotfix.2"" 2362   It contains Personal Identifiable Information and for security compliance I'm not allowed to log it. It would be fine if I did not need any logs but that is not the case.   Thank you!","closed","","ruslander","2017-05-22T20:58:53Z","2017-06-28T12:06:24Z"
"","1595","Could not resolve type id 'file' into a subtype of [simple type, class io.dropwizard.logging.AppenderFactory]","Hi I am using Dropwizard 0.7.1 and facing below issue on production environment:  ``` Failed to parse configuration at: logging.appenders; Could not resolve type id 'file' into a subtype of [simple type, class io.dropwizard.logging.AppenderFactory] ```  The yaml I am using is   ``` logging:   level: INFO   loggers:       com.flipkart.apl: INFO   appenders:     - type: file       threshold: ALL       logFormat: ""%-5p [%d{ISO8601}] [%X{reqId} %X{txnId}] %replace(%c: %m){'\n', '\n '}%n%replace(%ex){'(?m)^(.)',' $1'}%nopex""       currentLogFilename: /var/log/fk-apl-europa/europa.log       archivedLogFilenamePattern: /var/log/europa%d{yyyy-MM-dd-HH}-%i.log.gz       archivedFileCount: 5     - type: console       logFormat: ""%-5p [%d{ISO8601}] [%X{reqId} %X{txnId}] %c: %m\n%ex""       threshold: INFO ```  The pom.xml which I am using is :  ```             io.dropwizard       dropwizard-core       0.7.1                  io.dropwizard       dropwizard-hibernate       0.7.1                  org.apache.kafka       kafka-clients       0.8.2.0                  com.googlecode.json-simple       json-simple       1.1                  com.restbus       dropwizard-hibernate-plugin       1.1.1                           javax.ws.rs           javax.ws.rs-api                             com.sun.jersey           jersey-core                             log4j           log4j                             org.slf4j           slf4j-log4j12                                   fk.sp.common       event-handler       1.7.18                           javax.ws.rs           javax.ws.rs-api                             com.sun.jersey           jersey-core                             log4j           log4j                             org.slf4j           slf4j-log4j12                                   fk.sp.common       spring-jpa       1.7.18                           javax.ws.rs           javax.ws.rs-api                             com.sun.jersey           jersey-core                             log4j           log4j                             org.slf4j           slf4j-log4j12                                  fk.sp.common       common-extensions       1.7.18                           javax.ws.rs           javax.ws.rs-api                             com.sun.jersey           jersey-core                             log4j           log4j                             org.slf4j           slf4j-log4j12                                  fk.sp.common       restbus-sender       1.7.18                           javax.ws.rs           javax.ws.rs-api                             com.sun.jersey           jersey-core                             log4j           log4j                             org.slf4j           slf4j-log4j12                                  com.restbus       restbus-client       1.0.3                                    log4j           log4j                             org.slf4j           slf4j-log4j12                                      org.jboss.netty           netty                                  mysql       mysql-connector-java       5.1.28       runtime                  junit       junit       3.8.1       test                                 org.codehaus.mojo         exec-maven-plugin         1.2.1                    com.flipkart.apl.Europa                        server             europa.yml                                            maven-assembly-plugin                                                com.flipkart.apl.Europa                                                jar-with-dependencies                                            org.apache.maven.plugins         maven-compiler-plugin         3.1                    1.7           1.7           UTF-8                      ```  Please help me what I am doing wrong.","closed","","uttamtiwari123","2016-06-13T15:24:09Z","2016-06-14T10:47:15Z"
"","1759","Error Implementing Dropwizard Logging with Appenders using Gradle","Hi I am trying to implement file and console logging with dropwizard. I have followed the docs and configured my config file as below.  ``` logging: level: INFO  appenders:      -type: console ```  When I tried to run the server I am getting the below error.  ``` **configuration.yml has an error: Failed to parse configuration at: logging.appenders.[0]; Could not resolve type id 'console' into a subtype of [simple type, class io.dropwizard.logging.AppenderFactory]: known type ids = [AppenderFactory] at [Source: N/A; line: -1, column: -1] (through reference chain: com.whatever.Main[""logging""]->io.dropwizard.logging.DefaultLoggingFactory[""appenders""]->java.util.ArrayList[0])** ```  I am constructing the fatJar like below.  ``` task fatJar(type: Jar) { manifest {     attributes 'Implementation-Title': 'Creating fatJar for Whatever',             'Implementation-Version': version,             'Main-Class': 'com.whatever.Main' } baseName = project.name + '-all' from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } with jar } ```  I tried this [link](https://github.com/johnrengelman/shadow#merging-service-files) as suggested in [this](https://groups.google.com/forum/#!topic/dropwizard-user/rGwpZld3evY) group. And I am not sure how to proceed.","closed","","ganeshcse2991","2016-10-06T12:19:40Z","2016-10-06T13:37:52Z"
"","2214","How to integrate i18n with dropwizard","Hi guys, we just use dropwizard in our project. We have a problem to integrate i18n with dropwizard.   We try just use `java.util.ResourceBundle` directly, but there seems lots of work we have to do.  We may want like use the i18n liken spring `ResourceBundleMessageSource`  Is there any official document about i18n usage with dropwizard?","closed","","Ryan-Miao","2017-11-21T03:24:52Z","2017-11-28T06:20:52Z"
"","1955","LoggingExceptionMapper OutOfMemoryError","Hi guys, I make a big upload with dropwizard REST and I have this error everytime (or in this class: AsyncAppender-Worker-async-console-append) Uploading and writing to DB works fine Have you some idea ? maybe some logback configuration ?  ```TRACE [2017-03-10 13:27:24,070] org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl: ResourceLocalTransactionCoordinatorImpl#afterCompletionCallback(false) TRACE [2017-03-10 13:27:24,070] org.hibernate.resource.transaction.internal.SynchronizationRegistryStandardImpl: SynchronizationRegistryStandardImpl.notifySynchronizationsAfterTransactionCompletion(5) TRACE [2017-03-10 13:27:24,070] org.hibernate.internal.SessionImpl: SessionImpl#afterTransactionCompletion(successful=false, delayed=false) TRACE [2017-03-10 13:27:24,070] org.hibernate.internal.SessionImpl: Closing session INFO  [2017-03-10 13:27:24,071] org.hibernate.engine.internal.StatisticalLoggingSessionEventListener: Session Metrics {     91355 nanoseconds spent acquiring 1 JDBC connections;     0 nanoseconds spent releasing 0 JDBC connections;     27546730 nanoseconds spent preparing 1 JDBC statements;     23695309332 nanoseconds spent executing 1 JDBC statements;     0 nanoseconds spent executing 0 JDBC batches;     0 nanoseconds spent performing 0 L2C puts;     0 nanoseconds spent performing 0 L2C hits;     0 nanoseconds spent performing 0 L2C misses;     0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);     0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections) } TRACE [2017-03-10 13:27:24,071] org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl: Closing JDBC container [org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl@6bb96c0e] TRACE [2017-03-10 13:27:24,071] org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl: Releasing JDBC resources TRACE [2017-03-10 13:27:24,071] org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl: Closing logical connection TRACE [2017-03-10 13:27:24,071] org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl: Releasing JDBC resources TRACE [2017-03-10 13:27:24,071] org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl: Logical connection closed ERROR [2017-03-10 13:27:24,353] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: b578481362f72137 ! java.lang.OutOfMemoryError: Java heap space ! at java.util.Arrays.copyOf(Arrays.java:3332) ! at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124) ! at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448) ! at java.lang.StringBuilder.append(StringBuilder.java:136) ! at com.mysql.jdbc.PreparedStatement.asSql(PreparedStatement.java:936) ! at com.mysql.jdbc.PreparedStatement.asSql(PreparedStatement.java:919) ! at com.mysql.jdbc.PreparedStatement.toString(PreparedStatement.java:4602) ! at java.util.Formatter$FormatSpecifier.printString(Formatter.java:2886) ! at java.util.Formatter$FormatSpecifier.print(Formatter.java:2763) ! at java.util.Formatter.format(Formatter.java:2520) ! at java.util.Formatter.format(Formatter.java:2455) ! at java.lang.String.format(String.java:2940) ! at org.jboss.logging.Slf4jLocationAwareLogger.doLogf(Slf4jLocationAwareLogger.java:81) ! at org.jboss.logging.Logger.logf(Logger.java:2398) ! at org.jboss.logging.DelegatingBasicLogger.tracef(DelegatingBasicLogger.java:124) ! at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.close(ResourceRegistryStandardImpl.java:148) ! at org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl.release(ResourceRegistryStandardImpl.java:82) ! at org.hibernate.id.insert.AbstractReturningDelegate.releaseStatement(AbstractReturningDelegate.java:67) ! at org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:45) ! at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2827) ! at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3398) ! at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81) ! at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:597) ! at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:232) ! at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:213) ! at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:256) ! at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:318) ! at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:275) ! at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:182) ! at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:113) ! at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:192) ! at org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:177) 0:0:0:0:0:0:0:1 - - [10/mar/2017:13:27:24 +0000] ""POST /client/upload/app/111 HTTP/1.1"" 500 110 ""http://localhost:3000/"" ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"" 159065 ```","closed","","charbonnier666","2017-03-10T13:32:46Z","2017-03-13T07:20:15Z"
"","2152","SizeUnit needs to be extended for MibiBytes, KibiBytes, etc","Hi guys,  I noticed today that you added support for KiB, MiB, etc a couple of years ago (https://github.com/dropwizard/dropwizard/commit/9044d44857fc1c90424303732502536c84963968), but you didn't get the semantic meaning of your extensions right. For instance, see: https://en.wikipedia.org/wiki/Gigabyte#Definition.  SizeUnit.KILOBYTE should use 1000 as the multiplier, while (the currently missing) SizeUnit.KIBIBYTE should use 1024 as the multipler. Once these additional SizeUnit values are defined, they need to be used on the proper suffixes in Size.java.  See this (10 year) old post by Jeff Atwood for a more complete picture of the differences: https://blog.codinghorror.com/gigabyte-decimal-vs-binary/. Please don't listen to the negative attitude of this article - it's 10 years old. The storage industry really does use these suffixes correctly these days and enterprise customers know the difference and expect them to be accurate.","closed","","jcalcote","2017-09-13T22:48:57Z","2019-03-14T22:31:37Z"
"","1925","Location of YML file in the getting started documentation was unclear to me","Hi Folks,  When reading the getting started guidance on my first ever exposure to DropWizard, I was confused about where the YML file was supposed to go. At first I put it in the src/main/resources directory expecting the far jar execution to pick it up when I named it on the command line execution arguments. This tiny pull request seeks to clarify that the YML file can be saved anywhere and referenced later.   I submitted PR #1924 in an attempt to resolve the issue. Sorry if the branch name doesn't match your conventions!","closed","","mrice","2017-02-11T05:08:16Z","2017-02-11T05:13:33Z"
"","1881","Dropwizard from 1.0.0 to 1.0.5 JsonProperty","Hi folks,  I am trying to upgrade dropwizard on my project from 1.0.0 to 1.0.5 and I'm facing an issue with the annotation Jackson JsonProperty. The annotation can not be imported any more. I have seen in the change log that the jackson library have been upgraded in the version 1.0.3 of Dropwizard. It's seem to be the cause. The documentations of dropwizard and Jacksons mention the annotation, so I assume it's still usable.  Do someone have any clue?  Thank you in advance  Adrien","closed","","adrienpessu","2017-01-13T10:55:21Z","2017-01-16T10:50:15Z"
"","2225","Upgrade to Jackson 2.9.2","Hi everyone, I opened this little PR because a patch version of 2.9 was recently released.   https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.2  Best Regards Juan Pablo","closed","improvement,","islasjuanp","2017-12-03T20:43:29Z","2017-12-15T18:16:40Z"
"","2478","Invalid FormDataBodyPart of request in TeeFilter","Hi everybody,  when using the TeeFilter to log request contents as it is described in here (https://logback.qos.ch/manual/layouts.html#AccessPatternLayout) there is a problem in dropwizard.  In particular when issuing a POST request, there is the attribute ""org.glassfish.jersey.media.multipart.FormDataMultiPart"" in the ServletRequest. Moreover, if one calls the method getFields() to iterate over the various FormDataBodyPart of the request it is possible to call getName() on any FormDataBodyPart.   To do so I am using the following request:  ``` FormDataMultiPart multiPartRequest = (FormDataMultiPart) request.getAttribute(""org.glassfish.jersey.media.multipart.FormDataMultiPart"");              Map> fields = multiPartRequest.getFields();             for (String key:fields.keySet()){                 System.out.println(key);                                  for(FormDataBodyPart pname : fields.get(key)){                     System.out.println(pname.getName());                     System.out.println(pname.getValue());                 } ```  However, when calling the method getValue() on any FormDataBodyPart the following exception occurs:  ``` java.lang.IllegalStateException: No multipart config for servlet org.eclipse.jetty.server.Request.getParts(Request.java:2331) org.eclipse.jetty.server.Request.getParts(Request.java:2319) ``` This is even more strange, as there is no field of type binary in the request.  Best regards Andy","closed","","aschilling","2018-09-03T09:17:59Z","2018-11-14T01:38:34Z"
"","2420","Incomplete Jetty Request Log","HI everybody,  I would like to use the Jetty log to output all (Header and Form) request parameters. To do so I use the following configuration in the Dropwizard configuration file:  ``` server:   requestLog:     appenders:       - type: console         threshold: DEBUG         logFormat: ""%t{yyyy-MM-dd HH:mm:ss.SSSZ} %a %m %fullRequest"" ```  However, although I specified ""%fullRequest"" only a portion of the original request is logged, in particular all header parameters but no form parameters, are logged. If I use %requestContent nothing is printed out. Is it possible that if I use multi-part form data that this interferes with this setting? or are form-parameters in general not logged via %fullRequest setting?    I am using Dropwizard Version 1.1.8  Best regards Andy","closed","","aschilling","2018-07-02T07:02:30Z","2018-07-02T07:18:22Z"
"","2383","Dropwizard Testing with environment variables","Hi everybody,  I would like to use environment variables when testing my Dropwizard implementation. Right now I use for testing the `DropwizardClientRule `class.  ``` @ClassRule public static final DropwizardClientRule dropwizard = new DropwizardClientRule(new PingResource());   ``` Is there any way on how to set environment variables within the particular resource (i.e. PingResource) when performing testing?  Moreover I would like to use `EnvironmentVariableSubstitutor `but that requires me to trigger somehow my initialize method. Does anyone of you know if this is possible with the the `DropwizardClientRule `class.  Best regards  Andy","closed","","aschilling","2018-06-11T04:51:47Z","2018-07-02T05:27:05Z"
"","2465","JSON access-log output does not consider TeeFilter for requestContent","Hi everybody,  I am using dropwizard-json-logging library and noticed that when using ""requestContent"" in the includes section of the ""JSON access-log"" layout that the requestContent is directly printed out without further processing. Without the usage of the layout option the the TeeFilter (https://logback.qos.ch/manual/layouts.html#AccessPatternLayout) would be considered for printing out the request content.   Because of this difference in behavior I think it is a bug and it would be great if the TeeFilter could also be considered if using the JSON access-log layout  Best Andy","closed","","aschilling","2018-08-23T12:41:56Z","2018-11-14T01:39:31Z"
"","2447","Efficient readiness check","Hi everybody,  I am developing a microservice using Dropwizard which runs within Kubernetes. Kubernetes has the concept of readiness checks which allows it to assess whether a service is ready to receive incoming requests.  Is there any functionality in Dropwizard which can be used to assess wether the service is ready to serve external requests? I know that I could use period curls of a public API endpoint such as version, however, I was hoping that there is a lightweight alternative for such functionality. Maybe some mechanism which corresponds with the following startup message of the jetty server  `INFO  [2018-07-27 15:10:51,036] org.eclipse.jetty.server.Server: Started @9738ms`   Best regards Andreas","closed","","aschilling","2018-07-30T14:13:33Z","2018-07-30T14:55:41Z"
"","2224","High memory consumption in multi-core environment","Hi everybody,  first of all thank you all for your great work and your contributions! I noticed that dropwizard consumes on average 3x more memory on a multi-cpu architecture than on my local machine. I already debugged this behavior a little bit and noticed that there are also 66 threads running on the remote server. Can you explain this behavior? Is it possible that Drowpwizards scales the number of threads and memory based on the current number of CPUs? Is there any way to adjust this behavior and scale down the memory consumption of Dropwizard.  I use Dropwizard in a Kubernetes environment so that Kubernetes can scale up itself it a high number of requests come in.  For the record I am using Dropwizard Version 1.1.2  Thank you Andy","closed","","aschilling","2017-12-02T09:03:44Z","2018-06-08T23:31:30Z"
"","1906","OSS dropwizard-views-jade ownership","Hi DW Community,  Would dropwizard be interested in taking ownership/internalize this project  [dropwizard-views-jade](https://github.com/gethalfpintoss/dropwizard-views-jade)?  Our organization started to use this OSS project a while ago, we have since then uplifted our dependency on several dropwizard components, only to find that this project has tech debt that prevent us from staying up-to-date (some dropwizard-views changes would break it).   We have logged several requests to the project to uplift, but due to it being inactive we haven't heard from it since (Actually the only commits made to the repo were several that made into one release). Since this is a small project dedicated for supporting jade template for view rendering, which is similar to what dropwizard have onboard for mustache and freemarker, would it make sense for you guys to take this OSS jade project in.   Our organization could also contribute to this by making the necessary uplifts to work with latest release.  Thanks a lot,  Wuchen","closed","","wwftw","2017-01-31T03:06:30Z","2017-01-31T08:06:35Z"
"","1703","server.connector is not parsed","Hi all,   I'm trying to deploy an app on Heroku using Dropwizard and Gradle. Below is my `yaml` file:  ``` yaml server:   type: simple   connector:     type: http     port: 8080 database:   # the name of your JDBC driver   driverClass: org.postgresql.Driver   # the username   user: process.env.JDBC_DATABASE_USERNAME   # the password   password: process.env.JDBC_DATABASE_PASSWORD   # the JDBC URL   url: process.env.JDBC_DATABASE_URL   # any properties specific to your JDBC driver:   properties:     charSet: UTF-8   # the SQL query to run when validating a connection's liveness   validationQuery: ""/* Test Database Health Check */ SELECT 1""   # the minimum number of connections to keep open   minSize: 8   # the maximum number of connections to keep open   maxSize: 32   # whether or not idle connections should be validated   checkConnectionWhileIdle: false   # how long a connection must be held before it can be validated   evictionInterval: 10s   # the maximum lifetime of an idle connection   minIdleTime: 1 minute       logging:   level: INFO ```  Here's the `procfile` that would invoke this:  ``` procfile web: java $JAVA_OPTS -Ddw.server.connector.type=http -Ddw.server.connector.port=$PORT -Ddw.database.user=$JDBC_DATABASE_USERNAME -Ddw.database.password=$JDBC_DATABASE_PASSWORD -Ddw.database.url=$JDBC_DATABASE_URL -jar build/libs/project-1.0.jar server config.yaml ```  Unfortunately the files cause this error when trying to deploy the app:  ``` 2016-08-22T02:50:46.914027+00:00 app[web.1]:   * Unrecognized field at: server.connector 2016-08-22T02:50:46.914033+00:00 app[web.1]:  2016-08-22T02:50:47.011379+00:00 heroku[web.1]: Process exited with status 1 2016-08-22T02:50:47.024697+00:00 heroku[web.1]: State changed from starting to crashed ```  Is there anything I should change in the `yaml` file, or the `procfile`? Thank you in advance for your help","closed","","acupoftee","2016-08-22T02:53:33Z","2016-09-30T13:40:08Z"
"","1633","Caching Http Client","Hi All,   I would like to implement the ability to create a caching http client (https://hc.apache.org/httpcomponents-client-ga/tutorial/html/caching.html) when using the JerseyClientBuilder.   Is there any interest in this feature? Or is this ability already present and I am just missing something?   The rationale for the request is that on my project we have a number of collaborating microservices, and it would be desirable to reduce the number of network requests that are made by specifying the appropriate HTTP cache headers on each response and having the clients cache the data for the specified period. I have previously posted to both the dev and user mailing lists but haven't received any responses.  Any feedback or suggestions would be greatly appreciated.  Kind Regards  Brian","closed","","ghost","2016-07-12T20:45:41Z","2019-07-31T15:33:36Z"
"","2099","Microsoft AD/LDAP & Basic Authentication improvement","Hi all, to make Microsoft LDAP with Active Directory basic authentication works in dropwizard i must include this project https://github.com/blackberry/Dropwizard-Active-Directory-LDAP-Authentication   ` com.blackberry.bdp.dwauth ¬†  dwMsAdLdapAuth ¬†  0.1.1 `  and/or this library:  `                       com.unboundid             unboundid-ldapsdk             3.0.0         `  Maybe you can think of getting it in?","closed","","charbonnier666","2017-07-10T13:20:39Z","2017-07-10T13:53:07Z"
"","2068","dropziward-example doesn't write any file log","Hi all, last versions of dropwizard (1.1.0 1.2.0) doesn't write any file log, neither in my application based on dropwizard-example neither in dropwizard-example without any modifications","closed","bug,","charbonnier666","2017-06-05T12:48:06Z","2017-06-06T18:12:38Z"
"","2070","Upload Binary Error - Java heap space for MediaType.APPLICATION_OCTET_STREAM","Hi all, I'm trying to upload a zip about 100mb stored on mysql table (only id and blob)  this is my code: ```java @Path(""/downloadlatestinstaller/{type}"") @GET @Timed @UnitOfWork public Response downloadLastInstaller(@PathParam(""type"") String type) {     try {         LOGGER.info(""Finding latest Installer..."");         // read DB app         Optional res = Optional.empty();         res = appFileDAO.findLastIntranetWinInstaller();         if (res.isPresent()) {             AppFile a = res.get();             byte[] app = a.getBinary().getApp();             int length = app.length;             LOGGER.info(""Found latest Installer ID= "" + a.getId() + "" - Name= "" + a.getName() + "" - Version= "" + a.getVersion() + "" - Date= "" + a.getDateUpdated());             Response respo = Response.ok(app, MediaType.APPLICATION_OCTET_STREAM)                     .header(""Access-Control-Expose-Headers"", HttpHeaders.CONTENT_DISPOSITION)                     .header(HttpHeaders.CONTENT_DISPOSITION, ""attachment; filename=\"""" + a.getVersion() + ""_"" + a.getName() + ""\"""")                     .header(HttpHeaders.CONTENT_LENGTH, length)                     .encoding(UTF_8)                     .build();             LOGGER.info(respo.getHeaders().toString());             return respo;         } else {             LOGGER.warn(""Not found any installer type= "" + type);             return Response.serverError().build();         }     } catch (Exception e) {         LOGGER.error(e.getLocalizedMessage(), e);         return Response.serverError().build();     } } ```  on response return I've got this stacktrace error: ```WARN   [dw-13] o.e.j.s.HttpChannel -  /app/downloadlatestinstaller/WIN  javax.servlet.ServletException: org.glassfish.jersey.server.ContainerException: java.lang.OutOfMemoryError: Java heap space 	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:489) 	at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) 	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) 	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) 	at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) 	at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) 	at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) 	at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:45) 	at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) 	at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:308) 	at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:262) 	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) 	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:533) 	at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188) 	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1253) 	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168) 	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:473) 	at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166) 	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1155) 	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) 	at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:241) 	at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:52) 	at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:521) 	at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68) 	at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56) 	at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) 	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) 	at org.eclipse.jetty.server.Server.handle(Server.java:564) 	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:317) 	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) 	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279) 	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:110) 	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124) 	at org.eclipse.jetty.util.thread.Invocable.invokePreferred(Invocable.java:128) 	at org.eclipse.jetty.util.thread.Invocable$InvocableExecutor.invoke(Invocable.java:222) 	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:294) 	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produce(EatWhatYouKill.java:126) 	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:672) 	at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590) 	at java.lang.Thread.run(Thread.java:745) Caused by: org.glassfish.jersey.server.ContainerException: java.lang.OutOfMemoryError: Java heap space 	at org.glassfish.jersey.servlet.internal.ResponseWriter.rethrow(ResponseWriter.java:278) 	at org.glassfish.jersey.servlet.internal.ResponseWriter.failure(ResponseWriter.java:260) 	at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:509) 	at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:334) 	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) 	at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:315) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:297) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:267) 	at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) 	at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) 	at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) 	at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) 	... 43 common frames omitted Caused by: java.lang.OutOfMemoryError: Java heap space 	at java.util.Arrays.copyOf(Arrays.java:3332) 	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124) 	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:674) 	at java.lang.StringBuilder.append(StringBuilder.java:208) 	at java.util.Arrays.toString(Arrays.java:4446) 	at org.hibernate.type.descriptor.java.PrimitiveByteArrayTypeDescriptor.extractLoggableRepresentation(PrimitiveByteArrayTypeDescriptor.java:63) 	at org.hibernate.type.descriptor.java.PrimitiveByteArrayTypeDescriptor.extractLoggableRepresentation(PrimitiveByteArrayTypeDescriptor.java:26) 	at org.hibernate.type.AbstractStandardBasicType.toLoggableString(AbstractStandardBasicType.java:296) 	at org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:66) 	at org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:109) 	at org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:120) 	at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:96) 	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:38) 	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1435) 	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) 	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:3201) 	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:2411) 	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:467) 	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:146) 	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.access$100(JdbcResourceLocalTransactionCoordinatorImpl.java:38) 	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:220) 	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:68) 	at io.dropwizard.hibernate.UnitOfWorkAspect.commitTransaction(UnitOfWorkAspect.java:143) 	at io.dropwizard.hibernate.UnitOfWorkAspect.afterEnd(UnitOfWorkAspect.java:82) 	at io.dropwizard.hibernate.UnitOfWorkApplicationListener$UnitOfWorkEventListener.onEvent(UnitOfWorkApplicationListener.java:80) 	at org.glassfish.jersey.server.internal.monitoring.CompositeRequestEventListener.onEvent(CompositeRequestEventListener.java:71) 	at org.glassfish.jersey.server.internal.process.RequestProcessingContext.triggerEvent(RequestProcessingContext.java:226) 	at org.glassfish.jersey.server.ContainerFilteringStage$ResponseFilterStage.apply(ContainerFilteringStage.java:188) 	at org.glassfish.jersey.server.ContainerFilteringStage$ResponseFilterStage.apply(ContainerFilteringStage.java:163) 	at org.glassfish.jersey.process.internal.Stages.process(Stages.java:171) 	at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:442) 	at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434) ```  any ideas? problem is hibernate or byte array in response? for a zip about 40mb i've got no problems","closed","","charbonnier666","2017-06-06T10:21:45Z","2017-06-06T11:48:18Z"
"","1726","How to make entity listeners works with Hibernate 5?","Hi  My application is built based on dropwizard 1.0 and hibernate5. I want to add listeners to my entities which are managed by hibernate, I am using JPA annotation '@EntityListeners', but I found that does not work for me, listeners were not invoked completely.  Can you help me with this ?  thank you.","closed","stale,","bruce-genhot","2016-09-15T16:40:26Z","2019-09-03T00:00:55Z"
"","1896","JSON configuration not working","Heyo, the manual states  > If your configuration file doesn‚Äôt end in .yml or .yaml, Dropwizard tries to parse it as a JSON file.  This seems to be no longer the case. In order to actually use a JSON configuration file I had to write a custom ConfigurationFactory. ```java public class JSONConfigurationFactory extends YamlConfigurationFactory {  	private ObjectMapper mapper; 	private JsonFactory factory;  	public JSONConfigurationFactory(Class klass, Validator validator, ObjectMapper objectMapper, String propertyPrefix) { 		super(klass, validator, objectMapper, propertyPrefix); 		         // Sub-classes may choose to omit data-binding; if so, null ObjectMapper passed:         if (objectMapper == null) { // sub-class has no need for mapper             mapper = null;             factory = null;         } else {             mapper = objectMapper.copy()                     .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);             factory = new JsonFactory();         } 	}  	@Override     public T build(ConfigurationSourceProvider provider, String path) throws IOException, ConfigurationException {         try (InputStream input = provider.open(requireNonNull(path))) {             final JsonNode node = mapper.readTree(factory.createParser(input));              if (node == null) {                 throw new RuntimeException(""Configuration at "" + path + "" must not be empty"");             }              return build(node, path);         }     } } ```  Maybe I am just misunderstanding something here and  it is simply my fault but I think this is either a bug or an outdated note in the documentation. I would be willing to fix the JSON support and submit a pull request if this is indeed a missing/bugged feature.","closed","","manuel-hegner","2017-01-19T11:24:01Z","2017-01-30T14:09:41Z"
"","2050","Please add an example with foreign keys","Hey. I have been facing an issue in which I try to create an instance through POST api, the difference is that this instance has a foreign key, being a beginner in java, I'm finding it difficult to make a reference to that fk by passing it's id in Json request.","closed","","shubh3794","2017-05-09T10:31:27Z","2017-06-20T15:25:15Z"
"","1696","Dropwizard 1.0.0 doesn't support the subdirectory template inheritance","Hey,   We just updated the DropWizard from 0.9.3 to 1.0.0. But found the subdirectory mustache inheritance will fail. Below is the detailed behaviour.  Note: In the local development environment it is working, but when we deploy it via `java -jar project-SNAPSHOT.jar server integration`, we found it is not working anymore.  The main layout template: `views/layout.mustache`  ```             Hello DropWizard   {{$body}}{{/body}}   ```  The sub page which inherent the layout but located in the subdirectory: `views/error-pages/not_found.mustache`  ``` {{<../layout}} {{$body}}                      Error 404 - page not found                               We couldn't find the page you're looking for.          {{/body}} {{/../layout}} ```  And this is the view we rendered it: `NotFoundView.java`  ``` public class NotFoundView extends View {     public NotFoundView() {         super(""error-pages/not-found.mustache"");     } } ```  It was working in DropWizard 0.9.3. But we got the error when trying to reach this page when we upgraded it to 1.0.0.  The error message is below:  ``` Caused by: javax.ws.rs.WebApplicationException: HTTP 500 Internal Server Error     at io.dropwizard.views.ViewMessageBodyWriter.writeTo(ViewMessageBodyWriter.java:89)     at coop.membership.portal.helpers.ViewMessageBodyWriterWithGlobalContext.writeTo(ViewMessageBodyWriterWithGlobalContext.java:63)     at coop.membership.portal.helpers.ViewMessageBodyWriterWithGlobalContext.writeTo(ViewMessageBodyWriterWithGlobalContext.java:24)     at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:265) ... ```  We suspect it's cause  by the magic `{{<../layout}} ...`, cause it's the only difference with other pages. We solved this problem by pulling the `not_found.mustache` out of the `error_pages` subdirectory.  But this should be an issue introduced by the newest 1.0.0 version.","closed","bug,","gongmingqm10","2016-08-18T16:43:02Z","2016-10-07T15:10:13Z"
"","1907","Lombokify Dropwizard","Hey, what do you think about lombokifying Dropwizard? This would reduce to code overhead of many classes a lot without adding any dependencies to dropwizard directly. Because dropwizard requires a current version of Java the build process would not change much if at all. The process could be a gradual one that changes one class after another, replacing Setters and Getters.  The only downside I see is that users need to understand lombok to understand the dropwizard code. On the other hand the maven build could be changed to delombok the sources and use those for the packed sources.  If this is desirable for the Dropwizard project I would be willing to work on this.","closed","","manuel-hegner","2017-02-01T15:21:14Z","2017-02-01T15:30:05Z"
"","2157","metrics-jdbi flagged by antivirus","Hey, today my maven build suddenly stopped working with some weird error messages. After some research i found that the antivirus blocks the bluid because of metrics-jdbi:3.2.2 jar file. Allegedly it contains the trojan Jamalky A!cl . This is most probably a fals positive, but I wanted to write it down here in case anyone else has the same error.","closed","","manuel-hegner","2017-09-20T14:44:35Z","2017-09-20T15:44:13Z"
"","2140","Add alternative to ValidationMethod","Hey, I would like to propose an alternative to the somewhat clunky ValidationMethod included in dropwizard. If this discussion leads to something I would also be willing to implement this new feature.  My proposal is to enable more detailed annotations by allowing users to use validationMethods that look like this: ```java     @NewValidationMethod     public void validateSomething(ConstraintValidatorContext context) {} ``` This would allow users a better control over the validation (e.g. better messages and multiple violations in one method) and would no longer interfere with Jackson (requiring no @JsonIgnore).  To make this work every Class that has this kind of validation methods would need to be annotated with a new @HasAnnotationMethods annotation, which would be a real hibernate constraint and would find every new-type validation method and execute them.  A caveat that I see is performance (on the other hand hibernate validation performance is not great as it is). To not use slow reflection access, code generation would be the better alternative. Does dropwizard already use a library for that? I would not like adding new dependencies just for this feature.  What do you think?","closed","","manuel-hegner","2017-08-31T09:45:34Z","2017-11-23T19:10:43Z"
"","1617","1.0 expected release date?","Hey I was wondering when 1.0 is likely to drop?  Keep up the good work üëç","closed","","darrenhaken","2016-07-02T18:33:12Z","2016-07-05T07:35:29Z"
"","1679","JerseyClient will not pick custom ExecutorService","Hey Guys:  I just realised that JerseyClient never picks-up the custom ExecutorService set via using(ExecutorService)  I think the solution is to annotate https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/src/main/java/io/dropwizard/client/DropwizardExecutorProvider.java With https://github.com/jersey/jersey/blob/master/core-client/src/main/java/org/glassfish/jersey/client/ClientAsyncExecutor.java  I am using the following workaround for now,  ``` package com.xxx.yyy.injection.factory;  import com.codahale.metrics.httpclient.HttpClientMetricNameStrategies; import com.xxx.yyy.ServiceConfiguration; import com.xxx.yyy.utils.MDCContextListeningDecorator;  import org.glassfish.hk2.api.Factory; import org.glassfish.jersey.client.ClientAsyncExecutor; import org.glassfish.jersey.spi.ExecutorServiceProvider;  import java.util.concurrent.ArrayBlockingQueue; import java.util.concurrent.ExecutorService; import java.util.concurrent.TimeUnit;  import javax.inject.Inject; import javax.ws.rs.client.Client;  import io.dropwizard.client.JerseyClientBuilder; import io.dropwizard.setup.Environment; import lombok.extern.log4j.Log4j;  @Log4j public class HttpClientFactory implements Factory {   private final Environment env;   private final ServiceConfiguration config;    @Inject   public HttpClientFactory(Environment env, ServiceConfiguration config) {     this.env = env;     this.config = config;   }    @Override   public Client provide() {     ExecutorService asyncService = new MDCContextListeningDecorator(env.lifecycle()         .executorService(""jersey-client-%d"")         .minThreads(config.getJerseyClient().getMinThreads())         .maxThreads(config.getJerseyClient().getMaxThreads())         .workQueue(new ArrayBlockingQueue<>(config.getJerseyClient().getWorkQueueSize()))         .build());      final Client client = new JerseyClientBuilder(env)         .using(config.getJerseyClient())         .using(HttpClientMetricNameStrategies.QUERYLESS_URL_AND_METHOD)         .build(""GCM Provider"");     client.register(new MyExecutorService(asyncService));      return client;    }    @Override   public void dispose(Client instance) {     instance.close();    }    @ClientAsyncExecutor   private class MyExecutorService implements ExecutorServiceProvider {      private final ExecutorService asyncService;      public MyExecutorService(ExecutorService service) {       this.asyncService = service;     }      @Override     public ExecutorService getExecutorService() {       return asyncService;     }      @Override     public void dispose(ExecutorService executorService) {       asyncService.shutdown();       try {         asyncService.awaitTermination(60, TimeUnit.SECONDS);       } catch (InterruptedException e) {         log.error(""Interrupted this thread while waiting for jersey client to shutdown"", e);       }     }   } } ```","closed","","saumitrabhave","2016-08-08T11:17:18Z","2016-08-09T06:08:06Z"
"","1654","Update dependencies and fix some error prone warnings","Here's the link to the error prone information on the class `newInstance()` changes - http://errorprone.info/bugpattern/ClassNewInstance","closed","improvement,","jplock","2016-07-28T21:51:16Z","2016-08-04T02:21:19Z"
"","1825","Added httpCompliance to the HttpConnectorFactory","Here's my shot at implementing the change discussed in issue 1824: https://github.com/dropwizard/dropwizard/issues/1824","closed","improvement,","dren-dk","2016-11-16T11:24:47Z","2016-11-16T13:15:12Z"
"","1567","Is it possible to use logback.xml instead of *.yml?","Hello. We've got a lot of different projects. All of them are configured by `logback.xml` and it works. I don't understand why should I learn one more DSL? Why should I think again: 1. How to create new appender? 2. How to use custom appender? 3. What will happen when logback add new functionality? How to use it with dropwizard?  The question is: how to use `logback.xml` configuration instead of `.yml` one?","closed","","fedotxxl","2016-05-27T14:52:56Z","2016-06-28T14:39:30Z"
"","1998","Update to Hibernate 5.2.10","Hello, I just switched to DW 1.1.0 (from 1.0.6) and immediately found a problem with the new Hibernate (5.2.8). It is described pretty good here: https://hibernate.atlassian.net/browse/HHH-11496  It seems, I am experiencing the same thing. I have two entities: Club and Tenant Club: ``` @Entity public class Club {   @Id   @GeneratedValue   private Integer id;    @Column(nullable = false)   private String name;    @OneToOne   @JoinColumn(name = ""tenant_id"")   private Tenant tenant; ... } ``` and Tenant: ``` @Entity public class Tenant {   @Id   @GeneratedValue   private Integer id;    @OneToOne(mappedBy = ""tenant"", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)   private Club club; ... } ```  Well, basically, constructing these entities I followed the official Hibernate User Guide. Everything worked fine in DW 1.0.6 (and HIbernate 5.1.0 respectively) but after switching I noticed exceptions reporting about ConstraintViolations. I checked the logs, debugged and saw that Hibernate tries to insert a `Club` first, however, it should  insert it only after `Tenant`.  Writing a test for this would be pretty time consuming task. If you really need this - I might try.  Have you experiences anything like this?","closed","","yateam","2017-04-09T00:21:53Z","2017-04-27T12:37:43Z"
"","2110","post commit action (UnitOfWork)","Hello,   is there any way to schedule some action after `UnitOfWork` commit is done?  For example, I want to send an email only if a transaction is successful. How would I do it if a Jersey resource is wrapped with `@UnitOfWork`? I could think of a workaround, where you put events in some sort of an EventBus, and if a request transaction is successful, then those events would execute. But maybe there are better options for Dropwizard?  Thanks!","closed","","yateam","2017-07-24T00:53:11Z","2018-10-24T01:26:03Z"
"","1737","No request logs in dropwizard 1.0.1","Hello, since I've updated dropwizard to version 1.0.1 I have no request logs anymore, using dropwizard version 1.0.0 everything works. Is this a known bug or was anything changed regarding the configuration? According to the [release logs](https://github.com/dropwizard/dropwizard/blob/master/docs/source/about/release-notes.rst#v101-sep-21-2016), issue #1678 may be related to this? Even so, having only the requestLog's appenders without logging appenders doesn't work either with version 1.0.1.  I've attached my server configuration _server.yml_ file below:  ``` server:   applicationContextPath: /   applicationConnectors:     - type: http       port: 8080   requestLog:     appenders:       - type: console logging:   appenders:     - type: console ```  I've also attached a small minimal working example. Please change the dropwizard version to 1.0.0 and 1.0.1 respectively to test the issue.  Thanks in advance! [test.zip](https://github.com/dropwizard/dropwizard/files/489626/test.zip)","closed","bug,","m-at-nu","2016-09-23T12:10:56Z","2016-09-27T07:34:28Z"
"","1605","Position variable in OutParamArgument is alway zero when using named parameters.","Hello,  Using @SqlCall to call a Stored Procedure and using (Call) .registerOutParameter(name, type), the position variable is zero for any named parameter; when calling the map function on OutParamArgument getting a java.sql.SQLException: Invalid column index.  edited: actually this very well could be a jdbi issue, not Dropwizard.  Thanks.  C.","closed","","jcshaw","2016-06-22T14:01:51Z","2016-06-22T14:13:03Z"
"","2142","Is it safe to enable prudent mode on FileAppender ?","Hello,  Is it safe to enable (by overriding) prudent mode in FileAppender ?   because dropwizard disabled prudent mode by default shows in this [commit](https://github.com/dropwizard/dropwizard/blob/7322af7c3a32531ed3c05b188c128c73f611f3a9/dropwizard-core/src/main/java/com/yammer/dropwizard/logging/FileLoggingOutput.java)  Thanks.","closed","","genz10","2017-09-01T16:24:50Z","2017-09-08T17:33:24Z"
"","2218","DropwizardExecutorProvider not shareable but it is shared","Hello,  I have the following behavior in dw 1.1.4 and 1.2.0. I create a JerseyClient and bind it to hk2 via:  ``` final Client client = new JerseyClientBuilder(environment)     .using(configuration.getJerseyClientConfiguration())     .build(smartMobileApplication.getName()); bind(client).to(Client.class); ```  Eventually I perform some async calls:  ```     client.target(""http://example"")                 .path(""/example"")                 .register(HttpAuthenticationFeature.basic(                         configurationCredentials.getLogin(),                         configurationCredentials.getPass()                 ))                 .request()                 .async()                 .post(Entity.entity(entity.getPayload(), MediaType.APPLICATION_JSON), callback);     } ```  After some calls the Executor service is shutdown by hk2 leading to a `RejectedExecutionException`.  If found that removing the line ```                 .register(HttpAuthenticationFeature.basic(                         configurationCredentials.getLogin(),                         configurationCredentials.getPass()                 )) ```  from the code above fixes this issue.  I assume that the ""register"" call will alter the underlying `ClientConfig`, which leads to a copy from the jersey runtime (i believe they have a copy on write). The jersey runtime will cleanup these copys and the `DropwizardExecutorProvider` will shutdown. In the javadoc for the `DropwizardExecutorProvider` it is stated that the `DropwizardExecutorProvider` should not be shared. However, if think it is pretty intransparent that the `DropwizardExecutorProvider` is shared just by adding a `register` call to the `WebTarget`.  I am pretty new to dropwizard and java in general. Is this a bug or expected behaviour? Or do I misuse the client api?  Kind regards Timo","closed","bug,","Kinchkun","2017-11-23T10:24:31Z","2017-11-24T18:31:42Z"
"","1933","@Context variables don't get injected when testing resources","Hello,  I am writing a test for one of my resources. It uses a @Context variable (UriInfo uriInfo). Following the documentation I used `GrizzlyWebTestContainerFactory` in order to make @Context injections work. However, I still get an error: Not inside a request scope.  My resource: ``` import io.swagger.annotations.Api;  import javax.annotation.security.PermitAll; import javax.inject.Inject; import javax.validation.constraints.NotNull; import javax.ws.rs.*; import javax.ws.rs.core.*; import java.util.Optional;  @Produces(MediaType.APPLICATION_JSON) @Api(value = ""Sessions"") public class SessionResource {   private final IUserService userService;    @Context   private UriInfo uriInfo;    @Inject   public SessionResource(IUserService userService) {     this.userService = userService;   }    @POST   @Consumes(MediaType.APPLICATION_FORM_URLENCODED)   public Response logIn(@NotNull @FormParam(""email"") String email, @NotNull @FormParam(""password"") String password) {     return Response.status(Response.Status.UNAUTHORIZED).build();   }  } ```  Code snippet from the test: ``` @Rule   public final ResourceTestRule RESOURCES = ResourceTestRule.builder()           .setTestContainerFactory(new GrizzlyWebTestContainerFactory())           .addResource(new SessionResource(userService))           .build(); ```  The exception I get: ``` ERROR [2017-02-20 17:22:19,992] org.glassfish.grizzly.servlet.ServletHandler: service exception: ! java.lang.IllegalStateException: Not inside a request scope. ! at jersey.repackaged.com.google.common.base.Preconditions.checkState(Preconditions.java:173) ! at org.glassfish.jersey.process.internal.RequestScope.current(RequestScope.java:233) ! at org.glassfish.jersey.process.internal.RequestScope.findOrCreate(RequestScope.java:158) ! at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2020) ! ... 28 common frames omitted ! Causing: org.glassfish.hk2.api.MultiException: A MultiException has 1 exceptions.  They are: ! 1. java.lang.IllegalStateException: Not inside a request scope. !  ! at org.jvnet.hk2.internal.Utilities.createService(Utilities.java:2026) ! at org.jvnet.hk2.internal.ServiceLocatorImpl.internalGetService(ServiceLocatorImpl.java:766) ! at org.jvnet.hk2.internal.ServiceLocatorImpl.getUnqualifiedService(ServiceLocatorImpl.java:773) ! at org.jvnet.hk2.internal.IterableProviderImpl.get(IterableProviderImpl.java:111) ! at org.glassfish.jersey.server.internal.inject.AbstractContainerRequestValueFactory.getContainerRequest(AbstractContainerRequestValueFactory.java:71) ! at org.glassfish.jersey.server.internal.inject.PathParamValueFactoryProvider$PathParamValueFactory.provide(PathParamValueFactoryProvider.java:93) ! at org.glassfish.jersey.server.internal.inject.ParamInjectionResolver.resolve(ParamInjectionResolver.java:134) ! at org.jvnet.hk2.internal.Utilities.justInject(Utilities.java:941) ! at org.jvnet.hk2.internal.ServiceLocatorImpl.inject(ServiceLocatorImpl.java:980) ! at org.jvnet.hk2.internal.ServiceLocatorImpl.inject(ServiceLocatorImpl.java:970) ! at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:617) ! at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184) ! at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350) ! at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ! at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255) ! at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:347) ! at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:392) ! at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:177) ! at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:369) ! at javax.servlet.GenericServlet.init(GenericServlet.java:244) ! at org.glassfish.grizzly.servlet.ServletHandler.loadServlet(ServletHandler.java:342) ! at org.glassfish.grizzly.servlet.ServletHandler.doServletService(ServletHandler.java:204) ! at org.glassfish.grizzly.servlet.ServletHandler.service(ServletHandler.java:173) ! at org.glassfish.grizzly.http.server.HttpHandler$1.run(HttpHandler.java:224) ! at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:591) ! at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:571) ! at java.lang.Thread.run(Thread.java:745) ```  Am I missing something?","closed","","yateam","2017-02-21T01:28:23Z","2017-02-21T06:27:41Z"
"","2470","Timeout of ~32 seconds","Hello,  I am using DropWizard v 1.3.1 and I am new with it.  I have developed a small endpoint which takes around 2 minutes until the response is ready to be built. It querys Jira API to concatenate a filter. (its size is 2Mb)  > @GET     @Path(""api/jira/{filter-id}"")     @Produces(MediaType.APPLICATION_OCTET_STREAM)     public Response getJiraIssuesByFilterId(@PathParam(""filter-id"") int filterId) throws QreatorException, FileNotFoundException {         TableauRoot jr = new JiraClient().getAllIssuesByFilterId(Integer.toString(filterId));         String fileName = ""jiraGetAllIssuesByFilterId"";         CommonHelper.storeInFile(fileName, jr, true);         System.out.println(""Done fetching issues from Jira."");         File file = new File(CommonHelper.getFilePathName(fileName));         FileInputStream inStream = new FileInputStream(file);         Response.ResponseBuilder response = Response.ok((Object) inStream);         response.header(""Content-Disposition"", ""attachment; filename=\""filename\"""");         response.header( ""Content-Length"", file.length() );         return response.build();     }  The beginning of the stack exception in the log is   ` org.glassfish.jersey.server.ServerRuntime$Responder: An I/O error has occurred while writing a response message entity to the container output stream. `  ` ¬† | ! java.io.IOException: Connection reset by peer `  In the middle of the stack we have this  ` Causing: org.glassfish.jersey.server.internal.process.MappableException: org.eclipse.jetty.io.EofException `  I read the docs here [dw docu](https://www.dropwizard.io/1.3.1/docs/manual/configuration.html) and relating it to default values the only one that might apply is this.  ` server:   applicationConnectors:     - type: http       idleTimeout: 30 seconds `  32 seconds after the request, the client (browser) gives me a timeout (504 status code) At this moment I can see the previous exception. I keep monitoring the file system and I see that the file is generated ~90 seconds later.   This is happening in a pod in Openshift. I have deployed this in Docker machines in bare metals and I have no issues.","closed","","yael-lorenzo","2018-08-27T19:12:59Z","2018-08-28T17:34:06Z"
"","1910","@UnitOfWork on subresource methods do not work","Hello,  consider this resource  ``` @Path(""root"") public class RootResource {   @Path(""sub"")   public SubResource sub() {     return new SubResource();   } }  public class SubResource {   @GET   @UnitOfWork   public String helloWorld() {   } } ```  During initialization `UnitOfWorkApplicationListener.UnitOfWorkEventListener` iterates over resources and their child resources in order to cache all resource methods annotated with `@UnitOfWork` into `methodMap`. Due to a possible Jersey issue, SubResource's methods won't make their way into that map. So basically, Hibernate Session won't exist within `UnitOfWork`-annotated method context.   I worked this around by populating the map during requests: ``` if (eventType == RequestEvent.Type.RESOURCE_METHOD_START) {   Method method = event.getUriInfo().getMatchedResourceMethod().getInvocable().getDefinitionMethod();   UnitOfWork unitOfWork;   if (methodMap.containsKey(method)) {     unitOfWork = methodMap.get(method);   } else {     unitOfWork = method.getAnnotation(UnitOfWork.class);     if (unitOfWork != null) {       methodMap.put(method, unitOfWork);     }   }      unitOfWorkAspect.beforeStart(unitOfWork); ```","closed","bug,","yateam","2017-02-02T06:41:45Z","2017-03-01T20:32:31Z"
"","1725","append hostname to graphiteReporter metric key prefix","Hello!  I'm running several instances of a same dropwizard project behind a load balancer, and all of them report to the same graphite host. Since all of the instances have the same config all the metrics go to graphite with the same prefix, so it gets impossible to have metrics per individual instance. I worked around this issue adding a command-line option like this in the init scirpt:  > -Ddw.metrics.reporters[0].prefix=common.prefix.for.my.app.`hostname`  I.E. using the back-ticks to add the output of the shell command ""hostname"" to the prefix for the graphite metrics. This way I get the name of the machine on the metrics and I can inspect them individually if I need to do so.  I really prefer to control this from the application config rather than the init script. Wrote  some changes for the GraphiteReporter so I can pass an option  on the yml config so it tries to get the hostname using **InetAddress.getLocalHost().getHostName()** to append it to the prefix from the config. https://github.com/rafael-driutti-olx/dropwizard/commit/94e0f0092902de7b09b3fe89dd5fb503ce0085b4  Do you think this could be useful?  If so, what's the best way to handle an eventual UnknownHostException ? I just assign ""localhost"" to the prefix... should I raise an error and/or prevent the server from starting?  ```   try {                 localHostName = InetAddress.getLocalHost().getHostName();             } catch (UnknownHostException e) {                 localHostName = ""localhost"";             } ```  Thanks!","closed","","rafael-driutti-olx","2016-09-11T20:58:28Z","2016-09-13T20:50:15Z"
"","2359","NoClassDefFoundError: com/fasterxml/jackson/databind/type/ReferenceType","Hello!  I have just upgraded my dropwizard version to 1.3.2 and I am now getting the following error:  ``` java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/type/ReferenceType 	at com.fasterxml.jackson.datatype.guava.GuavaModule.setupModule(GuavaModule.java:55) 	at com.fasterxml.jackson.databind.ObjectMapper.registerModule(ObjectMapper.java:651) 	at io.dropwizard.jackson.Jackson.configure(Jackson.java:56) 	at io.dropwizard.jackson.Jackson.newObjectMapper(Jackson.java:27) 	at com.myorg.platform.config.EsConfigurationTest.(EsConfigurationTest.java:17) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) 	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) 	at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217) 	at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266) 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 	at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runners.Suite.runChild(Suite.java:128) 	at org.junit.runners.Suite.runChild(Suite.java:27) 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.type.ReferenceType 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	... 34 more ```  Precisely the exception is thrown from this line: ``` private final ConfigurationFactory configFactory = new YamlConfigurationFactory<>(EsConfiguration.class, validator, Jackson.newObjectMapper(), ""dw""); ```  Thank you for your time and help!","closed","","Sessa93","2018-05-17T15:44:28Z","2018-05-18T08:55:02Z"
"","2494","Preventing the assets from being compiled into the Jar","Hello everyone,  I was looking for a way to disable the static assets being compiled into the jar file. Why? I am making changes to the javascript and css files while I'm running the server, however, I need the calculated results that the API provides me. Hence it's a bit of an annoying process to rebuild and launch the whole package for every change.  I've looked into this post: https://github.com/dropwizard/dropwizard/issues/54 , however, I can not seem to get this work. Is there a newly updated method or should I open a support ticket for the fact that I get 404's using this the above-shown technique?","closed","","Jorricks","2018-09-17T03:54:04Z","2018-11-14T01:38:17Z"
"","2131","Faile to handled verbose Accept-Language header","Hello Drop-wizards,  As per accept language header guidelines: 1. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language 2. https://tools.ietf.org/html/rfc7231#section-5.3.5  Drop wizard is failed to handle below header `Accept-Language: en_in,en-IN;q=0.8,en-US;q=0.6 ` Tested on below versions of drop wizard: a) 1.1.3 b) v1.2.0-rc1  Please close/ mark duplicate is this is already know or taken care of.  Exception thrown:  ``` ! javax.ws.rs.WebApplicationException: Unable to parse ""Accept-Language"" header value: ""en-US;q=0.6;en_in,en-IN;q=0.5"" ! at io.dropwizard.views.ViewMessageBodyWriter.detectLocale(ViewMessageBodyWriter.java:91) ! at io.dropwizard.views.ViewMessageBodyWriter.writeTo(ViewMessageBodyWriter.java:73) ! at io.dropwizard.views.ViewMessageBodyWriter.writeTo(ViewMessageBodyWriter.java:27) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.invokeWriteTo(WriterInterceptorExecutor.java:265) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:250) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ! at org.glassfish.jersey.server.internal.JsonWithPaddingInterceptor.aroundWriteTo(JsonWithPaddingInterceptor.java:106) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ! at org.glassfish.jersey.server.internal.MappableExceptionWrapperInterceptor.aroundWriteTo(MappableExceptionWrapperInterceptor.java:86) ! at org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) ! at org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1130) ! at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:711) ! at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444) ! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:434) ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:329) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:50) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:44) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1637) ```","closed","","Ezcred","2017-08-17T09:44:31Z","2017-08-17T11:25:43Z"
"","2534","Authenticator : access request path","Hello  Is there a way to get the requested url in my custom Authenticator ?  My auth mecanism needs the requested url to check if user is allowed to access resource.  nib","closed","","n1b0r","2018-10-24T09:03:46Z","2019-03-13T06:26:51Z"
"","1889","UnixSocketConnector support","Having bumped jetty to 9.4 (#1874), dropwizard can now support listening on unix domain sockets.  Currently, [HttpConnectorFactory](https://github.com/dropwizard/dropwizard/blob/66ef230d7587fe27204e3be90f90a703ef7726ae/dropwizard-jetty/src/main/java/io/dropwizard/jetty/HttpConnectorFactory.java#L526) is directly coupled to Jetty's ServerConnector class which is tcp-based. It also requires port configuration which is unnecessary for domain sockets.  A new ConnectorFactory with unix domain socket configuration would be great. https://github.com/eclipse/jetty.project/commit/7843b7348e6bd238595d0021e1740ac7e28ba18d  It's probably and hopefully possible to accomplish this by creating my own ConnectorFactory with a lot of duplication (or by inheriting HttpConnectorFactory if the access modifiers are right) thanks to the abstraction. But I think it's a relevant feature to support out of the box in dropwizard and is good to have it in the backlog.","closed","stale,","natnan","2017-01-17T18:29:33Z","2019-09-25T23:25:57Z"
"","2306","DropWizard 1.2.4 released?","Has DropWizard 1.2.4 been officially released? The dropwizard.io site still references 1.2.2 - just making sure this is ready for consumers to pick up.","closed","documentation,","pkwarren","2018-03-13T18:25:24Z","2018-03-13T18:53:41Z"
"","1566","Fix build for users with spaces in home directory","Had this unfortunate pleasure today, and this change fixed it :stuck_out_tongue:","closed","bug,","nickbabcock","2016-05-27T02:09:03Z","2016-05-27T08:05:23Z"
"","2030","Add JDBC interceptor configuration","Had a conversation with the author or hikaricp where tomcat jdbc should have various interceptors on by default like `ConnectionState`, and I realized that one can't specify interceptors through the db yaml. This is a good first step.  Closes #1960  CC @ololoken of #1960","closed","improvement,","nickbabcock","2017-04-26T15:25:01Z","2017-04-26T16:04:13Z"
"","1563","Enhancement to Lifecycle Setup Classes","Greetings,  I noticed that the executor service factories provided in LifecycleEnvironment do not allow you to specify a ThreadFactory directory; instead you must invoke ""threadFactory"" on the returned builder object. However, the builder creates a default thread factory in its constructor which is waste of time and resources if the code has a ThreadFactory implementation it wants to use instead of your defaults.  I've forked your codebase and created the simplest patch possible to create the functionality I am asking for (which is to specify the thread factory up front to save startup time). This simply adds a constructor the executor builders that allows specifying a ThreadFactory (the existing constructors invoke these new constructors) and exposes this via two new factory methods in LifecycleEnvironment.  Ideally, the thread factory should only be created on the invocation of ""build"" but this requires a bit of work and may change the behavior for existing users who reuse builders. As such, I opted for the light touch approach specified above. - isaki-x","closed","improvement,","isaki","2016-05-26T20:42:19Z","2016-05-30T09:48:52Z"
"","2056","JDBI: Extending DBI/DBIFactory","Greetings,  I am experimenting with extending DBIFactory to inject custom argument and column mapper factories into a custom IDBI object (which currently extends DBI, but I could just as easily use a decorator pattern). I've run into two issues (and I only need to solve one of them).  1) DBIFactory returns DBI instead of IDBI 2) DBIFactory invokes the DBI constructor with no way to intercept and inject my own version.  I can create one or more of the following patches to address this:  **Change DBIFactory to return IDBI (Problem 1)**  This will break existing code for users of dropwizard-jdbi. As such, I don't really like this idea. Also, it would remove the visibility of the registration methods for column mappers and arguments, which isn't ideal. As a result, I think this idea is a non-starter. I put it out there as it could solve my issue in a non-optimal way.  **Allow custom DBI instance creation into DBIFactory (Problem 2)**  There are two ways we can do this. If we want to be traditional, we could set up a protected method (createDBI) that could be overridden by child classes and defaults to ""new DBI()"".  If we want to go with a more Java 8-esque approach, I could add a new constructor to DBIFactory that takes a Supplier for generating new DBI instances. The current constructor would be updated to provide a default supplier. Then, the build method could just invoke ""get"" on the supplier to create new DBI instances and then operate on them as it currently does.  Please let me know your thoughts on this and I will create a patch and submit a pull request if any of this works for you. I'm open to alternatives as well; worst case I end up writing my own factory that decorates DBIFactory and returns my own IDBI implementation and updating the handful of places I reference DBIFactory to use my own object instead. I don't necessarily like this approach as I prefer to subclass DBI instead of decorating it.  Thank you!","closed","","isaki","2017-05-11T17:02:24Z","2018-06-27T20:34:36Z"
"","2107","Multiple servlets map to path /* error when using Assets","Good evening,  I'm rather new to Java and Dropwizard, but I'm trying to use this framework to create a REST server and a front-end using VueJS.  What I thought was to use Assets to serve an index.htm (eg: www.example.com/index.htm) and having a /js/ and /css/ folders to JavaScript and CSS files respectively, but when configuring Assets as below I get the error in ""Multiple servlets map to path /*: static[mapped:JAVAX_API:null],io.dropwizard.jersey.setup.JerseyServletContainer-5d5160e6[mapped:EMBEDDED:null]"".  The code I'm using to configure Assets is this one:  @Override public void initialize(final Bootstrap bootstrap) {     bootstrap.addBundle(new AssetsBundle(""/assets"", ""/"", ""index.htm"")); }  My project [1] is basically the Hello World example with this Asset, I've tried to follow the manual as per [2] and as it wasn't working I've created a thread in dropwizard-user as you can see in [3], I've also searched for possible solutions on the group and found this [4] but that didn't work either.  I hope this is just a simple regression or a misconfiguration.  Regards,   Flavio  [1]: https://github.com/fgsilveira/phoenix [2]: http://www.dropwizard.io/1.1.2/docs/manual/core.html#serving-assets [3]: https://groups.google.com/forum/#!topic/dropwizard-user/k53upUhORg4 [4]: https://groups.google.com/forum/#!topic/dropwizard-user/a_jNCLE7oXM","closed","","fgsilveira","2017-07-18T14:21:00Z","2017-11-19T20:15:42Z"
"","1782","Missing FormDataParam value in validation","Given a resource like:  ``` java @POST @Consumes(MediaType.MULTIPART_FORM_DATA) @Path(""/form-quickstart2"") public int strDifference(         @NotEmpty @FormDataParam(""str1"") String str1,         @NotEmpty @FormDataParam(""str2"") String str2 ) {     return str1.length() - str2.length(); } ```  A request that violates both constraints returns  ``` json {   ""errors"": [     ""The request body may not be empty"",     ""The request body may not be empty""   ] } ```  Ideally it would return a variant of:  ``` json {   ""errors"": [     ""The str1 request body may not be empty"",     ""The str2 request body may not be empty""   ] } ```  The fix for this appears to be non-trivial, as `dropwizard-forms` is an add-on so it would need to configure the validator and possibly other extension points. In a perfect world the diff would something like:  ``` diff diff --git a/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java b/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java index e223199..7425e3c 100644 --- a/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java +++ b/dropwizard-jersey/src/main/java/io/dropwizard/jersey/validation/ConstraintMessage.java @@ -94,7 +94,9 @@ public class ConstraintMessage {          switch (parent.getKind()) {              case PARAMETER:                  final Parameter param = parameters.get(parent.as(Path.ParameterNode.class).getParameterIndex()); -                if (param.getSource().equals(Parameter.Source.UNKNOWN)) { +                if (param.getSourceAnnotation().equals(FormDataParam.class)) { +                    return Optional.of(/* fill in something here */) +                } else if (param.getSource().equals(Parameter.Source.UNKNOWN)) {                      return Optional.of(Joiner.on('.').join(Iterables.skip(violation.getPropertyPath(), 2)));                  }              default:  ```  Since Jersey core doesn't understand form data param either, it marks the source as `UNKNOWN` as well. One has to query the `getSourceAnnotation()`.  There are probably several improvements that should be incorporated into `FormDataParam` for instance, how to differentiate nested errors","closed","stale,","nickbabcock","2016-10-22T14:27:39Z","2019-09-03T00:00:54Z"
"","2055","Cannot cancel asynchronous requests by Jersey Client","From what I've digged, this is most likely due to Jersey Client's capabilities. But I figured it may be good to document here as well.  ```     Future future = client.target(         ""https://test.server.com/action"")          .async()         .post(Entity.json(object));      future.cancel(true); ```  I can think of three expected results depending on the state of the request: - Interrupt connection (but somehow not kill if it's keepAlive) and the HTTP request, so the server receives an half-baked HTTP request. Or kill the connection altogether. (Not sure if Apache HTTP client supports this atm) - If the connection is made and the request is already being transmitted, let it finish. If not, do not even proceed. This can be the case when the client is waiting to lease connection from the connection pool. And it's possible by `CloseableHttpResponse.abort()` with dropwizard's Apache HTTP client configuration. - Let everything (connection lease, generate and transmit HTTP request, read response) proceed, but cancel the `Future` object as well as parsing the response. `Future.get()` will return immediately. I believe this is the case at the moment.  **What I've tested:** - Set `'maxConnectionsPerRoute': 1` - Prepare an endpoint that returns result in 10 seconds. - Make 6 requests at the same time, and then cancel them 1 second later.  **Result:** - All futures were cancelled immediately. - All InvocationCallback objects triggered `failed` method with CancelException. - All 6 requests arrived to endpoint with 10 seconds in between each of them.  **What I'd like:** - First request abruptly interrupted from the endpoint perspective. (Optional, for my case) - Other 5 requests never even reached to endpoint.   **My context:** The order of the requests is important for one of our use cases. Due to some reliability issues, we have `retries` enabled in client configuration. `'maxConnectionsPerRoute': 1` is also for the same reason. What happens is that, in some occasions, there are subsequent requests which are ordered fine. But sometimes, the first attempt of the first request fails and it attempts to retry and ends up at the end of the queue of the connection pool; hence pushing the outdated version of the request in the end. I wanted to avoid this by cancelling the old request but encountered this issue.   **What I've digged from the code:** `DropwizardApacheConnector` class generates `HttpUriRequest` variable (originally  from Jersey's `ClientRequest` object. The `HttpUriRequest` variable is originally `RequestBuilder.InternalEntityEclosingRequest` object and has `abort()` method which should accomplish what I need. Unfortunately, that's not enough as Jersey client doesn't provide a way to tie the `Future` object it returns to `DropwizardApacheConnector`; otherwise this would have been a pull request. There is only `AsyncConnectorCallback` object passed by Jersey but it's very limited.  May be related but it's very old: https://java.net/jira/browse/JERSEY-2162","closed","stale,","natnan","2017-05-11T15:28:19Z","2019-08-19T16:00:36Z"
"","2455","Dropwizard sessions leak memory","From what I have gathered, the recommended way to support sessions in Dropwizard is to add a `SessionHandler()` to the environment:  ```java environment.servlets().setSessionHandler(new SessionHandler()); ```  This however, leads to a memory leak with `org.eclipse.jetty.server.session.SessionData` objects not being cleaned up. I have set the max inactive interval and session cache eviction policy to `SessionCache.EVICT_ON_INACTIVITY`, which means that session should expire after 1s of inactivity. Profiling the live objects on the heap in jmap show the following, after repeated `curl` requests to the server:  ```console num   #instances      #bytes  class name ----------------------------------------------------------------------------------------------- 31:         1315      126240  org.eclipse.jetty.server.session.SessionData 43:         1315       63120  org.eclipse.jetty.server.session.Session 44:         1315       63120  org.eclipse.jetty.server.session.Session$SessionInactivityTimeout ```  These session objects are never cleaned up and eventually lead to an OOM.  After a little bit of investigation, the issue seems to be coming from https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jetty/src/main/java/io/dropwizard/jetty/ContextRoutingHandler.java#L18 The class extends `AbstractHandler` instead of `AbstractHandlerContainer` (and doesn't override https://github.com/eclipse/jetty.project/blob/jetty-9.4.x/jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java#L74). This is necessary for the session cleanup, because the children `SessionHandler` for all contexts need to be discovered by the jetty server.  The cleanup is triggered by jetty hosuekeeper's call to `scavenge()` in the `SessionHandler()` - https://github.com/eclipse/jetty.project/blob/jetty-9.4.x/jetty-server/src/main/java/org/eclipse/jetty/server/session/SessionHandler.java#L1276 - https://github.com/eclipse/jetty.project/blob/jetty-9.4.x/jetty-server/src/main/java/org/eclipse/jetty/server/session/DefaultSessionIdManager.java#L472 - https://github.com/eclipse/jetty.project/blob/jetty-9.4.x/jetty-server/src/main/java/org/eclipse/jetty/server/session/DefaultSessionIdManager.java#L525  The call to `_server.getChildHandlersByClass(SessionHandler.class);` returns an empty list because when examining the chain of handlers, `ContextRoutingHandler` hides the fact that it contains `MutableServletContextHandler` because it doesn't expose its children handlers correctly.  I think the solution would be to have `ContextRoutingHandler` extend `AbstractHandlerContainer` and override `expandChildren(...)`, but I will defer to the maintainers, who will probably understand this better!  --- Update: It seems that more than just the session data contains a memory leak - there is a also a leak with the `SSLSessionImpl`, which shows in jmap:  ```console num   #instances      #bytes  class name -----------------------------------------------------------------------------------------------  6:       188528    19661252  sun.security.ssl.SSLSessionImpl 28:       188528     3095728  sun.security.ssl.SSLSessionId ```","closed","needs code,","dannyqiu","2018-08-14T18:54:15Z","2018-08-23T00:12:49Z"
"","2195","Early end of file results in 500 instead of 400","From time to time, we see some 500s in our dropwizard applications when looking at the metric `io.dropwizard.jetty.MutableServletContextHandler.5xx`. Looking at the logs, doesn't show any errors, also the `io.dropwizard.jersey.errors.LoggingExceptionMapper` is not hit.  Then we found out, that at the same time, these mysterious 500s happen, also this warning shows up in the logs: ``` WARN  [2017-11-06 16:21:57,507] [] org.eclipse.jetty.servlet.ServletHandler: ! org.eclipse.jetty.io.EofException: Early EOF ! at org.eclipse.jetty.server.HttpInput$3.noContent(HttpInput.java:877) ! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:189) ! at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:141) ! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:200) ! ... 46 common frames omitted ! Causing: javax.ws.rs.ProcessingException: org.eclipse.jetty.io.EofException: Early EOF ! at org.glassfish.jersey.message.internal.EntityInputStream.isEmpty(EntityInputStream.java:217) ! at org.glassfish.jersey.message.internal.InboundMessageContext.hasEntity(InboundMessageContext.java:772) ! at org.glassfish.jersey.servlet.WebComponent.filterFormParameters(WebComponent.java:670) ! at org.glassfish.jersey.servlet.WebComponent.initContainerRequest(WebComponent.java:520) ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:471) ! ... 42 common frames omitted ! Causing: javax.servlet.ServletException: javax.ws.rs.ProcessingException: org.eclipse.jetty.io.EofException: Early EOF ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:489) ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1772) ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1759) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:50) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:44) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1759) ! at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:120) ! at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:135) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1759) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:240) ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) ! at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:426) ! at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68) ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56) ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134) ! at org.eclipse.jetty.server.Server.handle(Server.java:534) ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) ! at org.eclipse.jetty.server.HttpChannelOverHttp.earlyEOF(HttpChannelOverHttp.java:229) ! at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1412) ! at org.eclipse.jetty.server.HttpConnection.parseRequestBuffer(HttpConnection.java:351) ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:234) ! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283) ! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108) ! at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589) ! at java.lang.Thread.run(Thread.java:745) ```  Is it possible, that the way Jetty handles early end of file in requests changed and `io.dropwizard.jersey.errors.EarlyEofExceptionMapper` does no longer work?  FYI: We are currently on dropwizard `1.0.9`.","closed","stale,","scho","2017-11-07T20:17:04Z","2019-08-19T15:01:00Z"
"","1705","Config override for showDetails in JsonProcessingExceptionMapper","From a discussion in https://github.com/dropwizard/dropwizard/issues/1597 there is some want to have the ability to override the showDetails flag when registering the `JsonProcessingExceptionMapper` with jersey. If I just override the existing registered component in my application I receive the following warning log event at application startup which is less than ideal, though also not anything to be concerned about as I am intentionally re-registering this component.  ``` {   ""@timestamp"":""2016-08-23T03:07:17.054+00:00"",   ""@version"": 1,   ""message"":""The following warnings have been detected: WARNING: Cannot create new registration for component type class io.dropwizard.jersey.jackson.JsonProcessingExceptionMapper: Existing previous registration found for the type.\n"",   ""logger_name"":""org.glassfish.jersey.internal.Errors"",   ""thread_name"":""main"",   ""level"":""WARN"",   ""level_value"":30000 } ```  The approach I took was to: 1. Add config property to AbstractServerFactory to expose setting of this boolean property 2. Default to existing behavior `showDetails=false` (the default constructor in `JsonProcessingExceptionMapper`). 3. Added tests for both default and override cases (which required me to expose the value of `showDetails` within the `JsonProcessingExceptionMapper` via a getter).","closed","feature,","tmack8001","2016-08-23T03:34:30Z","2016-08-28T22:37:29Z"
"","2196","FreeMarker .ftlh and .ftlx files aren't working out of the box","FreeMarker recommends using ftlh and ftlx file extensions to turn on HTML and XML auto-escaping when its `incompatible_improvements` setting is at least 2.3.24. Currently it won't work, as `io.dropwizard.views.freemarker.FreemarkerViewRenderer.isRenderable` only matches the `.ftl` suffix.","closed","","ddekany","2017-11-07T22:24:33Z","2017-11-19T19:04:45Z"
"","1608","Upgrade to Jetty 9.3.10.v20160621","For some reason, our tests fail during upgrade to Jetty 9.3.10.v20160621. We should investigate a reason for it.","closed","","arteam","2016-06-23T07:37:27Z","2016-07-28T07:11:00Z"
"","1811","Need finer-grain control of exception behaviour in view renderers","For background details, please refer to the following user group thread: https://groups.google.com/forum/#!topic/dropwizard-user/wy8ksKjz-HA  This issue is a feature request to enable finer-grain control over exceptions thrown when rendering views, so that one can use custom `ExceptionHandler`s to handle certain exception flows.  For example, when using Mustache a `MustacheNotFoundException` is thrown by the Mustache Java API when the template is not found. It is then wrapped/re-thrown as a `RuntimeException` by `MustacheViewRenderer`, which finally gets caught and re-thrown as a `WebApplicationException` with a generic ""template error"" response. The exception handler logic would ultimately catch this `WebApplicationException` will simply return the enclosed `Response` instead of filtering further. What I would like to be able to do is to somehow use an `ExceptionHandler` to catch a wrapped exception and inspect the cause which is the view implementation-specific exceptions (Mustache, Fremarker, etc.) In my case, I want to create a 404 error response with custom page instead of the generic 500 error response.  It achieve this, one can perhaps add a config option which `ViewMessageBodyWriter` uses to determine if the re-thrown `WebApplicationException` should include a `Response` or the caught exception in the cause. Then I have a choice to drill down into the exception causes and decide what to do with it in my custom `ExceptionHandler`. (But of course, this will not be view renderer agnostic by my own choice, as I am handling renderer-specific exceptions manually.)  Please let me know if more info is needed, otherwise I appreciate that you consider this as a feature request.","closed","","acwwat","2016-11-09T22:35:32Z","2016-11-18T08:53:01Z"
"","1681","Integration Tests with DropwizardTestSupport. HTTP Server not available for tests","Following instructions on Testing Dropwizard 1.0.0 for Non-JUnit integration tests, I developed tests for a resource using DropwizardTestSupport. The DropwizardTestSupport seems to be booting up the server. I see the whole sequence being printed on the console.  But it doesn't seem to be available for connections. It appears to have stopped right after the startup too. But no exceptions around it. Any ideas? Here is my code and the log.  ``` java public class UserResourceTest {      public static final DropwizardTestSupport SUPPORT =             new DropwizardTestSupport(AppApplication.class,                     ResourceHelpers.resourceFilePath(""app-integration-testing.yaml""),                     ConfigOverride.config(""server.applicationConnectors[0].port"", ""0"") // Optional, if not using a separate testing-specific configuration file, use a randomly selected port             );      @BeforeClass     public void beforeClass() {         SUPPORT.before();     }      @AfterClass     public void afterClass() {         SUPPORT.after();     }      @Test     public void getAllUsers() throws Exception{         Client client = new JerseyClientBuilder(SUPPORT.getEnvironment()).build(""test client"");         Response response = client.target(                 String.format(""http://localhost:%d/service/v1/users"", SUPPORT.getLocalPort()))                 .request().get();          log.debug(""Response : {}"",response);     } }  Logs:   **INFO  [2016-08-09 09:41:26,688] o.e.j.s.ServerConnector: Started application@5626d18c{HTTP/1.1}{0.0.0.0:56919} INFO  [2016-08-09 09:41:26,689] o.e.j.s.ServerConnector: Started admin@45e9b12d{HTTP/1.1}{0.0.0.0:23460} INFO  [2016-08-09 09:41:26,689] o.e.jetty.server.Server: Started @4307ms INFO  [2016-08-09 09:41:36,877] o.e.j.s.ServerConnector: Stopped application@5626d18c{HTTP/1.1}{0.0.0.0:0} INFO  [2016-08-09 09:41:36,878] o.e.j.s.ServerConnector: Stopped admin@45e9b12d{HTTP/1.1}{0.0.0.0:23460}** INFO  [2016-08-09 09:41:36,880] o.e.j.s.h.ContextHandler: Stopped i.d.j.MutableServletContextHandler@7f0d8eff{/,null,UNAVAILABLE} INFO  [2016-08-09 09:41:36,883] o.e.j.s.h.ContextHandler: Stopped i.d.j.MutableServletContextHandler@1fe8f5e8{/,null,UNAVAILABLE} DEBUG [2016-08-09 09:41:36,893] j.management.mbeanserver:  name = org.mongodb.driver:type=ConnectionPool,clusterId=57aa07b414ffad14780ce1b2,host=169.55.89.254,port=27017 DEBUG [2016-08-09 09:41:36,893] j.management.mbeanserver: name = org.mongodb.driver:type=ConnectionPool,clusterId=57aa07b414ffad14780ce1b2,host=169.55.89.254,port=27017 DEBUG [2016-08-09 09:41:36,893] j.management.mbeanserver: name = org.mongodb.driver:type=ConnectionPool,clusterId=57aa07b414ffad14780ce1b2,host=169.55.89.254,port=27017 DEBUG [2016-08-09 09:41:36,893] j.management.mbeanserver: Send delete notification of object org.mongodb.driver:clusterId=57aa07b414ffad14780ce1b2,host=169.55.89.254,port=27017,type=ConnectionPool DEBUG [2016-08-09 09:41:36,893] j.management.mbeanserver: JMX.mbean.unregistered org.mongodb.driver:type=ConnectionPool,clusterId=57aa07b414ffad14780ce1b2,host=169.55.89.254,port=27017 Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 14.389 sec <<< FAILURE! getAllUsers(com.v1.api.resources.UserResourceTest)  Time elapsed: 10.179 sec  <<< FAILURE! **javax.ws.rs.ProcessingException: org.apache.http.NoHttpResponseException: localhost:56919 failed to respond**         at io.dropwizard.client.DropwizardApacheConnector.apply(DropwizardApacheConnector.java:109)         at org.glassfish.jersey.client.ClientRuntime.invoke(ClientRuntime.java:252)         at org.glassfish.jersey.client.JerseyInvocation$1.call(JerseyInvocation.java:684)         at org.glassfish.jersey.client.JerseyInvocation$1.call(JerseyInvocation.java:681)         at org.glassfish.jersey.internal.Errors.process(Errors.java:315)         at org.glassfish.jersey.internal.Errors.process(Errors.java:297)         at org.glassfish.jersey.internal.Errors.process(Errors.java:228)         at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:444)         at org.glassfish.jersey.client.JerseyInvocation.invoke(JerseyInvocation.java:681)         at org.glassfish.jersey.client.JerseyInvocation$Builder.method(JerseyInvocation.java:411)         at org.glassfish.jersey.client.JerseyInvocation$Builder.get(JerseyInvocation.java:311)         at com.v1.api.resources.UserResourceTest.getAllUsers(UserResourceTest.java:47) Caused by: org.apache.http.NoHttpResponseException: localhost:56919 failed to respond         at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:143)         at org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:57)         at org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:261)         at org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:165)         at org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:167)         at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:272)         at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:124)         at com.codahale.metrics.httpclient.InstrumentedHttpRequestExecutor.execute(InstrumentedHttpRequestExecutor.java:44)         at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:271)         at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:184)         at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:88)         at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)         at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:184)         at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)         at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:107)         at io.dropwizard.client.DropwizardApacheConnector.apply(DropwizardApacheConnector.java:87)         ... 45 more   ```","closed","","pushkarajc","2016-08-09T17:31:27Z","2016-09-25T14:41:59Z"
"","2432","Inject validator feature","Following discussion at https://github.com/dropwizard/dropwizard/pull/2427  ###### Problem: Somewhere during update to `1.0.0` we lost ability to inject into custom `ConstraintValidator`s because validator factory was moved into Dropwizard.  ###### Solution: PR Introduces `InjectValidatorBundle` to enable validator injections inside jersey resources. Note that validators for dropwizard configuration are not affected because `ConstraintValidatorFactory` is updated after jersey initialisation.  Under the hood: There is new `MutableValidatorFactory` registered by default in validator configuration that allows to swap factory at runtime. So after jersey initialisation is possible to change `ConstraintValidatorFactoryImpl` with `InjectingConstraintValidatorFactory`  ###### Result: Closes #2234, making injections available in ConstraintValidators","closed","feature,","alex-shpak","2018-07-13T11:38:37Z","2018-09-30T08:16:30Z"
"","1722","Register the default HealthCheckRegistry as ""default""","Following #1513, this PR adds the default `HealthCheckRegistry` to `SharedHealthCheckRegistries`.","closed","improvement,","joschi","2016-09-07T09:48:11Z","2016-09-07T10:58:20Z"
"","2492","Migrate jetty min data rates to Sizes","Follow up to #2490  ###### Problem:  `minRequestDataRate` and `minResponseDataRate` configured via numeric values are not indicative of they are configuring.  ###### Solution:  Migrate both to `Size` and rename to contain a `PerSecond` suffix.  ```yaml minRequestDataPerSecond: '42 bytes' minResponseDataPerSecond: '200 bytes' ```  ###### Result:  A backwards incompatible change (`minRequestDataRate` shipped with dropwizard 1.3)  ###### Alternatives:  - Avoid the rename, as one should strive for a 1:1 mapping between configuration fields and jetty API  - Avoid the rename by creating a `Rate` class that will parse something like `10 bytes/s`","closed","improvement,","nickbabcock","2018-09-15T20:16:43Z","2018-09-15T21:19:04Z"
"","1746","Update jackson from v2.7.6 -> v2.7.8","Fixes: https://github.com/FasterXML/jackson-databind/issues/1383","closed","","jmoney","2016-09-28T01:09:22Z","2016-09-30T14:05:56Z"
"","1755","Update jackson version from 2.7.6 -> 2.7.8","Fixes: FasterXML/jackson-databind#1383","closed","improvement,","jmoney","2016-09-30T14:05:34Z","2016-09-30T14:45:24Z"
"","1832","Fix guava deprecations with 20.0 update","Fixes the deprecations introduced in the Guava 20.0 update.  Most of the `propagate` can be converted to a `throw new RuntimeException`. The one instance where `throwIfUnchecked` functionality is kept is in `DAOTestRule` due mainly to a test that is written an older junit style that only looks at the shallowest exception and not the root cause.","closed","improvement,","nickbabcock","2016-11-17T16:34:24Z","2016-11-18T16:26:34Z"
"","1989","making DropwizardSl4jRequestLogger public instead of package private","fixes https://github.com/dropwizard/dropwizard/issues/1988","closed","improvement,","qinfchen","2017-03-29T21:40:56Z","2017-04-07T20:48:43Z"
"","1732","OptionalMessageBodyWriter to return `NoContentException` instead of `NotFoundException`","fixes https://github.com/dropwizard/dropwizard/issues/1727","closed","improvement,","qinfchen","2016-09-19T19:43:29Z","2016-10-25T15:15:41Z"
"","2460","Extend from AbstractHandlerContainer instead of AbstractHandler","Fixes #2455","closed","bug,","jplock","2018-08-18T12:31:16Z","2018-08-28T14:55:26Z"
"","2386","Update liquibase to 3.6.1","Fixes #2385  By the way it might be nice to have a message about the change to checksums in Liquibase 3.6 somewhere in Dropwizard's release notes, I nearly had a heart attack when I ran a `db status` this morning ;)","closed","bug,","FredDeschenes","2018-06-11T15:05:53Z","2018-06-22T21:50:59Z"
"","2369","Upgrade Jdbi3 to 3.2.1","Fixes #2365","closed","improvement,","arteam","2018-05-24T22:22:50Z","2018-06-22T21:50:59Z"
"","2283","Update release notes","Fixes #2282","closed","documentation,","jplock","2018-02-25T17:52:12Z","2018-02-26T15:33:44Z"
"","2213","Update Freemarker and support multiple extensions for views (#2196)","Fixes #2196 but breaks compatibility for external `ViewRenderer`s (although it's a simple fix) and configuration files (also simple to change).  - Updated Freemarker to 2.3.27 - Renamed `ViewRenderer::getSuffix` to `getConfigurationKey` - Changed configuration keys in yaml/json file:   * `.ftl` -> `freemarker`   * `.mustache` -> `mustache` - Use regexes to match renderable templates in `ViewRenderer`s (Freemarker's `.ftlh`/`.ftlx` extensions can now be used, as well as `.ftl.html` and similar paths)","closed","improvement,","FredDeschenes","2017-11-16T18:52:05Z","2017-11-24T18:14:42Z"
"","2210","Set database config '@MinDuration' to 1 millisecond","Fixes #2130, more info in #2167.  This actually makes it to be >= 1 of any TimeUnit (the unit specified in the annotation is irrelevant when the value is 0), I just set them to milliseconds to be clearer that it can be a low value.","closed","improvement,","FredDeschenes","2017-11-14T19:26:47Z","2019-03-12T13:57:50Z"
"","2059","Add support for HTML error responses and other non-JSON content types","Fixes #2038 .  This adds `ErrorEntityWriter`, a generic class that works for HTML error responses but also for other content types. Unit test + docs included.","closed","improvement,","BenScholl","2017-05-16T16:36:05Z","2017-06-11T12:06:04Z"
"","1976","Remove javax.el from jersey-bean-validation","Fixes #1974","closed","improvement,","vrolijken","2017-03-23T10:15:12Z","2017-03-23T11:06:52Z"
"","1917","Add support for neverBlock on AsyncAppenders","fixes #1916","closed","improvement,","markelliot","2017-02-06T21:54:08Z","2017-02-07T06:43:54Z"
"","1646","Upgrade to Jackson 2.7.6","Fixes #1627","closed","bug,","joschi","2016-07-26T07:22:04Z","2016-07-26T07:51:32Z"
"","2133","Allow commands to customize exception handling","Fix for #2122  Allows for commands to catch configuration, environment, and command exceptions in one place (eg. forcing all commands to print the stack trace is less than desirable)  Below is an example of a custom command that will print the stack trace to stderr if someone passed in `--debug`, else print the error message to stdout.  ```java public static final class CustomCommand extends Command {     @Override     public void configure(Subparser subparser) {         subparser.addArgument(""--debug"").action(Arguments.storeTrue());     }      @Override     public void run(Bootstrap bootstrap, Namespace namespace) throws Exception {         throw new RuntimeException(""I did not expect this!"");     }      @Override     public void onError(Cli cli, Namespace namespace, Throwable e) {         if (namespace.getBoolean(""debug"")) {             super.onError(cli, namespace, e);         } else {             cli.getStdOut().println(e.getMessage());         }     } } ```  Reviews, suggestions welcomed. Some things to think about:  - I am unsure whether to keep `Cli` argument in `onError` or replace it with `stdOut` and `stdErr` directly from `Cli` - Should configured commands get another argument for onError, except it has configuration (if parsed correctly?). Same thing with environment commands. - I decided to not allow customization of HelpScreenException logging  EDIT: I should clarify, this `onError` gets called before `onFatalError` so `onError` doesn't need to do `System.exit(1)`","closed","improvement,","nickbabcock","2017-08-18T18:17:12Z","2017-08-24T19:22:26Z"
"","1764","Add enum constraints to validation docs","First doc update for #1734","closed","documentation,","nickbabcock","2016-10-07T02:55:01Z","2016-10-07T11:51:28Z"
"","1582","Add note to Doc : migrate about Migrating with DB firebird","FireBird will throw SQLException(""Validation Query Failed, enable logValidationErrors ..."").. To fix that its necessary to set  validationQuery to  ""select 1 from rdb$database""","closed","documentation,","mabuthraa","2016-06-03T00:36:14Z","2016-06-04T20:51:31Z"
"","1888","FuzzyEnumModule break the @JsonProperty  deserialize logic for enum type","FasterXMLsupport the @JsonProperty for serialize/deserialize  enum type. `public enum Event {     @JsonProperty(""forgot password"")     FORGOT_PASSWORD; }` refer code https://github.com/FasterXML/jackson-databind/commit/707db7a972e2d088647450f9a890c438fb735933  But it's seem FuzzyEnumModule  break the deserialize logic. In FuzzyEnumModule , it's can't deserialize ""**forgot password**"" to enum.","closed","bug,","zizifn","2017-01-16T12:25:48Z","2017-02-02T07:22:03Z"
"","1833","Add IEEE Minute Abbreviation to Duration","Fancy title for adding `min` and `mins` abbreviations for minute to `Duration`  [The IEEE table of abbreviations](http://www.ewh.ieee.org/soc/ias/pub-dept/abbreviation.pdf) for you viewing pleasure üìö","closed","improvement,","nickbabcock","2016-11-17T16:52:53Z","2016-11-17T17:39:42Z"
"","1709","DropwizardTestSupport not compatible with Failsafe 2.19","Failsafe 2.19 now runs tests out of JAR files: https://issues.apache.org/jira/browse/SUREFIRE-855  DropwizardTestSupport assumes that `configPath` can be a String (the file path) but this isn't possible for config files located inside JAR files.  The only way I can think of fixing this is to replace `String configPath` with a URI, then open an `InputStream` to read the config file whether it resides in target/classes or inside a JAR file.  However, you just released version 1.0.0 and this sounds like a breaking change ;)","closed","needs code,","cowwoc","2016-08-25T02:10:59Z","2019-03-03T13:17:08Z"
"","1733","Feature req: allow per-metric filtering of convert...To() in graphite reporter","Explanation: Timers within an application come in various resolutions but the graphite reporter applies a general conversion over all, it would be nice to be able to apply multiple filtered conversions so that metrics can be published at convenient resolutions. For convenience reasons the most granular should apply.  How the setup would look like:  ``` mms_units = new MetricFilter() {         @Override         public boolean matches(String name, Metric metric) {             ....;         }     }   reporter = GraphiteReporter.forRegistry(environment.metrics())                 .convertRatesTo(TimeUnit.SECONDS, )                 .convertDurationsTo(TimeUnit.MILLISECONDS) //This would default all metrics                 .convertDurationsTo(TimeUnit.MICROSECONDS, mms_units) //This would override the granularity for the filtered metrics                 .filter(MetricFilter.ALL)                 .build(graphite);  ```","closed","","mrares","2016-09-21T08:12:45Z","2016-09-21T08:18:58Z"
"","1791","Log WebApplicationException redirects","Example use case: log OAuth2 errors.","closed","","jroitgrund","2016-11-01T16:18:03Z","2016-12-07T16:01:30Z"
"","2008","Using @Valid annotation on resource methods that follow bean naming conventions causes unexpected behavior","Example project demonstrating bug [here](https://github.com/campspot/dropwizard-resource-validation-bug)  Basically, it you put the `@Valid` annotation on a resource method that follows bean naming conventions (starts with `get` and has no arguments) it will always run that resource method code whenever you call **any** other resource method in that class. If you call the problematic method it will run twice.  Here is a resource definition from the above sample project:  ```Java @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path(""/validated"") public class ValidatedResource {     private final Logger logger = LoggerFactory.getLogger(ValidatedResource.class);      @GET     @Path(""/foo"")     @Valid     public Foo getFoo() {         logger.info(""######################### GET FOO"");         return new Foo(""bloop"");     }      @GET     @Path(""/bar"")     public Bar getBar() {         logger.info(""######################### GET BAR"");         return new Bar(27);     } } ```  If you do a `curl localhost:8080/validated/foo` and look at the logs from the Java server, you will see:  ``` INFO  [2017-04-12 22:13:59,083] com.campspot.resources.ValidatedResource: ######################### GET FOO INFO  [2017-04-12 22:13:59,086] com.campspot.resources.ValidatedResource: ######################### GET FOO 0:0:0:0:0:0:0:1 - - [12/Apr/2017:22:13:59 +0000] ""GET /validated/foo HTTP/1.1"" 200 16 ""-"" ""curl/7.51.0"" 64 ```  And if you do `curl localhost:8080/validated/bar` you will see:  ``` INFO  [2017-04-12 22:14:02,676] com.campspot.resources.ValidatedResource: ######################### GET FOO INFO  [2017-04-12 22:14:02,677] com.campspot.resources.ValidatedResource: ######################### GET BAR 0:0:0:0:0:0:0:1 - - [12/Apr/2017:22:14:02 +0000] ""GET /validated/bar HTTP/1.1"" 200 13 ""-"" ""curl/7.51.0"" 9 ```  This seems like undesirable behavior.   As a workaround, you can do any of the following:  - rename `getFoo` to a non bean name e.g. `fetchFoo`  - Remove the `@Valid` annotation  - Add an argument to the `getFoo` method (like a query param)","closed","","scottaj","2017-04-12T23:37:30Z","2017-04-18T13:33:49Z"
"","2015","Dropwizard ignoring  JsonProperty for the class used as HTTP POST METHOD parameter from","Example : Any maven repository contains the class **resiterPara.java** with this following property.  **resiterPara.java** @JsonProperty(""first_name"")  private String firstName;  In Drop wizard I have class with following structure: (POST METHOD TO REGISTER ENDPOINT) @POST     @Path(""/register"")     @Produces(MediaType.APPLICATION_JSON)     public Response register(**resiterPara** params) throws IOException {         return exec.registerSite(params);     }  **_Its gives me error while I am passing Json with the same name as JsonProperty contains_**  {   ""first_name"": ""test""   }  **_Its works fine with actual property name_:** {   ""firstName"": ""test""   }  **Why it is not working with JsonProperty?**","closed","","ghost","2017-04-18T11:29:05Z","2017-04-18T16:58:22Z"
"","1659","Providing a logFormat on requestLog appenders results in PARSER_ERROR","Example  ```   requestLog:     appenders:       - type: console         logFormat: ""%-5level [%thread]: %message%n"" ```  produces this in logs  > %PARSER_ERROR[level] [%PARSER_ERROR[thread]]: %PARSER_ERROR[message]  DW 1.0","closed","","tjcutajar","2016-07-31T13:25:38Z","2016-08-01T19:23:21Z"
"","2029","Database and template property is compulsory in yaml file and the configurations","Error:  io.dropwizard.configuration.ConfigurationValidationException: config.yml has the following errors:   * database.driverClass may not be null   * database.url may not be null   * template may not be empty  I don't want to keep template, defaultName, database properties. what should I do? It is compolsory to keep it in yaml and set getter and setter in configuration file?  Instead of this properties I want to configure my custom properties..","closed","","ghost","2017-04-26T13:46:49Z","2017-05-18T20:57:21Z"
"","2436","Jetty onIncompleteFlush 100% CPU","Encountered this in production using the Dropwizard 1.3.5 which depends on Jetty 9.4.11.v20180605 running on OpenJDK Runtime Environment (build 1.8.0_162-8u162-b12-0ubuntu0.16.04.2-b12).  I haven't found a relevant reported bug in the jetty project yet.  Similar report here: http://dev.eclipse.org/mhonarc/lists/jetty-users/msg08551.html  **Linux thread**  PID   TID USER       %CPU  TIME+ THREAD  5979 18814 ubuntu     99.9  28:40.57 dw-1157 - POST /app/account/context  **Stack Trace of spinning thread:** ""dw-1157 - POST /app/account/context"" #1157 prio=5 os_prio=0 tid=0x00007f67a9635800 nid=0x497e runnable [0x00007f676f3f0 000]    java.lang.Thread.State: RUNNABLE         at java.lang.ThreadLocal$ThreadLocalMap.getEntryAfterMiss(ThreadLocal.java:444)         at java.lang.ThreadLocal$ThreadLocalMap.getEntry(ThreadLocal.java:419)         at java.lang.ThreadLocal$ThreadLocalMap.access$000(ThreadLocal.java:298)         at java.lang.ThreadLocal.get(ThreadLocal.java:163)         at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.onIncompleteFlush(SslConnection.java:547)         at org.eclipse.jetty.io.AbstractEndPoint$2.onIncompleteFlush(AbstractEndPoint.java:54)         at org.eclipse.jetty.io.WriteFlusher.write(WriteFlusher.java:332)         at org.eclipse.jetty.io.AbstractEndPoint.write(AbstractEndPoint.java:380)         at org.eclipse.jetty.server.HttpConnection$SendCallback.process(HttpConnection.java:804)         at org.eclipse.jetty.util.IteratingCallback.processing(IteratingCallback.java:241)         at org.eclipse.jetty.util.IteratingCallback.iterate(IteratingCallback.java:224)         at org.eclipse.jetty.server.HttpConnection.send(HttpConnection.java:538)         at org.eclipse.jetty.server.HttpChannel.sendResponse(HttpChannel.java:795)         at org.eclipse.jetty.server.HttpChannel.write(HttpChannel.java:846)         at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:240)         at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:216)         at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:515)","closed","","eodonohoe","2018-07-19T16:11:08Z","2020-03-31T07:33:27Z"
"","1694","Mappings for url patterns of Servlet Filters are not working properly","Effected only in dropwizard 1.0.0  After adding the filter:  ``` environment.servlets().addFilter(""Guice Filter"", GuiceFilter.class).addMappingForUrlPatterns(null, false, ""/some/context/path/*""); ```  and calling the resource with specified path, filter is never invoked.  It only works if root context is specified as the pattern:  ``` environment.servlets().addFilter(""Guice Filter"", GuiceFilter.class).addMappingForUrlPatterns(null, false, ""/*""); ```","closed","","htimur","2016-08-17T09:20:17Z","2016-08-27T03:24:15Z"
"","2092","Make DropWizard Development Eclipse Friendly","Eclipse does not support the errorprone compiler; moved errorprone setup from build-plugins to profiles. There are now two profiles, one for Eclipse and one for everything else.  I have verified this change with a command line build (error prone warnings are still generated) and by loading the project into Eclipse without any errors.","closed","","isaki","2017-06-28T14:11:40Z","2017-07-06T15:54:56Z"
"","2016","Eclipse console error - SLF4J: Class path contains multiple SLF4J bindings.","Eclipse console   ``` SLF4J: Class path contains multiple SLF4J bindings. SLF4J: Found binding in [jar:file:/Users/dmorton/projects/workspace/DropwizardHeroku/target/dropwizard-heroku-1.0.5.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: Found binding in [jar:file:/Users/dmorton/.m2/repository/ch/qos/logback/logback-classic/1.1.7/logback-classic-1.1.7.jar!/org/slf4j/impl/StaticLoggerBinder.class] SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder] ```  pom.xml  ```   	4.0.0  	com.bitbosh 	dropwizard-heroku 	Dropwizard Heroku Application 	1.0.5  	 		UTF-8 		UTF-8 		1.0.5 		com.bitbosh.DropwizardHeroku.DropwizardHerokuApplication 	  	 		 			org.jmockit 			jmockit 			1.8 		                  			io.dropwizard 			dropwizard-core 			${dropwizard.version} 		 		 			io.dropwizard 			dropwizard-jdbi 			${dropwizard.version} 		 		 			io.dropwizard 			dropwizard-testing 			${dropwizard.version} 		 		 			postgresql 			postgresql 			9.1-901.jdbc4 		 	  	 		 			 				maven-compiler-plugin 				3.6.0 				 					1.8 					1.8 				 			 			 				org.apache.maven.plugins 				maven-shade-plugin 				2.3 				 					true 					 						 							*:* 							 								META-INF/*.SF 								META-INF/*.DSA 								META-INF/*.RSA 							 						 					 				 				 					 						package 						 							shade 						 						 							 								 								 									${mainClass} 								 							 						 					 				 			 			 				org.eluder.coveralls 				coveralls-maven-plugin 				4.3.0 			 			 				org.jacoco 				jacoco-maven-plugin 				0.7.9 				 					 					 						pre-unit-test 						 							prepare-agent 						 						 							 							surefireArgLine 						 					 					 					 						post-unit-test 						test 						 							report 						 					 				 			 			 			 				org.apache.maven.plugins 				maven-surefire-plugin 				2.19 				 					 					${surefireArgLine} 					 					 						**/*IT.java 					 				 			 		 	  ```  mvn dependencies  ``` [INFO] +- org.jmockit:jmockit:jar:1.8:compile [INFO] +- io.dropwizard:dropwizard-jdbi:jar:1.0.5:compile [INFO] |  +- io.dropwizard:dropwizard-db:jar:1.0.5:compile [INFO] |  |  \- org.apache.tomcat:tomcat-jdbc:jar:8.5.3:compile [INFO] |  |     \- org.apache.tomcat:tomcat-juli:jar:8.5.3:compile [INFO] |  +- org.jdbi:jdbi:jar:2.73:compile [INFO] |  \- io.dropwizard.metrics:metrics-jdbi:jar:3.1.2:compile [INFO] +- io.dropwizard:dropwizard-core:jar:1.0.5:compile [INFO] |  +- io.dropwizard:dropwizard-util:jar:1.0.5:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.8:compile [INFO] |  |  +- com.google.guava:guava:jar:19.0:compile [INFO] |  |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile [INFO] |  |  \- joda-time:joda-time:jar:2.9.4:compile [INFO] |  +- io.dropwizard:dropwizard-jackson:jar:1.0.5:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.7.8:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.8:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.7.8:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.7.8:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.7.8:compile [INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.7.8:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.7.8:compile [INFO] |  |  +- org.slf4j:slf4j-api:jar:1.7.21:compile [INFO] |  |  \- ch.qos.logback:logback-classic:jar:1.1.7:compile [INFO] |  +- io.dropwizard:dropwizard-validation:jar:1.0.5:compile [INFO] |  |  +- org.hibernate:hibernate-validator:jar:5.2.4.Final:compile [INFO] |  |  |  +- javax.validation:validation-api:jar:1.1.0.Final:compile [INFO] |  |  |  +- org.jboss.logging:jboss-logging:jar:3.2.1.Final:compile [INFO] |  |  |  \- com.fasterxml:classmate:jar:1.1.0:compile [INFO] |  |  \- org.glassfish:javax.el:jar:3.0.0:compile [INFO] |  +- io.dropwizard:dropwizard-configuration:jar:1.0.5:compile [INFO] |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.7.8:compile [INFO] |  |  |  \- org.yaml:snakeyaml:jar:1.15:compile [INFO] |  |  \- org.apache.commons:commons-lang3:jar:3.4:compile [INFO] |  +- io.dropwizard:dropwizard-logging:jar:1.0.5:compile [INFO] |  |  +- io.dropwizard.metrics:metrics-logback:jar:3.1.2:compile [INFO] |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.21:compile [INFO] |  |  +- ch.qos.logback:logback-core:jar:1.1.7:compile [INFO] |  |  +- org.slf4j:log4j-over-slf4j:jar:1.7.21:compile [INFO] |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.21:compile [INFO] |  |  \- org.eclipse.jetty:jetty-util:jar:9.3.9.v20160517:compile [INFO] |  +- io.dropwizard:dropwizard-metrics:jar:1.0.5:compile [INFO] |  +- io.dropwizard:dropwizard-jersey:jar:1.0.5:compile [INFO] |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.23.2:compile [INFO] |  |  |  +- org.glassfish.jersey.core:jersey-common:jar:2.23.2:compile [INFO] |  |  |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.23.2:compile [INFO] |  |  |  |  \- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile [INFO] |  |  |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile [INFO] |  |  |  +- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.23.2:compile [INFO] |  |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile [INFO] |  |  |  +- org.glassfish.hk2:hk2-api:jar:2.5.0-b05:compile [INFO] |  |  |  |  +- org.glassfish.hk2:hk2-utils:jar:2.5.0-b05:compile [INFO] |  |  |  |  \- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.5.0-b05:compile [INFO] |  |  |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b05:compile [INFO] |  |  |  \- org.glassfish.hk2:hk2-locator:jar:2.5.0-b05:compile [INFO] |  |  |     \- org.javassist:javassist:jar:3.20.0-GA:compile [INFO] |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.23.2:compile [INFO] |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.23.2:compile [INFO] |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.1.2:compile [INFO] |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.7.8:compile [INFO] |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.7.8:compile [INFO] |  |  |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.7.8:compile [INFO] |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.23.2:compile [INFO] |  |  |  \- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.23.2:compile [INFO] |  |  +- org.eclipse.jetty:jetty-server:jar:9.3.9.v20160517:compile [INFO] |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile [INFO] |  |  |  \- org.eclipse.jetty:jetty-io:jar:9.3.9.v20160517:compile [INFO] |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.3.9.v20160517:compile [INFO] |  |  |  \- org.eclipse.jetty:jetty-xml:jar:9.3.9.v20160517:compile [INFO] |  |  \- org.eclipse.jetty:jetty-continuation:jar:9.3.9.v20160517:compile [INFO] |  +- io.dropwizard:dropwizard-servlets:jar:1.0.5:compile [INFO] |  |  \- io.dropwizard.metrics:metrics-annotation:jar:3.1.2:compile [INFO] |  +- io.dropwizard:dropwizard-jetty:jar:1.0.5:compile [INFO] |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.1.2:compile [INFO] |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.3.9.v20160517:compile [INFO] |  |  |  \- org.eclipse.jetty:jetty-security:jar:9.3.9.v20160517:compile [INFO] |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.3.9.v20160517:compile [INFO] |  |  \- org.eclipse.jetty:jetty-http:jar:9.3.9.v20160517:compile [INFO] |  +- io.dropwizard:dropwizard-lifecycle:jar:1.0.5:compile [INFO] |  +- io.dropwizard.metrics:metrics-core:jar:3.1.2:compile [INFO] |  +- io.dropwizard.metrics:metrics-jvm:jar:3.1.2:compile [INFO] |  +- io.dropwizard.metrics:metrics-servlets:jar:3.1.2:compile [INFO] |  |  \- io.dropwizard.metrics:metrics-json:jar:3.1.2:compile [INFO] |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.1.2:compile [INFO] |  +- io.dropwizard:dropwizard-request-logging:jar:1.0.5:compile [INFO] |  |  \- ch.qos.logback:logback-access:jar:1.1.7:compile [INFO] |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile [INFO] |  \- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile [INFO] +- io.dropwizard:dropwizard-testing:jar:1.0.5:compile [INFO] |  +- junit:junit:jar:4.12:compile [INFO] |  |  \- org.hamcrest:hamcrest-core:jar:1.3:compile [INFO] |  +- org.mockito:mockito-core:jar:2.0.54-beta:compile [INFO] |  |  \- net.bytebuddy:byte-buddy:jar:1.3.16:runtime [INFO] |  +- org.objenesis:objenesis:jar:2.3:compile [INFO] |  +- org.assertj:assertj-core:jar:3.4.1:compile [INFO] |  \- org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.23.2:compile [INFO] |     +- org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.23.2:compile [INFO] |     +- org.glassfish.jersey.core:jersey-client:jar:2.23.2:compile [INFO] |     \- org.ow2.asm:asm-debug-all:jar:5.0.4:compile [INFO] \- postgresql:postgresql:jar:9.1-901.jdbc4:compile ```  I've tried excluding `logback-classic` from dropwizard core AND maven surefire but this does not resolve the errors in the eclipse console.","closed","","uxdxdev","2017-04-21T02:20:36Z","2017-04-21T16:21:42Z"
"","2077","JerseyClientConfiguration timeout not working during SSL handshake error","During SSL handshake error, jerseyclient timeout is not coming into picture. Seeing the connections going beyond 30 seconds during SSL handshake, where time out is set to 1 sec.","closed","stale,","agyan5","2017-06-16T04:54:38Z","2019-08-19T16:00:35Z"
"","2446","Change fuzzy enum deserializer to be cacheable.","During load tests, there is significant lock contention in Jackson when using the FuzzyEnumModule. For each deserialized enum type, there is a synchronized block that attempts to create a deserializer in the cache and ultimately since the PermissiveEnumDeserializer isn't marked as cacheable, the underlying deserializer is recreated each time. Update the PermissiveEnumDeserializer to be cacheable (similar to EnumDeserializer from Jackson) to remove significant overhead during deserialization.  See https://github.com/FasterXML/jackson-databind/issues/1394 for the relevant Jackson issue.","closed","","pkwarren","2018-07-27T20:10:05Z","2018-07-30T18:09:17Z"
"","1751","Add SizeParam as a request parameter","Duration param was created in #1734, so it's brother (`Size`) should have a param class too","closed","feature,","nickbabcock","2016-09-29T13:36:37Z","2016-09-29T18:25:18Z"
"","1695","Catch Throwable and return false if any command errors out","Dropwizard should exit gracefully with a non-zero (`1`) status code in the event that a command throws an `Exception` instead of just exiting the `Application`/JVM. This PR is the result of https://github.com/dropwizard/dropwizard/issues/1680#issuecomment-240132023","closed","improvement,","tburch","2016-08-17T14:47:09Z","2016-08-17T17:06:08Z"
"","1996","`git fsck` fails","Dropwizard has a broken commit:  ```bash $ git clone https://github.com/dropwizard/dropwizard.git Cloning into 'dropwizard'... remote: Counting objects: 123311, done. remote: Compressing objects: 100% (24/24), done. remote: Total 123311 (delta 1), reused 0 (delta 0), pack-reused 123280 Receiving objects: 100% (123311/123311), 46.11 MiB | 1.71 MiB/s, done. Resolving deltas: 100% (78597/78597), done. $ cd dropwizard $ git fsck Checking object directories: 100% (256/256), done. error in commit 6fbf9def0293986beb2547a671f46148a5d2faf7: badDate: invalid author/committer line - bad date Checking objects: 100% (123311/123311), done. ```  The problem is that the commit has an uncorrect author field: ``` $ git show --format=raw 6fbf9def0293986beb2547a671f46148a5d2faf7 commit 6fbf9def0293986beb2547a671f46148a5d2faf7 tree a452806b01d6ebd7d28cc3c85451ae1485f07257 parent 662010f5206fbe3d5390760501a8f48ffa9602ac parent 2b2c23d52f348a16d9644acd08339992dfeca011 author Coda Hale   1305038239 -0700 committer Coda Hale   1305038239 -0700      Merge pull request #3 from tommorris/patch-1      added link to example application repository from README  ```  Expected is: ``` ... author Coda Hale  1305038239 -0700 committer Coda Hale  1305038239 -0700 ... ```  I discovered this because I have the following sections in my `.gitconfig` to make sure that my checkouts are correct: ```ini [transfer]         fsckobjects = true [fetch]         fsckobjects = true [receive]         fsckObjects = true ```","closed","","JensRantil","2017-04-04T15:11:54Z","2017-04-04T19:57:51Z"
"","1658","Dropwizard could not log INFO log to console and log file at very early stage of application initialization","Dropwizard could not log INFO log to console and log file at very early stage of application initialization.   My dropwizard application implemented a StrSubstitutor and configured it in the initialize method  ``` @Override   public void initialize(Bootstrap bootstrap)   {     // Enable variable substitution with environment variables     bootstrap.setConfigurationSourceProvider(         new SubstitutingSourceProvider(             bootstrap.getConfigurationSourceProvider(),             new AppPropertySubstitutor(false)         )     );   } ```  The AppPropertySubstitutor depends on a component which uses apache common logging. All INFO level log is not written to the console and the log file in the depended component.  Have checked that jcl-over-slf4j.jar is successfully packaged into the application jar.  The cause is that the default constructor of the dropwizard Application calls    ``` BootstrapLogging.bootstrap() ```  The default logger initialized a ThresholdFilter with log level Level.WARN, thus INFO log is denied.  As the BootstrapLogging.bootstrap() can only be called once. Super constructor is always executed when creating sub class instance. thus it is not able to bootstrap logging with different log level other than Level.WARN.  Dropwizard should bootstrap logging with the logging configuration defined in yaml at very first stage.  Dropwizard version:  1.0.0-rc4","closed","","dknc","2016-07-31T08:10:44Z","2017-02-07T19:07:30Z"
"","2370","Validation of the application resource model has failed during application initialization","Dropwizard 1.3.2 JDK 10  So I am trying to enable JWT auth on my test service following the documentation and I get the error bellow when I have for example this endpoint set up   ```    @Path(""/boo"")     @POST     public Response foo(@Auth Identity identity,                                     @Valid Payload payload                                     ) {         return Response.ok().entity(""Auth endpoint"").build();     } ```  if I set it up this way, so basically I removed the `@Valid  Payload payload` everything works server starts and jwt validation works on this endpoint, but  if it is set the payload validation then I get the error  ```     @Path(""/boo"")     @POST     public Response foo(@Auth Identity identity) {         return Response.ok().entity(""Auth endpoint"").build();     } ```  if I use a `GET` endpoint looks it also works fine for example:   ```     @Path(""/boo"")     @GET     public Response foo(@Auth Identity identity,                                        @Valid @BeanParam Payload payload) {         return Response.ok().entity(""Auth endpoint"").build();     } ```  I might be doing something wrong, will appreciate some help if possible, thanks!    ```  org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialization. [[WARNING] Parameter authFilterClass of type java.lang.Class from private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass is not resolvable to a concrete type.; source='private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass', [FATAL] No injection source found for a parameter of type public javax.ws.rs.core.Response com.test.authservice.resources.account.AccountResource.registerNewAccount(com.test.common.dropwizard.auth.identity.Identity,com.test.authservice.resources.account.payload.RegisterPayload) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.test.authservice.resources.account.AccountResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@3eee08f5]}, definitionMethod=public javax.ws.rs.core.Response com.test.authservice.resources.account.AccountResource.registerNewAccount(com.test.common.dropwizard.auth.identity.Identity,com.test.authservice.resources.account.payload.RegisterPayload), parameters=[Parameter [type=interface com.test.common.dropwizard.auth.identity.Identity, source=null, defaultValue=null], Parameter [type=class com.test.authservice.resources.account.payload.RegisterPayload, source=null, defaultValue=null]], responseType=class javax.ws.rs.core.Response}, nameBindings=[]}'] 	at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:555) 	at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184) 	at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350) 	at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:315) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:297) 	at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255) 	at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:347) 	at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:392) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:177) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:369) 	at javax.servlet.GenericServlet.init(GenericServlet.java:244) 	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:670) 	at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:427) 	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:760) 	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:374) 	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:785) 	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:287) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:101) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.handler.gzip.GzipHandler.doStart(GzipHandler.java:403) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:252) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.server.Server.start(Server.java:419) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.Server.doStart(Server.java:386) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53) 	at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87) 	at io.dropwizard.cli.Cli.run(Cli.java:78) 	at io.dropwizard.Application.run(Application.java:93) 	at com.test.authservice.AuthServer.main(AuthServer.java:39) 18:13:25.300 [main] INFO  o.e.j.s.AbstractConnector - Started application@7f42b194{HTTP/1.1,[http/1.1]}{0.0.0.0:9010} 18:13:25.300 [main] INFO  o.e.j.s.AbstractConnector - Started admin@8eb6f9a{HTTP/1.1,[http/1.1]}{0.0.0.0:9011} 18:13:25.301 [main] ERROR i.d.c.ServerCommand - Unable to start server, shutting down javax.servlet.ServletException: io.dropwizard.jersey.setup.JerseyServletContainer-5002fde9@14f3da6d==io.dropwizard.jersey.setup.JerseyServletContainer,jsp=null,order=1,inst=false 	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:691) 	at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:427) 	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:760) 	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:374) 	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:785) 	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:287) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:101) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.handler.gzip.GzipHandler.doStart(GzipHandler.java:403) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:252) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.server.Server.start(Server.java:419) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.Server.doStart(Server.java:386) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53) 	at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87) 	at io.dropwizard.cli.Cli.run(Cli.java:78) 	at io.dropwizard.Application.run(Application.java:93) 	at com.test.authservice.AuthServer.main(AuthServer.java:39) Caused by: org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialization. [[WARNING] Parameter authFilterClass of type java.lang.Class from private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass is not resolvable to a concrete type.; source='private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass', [FATAL] No injection source found for a parameter of type public javax.ws.rs.core.Response com.test.authservice.resources.account.AccountResource.registerNewAccount(com.test.common.dropwizard.auth.identity.Identity,com.test.authservice.resources.account.payload.RegisterPayload) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.test.authservice.resources.account.AccountResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@3eee08f5]}, definitionMethod=public javax.ws.rs.core.Response com.test.authservice.resources.account.AccountResource.registerNewAccount(com.test.common.dropwizard.auth.identity.Identity,com.test.authservice.resources.account.payload.RegisterPayload), parameters=[Parameter [type=interface com.test.common.dropwizard.auth.identity.Identity, source=null, defaultValue=null], Parameter [type=class com.test.authservice.resources.account.payload.RegisterPayload, source=null, defaultValue=null]], responseType=class javax.ws.rs.core.Response}, nameBindings=[]}'] 	at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:555) 	at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184) 	at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350) 	at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:315) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:297) 	at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255) 	at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:347) 	at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:392) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:177) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:369) 	at javax.servlet.GenericServlet.init(GenericServlet.java:244) 	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:670) 	... 41 common frames omitted 18:13:25.310 [main] INFO  o.e.j.s.AbstractConnector - Stopped application@7f42b194{HTTP/1.1,[http/1.1]}{0.0.0.0:9010} 18:13:25.326 [main] INFO  o.e.j.s.AbstractConnector - Stopped admin@8eb6f9a{HTTP/1.1,[http/1.1]}{0.0.0.0:9011} 18:13:25.334 [main] INFO  o.e.j.s.h.ContextHandler - Stopped i.d.j.MutableServletContextHandler@5503c7d{/,null,UNAVAILABLE} javax.servlet.ServletException: io.dropwizard.jersey.setup.JerseyServletContainer-5002fde9@14f3da6d==io.dropwizard.jersey.setup.JerseyServletContainer,jsp=null,order=1,inst=false 	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:691) 	at org.eclipse.jetty.servlet.ServletHolder.initialize(ServletHolder.java:427) 	at org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:760) 	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:374) 	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:785) 	at org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:287) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at com.codahale.metrics.jetty9.InstrumentedHandler.doStart(InstrumentedHandler.java:101) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.handler.gzip.GzipHandler.doStart(GzipHandler.java:403) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.handler.StatisticsHandler.doStart(StatisticsHandler.java:252) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:138) 	at org.eclipse.jetty.server.Server.start(Server.java:419) 	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:108) 	at org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:113) 	at org.eclipse.jetty.server.Server.doStart(Server.java:386) 	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) 	at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53) 	at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87) 	at io.dropwizard.cli.Cli.run(Cli.java:78) 	at io.dropwizard.Application.run(Application.java:93) 	at com.test.authservice.AuthServer.main(AuthServer.java:39) Caused by: org.glassfish.jersey.server.model.ModelValidationException: Validation of the application resource model has failed during application initialization. [[WARNING] Parameter authFilterClass of type java.lang.Class from private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass is not resolvable to a concrete type.; source='private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass', [FATAL] No injection source found for a parameter of type public javax.ws.rs.core.Response com.test.authservice.resources.account.AccountResource.registerNewAccount(com.test.common.dropwizard.auth.identity.Identity,com.test.authservice.resources.account.payload.RegisterPayload) at index 0.; source='ResourceMethod{httpMethod=POST, consumedTypes=[application/json], producedTypes=[application/json], suspended=false, suspendTimeout=0, suspendTimeoutUnit=MILLISECONDS, invocable=Invocable{handler=ClassBasedMethodHandler{handlerClass=class com.test.authservice.resources.account.AccountResource, handlerConstructors=[org.glassfish.jersey.server.model.HandlerConstructor@3eee08f5]}, definitionMethod=public javax.ws.rs.core.Response com.test.authservice.resources.account.AccountResource.registerNewAccount(com.test.common.dropwizard.auth.identity.Identity,com.test.authservice.resources.account.payload.RegisterPayload), parameters=[Parameter [type=interface com.test.common.dropwizard.auth.identity.Identity, source=null, defaultValue=null], Parameter [type=class com.test.authservice.resources.account.payload.RegisterPayload, source=null, defaultValue=null]], responseType=class javax.ws.rs.core.Response}, nameBindings=[]}'] 	at org.glassfish.jersey.server.ApplicationHandler.initialize(ApplicationHandler.java:555) 	at org.glassfish.jersey.server.ApplicationHandler.access$500(ApplicationHandler.java:184) 	at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:350) 	at org.glassfish.jersey.server.ApplicationHandler$3.call(ApplicationHandler.java:347) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:315) 	at org.glassfish.jersey.internal.Errors.process(Errors.java:297) 	at org.glassfish.jersey.internal.Errors.processWithException(Errors.java:255) 	at org.glassfish.jersey.server.ApplicationHandler.(ApplicationHandler.java:347) 	at org.glassfish.jersey.servlet.WebComponent.(WebComponent.java:392) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:177) 	at org.glassfish.jersey.servlet.ServletContainer.init(ServletContainer.java:369) 	at javax.servlet.GenericServlet.init(GenericServlet.java:244) 	at org.eclipse.jetty.servlet.ServletHolder.initServlet(ServletHolder.java:670) 	... 41 more ```","closed","","maxbalan","2018-05-25T17:32:37Z","2018-05-25T17:58:26Z"
"","2329","Dropwizard 1.2.4 throwing ClassCastException on trying to use log4j","Dropwizard 1.2.4 is throwing the below `ClassCastException`.   ``` INFO [2018-04-15 15:44:46,736] [U:378,F:530,T:908,M:1,820] dropwizard.server.ServerFactory:[AbstractServerFactory:printBanner:638] - [main] - Starting VneraBackendService java.lang.ClassCastException: org.slf4j.impl.Log4jLoggerAdapter cannot be cast to ch.qos.logback.classic.Logger         at io.dropwizard.request.logging.LogbackAccessRequestLogFactory.build(LogbackAccessRequestLogFactory.java:67)         at io.dropwizard.server.AbstractServerFactory.addRequestLog(AbstractServerFactory.java:606)         at io.dropwizard.server.DefaultServerFactory.build(DefaultServerFactory.java:176)         at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:49)         at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44)         at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85)         at io.dropwizard.cli.Cli.run(Cli.java:75)         at io.dropwizard.Application.run(Application.java:93) ```  I have followed the instruction as mentioned in the below project  https://github.com/arteam/dropwizard-nologback  The dependency tree looks like below  ``` ------------------------------------------------------------------------ Building restapilayer 0.001-SNAPSHOT ------------------------------------------------------------------------  --- maven-dependency-plugin:2.10:tree (default-cli) @ restapilayer --- com.van:restapilayer:jar:0.001-SNAPSHOT +- io.dropwizard:dropwizard-jackson:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-util:jar:1.2.4:compile |  +- com.fasterxml.jackson.core:jackson-core:jar:2.9.4:compile |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.9.4:compile |  +- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.9.4:compile |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.9.4:compile |  \- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.9.4:compile +- io.dropwizard.modules:dropwizard-elasticsearch:jar:1.2.0-1:compile |  \- org.elasticsearch:elasticsearch:jar:2.4.6:compile |     +- org.apache.lucene:lucene-core:jar:5.5.4:compile |     +- org.apache.lucene:lucene-backward-codecs:jar:5.5.4:compile |     +- org.apache.lucene:lucene-analyzers-common:jar:5.5.4:compile |     +- org.apache.lucene:lucene-queries:jar:5.5.4:compile |     +- org.apache.lucene:lucene-memory:jar:5.5.4:compile |     +- org.apache.lucene:lucene-highlighter:jar:5.5.4:compile |     +- org.apache.lucene:lucene-queryparser:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-sandbox:jar:5.5.4:compile |     +- org.apache.lucene:lucene-suggest:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-misc:jar:5.5.4:compile |     +- org.apache.lucene:lucene-join:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-grouping:jar:5.5.4:compile |     +- org.apache.lucene:lucene-spatial:jar:5.5.4:compile |     |  +- org.apache.lucene:lucene-spatial3d:jar:5.5.4:compile |     |  \- com.spatial4j:spatial4j:jar:0.5:compile |     +- org.elasticsearch:securesm:jar:1.0:compile |     +- com.carrotsearch:hppc:jar:0.7.1:compile |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.8.1:compile |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.8.1:compile |     +- io.netty:netty:jar:3.10.6.Final:compile |     +- com.ning:compress-lzf:jar:1.0.2:compile |     +- com.tdunning:t-digest:jar:3.0:compile |     +- org.hdrhistogram:HdrHistogram:jar:2.1.6:compile |     \- com.twitter:jsr166e:jar:1.1.0:compile +- io.dropwizard:dropwizard-validation:jar:1.2.4:compile |  +- org.hibernate:hibernate-validator:jar:5.4.2.Final:compile |  |  +- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile |  |  \- com.fasterxml:classmate:jar:1.3.1:compile |  \- org.glassfish:javax.el:jar:3.0.0:compile +- io.dropwizard:dropwizard-core:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-configuration:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-logging:jar:1.2.4:compile |  |  +- io.dropwizard.metrics:metrics-logback:jar:3.2.5:compile |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.25:compile |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.25:compile |  |  \- org.eclipse.jetty:jetty-util:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-metrics:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-jersey:jar:1.2.4:compile |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile |  |  |  \- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.2.5:compile |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.9.4:compile |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.9.4:compile |  |  |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.9.4:compile |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile |  |  |  \- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile |  |  +- org.eclipse.jetty:jetty-server:jar:9.4.8.v20171121:compile |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile |  |  |  \- org.eclipse.jetty:jetty-io:jar:9.4.8.v20171121:compile |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.4.8.v20171121:compile |  |  |  \- org.eclipse.jetty:jetty-xml:jar:9.4.8.v20171121:compile |  |  \- org.eclipse.jetty:jetty-continuation:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-servlets:jar:1.2.4:compile |  |  \- io.dropwizard.metrics:metrics-annotation:jar:3.2.5:compile |  +- io.dropwizard:dropwizard-jetty:jar:1.2.4:compile |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.2.5:compile |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.4.8.v20171121:compile |  |  |  \- org.eclipse.jetty:jetty-security:jar:9.4.8.v20171121:compile |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.4.8.v20171121:compile |  |  \- org.eclipse.jetty:jetty-http:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-lifecycle:jar:1.2.4:compile |  +- io.dropwizard.metrics:metrics-core:jar:3.2.5:compile |  +- io.dropwizard.metrics:metrics-jvm:jar:3.2.5:compile |  +- io.dropwizard.metrics:metrics-servlets:jar:3.2.5:compile |  |  +- io.dropwizard.metrics:metrics-json:jar:3.2.5:compile |  |  \- com.papertrail:profiler:jar:1.0.2:compile |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.2.5:compile |  +- io.dropwizard:dropwizard-request-logging:jar:1.2.4:compile |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile |  \- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile +- commons-fileupload:commons-fileupload:jar:1.3.3:compile |  \- commons-io:commons-io:jar:2.2:compile +- io.dropwizard:dropwizard-testing:jar:1.2.4:test |  +- org.objenesis:objenesis:jar:2.6:compile |  \- org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.25.1:test |     \- org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.25.1:test +- org.apache.shiro:shiro-core:jar:1.3.0:compile |  \- commons-beanutils:commons-beanutils:jar:1.8.3:compile +- io.swagger:swagger-core:jar:1.5.0:compile |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.4.2:compile |  +- io.swagger:swagger-models:jar:1.5.0:compile |  \- javax.validation:validation-api:jar:1.1.0.Final:compile +- io.swagger:swagger-annotations:jar:1.5.0:compile +- org.apache.shiro:shiro-web:jar:1.2.3:compile +- org.apache.commons:commons-lang3:jar:3.4:compile +- com.van:contracts:jar:0.001-SNAPSHOT:compile |  +- com.van:common:jar:0.001-SNAPSHOT:compile |  |  +- com.koloboke:koloboke-api-jdk8:jar:1.0.0:compile |  |  +- com.koloboke:koloboke-impl-jdk8:jar:1.0.0:runtime |  |  |  \- com.koloboke:koloboke-impl-common-jdk8:jar:1.0.0:runtime |  |  +- it.unimi.dsi:fastutil:jar:8.1.0:compile |  |  +- com.amazonaws:aws-java-sdk:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-pinpoint:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-xray:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-opsworkscm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-support:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-simpledb:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-servicecatalog:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-servermigration:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-simpleworkflow:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-storagegateway:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-route53:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-s3:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-importexport:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sts:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sqs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-rds:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-redshift:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticbeanstalk:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-glacier:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-iam:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-datapipeline:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticloadbalancing:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticloadbalancingv2:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-emr:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticache:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elastictranscoder:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ec2:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-dynamodb:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sns:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-budgets:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudtrail:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudwatch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-logs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-events:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitoidentity:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitosync:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-directconnect:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudformation:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudfront:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-kinesis:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-opsworks:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudsearch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudwatchmetrics:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codedeploy:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codepipeline:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-kms:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-config:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-lambda:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ecs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ecr:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudhsm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ssm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-workspaces:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-machinelearning:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-directory:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-efs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codecommit:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-devicefarm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticsearch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-waf:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-marketplacecommerceanalytics:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-inspector:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-iot:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-api-gateway:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-acm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-gamelift:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-dms:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-marketplacemeteringservice:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitoidp:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-discovery:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-applicationautoscaling:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-snowball:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-rekognition:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-polly:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-lightsail:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-stepfunctions:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-health:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codebuild:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-appstream:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-shield:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-batch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-models:jar:1.11.77:compile |  |  |  \- com.amazonaws:aws-java-sdk-swf-libraries:jar:1.11.22:compile |  |  +- com.van:utility:jar:0.001-SNAPSHOT:compile |  |  +- com.esotericsoftware:kryo-shaded:jar:3.0.0:compile |  |  |  \- com.esotericsoftware:minlog:jar:1.3.0:compile |  |  +- com.codahale.metrics:metrics-graphite:jar:3.0.1:compile |  |  +- com.librato.metrics:metrics-librato:jar:4.1.2.4:compile |  |  |  \- com.librato.metrics:librato-java:jar:1.0.13:compile |  |  +- org.mockito:mockito-all:jar:1.10.19:compile |  |  +- org.powermock:powermock-module-junit4:jar:1.6.4:compile |  |  |  \- org.powermock:powermock-module-junit4-common:jar:1.6.4:compile |  |  |     +- org.powermock:powermock-core:jar:1.6.4:compile |  |  |     \- org.powermock:powermock-reflect:jar:1.6.4:compile |  |  +- org.powermock:powermock-api-mockito:jar:1.6.4:compile |  |  |  +- org.mockito:mockito-core:jar:1.10.19:compile |  |  |  \- org.powermock:powermock-api-support:jar:1.6.4:compile |  |  +- com.vmw.vli:licensecheck:jar:1.4-RELEASE:compile |  |  +- org.bouncycastle:bcprov-jdk15on:jar:1.57:compile |  |  +- org.bouncycastle:bcpkix-jdk15on:jar:1.57:compile |  |  +- io.netty:netty-all:jar:4.1.17.Final:compile |  |  +- org.apache.hadoop:hadoop-common:jar:2.6.0-cdh5.7.1:compile |  |  |  +- xmlenc:xmlenc:jar:0.52:compile |  |  |  +- commons-httpclient:commons-httpclient:jar:3.1:compile |  |  |  +- javax.servlet:servlet-api:jar:2.5:compile |  |  |  +- tomcat:jasper-compiler:jar:5.5.23:compile |  |  |  +- tomcat:jasper-runtime:jar:5.5.23:compile |  |  |  +- javax.servlet.jsp:jsp-api:jar:2.1:compile |  |  |  +- commons-el:commons-el:jar:1.0:compile |  |  |  +- net.java.dev.jets3t:jets3t:jar:0.9.0:compile |  |  |  |  \- com.jamesmurty.utils:java-xmlbuilder:jar:0.4:compile |  |  |  +- org.apache.avro:avro:jar:1.7.6-cdh5.7.1:compile |  |  |  +- org.apache.curator:curator-client:jar:2.7.1:compile |  |  |  +- org.apache.curator:curator-recipes:jar:2.7.1:compile |  |  |  +- org.apache.htrace:htrace-core4:jar:4.0.1-incubating:compile |  |  |  \- org.apache.commons:commons-compress:jar:1.4.1:compile |  |  |     \- org.tukaani:xz:jar:1.0:compile |  |  +- org.apache.hadoop:hadoop-client:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-hdfs:jar:2.6.0-cdh5.7.1:compile |  |  |  |  +- xerces:xercesImpl:jar:2.9.1:compile |  |  |  |  \- org.fusesource.leveldbjni:leveldbjni-all:jar:1.8:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-app:jar:2.6.0-cdh5.7.1:compile |  |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |  |  +- org.apache.hadoop:hadoop-yarn-client:jar:2.6.0-cdh5.7.1:compile |  |  |  |  |  \- org.apache.hadoop:hadoop-yarn-server-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |  \- org.apache.hadoop:hadoop-mapreduce-client-shuffle:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-yarn-api:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-core:jar:2.6.0-cdh5.7.1:compile |  |  |  |  \- org.apache.hadoop:hadoop-yarn-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |     +- javax.xml.bind:jaxb-api:jar:2.2.2:compile |  |  |  |     |  \- javax.xml.stream:stax-api:jar:1.0-2:compile |  |  |  |     +- org.codehaus.jackson:jackson-jaxrs:jar:1.8.8:compile |  |  |  |     \- org.codehaus.jackson:jackson-xc:jar:1.8.8:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-jobclient:jar:2.6.0-cdh5.7.1:compile |  |  |  \- org.apache.hadoop:hadoop-aws:jar:2.6.0-cdh5.7.1:compile |  |  +- org.coursera:metrics-datadog:jar:1.1.13:compile |  |  |  +- org.apache.httpcomponents:fluent-hc:jar:4.3.6:compile |  |  |  \- com.datadoghq:java-dogstatsd-client:jar:2.3:compile |  |  \- com.van:reg-common:jar:0.001-SNAPSHOT:compile |  +- com.van:base-model:jar:0.001-SNAPSHOT:compile |  +- org.slf4j:slf4j-log4j12:jar:1.7.5:compile |  +- log4j:log4j:jar:1.2.17:compile |  +- com.van:core-model:jar:0.001-SNAPSHOT:compile |  |  +- com.van:analytics-model:jar:0.001-SNAPSHOT:compile |  |  +- org.reflections:reflections:jar:0.9.9-RC1:compile |  |  |  \- dom4j:dom4j:jar:1.6.1:compile |  |  |     \- xml-apis:xml-apis:jar:1.0.b2:compile |  |  \- commons-validator:commons-validator:jar:1.6:compile |  +- com.van:vshield-model:jar:0.001-SNAPSHOT:compile |  +- com.van:nsx-model:jar:0.001-SNAPSHOT:compile |  +- com.van:cisco-model:jar:0.001-SNAPSHOT:compile |  +- com.van:vcenter-model:jar:0.001-SNAPSHOT:compile |  +- com.van:force10-model:jar:0.001-SNAPSHOT:compile |  +- com.van:flow-model:jar:0.001-SNAPSHOT:compile |  +- com.van:openstack-model:jar:0.001-SNAPSHOT:compile |  +- com.van:juniper-model:jar:0.001-SNAPSHOT:compile |  \- com.van:pan-model:jar:0.001-SNAPSHOT:compile +- com.van:rpc-saasinterface:jar:0.001-SNAPSHOT:compile +- com.van:storage-common:jar:0.001-SNAPSHOT:compile |  +- com.van:data-model:jar:0.001-SNAPSHOT:compile |  +- net.spy:spymemcached:jar:2.11.4:compile |  +- org.xerial.snappy:snappy-java:jar:1.1.2.6:compile |  +- com.opencsv:opencsv:jar:3.7:compile |  \- org.codehaus.groovy:groovy-all:jar:2.4.4:compile +- com.van:arkin-storage-metrics:jar:0.001-SNAPSHOT:compile |  +- org.apache.hbase:hbase-client:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.hbase:hbase-annotations:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.hbase:hbase-common:jar:1.2.0-cdh5.7.0:compile |  |  |  \- org.apache.hadoop:hadoop-core:jar:2.6.0-mr1-cdh5.7.0:compile |  |  |     +- hsqldb:hsqldb:jar:1.8.0.10:compile |  |  |     \- org.eclipse.jdt:core:jar:3.1.1:compile |  |  +- org.apache.hbase:hbase-protocol:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.zookeeper:zookeeper:jar:3.4.5-cdh5.7.0:compile |  |  +- org.apache.htrace:htrace-core:jar:3.2.0-incubating:compile |  |  +- org.jruby.jcodings:jcodings:jar:1.0.8:compile |  |  +- org.jruby.joni:joni:jar:2.1.2:compile |  |  +- com.yammer.metrics:metrics-core:jar:2.2.0:compile |  |  +- org.apache.hadoop:hadoop-annotations:jar:2.6.0-cdh5.7.0:compile |  |  +- org.apache.hadoop:hadoop-auth:jar:2.6.0-cdh5.7.0:compile |  |  |  +- org.apache.directory.server:apacheds-kerberos-codec:jar:2.0.0-M15:compile |  |  |  |  +- org.apache.directory.server:apacheds-i18n:jar:2.0.0-M15:compile |  |  |  |  +- org.apache.directory.api:api-asn1-api:jar:1.0.0-M20:compile |  |  |  |  \- org.apache.directory.api:api-util:jar:1.0.0-M20:compile |  |  |  \- org.apache.curator:curator-framework:jar:2.7.1:compile |  |  \- com.github.stephenc.findbugs:findbugs-annotations:jar:1.3.9-1:compile |  +- com.jcraft:jsch:jar:0.1.54:compile |  \- com.van:tsdb-client:jar:0.001-SNAPSHOT:compile |     +- com.van:tsdb-common:jar:0.001-SNAPSHOT:compile |     |  +- io.grpc:grpc-protobuf:jar:1.11.0:compile |     |  |  +- com.google.protobuf:protobuf-java-util:jar:3.5.1:compile |     |  |  +- com.google.api.grpc:proto-google-common-protos:jar:1.0.0:compile |     |  |  \- io.grpc:grpc-protobuf-lite:jar:1.11.0:compile |     |  \- io.grpc:grpc-stub:jar:1.11.0:compile |     \- io.grpc:grpc-netty:jar:1.11.0:compile |        +- io.grpc:grpc-core:jar:1.11.0:compile (version selected from constraint [1.11.0,1.11.0]) |        |  +- io.grpc:grpc-context:jar:1.11.0:compile |        |  +- io.opencensus:opencensus-api:jar:0.11.0:compile |        |  \- io.opencensus:opencensus-contrib-grpc-metrics:jar:0.11.0:compile |        +- io.netty:netty-codec-http2:jar:4.1.22.Final:compile (version selected from constraint [4.1.22.Final,4.1.22.Final]) |        |  +- io.netty:netty-codec-http:jar:4.1.22.Final:compile |        |  |  \- io.netty:netty-codec:jar:4.1.22.Final:compile |        |  \- io.netty:netty-handler:jar:4.1.22.Final:compile |        |     \- io.netty:netty-buffer:jar:4.1.22.Final:compile |        |        \- io.netty:netty-common:jar:4.1.22.Final:compile |        \- io.netty:netty-handler-proxy:jar:4.1.22.Final:compile |           +- io.netty:netty-transport:jar:4.1.22.Final:compile |           |  \- io.netty:netty-resolver:jar:4.1.22.Final:compile |           \- io.netty:netty-codec-socks:jar:4.1.22.Final:compile +- org.apache.httpcomponents:httpcore:jar:4.4.5:compile +- com.van:storage-config:jar:0.001-SNAPSHOT:compile |  +- org.postgresql:postgresql:jar:9.4.1208.jre7:compile |  +- commons-dbcp:commons-dbcp:jar:1.4:compile |  |  \- commons-pool:commons-pool:jar:1.5.4:compile |  +- com.van:dedup:jar:0.001-SNAPSHOT:compile |  +- org.elasticsearch.module:lang-groovy:jar:2.3.1:compile |  |  \- org.codehaus.groovy:groovy:jar:indy:2.4.6:compile |  \- net.jodah:expiringmap:jar:0.5.8:compile +- com.van:programs:jar:0.001-SNAPSHOT:compile |  +- com.googlecode.javaewah:JavaEWAH:jar:1.1.3:compile |  +- com.van:model-utils:jar:0.001-SNAPSHOT:compile |  +- com.van:event-manager:jar:0.001-SNAPSHOT:compile |  +- com.van:storage-flowstore:jar:0.001-SNAPSHOT:compile |  +- com.van:aws-model:jar:0.001-SNAPSHOT:compile |  +- com.van:nsxt-model:jar:0.001-SNAPSHOT:compile |  +- com.van:firewall-model:jar:0.001-SNAPSHOT:compile |  +- com.van:genericdevice-model:jar:0.001-SNAPSHOT:compile |  +- org.apache.commons:commons-math3:jar:3.6.1:compile |  +- com.van:mapper:jar:0.001-SNAPSHOT:compile |  +- ma.glasnost.orika:orika-core:jar:1.4.2:compile |  |  +- com.thoughtworks.paranamer:paranamer:jar:2.3:compile |  |  \- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.2_jdk5:compile |  +- org.javassist:javassist:jar:3.20.0-GA:compile |  +- com.van:denorm-model:jar:0.001-SNAPSHOT:compile |  +- com.van:hp-model:jar:0.001-SNAPSHOT:compile |  +- com.vmw.vapi:vapi-runtime:jar:2.7.0:compile |  +- com.vmw.nsx.sdk:nsx-language-bindings:jar:2.0.0:compile |  \- org.springframework:spring-web:jar:4.2.9.RELEASE:compile |     \- org.springframework:spring-aop:jar:4.2.9.RELEASE:compile |        \- aopalliance:aopalliance:jar:1.0:compile +- com.van:denorm-programs:jar:0.001-SNAPSHOT:test |  \- com.van:impact:jar:0.001-SNAPSHOT:test +- com.van:app:jar:0.001-SNAPSHOT:compile |  \- com.van:meta-model:jar:0.001-SNAPSHOT:compile +- com.van:resourcemanager:jar:0.001-SNAPSHOT:compile +- com.van:ui-model:jar:0.001-SNAPSHOT:compile |  +- commons-collections:commons-collections:jar:3.2.2:compile |  \- org.unitils:unitils-core:jar:3.3:compile |     \- ognl:ognl:jar:2.6.9:compile +- com.van:analytics-contract:jar:0.001-SNAPSHOT:compile +- com.van:analytics-transformers:jar:0.001-SNAPSHOT:compile +- com.van:query:jar:0.001-SNAPSHOT:compile |  +- org.antlr:antlr4-maven-plugin:jar:4.5.3:compile |  |  +- org.apache.maven:maven-plugin-api:jar:3.0.5:compile |  |  |  +- org.apache.maven:maven-model:jar:3.0.5:compile |  |  |  +- org.apache.maven:maven-artifact:jar:3.0.5:compile |  |  |  \- org.sonatype.sisu:sisu-inject-plexus:jar:2.3.0:compile |  |  |     +- org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile |  |  |     +- org.codehaus.plexus:plexus-classworlds:jar:2.4:compile |  |  |     \- org.sonatype.sisu:sisu-inject-bean:jar:2.3.0:compile |  |  |        \- org.sonatype.sisu:sisu-guice:jar:no_aop:3.1.0:compile |  |  +- org.apache.maven:maven-project:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-settings:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-profile:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-artifact-manager:jar:2.2.1:compile |  |  |  |  +- org.apache.maven:maven-repository-metadata:jar:2.2.1:compile |  |  |  |  +- org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-6:compile |  |  |  |  \- backport-util-concurrent:backport-util-concurrent:jar:3.1:compile |  |  |  +- org.apache.maven:maven-plugin-registry:jar:2.2.1:compile |  |  |  +- org.codehaus.plexus:plexus-interpolation:jar:1.11:compile |  |  |  +- org.codehaus.plexus:plexus-utils:jar:1.5.15:compile |  |  |  \- org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1:compile |  |  |     \- classworlds:classworlds:jar:1.1-alpha-2:compile |  |  +- org.codehaus.plexus:plexus-compiler-api:jar:2.2:compile |  |  \- org.sonatype.plexus:plexus-build-api:jar:0.0.7:compile |  +- org.antlr:antlr4:jar:4.5.3:compile |  \- org.ardverk:patricia-trie:jar:0.7-SNAPSHOT:compile +- com.van.grid:sdmgraph:jar:0.001-SNAPSHOT:compile |  +- commons-configuration:commons-configuration:jar:1.6:compile |  |  +- commons-digester:commons-digester:jar:1.8:compile |  |  \- commons-beanutils:commons-beanutils-core:jar:1.8.0:compile |  +- commons-cli:commons-cli:jar:1.3.1:compile |  +- org.yaml:snakeyaml:jar:1.13:compile |  +- commons-logging:commons-logging:jar:1.2:compile |  \- commons-logging:commons-logging-api:jar:1.1:compile +- com.van:programs:jar:tests:0.001-SNAPSHOT:test +- com.van:snmp:jar:0.001-SNAPSHOT:compile |  +- org.snmp4j:snmp4j:jar:2.4.3:compile |  \- org.snmp4j:snmp4j-agent:jar:2.4.2:compile +- com.van:components:jar:0.001-SNAPSHOT:compile |  +- javax.mail:javax.mail-api:jar:1.5.6:compile |  \- com.sun.mail:javax.mail:jar:1.5.6:compile |     \- javax.activation:activation:jar:1.1:compile +- com.amazonaws:aws-java-sdk-ses:jar:1.11.77:compile |  +- com.amazonaws:aws-java-sdk-core:jar:1.11.77:compile |  |  \- software.amazon.ion:ion-java:jar:1.0.1:compile |  \- com.amazonaws:jmespath-java:jar:1.11.77:compile +- com.van:metrics-eval:jar:0.001-SNAPSHOT:compile |  \- com.van:tsdb-server:jar:0.001-SNAPSHOT:compile +- org.freemarker:freemarker:jar:2.3.20:compile +- com.van:remote-control:jar:0.001-SNAPSHOT:compile |  \- com.van:version-control:jar:0.001-SNAPSHOT:compile +- com.codahale.metrics:metrics-core:jar:3.0.1:compile +- com.codahale.metrics:metrics-healthchecks:jar:3.0.1:compile +- com.icegreen:greenmail:jar:1.5.5:test +- com.van:support-request:jar:0.001-SNAPSHOT:compile |  \- com.van:storage-utils:jar:0.001-SNAPSHOT:compile |     \- com.github.fge:json-patch:jar:1.9:compile |        \- com.github.fge:jackson-coreutils:jar:1.6:compile |           \- com.github.fge:msg-simple:jar:1.1:compile |              \- com.github.fge:btf:jar:1.2:compile +- com.van:dns-request:jar:0.001-SNAPSHOT:compile +- com.van:service-health:jar:0.001-SNAPSHOT:compile +- org.apache.httpcomponents:httpclient:jar:4.5.2:compile +- joda-time:joda-time:jar:2.9.4:compile +- commons-codec:commons-codec:jar:1.10:compile +- org.slf4j:slf4j-api:jar:1.7.5:compile +- org.jsoup:jsoup:jar:1.10.1:compile +- com.van:syslog:jar:0.001-SNAPSHOT:compile +- com.van.external-clients:csp:jar:0.001-SNAPSHOT:compile |  +- org.springframework:spring-beans:jar:4.3.9.RELEASE:compile |  +- org.springframework:spring-context:jar:4.3.9.RELEASE:compile |  |  \- org.springframework:spring-expression:jar:4.3.9.RELEASE:compile |  \- com.auth0:java-jwt:jar:3.2.0:compile +- com.van.external-clients:discovery:jar:0.001-SNAPSHOT:compile +- dnsjava:dnsjava:jar:2.1.7:compile +- com.univocity:univocity-parsers:jar:2.5.9:compile +- org.springframework:spring-test:jar:4.3.9.RELEASE:test |  \- org.springframework:spring-core:jar:4.3.9.RELEASE:compile +- io.dropwizard:dropwizard-forms:jar:1.2.4:compile |  \- org.glassfish.jersey.media:jersey-media-multipart:jar:2.25.1:compile |     \- org.jvnet.mimepull:mimepull:jar:1.9.6:compile +- org.codehaus.jettison:jettison:jar:1.3.8:compile |  \- stax:stax-api:jar:1.0.1:compile +- com.jayway.jsonpath:json-path:jar:0.9.1:compile |  \- net.minidev:json-smart:jar:1.2:compile +- com.google.guava:guava:jar:23.5-jre:compile |  +- org.checkerframework:checker-qual:jar:2.0.0:compile |  +- com.google.errorprone:error_prone_annotations:jar:2.0.18:compile |  +- com.google.j2objc:j2objc-annotations:jar:1.1:compile |  \- org.codehaus.mojo:animal-sniffer-annotations:jar:1.14:compile +- com.google.code.findbugs:jsr305:jar:2.0.3:provided +- org.glassfish.jersey.core:jersey-client:jar:2.23.2:compile |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile |  +- org.glassfish.jersey.core:jersey-common:jar:2.23.2:compile |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.23.2:compile |  |  \- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile |  +- org.glassfish.hk2:hk2-api:jar:2.5.0-b05:compile |  |  +- org.glassfish.hk2:hk2-utils:jar:2.5.0-b05:compile |  |  \- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.5.0-b05:compile |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b05:compile |  \- org.glassfish.hk2:hk2-locator:jar:2.5.0-b05:compile +- commons-net:commons-net:jar:3.1:compile +- commons-lang:commons-lang:jar:2.6:compile +- com.google.code.gson:gson:jar:2.2.4:compile +- org.apache.commons:commons-jexl:jar:2.1.1:compile +- com.google.inject:guice:jar:3.0:compile +- com.google.protobuf:protobuf-java:jar:2.5.0:compile +- com.googlecode.protobuf-java-format:protobuf-java-format:jar:1.2:compile +- org.apache.thrift:libthrift:jar:0.9.1:compile +- com.typesafe.akka:akka-actor_2.11:jar:2.5.8:compile |  +- com.typesafe:config:jar:1.3.2:compile |  \- org.scala-lang.modules:scala-java8-compat_2.11:jar:0.7.0:compile +- org.quartz-scheduler:quartz:jar:2.2.1:compile |  \- c3p0:c3p0:jar:0.9.1.1:compile +- com.github.rholder:guava-retrying:jar:1.0.5:compile +- org.scala-lang:scala-library:jar:2.11.8:compile +- junit:junit:jar:4.12:test |  \- org.hamcrest:hamcrest-core:jar:1.3:compile \- org.assertj:assertj-core:jar:3.5.2:test ``` Dropwizard configuration file looks like below  ``` configStoreType : PSQL configStoreHost : ""localhost"" configStorePort : 1212 configStoreUsername : van configStorePassword : zaza configStoreDatabase : ""acccdcd"" metricStoreType : HBASE zookeeperHost : ""localhost"" zookeeperPort : 2181 saasConnectionString : ""localhost:9090"" flags : ""ngramQuerySourceLocalOnly=false"" maxEventsInARequest : -1 maxMetricsInARequest : -1 maxObjectsForEventsInARequest : -1 maxThreadsBeforeCrash : 1000 executorsSpecPath : /home/ubuntu/build-target/restapilayer/executors-spec.txt dashboardAppConfigPath : /home/ubuntu/build-target/restapilayer/apps/ kinPolicyRulePath : /home/ubuntu/build-target/restapilayer/kin_policy_rules.txt tagsConfigPath : /home/ubuntu/build-target/restapilayer/tags.txt descriptionsConfigPath : /home/ubuntu/build-target/restapilayer/descriptions.txt subscriptionDryRunMode: false printEmailToFile: true shiro_configuration:     enabled: true     dropwizard_session_handler: true     cookies_secure: true     cookies_name: RNI-JSESSIONID logging:     type: external maxEntitiesInEventsQuery : 50 maxUILogMBPerHour: 1 licenseKeyPairFilePath: /home/ubuntu/build-target/deployment/keys/licensing.pem proxyPublicKeyFilePath: /home/ubuntu/build-target/deployment/keys/shared.crt remoteServiceControlEndpoint: http://localhost:7070 applicationJsonPath: /home/ubuntu/build-target/restapilayer/applications.json policyJsonPath: /home/ubuntu/build-target/restapilayer/policy-groups.json dlfPath: 121212 smtpConfigFile: /home/ubuntu/build-target/deployment/smtp.properties dnsZoneFilesUploadPath: /var/lib/ubuntu/uploads/ ```","closed","","debraj-manna","2018-04-15T18:17:21Z","2018-04-16T11:23:28Z"
"","2203","Use version 3.2.5 of dropwizard metrics","Don't see any reason not to stay up to date on metrics version in 1.1.x","closed","","georgespalding","2017-11-11T09:02:02Z","2017-11-11T20:24:56Z"
"","2487","Documenting how to escape periods","Documenting how to escape periods in system property config overrides  ###### Problem:  I've always wanted an easy way to tweak logging levels of individual loggers with a low touch approach (so I can debug issues without pushing an entire deployable change),  but had difficulty because the property for it contains periods. Finally, I spent some time today going through the code that makes these system property overrides happen, and found that there is a way to escape the period, it just wasn't explicitly documented.  ###### Solution: Document how periods are escaped in parsing system property overrides","closed","documentation,","zmarois","2018-09-11T17:09:33Z","2018-09-15T01:45:00Z"
"","1778","Add web test container agnostic client target","Depending on the web test container passed to `ResourceTestRule#setTestContainerFactory`, one would either invoke `client()` or `getJerseyTest()`, which is inconvenient. The fix is to standardize on a new method that can be used regardless of web test container that also doesn't infringe on the law of Demeter (as the other solution would be to rewrite all usage as using `getJerseyTest()`)","closed","improvement,","nickbabcock","2016-10-20T15:24:43Z","2016-10-21T00:02:43Z"
"","2518","ConfiguredCommand termination","Dear everybody,      I have a question. I'm developing an application which has a part of it that is ran via command line (e.g. the database preparation).  In order to do that I have set up a set of ConfiguredCommands which I have exteded to do my stuff, however I expect the application to terminate once the command has ran.   How can I do that? Just call System.exit(1) at the end or is there a more elegant way?  BTW I'm using version 1.3.5 with java 8.","closed","","lfoppiano","2018-10-03T17:36:07Z","2018-10-03T19:49:05Z"
"","1670","jdbi error rewriting sql after 1.0.0 upgrade","Database:MSSQL SQL: /\* ShortIdDAO.insertShortId */ INSERT INTO short_ids (shortId, idType, createdDate) VALUES (:shortId, :idType:, :createdDate)  org.skife.jdbi.antlr.NoViableAltException thrown in ColonStatementLexer.mtokens() line 852  This worked before upgrade in 0.9.3","closed","","dr3s","2016-08-04T20:37:27Z","2016-08-04T20:44:53Z"
"","2319","Enhance the metric to include timestamp","Currently, some of the metric reporters support timestamp with metric as well. The dropwizard metrics like Guage, Timers etc should support even timestamp as one of the members (Timestamp should be an optional member). Let me know any comments.  Example use case is: suppose say, we want to run a validation after an event has occurred and send the validation result as guage value once the validation completes. Now, in this scenario, the event will any ways be sent as metric (no need of timestamp here) but, while sending the validation result, it makes more sence to include the timestamp at which the event has occurred. This will help in correlating the validation metric with the event metric.  Let me know comments. If not, I can contribute to include timestamp as a member to Metric family specially for guage. Timestamp can be an optional member to the metric type.","closed","","db-vmw","2018-03-30T05:48:52Z","2018-03-30T07:49:46Z"
"","1863","ensuring that server-side JsonProcessingExceptions return JSON, consistent with other 500 errors","Currently, most 500s from Dropwizard internal exceptions return as application/json, with a nice logging ID, courtesy of `LoggingExceptionMapper`. This is a pleasant default.  However, `JsonProcessingException`s that have been determined to be server-side issues are still returning as the default Jersey HTML format, which is less pleasant.  This PR causes server-side JsonProcessingException 500s to return as application/json. It re-uses the `LoggingExceptionMapper` code and returns in the exact same format as other internal exceptions.  Feedback welcomed.","closed","improvement,","eonwhite","2016-12-20T19:12:51Z","2016-12-24T16:52:36Z"
"","2483","Extra logging on Health Check","Currently, I have my logging set to `INFO` level. I am overriding the `execute` method of each custom Health Check I implement. In that override, I log error messages, if the health check is unhealthy. However, I still do not see stack traces when the health check returns a 500. I assume this is because the `deadlock` healthcheck is returning false.  Is there a way to log the deadlock healthcheck or Even better, log the result of the healthcheck when it is unhealthy?","closed","","ldm810","2018-09-06T15:16:47Z","2018-09-28T14:04:23Z"
"","2024","Use latest version of alpn-boot by default","Currently, dropwizard-http2 using the alpn-boot 8.1.3.v20150130 by default. Therefore, building with a future Java version that is not defined in the profile always fails.  Since it takes a while for alpn-boot to be released after the latest version of Java is released, I suggest that dropwizard-http2 use the latest alpn-boot by default.  Note: Probably, Travis CI currently uses Java 8u131, because Dropwizard uses oracle-java 8-installer.","closed","","ghost","2017-04-24T17:21:29Z","2017-04-24T21:21:29Z"
"","1768","Bind default exception mappers","Currently when a user wants to override one of the default exception mappers they must specify `registerDefaultExceptionMappers: false` in their configuration, register their exception mapper, and then re-register all the other default exception mappers they want. This is not user friendly. A user should be able to register their own exception mapper, override the default exception mapper while preserving other default exception mappers.  It should be possible to achieve this behavior as alluded to in [JERSEY-2722](https://java.net/jira/browse/JERSEY-2722)  > your own ExceptionMapper should always have a higher priority than anything provided by Jersey  and alluded in [Jersey's Bean Validation code](https://github.com/jersey/jersey/blob/1a7919181d8a1f550c7fc20898db67fe9da5d596/ext/bean-validation/src/main/java/org/glassfish/jersey/server/validation/internal/ValidationBinder.java#L102)  ``` java // Custom Exception Mapper and Writer - registering in binder to make possible for users register their own providers. bind(ValidationExceptionMapper.class).to(ExceptionMapper.class).in(Singleton.class); bind(ValidationErrorMessageBodyWriter.class).to(MessageBodyWriter.class).in(Singleton.class); ```  This pull request takes a crack at introducing this to Dropwizard, while remaining 100% backwards compatible. I've tried creating this behavior before in #1144, but it didn't work out, so I'd appreciate some help testing this :smile:. I believe it is working as I have an app that has:  ``` java @Override public void run(final DropwizardSampleConfiguration configuration,                 final Environment environment) {     environment.jersey().register(new Resource());     environment.jersey().register(new MyJerseyException()); }   public class MyJerseyException implements ExceptionMapper {     @Override     public Response toResponse(JerseyViolationException e) {         return Response.ok(""Oh yeah"").build();     } } ```  and I receive the ""Oh yeah"" response with every restart and request (100 requests across 10 restarts).  We can even keep around the `registerDefaultExceptionMappers` for users who want no default exception mappers registered, but I'm assuming most users will not use this option and opt for overriding specific exception mappers.  The major benefit to this approach is the ability to add new exception mappers without having the relatively large cost of forcing the user to know them all üòã   TODO: - [x] Add tests - [x] Update docs - [x] To use the provider annotation or not?","closed","improvement,","nickbabcock","2016-10-07T20:52:37Z","2016-10-11T23:30:05Z"
"","2130","Change DatasourceFactory.maxWaitForConnection min duration","Currently the value is set to  ```java     @NotNull     @MinDuration(value = 1, unit = TimeUnit.SECONDS)     private Duration maxWaitForConnection = Duration.seconds(30); ``` It should be a minimum of 1 MILLISECONDS  if it is set to 0 then it seems to hang indefinitely.  below is a test snippet demonstrating behavior.   ```java     @Test     public void databaseIsFailFastIfPoolIsExausted() throws Exception {         DataSourceFactory dsFactory = objectMapper.readValue(objectMapper.writeValueAsString(config.getDataSourceFactory()), DataSourceFactory.class);         dsFactory.setMaxSize(2);         dsFactory.setMinSize(1);          //We cannot set this in the config because dropwizard does         //@MinDuration(value = 1, unit = TimeUnit.SECONDS)         dsFactory.setMaxWaitForConnection(Duration.milliseconds(1));         ManagedDataSource ds = dsFactory.build(registry, ""TESTING-failfast"");         try {             Connection c1 = ds.getConnection();             Connection c2 = ds.getConnection();             Stopwatch sw = Stopwatch.createStarted();             try {                 ds.getConnection();                 fail(""should fail"");             } catch (PoolExhaustedException e) {                 assertThat(sw.elapsed(TimeUnit.SECONDS)).isLessThan(1);             }         } finally {             ds.stop();         }     } ```  We would like to fail fast as possible if the connection pool is full as hanging threads is not a good default.","closed","improvement,","jkolash","2017-08-09T22:59:17Z","2017-11-23T08:07:57Z"
"","1803","dw-jersey: Better endpoint logging to include manually created Resources","Currently the `EndpointLogger` in [DropwizardResourceConfig.java](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/DropwizardResourceConfig.java) only shows resources which were added using their `Class` objects: ```java jersey().addResource(DummyResource.class); ``` These show up when starting dw and initializing everything.  However, resources that are created programmatically and added dynamically using `jersey().getResourceConfig().registerResources(...)` don't show up in the logging output which is very irritating.  What I am proposing would be to expand the `EndpointLogger` to also look through `ResourceConfig.getResources()` to catch all that were not found using `DropwizardResourceConfig.allClasses()`.  Specifically it logs the child resources that were grouped using a manually created Resource object to share a common prefix, for example.","closed","","vemilyus","2016-11-07T16:27:35Z","2016-11-09T18:00:19Z"
"","1779","Build fails with 1.8.0_111","Currently looking into why the (travis) build fails with this version.","closed","","nickbabcock","2016-10-20T17:48:32Z","2016-10-20T18:38:08Z"
"","1723","validation: Pull parameter names from QueryParam, FormParam, and PathParam","Currently jersey resource paramere validation returns arg0, arg1, etc... for parameter names.  This PR adds a ParameterNameProvider that attempts to pull parameter names from QueryParam, FormParam, and PathParam annotations before falling back to the old behavior.","closed","","cmicali","2016-09-08T14:53:23Z","2016-09-21T13:53:12Z"
"","1959","Support `@UnitOfWork` in sub-resources","Currently Dropwizard doesn't open transactions in sub-resources as reported in #1806. The problem is that Dropwizard scans resource methods for `@UnitOfWork` during resource initialization and sub-resource methods are not resolved at that time and can't be registered by Dropwizard. The fix is to defer the lookup of the `@UnitOfWork` annotation on a method until it's invoked and than cache it. One downside of this approache is that `ConcurrentMap` doesn't support null values, so we have to use `Optional` from `UnitOfWork` which can add an additional overhead, but it should be negligible.","closed","improvement,","arteam","2017-03-13T08:55:10Z","2017-03-14T18:05:35Z"
"","1999","Update to slf4j 1.7.25, logback 1.2.3 dependencies","Current versions used are slf4j 1.7.24 and logback 1.2.1 in master. Several bugfixes have been made as part of the new releases slf4j 1.7.25 , logback 1.2.3","closed","","michaelbraun","2017-04-10T18:04:49Z","2017-04-25T13:32:39Z"
"","2459","Include all apache ConnectionPool metrics","Current implementation of the ManagedPooledDataSource in dropwizard-db misses the metrics for created, borrowed, reconnected, released, releasedIdle, returned and removeAbandoned metrics, we should include them.","closed","improvement,","leoconco","2018-08-17T22:54:36Z","2018-08-29T05:31:44Z"
"","2333","During testing ResourceTestRule throwing NoClassDefFoundError: ch/qos/logback/core/filter/Filter","Crossposting from [stackoverflow](https://stackoverflow.com/questions/50065899/dropwizard-testing-resourcetestrule-throwing-noclassdeffounderror-ch-qos-logb) and [forum](https://groups.google.com/forum/#!topic/dropwizard-user/bZYpzCM0ASI)   I am using dropwizard 1.2.4 with log4j 1.2.17. I have followed the instructions as mentioned below  https://github.com/arteam/dropwizard-nologback/  It is throwing the exception like below during unit testing.   ``` java.lang.NoClassDefFoundError: ch/qos/logback/core/filter/Filter  	at io.dropwizard.testing.junit.ResourceTestRule.(ResourceTestRule.java:34) 	at com.vnera.restapilayer.api.resources.ApiInfoControllerTest.(ApiInfoControllerTest.java:25) 	at sun.misc.Unsafe.ensureClassInitialized(Native Method) 	at sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:43) 	at sun.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:156) 	at java.lang.reflect.Field.acquireFieldAccessor(Field.java:1088) 	at java.lang.reflect.Field.getFieldAccessor(Field.java:1069) 	at java.lang.reflect.Field.get(Field.java:393) 	at org.junit.runners.model.FrameworkField.get(FrameworkField.java:73) 	at org.junit.runners.model.TestClass.getAnnotatedFieldValues(TestClass.java:230) 	at org.junit.runners.ParentRunner.classRules(ParentRunner.java:255) 	at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:244) 	at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:194) 	at org.junit.runners.ParentRunner.run(ParentRunner.java:362) 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) 	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: java.lang.ClassNotFoundException: ch.qos.logback.core.filter.Filter 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:335) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) 	... 19 more ```  My test code looks like below  ``` import io.dropwizard.testing.junit.ResourceTestRule; import org.junit.Assert; import org.junit.ClassRule; import org.junit.Test; import org.junit.experimental.categories.Category;  import javax.ws.rs.core.Response;  import static org.mockito.Mockito.mock;  @Category(value = UnitTest.class) public class ApiInfoControllerTest {     private static ApiNonFunctionalHandler nonFunctionalHandler = mock(ApiNonFunctionalHandler.class);     private static ApiFilter apiFilter = new ApiFilter(nonFunctionalHandler);     private static final String authToken = ""NetworkInsight xTyAGJmZ8nU8yJDP7LnA8Q=="";      @ClassRule     public static final ResourceTestRule resources = ResourceTestRule.builder()             .addResource(new ApiInfoController())             .addProvider(apiFilter).build();      @Test     public void testApiVersion() throws Exception {         Response response = resources.client()                 .target(ApiConstants.INFO_BASE_URL + ""/version"")                 .request()                 .header(""Authorization"", authToken)                 .buildGet().invoke();                  Assert.assertNotNull(response);         Assert.assertEquals(response.toString(), Response.Status.OK.getStatusCode(), response.getStatus());         final VersionResponse actualError = response.readEntity(VersionResponse.class);         Assert.assertEquals(actualError.getApiVersion(), ApiConstants.API_VERSION);     } } ``` My main application is working fine. The `configuration.yaml` for main application looks like below  ``` # Change default server ports server:   applicationConnectors:   - type: http     port: 8123   adminConnectors:   - type: http     port: 8124   requestLog:     type: external logging:   type: external ```  Output of `mvn dependency:tree`  ``` ------------------------------------------------------------------------ Building restapilayer 0.001-SNAPSHOT ------------------------------------------------------------------------  --- maven-dependency-plugin:2.10:tree (default-cli) @ restapilayer --- com.ven:restapilayer:jar:0.001-SNAPSHOT +- io.dropwizard:dropwizard-jackson:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-util:jar:1.2.4:compile |  +- com.fasterxml.jackson.core:jackson-core:jar:2.9.4:compile |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.9.4:compile |  +- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.9.4:compile |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.9.4:compile |  \- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.9.4:compile +- io.dropwizard.modules:dropwizard-elasticsearch:jar:1.2.0-1:compile |  \- org.elasticsearch:elasticsearch:jar:2.4.6:compile |     +- org.apache.lucene:lucene-core:jar:5.5.4:compile |     +- org.apache.lucene:lucene-backward-codecs:jar:5.5.4:compile |     +- org.apache.lucene:lucene-analyzers-common:jar:5.5.4:compile |     +- org.apache.lucene:lucene-queries:jar:5.5.4:compile |     +- org.apache.lucene:lucene-memory:jar:5.5.4:compile |     +- org.apache.lucene:lucene-highlighter:jar:5.5.4:compile |     +- org.apache.lucene:lucene-queryparser:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-sandbox:jar:5.5.4:compile |     +- org.apache.lucene:lucene-suggest:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-misc:jar:5.5.4:compile |     +- org.apache.lucene:lucene-join:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-grouping:jar:5.5.4:compile |     +- org.apache.lucene:lucene-spatial:jar:5.5.4:compile |     |  +- org.apache.lucene:lucene-spatial3d:jar:5.5.4:compile |     |  \- com.spatial4j:spatial4j:jar:0.5:compile |     +- org.elasticsearch:securesm:jar:1.0:compile |     +- com.carrotsearch:hppc:jar:0.7.1:compile |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.8.1:compile |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.8.1:compile |     +- io.netty:netty:jar:3.10.6.Final:compile |     +- com.ning:compress-lzf:jar:1.0.2:compile |     +- com.tdunning:t-digest:jar:3.0:compile |     +- org.hdrhistogram:HdrHistogram:jar:2.1.6:compile |     \- com.twitter:jsr166e:jar:1.1.0:compile +- io.dropwizard:dropwizard-validation:jar:1.2.4:compile |  +- org.hibernate:hibernate-validator:jar:5.4.2.Final:compile |  |  +- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile |  |  \- com.fasterxml:classmate:jar:1.3.1:compile |  \- org.glassfish:javax.el:jar:3.0.0:compile +- io.dropwizard:dropwizard-core:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-configuration:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-logging:jar:1.2.4:compile |  |  +- io.dropwizard.metrics:metrics-logback:jar:3.2.5:compile |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.25:compile |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.25:compile |  |  \- org.eclipse.jetty:jetty-util:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-metrics:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-jersey:jar:1.2.4:compile |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile |  |  |  \- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.2.5:compile |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.9.4:compile |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.9.4:compile |  |  |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.9.4:compile |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile |  |  |  \- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile |  |  +- org.eclipse.jetty:jetty-server:jar:9.4.8.v20171121:compile |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile |  |  |  \- org.eclipse.jetty:jetty-io:jar:9.4.8.v20171121:compile |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.4.8.v20171121:compile |  |  |  \- org.eclipse.jetty:jetty-xml:jar:9.4.8.v20171121:compile |  |  \- org.eclipse.jetty:jetty-continuation:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-servlets:jar:1.2.4:compile |  |  \- io.dropwizard.metrics:metrics-annotation:jar:3.2.5:compile |  +- io.dropwizard:dropwizard-jetty:jar:1.2.4:compile |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.2.5:compile |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.4.8.v20171121:compile |  |  |  \- org.eclipse.jetty:jetty-security:jar:9.4.8.v20171121:compile |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.4.8.v20171121:compile |  |  \- org.eclipse.jetty:jetty-http:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-lifecycle:jar:1.2.4:compile |  +- io.dropwizard.metrics:metrics-core:jar:3.2.5:compile |  +- io.dropwizard.metrics:metrics-jvm:jar:3.2.5:compile |  +- io.dropwizard.metrics:metrics-servlets:jar:3.2.5:compile |  |  +- io.dropwizard.metrics:metrics-json:jar:3.2.5:compile |  |  \- com.papertrail:profiler:jar:1.0.2:compile |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.2.5:compile |  +- io.dropwizard:dropwizard-request-logging:jar:1.2.4:compile |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile |  \- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile +- commons-fileupload:commons-fileupload:jar:1.3.3:compile |  \- commons-io:commons-io:jar:2.2:compile +- io.dropwizard:dropwizard-testing:jar:1.2.4:test |  +- org.objenesis:objenesis:jar:2.6:compile |  \- org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.25.1:test |     \- org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.25.1:test +- org.apache.shiro:shiro-core:jar:1.3.0:compile |  \- commons-beanutils:commons-beanutils:jar:1.8.3:compile +- io.swagger:swagger-core:jar:1.5.0:compile |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.4.2:compile |  +- io.swagger:swagger-models:jar:1.5.0:compile |  \- javax.validation:validation-api:jar:1.1.0.Final:compile +- io.swagger:swagger-annotations:jar:1.5.0:compile +- org.apache.shiro:shiro-web:jar:1.2.3:compile +- org.apache.commons:commons-lang3:jar:3.4:compile +- com.ven:contracts:jar:0.001-SNAPSHOT:compile |  +- com.ven:common:jar:0.001-SNAPSHOT:compile |  |  +- com.koloboke:koloboke-api-jdk8:jar:1.0.0:compile |  |  +- com.koloboke:koloboke-impl-jdk8:jar:1.0.0:runtime |  |  |  \- com.koloboke:koloboke-impl-common-jdk8:jar:1.0.0:runtime |  |  +- it.unimi.dsi:fastutil:jar:8.1.0:compile |  |  +- com.amazonaws:aws-java-sdk:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-pinpoint:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-xray:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-opsworkscm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-support:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-simpledb:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-servicecatalog:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-servermigration:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-simpleworkflow:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-storagegateway:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-route53:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-s3:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-importexport:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sts:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sqs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-rds:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-redshift:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticbeanstalk:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-glacier:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-iam:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-datapipeline:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticloadbalancing:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticloadbalancingv2:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-emr:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticache:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elastictranscoder:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ec2:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-dynamodb:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sns:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-budgets:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudtrail:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudwatch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-logs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-events:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitoidentity:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitosync:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-directconnect:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudformation:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudfront:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-kinesis:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-opsworks:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudsearch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudwatchmetrics:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codedeploy:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codepipeline:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-kms:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-config:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-lambda:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ecs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ecr:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudhsm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ssm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-workspaces:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-machinelearning:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-directory:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-efs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codecommit:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-devicefarm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticsearch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-waf:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-marketplacecommerceanalytics:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-inspector:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-iot:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-api-gateway:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-acm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-gamelift:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-dms:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-marketplacemeteringservice:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitoidp:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-discovery:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-applicationautoscaling:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-snowball:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-rekognition:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-polly:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-lightsail:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-stepfunctions:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-health:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codebuild:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-appstream:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-shield:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-batch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-models:jar:1.11.77:compile |  |  |  \- com.amazonaws:aws-java-sdk-swf-libraries:jar:1.11.22:compile |  |  +- com.ven:utility:jar:0.001-SNAPSHOT:compile |  |  +- com.esotericsoftware:kryo-shaded:jar:3.0.0:compile |  |  |  \- com.esotericsoftware:minlog:jar:1.3.0:compile |  |  +- com.codahale.metrics:metrics-graphite:jar:3.0.1:compile |  |  +- com.librato.metrics:metrics-librato:jar:4.1.2.4:compile |  |  |  \- com.librato.metrics:librato-java:jar:1.0.13:compile |  |  +- org.mockito:mockito-all:jar:1.10.19:compile |  |  +- org.powermock:powermock-module-junit4:jar:1.6.4:compile |  |  |  \- org.powermock:powermock-module-junit4-common:jar:1.6.4:compile |  |  |     +- org.powermock:powermock-core:jar:1.6.4:compile |  |  |     \- org.powermock:powermock-reflect:jar:1.6.4:compile |  |  +- org.powermock:powermock-api-mockito:jar:1.6.4:compile |  |  |  +- org.mockito:mockito-core:jar:1.10.19:compile |  |  |  \- org.powermock:powermock-api-support:jar:1.6.4:compile |  |  +- com.vmw.vli:licensecheck:jar:1.4-RELEASE:compile |  |  +- org.bouncycastle:bcprov-jdk15on:jar:1.57:compile |  |  +- org.bouncycastle:bcpkix-jdk15on:jar:1.57:compile |  |  +- io.netty:netty-all:jar:4.1.17.Final:compile |  |  +- org.apache.hadoop:hadoop-common:jar:2.6.0-cdh5.7.1:compile |  |  |  +- xmlenc:xmlenc:jar:0.52:compile |  |  |  +- commons-httpclient:commons-httpclient:jar:3.1:compile |  |  |  +- javax.servlet:servlet-api:jar:2.5:compile |  |  |  +- tomcat:jasper-compiler:jar:5.5.23:compile |  |  |  +- tomcat:jasper-runtime:jar:5.5.23:compile |  |  |  +- javax.servlet.jsp:jsp-api:jar:2.1:compile |  |  |  +- commons-el:commons-el:jar:1.0:compile |  |  |  +- net.java.dev.jets3t:jets3t:jar:0.9.0:compile |  |  |  |  \- com.jamesmurty.utils:java-xmlbuilder:jar:0.4:compile |  |  |  +- org.apache.avro:avro:jar:1.7.6-cdh5.7.1:compile |  |  |  +- org.apache.curator:curator-client:jar:2.7.1:compile |  |  |  +- org.apache.curator:curator-recipes:jar:2.7.1:compile |  |  |  +- org.apache.htrace:htrace-core4:jar:4.0.1-incubating:compile |  |  |  \- org.apache.commons:commons-compress:jar:1.4.1:compile |  |  |     \- org.tukaani:xz:jar:1.0:compile |  |  +- org.apache.hadoop:hadoop-client:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-hdfs:jar:2.6.0-cdh5.7.1:compile |  |  |  |  +- xerces:xercesImpl:jar:2.9.1:compile |  |  |  |  \- org.fusesource.leveldbjni:leveldbjni-all:jar:1.8:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-app:jar:2.6.0-cdh5.7.1:compile |  |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |  |  +- org.apache.hadoop:hadoop-yarn-client:jar:2.6.0-cdh5.7.1:compile |  |  |  |  |  \- org.apache.hadoop:hadoop-yarn-server-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |  \- org.apache.hadoop:hadoop-mapreduce-client-shuffle:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-yarn-api:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-core:jar:2.6.0-cdh5.7.1:compile |  |  |  |  \- org.apache.hadoop:hadoop-yarn-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |     +- javax.xml.bind:jaxb-api:jar:2.2.2:compile |  |  |  |     |  \- javax.xml.stream:stax-api:jar:1.0-2:compile |  |  |  |     +- org.codehaus.jackson:jackson-jaxrs:jar:1.8.8:compile |  |  |  |     \- org.codehaus.jackson:jackson-xc:jar:1.8.8:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-jobclient:jar:2.6.0-cdh5.7.1:compile |  |  |  \- org.apache.hadoop:hadoop-aws:jar:2.6.0-cdh5.7.1:compile |  |  +- org.coursera:metrics-datadog:jar:1.1.13:compile |  |  |  +- org.apache.httpcomponents:fluent-hc:jar:4.3.6:compile |  |  |  \- com.datadoghq:java-dogstatsd-client:jar:2.3:compile |  |  \- com.ven:reg-common:jar:0.001-SNAPSHOT:compile |  +- com.ven:base-model:jar:0.001-SNAPSHOT:compile |  +- org.slf4j:slf4j-log4j12:jar:1.7.5:compile |  +- log4j:log4j:jar:1.2.17:compile |  +- com.ven:core-model:jar:0.001-SNAPSHOT:compile |  |  +- com.ven:analytics-model:jar:0.001-SNAPSHOT:compile |  |  +- org.reflections:reflections:jar:0.9.9-RC1:compile |  |  |  \- dom4j:dom4j:jar:1.6.1:compile |  |  |     \- xml-apis:xml-apis:jar:1.0.b2:compile |  |  \- commons-validator:commons-validator:jar:1.6:compile |  +- com.ven:vshield-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:nsx-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:cisco-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:vcenter-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:force10-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:flow-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:openstack-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:juniper-model:jar:0.001-SNAPSHOT:compile |  \- com.ven:pan-model:jar:0.001-SNAPSHOT:compile +- com.ven:rpc-saasinterface:jar:0.001-SNAPSHOT:compile +- com.ven:storage-common:jar:0.001-SNAPSHOT:compile |  +- com.ven:data-model:jar:0.001-SNAPSHOT:compile |  +- net.spy:spymemcached:jar:2.11.4:compile |  +- org.xerial.snappy:snappy-java:jar:1.1.2.6:compile |  +- com.opencsv:opencsv:jar:3.7:compile |  \- org.codehaus.groovy:groovy-all:jar:2.4.4:compile +- com.ven:arkin-storage-metrics:jar:0.001-SNAPSHOT:compile |  +- org.apache.hbase:hbase-client:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.hbase:hbase-annotations:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.hbase:hbase-common:jar:1.2.0-cdh5.7.0:compile |  |  |  \- org.apache.hadoop:hadoop-core:jar:2.6.0-mr1-cdh5.7.0:compile |  |  |     +- hsqldb:hsqldb:jar:1.8.0.10:compile |  |  |     \- org.eclipse.jdt:core:jar:3.1.1:compile |  |  +- org.apache.hbase:hbase-protocol:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.zookeeper:zookeeper:jar:3.4.5-cdh5.7.0:compile |  |  +- org.apache.htrace:htrace-core:jar:3.2.0-incubating:compile |  |  +- org.jruby.jcodings:jcodings:jar:1.0.8:compile |  |  +- org.jruby.joni:joni:jar:2.1.2:compile |  |  +- com.yammer.metrics:metrics-core:jar:2.2.0:compile |  |  +- org.apache.hadoop:hadoop-annotations:jar:2.6.0-cdh5.7.0:compile |  |  +- org.apache.hadoop:hadoop-auth:jar:2.6.0-cdh5.7.0:compile |  |  |  +- org.apache.directory.server:apacheds-kerberos-codec:jar:2.0.0-M15:compile |  |  |  |  +- org.apache.directory.server:apacheds-i18n:jar:2.0.0-M15:compile |  |  |  |  +- org.apache.directory.api:api-asn1-api:jar:1.0.0-M20:compile |  |  |  |  \- org.apache.directory.api:api-util:jar:1.0.0-M20:compile |  |  |  \- org.apache.curator:curator-framework:jar:2.7.1:compile |  |  \- com.github.stephenc.findbugs:findbugs-annotations:jar:1.3.9-1:compile |  +- com.jcraft:jsch:jar:0.1.54:compile |  \- com.ven:tsdb-client:jar:0.001-SNAPSHOT:compile |     +- com.ven:tsdb-common:jar:0.001-SNAPSHOT:compile |     |  +- io.grpc:grpc-protobuf:jar:1.11.0:compile |     |  |  +- com.google.protobuf:protobuf-java-util:jar:3.5.1:compile |     |  |  +- com.google.api.grpc:proto-google-common-protos:jar:1.0.0:compile |     |  |  \- io.grpc:grpc-protobuf-lite:jar:1.11.0:compile |     |  \- io.grpc:grpc-stub:jar:1.11.0:compile |     \- io.grpc:grpc-netty:jar:1.11.0:compile |        +- io.grpc:grpc-core:jar:1.11.0:compile (version selected from constraint [1.11.0,1.11.0]) |        |  +- io.grpc:grpc-context:jar:1.11.0:compile |        |  +- io.opencensus:opencensus-api:jar:0.11.0:compile |        |  \- io.opencensus:opencensus-contrib-grpc-metrics:jar:0.11.0:compile |        +- io.netty:netty-codec-http2:jar:4.1.22.Final:compile (version selected from constraint [4.1.22.Final,4.1.22.Final]) |        |  +- io.netty:netty-codec-http:jar:4.1.22.Final:compile |        |  |  \- io.netty:netty-codec:jar:4.1.22.Final:compile |        |  \- io.netty:netty-handler:jar:4.1.22.Final:compile |        |     \- io.netty:netty-buffer:jar:4.1.22.Final:compile |        |        \- io.netty:netty-common:jar:4.1.22.Final:compile |        \- io.netty:netty-handler-proxy:jar:4.1.22.Final:compile |           +- io.netty:netty-transport:jar:4.1.22.Final:compile |           |  \- io.netty:netty-resolver:jar:4.1.22.Final:compile |           \- io.netty:netty-codec-socks:jar:4.1.22.Final:compile +- org.apache.httpcomponents:httpcore:jar:4.4.5:compile +- com.ven:storage-config:jar:0.001-SNAPSHOT:compile |  +- org.postgresql:postgresql:jar:9.4.1208.jre7:compile |  +- commons-dbcp:commons-dbcp:jar:1.4:compile |  |  \- commons-pool:commons-pool:jar:1.5.4:compile |  +- com.ven:dedup:jar:0.001-SNAPSHOT:compile |  +- org.elasticsearch.module:lang-groovy:jar:2.3.1:compile |  |  \- org.codehaus.groovy:groovy:jar:indy:2.4.6:compile |  \- net.jodah:expiringmap:jar:0.5.8:compile +- com.ven:programs:jar:0.001-SNAPSHOT:compile |  +- com.googlecode.javaewah:JavaEWAH:jar:1.1.3:compile |  +- com.ven:model-utils:jar:0.001-SNAPSHOT:compile |  +- com.ven:event-manager:jar:0.001-SNAPSHOT:compile |  +- com.ven:storage-flowstore:jar:0.001-SNAPSHOT:compile |  +- com.ven:aws-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:nsxt-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:firewall-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:genericdevice-model:jar:0.001-SNAPSHOT:compile |  +- org.apache.commons:commons-math3:jar:3.6.1:compile |  +- com.ven:mapper:jar:0.001-SNAPSHOT:compile |  +- ma.glasnost.orika:orika-core:jar:1.4.2:compile |  |  +- com.thoughtworks.paranamer:paranamer:jar:2.3:compile |  |  \- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.2_jdk5:compile |  +- org.javassist:javassist:jar:3.20.0-GA:compile |  +- com.ven:denorm-model:jar:0.001-SNAPSHOT:compile |  +- com.ven:hp-model:jar:0.001-SNAPSHOT:compile |  +- com.vmw.vapi:vapi-runtime:jar:2.7.0:compile |  +- com.vmw.nsx.sdk:nsx-language-bindings:jar:2.0.0:compile |  \- org.springframework:spring-web:jar:4.2.9.RELEASE:compile |     \- org.springframework:spring-aop:jar:4.2.9.RELEASE:compile |        \- aopalliance:aopalliance:jar:1.0:compile +- com.ven:denorm-programs:jar:0.001-SNAPSHOT:test |  \- com.ven:impact:jar:0.001-SNAPSHOT:test +- com.ven:app:jar:0.001-SNAPSHOT:compile |  \- com.ven:meta-model:jar:0.001-SNAPSHOT:compile +- com.ven:resourcemanager:jar:0.001-SNAPSHOT:compile +- com.ven:ui-model:jar:0.001-SNAPSHOT:compile |  +- commons-collections:commons-collections:jar:3.2.2:compile |  \- org.unitils:unitils-core:jar:3.3:compile |     \- ognl:ognl:jar:2.6.9:compile +- com.ven:analytics-contract:jar:0.001-SNAPSHOT:compile +- com.ven:analytics-transformers:jar:0.001-SNAPSHOT:compile +- com.ven:query:jar:0.001-SNAPSHOT:compile |  +- org.antlr:antlr4-maven-plugin:jar:4.5.3:compile |  |  +- org.apache.maven:maven-plugin-api:jar:3.0.5:compile |  |  |  +- org.apache.maven:maven-model:jar:3.0.5:compile |  |  |  +- org.apache.maven:maven-artifact:jar:3.0.5:compile |  |  |  \- org.sonatype.sisu:sisu-inject-plexus:jar:2.3.0:compile |  |  |     +- org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile |  |  |     +- org.codehaus.plexus:plexus-classworlds:jar:2.4:compile |  |  |     \- org.sonatype.sisu:sisu-inject-bean:jar:2.3.0:compile |  |  |        \- org.sonatype.sisu:sisu-guice:jar:no_aop:3.1.0:compile |  |  +- org.apache.maven:maven-project:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-settings:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-profile:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-artifact-manager:jar:2.2.1:compile |  |  |  |  +- org.apache.maven:maven-repository-metadata:jar:2.2.1:compile |  |  |  |  +- org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-6:compile |  |  |  |  \- backport-util-concurrent:backport-util-concurrent:jar:3.1:compile |  |  |  +- org.apache.maven:maven-plugin-registry:jar:2.2.1:compile |  |  |  +- org.codehaus.plexus:plexus-interpolation:jar:1.11:compile |  |  |  +- org.codehaus.plexus:plexus-utils:jar:1.5.15:compile |  |  |  \- org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1:compile |  |  |     \- classworlds:classworlds:jar:1.1-alpha-2:compile |  |  +- org.codehaus.plexus:plexus-compiler-api:jar:2.2:compile |  |  \- org.sonatype.plexus:plexus-build-api:jar:0.0.7:compile |  +- org.antlr:antlr4:jar:4.5.3:compile |  \- org.ardverk:patricia-trie:jar:0.7-SNAPSHOT:compile +- com.ven.grid:sdmgraph:jar:0.001-SNAPSHOT:compile |  +- commons-configuration:commons-configuration:jar:1.6:compile |  |  +- commons-digester:commons-digester:jar:1.8:compile |  |  \- commons-beanutils:commons-beanutils-core:jar:1.8.0:compile |  +- commons-cli:commons-cli:jar:1.3.1:compile |  +- org.yaml:snakeyaml:jar:1.13:compile |  +- commons-logging:commons-logging:jar:1.2:compile |  \- commons-logging:commons-logging-api:jar:1.1:compile +- com.ven:programs:jar:tests:0.001-SNAPSHOT:test +- com.ven:snmp:jar:0.001-SNAPSHOT:compile |  +- org.snmp4j:snmp4j:jar:2.4.3:compile |  \- org.snmp4j:snmp4j-agent:jar:2.4.2:compile +- com.ven:components:jar:0.001-SNAPSHOT:compile |  +- javax.mail:javax.mail-api:jar:1.5.6:compile |  \- com.sun.mail:javax.mail:jar:1.5.6:compile |     \- javax.activation:activation:jar:1.1:compile +- com.amazonaws:aws-java-sdk-ses:jar:1.11.77:compile |  +- com.amazonaws:aws-java-sdk-core:jar:1.11.77:compile |  |  \- software.amazon.ion:ion-java:jar:1.0.1:compile |  \- com.amazonaws:jmespath-java:jar:1.11.77:compile +- com.ven:metrics-eval:jar:0.001-SNAPSHOT:compile |  \- com.ven:tsdb-server:jar:0.001-SNAPSHOT:compile +- org.freemarker:freemarker:jar:2.3.20:compile +- com.ven:remote-control:jar:0.001-SNAPSHOT:compile |  \- com.ven:version-control:jar:0.001-SNAPSHOT:compile +- com.codahale.metrics:metrics-core:jar:3.0.1:compile +- com.codahale.metrics:metrics-healthchecks:jar:3.0.1:compile +- com.icegreen:greenmail:jar:1.5.5:test +- com.ven:support-request:jar:0.001-SNAPSHOT:compile |  \- com.ven:storage-utils:jar:0.001-SNAPSHOT:compile |     \- com.github.fge:json-patch:jar:1.9:compile |        \- com.github.fge:jackson-coreutils:jar:1.6:compile |           \- com.github.fge:msg-simple:jar:1.1:compile |              \- com.github.fge:btf:jar:1.2:compile +- com.ven:dns-request:jar:0.001-SNAPSHOT:compile +- com.ven:service-health:jar:0.001-SNAPSHOT:compile +- org.apache.httpcomponents:httpclient:jar:4.5.2:compile +- joda-time:joda-time:jar:2.9.4:compile +- commons-codec:commons-codec:jar:1.10:compile +- org.slf4j:slf4j-api:jar:1.7.5:compile +- org.jsoup:jsoup:jar:1.10.1:compile +- com.ven:syslog:jar:0.001-SNAPSHOT:compile +- com.ven.external-clients:csp:jar:0.001-SNAPSHOT:compile |  +- org.springframework:spring-beans:jar:4.3.9.RELEASE:compile |  +- org.springframework:spring-context:jar:4.3.9.RELEASE:compile |  |  \- org.springframework:spring-expression:jar:4.3.9.RELEASE:compile |  \- com.auth0:java-jwt:jar:3.2.0:compile +- com.ven.external-clients:discovery:jar:0.001-SNAPSHOT:compile +- dnsjava:dnsjava:jar:2.1.7:compile +- com.univocity:univocity-parsers:jar:2.5.9:compile +- org.springframework:spring-test:jar:4.3.9.RELEASE:test |  \- org.springframework:spring-core:jar:4.3.9.RELEASE:compile +- io.dropwizard:dropwizard-forms:jar:1.2.4:compile |  \- org.glassfish.jersey.media:jersey-media-multipart:jar:2.25.1:compile |     \- org.jvnet.mimepull:mimepull:jar:1.9.6:compile +- org.codehaus.jettison:jettison:jar:1.3.8:compile |  \- stax:stax-api:jar:1.0.1:compile +- com.jayway.jsonpath:json-path:jar:0.9.1:compile |  \- net.minidev:json-smart:jar:1.2:compile +- com.google.guava:guava:jar:23.5-jre:compile |  +- org.checkerframework:checker-qual:jar:2.0.0:compile |  +- com.google.errorprone:error_prone_annotations:jar:2.0.18:compile |  +- com.google.j2objc:j2objc-annotations:jar:1.1:compile |  \- org.codehaus.mojo:animal-sniffer-annotations:jar:1.14:compile +- com.google.code.findbugs:jsr305:jar:2.0.3:provided +- org.glassfish.jersey.core:jersey-client:jar:2.23.2:compile |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile |  +- org.glassfish.jersey.core:jersey-common:jar:2.23.2:compile |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.23.2:compile |  |  \- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile |  +- org.glassfish.hk2:hk2-api:jar:2.5.0-b05:compile |  |  +- org.glassfish.hk2:hk2-utils:jar:2.5.0-b05:compile |  |  \- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.5.0-b05:compile |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b05:compile |  \- org.glassfish.hk2:hk2-locator:jar:2.5.0-b05:compile +- commons-net:commons-net:jar:3.1:compile +- commons-lang:commons-lang:jar:2.6:compile +- com.google.code.gson:gson:jar:2.2.4:compile +- org.apache.commons:commons-jexl:jar:2.1.1:compile +- com.google.inject:guice:jar:3.0:compile +- com.google.protobuf:protobuf-java:jar:2.5.0:compile +- com.googlecode.protobuf-java-format:protobuf-java-format:jar:1.2:compile +- org.apache.thrift:libthrift:jar:0.9.1:compile +- com.typesafe.akka:akka-actor_2.11:jar:2.5.8:compile |  +- com.typesafe:config:jar:1.3.2:compile |  \- org.scala-lang.modules:scala-java8-compat_2.11:jar:0.7.0:compile +- org.quartz-scheduler:quartz:jar:2.2.1:compile |  \- c3p0:c3p0:jar:0.9.1.1:compile +- com.github.rholder:guava-retrying:jar:1.0.5:compile +- org.scala-lang:scala-library:jar:2.11.8:compile +- junit:junit:jar:4.12:test |  \- org.hamcrest:hamcrest-core:jar:1.3:compile \- org.assertj:assertj-core:jar:3.5.2:test ```","closed","bug,","debraj-manna","2018-04-27T08:51:34Z","2021-03-12T12:53:12Z"
"","2297","Dropwizard 1.2.4 throwing ValidationException: HV000183: Unable to initialize 'javax.el.ExpressionFactory'","Cross-posting this issue from [user-group](https://groups.google.com/forum/#!topic/dropwizard-user/2NMLgW-oHq0)  I upgraded to dropwizard 1.2.4 from 1.0.2 I have a code which looks like below  ```java import io.dropwizard.testing.junit.ResourceTestRule; import static org.mockito.Mockito.mock;  @Category(value = UnitTest.class) public class SearchControllerTests {     private static SearchService searchServiceMock = mock(SearchService.class);     private static ApiNonFunctionalHandler nonFunctionalHandler = mock(ApiNonFunctionalHandler.class);     private static ApiFilter apiFilter = new ApiFilter(nonFunctionalHandler);          @ClassRule    // This is throwing the exception      public static final ResourceTestRule resources = ResourceTestRule.builder() // Line 72 in             .addResource(new SearchController(searchServiceMock))             .addProvider(apiFilter).build(); } ``` This is throwing an exception like below  ``` java.lang.ExceptionInInitializerError   at sun.misc.Unsafe.ensureClassInitialized(Native Method)  at sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:43)  at sun.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:156)  at java.lang.reflect.Field.acquireFieldAccessor(Field.java:1088)  at java.lang.reflect.Field.getFieldAccessor(Field.java:1069)  at java.lang.reflect.Field.get(Field.java:393)  at org.junit.runners.model.FrameworkField.get(FrameworkField.java:73)  at org.junit.runners.model.TestClass.getAnnotatedFieldValues(TestClass.java:230)  at org.junit.runners.ParentRunner.classRules(ParentRunner.java:255)  at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:244)  at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:194)  at org.junit.runners.ParentRunner.run(ParentRunner.java:362)  at org.junit.runner.JUnitCore.run(JUnitCore.java:137)  at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)  at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) Caused by: javax.validation.ValidationException: HV000183: Unable to initialize 'javax.el.ExpressionFactory'. Check that you have the EL dependencies on the classpath, or use ParameterMessageInterpolator instead  at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.buildExpressionFactory(ResourceBundleMessageInterpolator.java:102)  at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.(ResourceBundleMessageInterpolator.java:45)  at org.hibernate.validator.internal.engine.ConfigurationImpl.getDefaultMessageInterpolator(ConfigurationImpl.java:423)  at org.hibernate.validator.internal.engine.ConfigurationImpl.getDefaultMessageInterpolatorConfiguredWithClassLoader(ConfigurationImpl.java:575)  at org.hibernate.validator.internal.engine.ConfigurationImpl.getMessageInterpolator(ConfigurationImpl.java:364)  at org.hibernate.validator.internal.engine.ValidatorFactoryImpl.(ValidatorFactoryImpl.java:148)  at org.hibernate.validator.HibernateValidator.buildValidatorFactory(HibernateValidator.java:38)  at org.hibernate.validator.internal.engine.ConfigurationImpl.buildValidatorFactory(ConfigurationImpl.java:313)  at io.dropwizard.jersey.validation.Validators.newValidatorFactory(Validators.java:26)  at io.dropwizard.jersey.validation.Validators.newValidator(Validators.java:19)  at io.dropwizard.testing.junit.ResourceTestRule$Builder.(ResourceTestRule.java:46)  at io.dropwizard.testing.junit.ResourceTestRule.builder(ResourceTestRule.java:115)  at com.vnera.restapilayer.api.resources.search.SearchControllerTests.(SearchControllerTests.java:72)  ... 17 more Caused by: java.lang.NoSuchMethodError: javax.el.ExpressionFactory.newInstance()Ljavax/el/ExpressionFactory;  at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.buildExpressionFactory(ResourceBundleMessageInterpolator.java:98)  ... 29 more ```  As you can see from `mvn dependency:tree` I don't have any other `hibernate-validator` other than the one coming from `dropwizard-validation`. If I exclude `hibernate-validator` from `dropwizard-validation` and add the version` 5.2.4` of `hibernate-validator` as dependency. Things work fine.  ``` com.van:restapilayer:jar:0.001-SNAPSHOT +- io.dropwizard:dropwizard-jackson:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-util:jar:1.2.4:compile |  +- com.fasterxml.jackson.core:jackson-core:jar:2.9.4:compile |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.9.4:compile |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.9.4:compile |  +- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.9.4:compile |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.9.4:compile |  \- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.9.4:compile +- io.dropwizard.modules:dropwizard-elasticsearch:jar:1.2.0-1:compile |  \- org.elasticsearch:elasticsearch:jar:2.4.6:compile |     +- org.apache.lucene:lucene-core:jar:5.5.4:compile |     +- org.apache.lucene:lucene-backward-codecs:jar:5.5.4:compile |     +- org.apache.lucene:lucene-analyzers-common:jar:5.5.4:compile |     +- org.apache.lucene:lucene-queries:jar:5.5.4:compile |     +- org.apache.lucene:lucene-memory:jar:5.5.4:compile |     +- org.apache.lucene:lucene-highlighter:jar:5.5.4:compile |     +- org.apache.lucene:lucene-queryparser:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-sandbox:jar:5.5.4:compile |     +- org.apache.lucene:lucene-suggest:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-misc:jar:5.5.4:compile |     +- org.apache.lucene:lucene-join:jar:5.5.4:compile |     |  \- org.apache.lucene:lucene-grouping:jar:5.5.4:compile |     +- org.apache.lucene:lucene-spatial:jar:5.5.4:compile |     |  +- org.apache.lucene:lucene-spatial3d:jar:5.5.4:compile |     |  \- com.spatial4j:spatial4j:jar:0.5:compile |     +- org.elasticsearch:securesm:jar:1.0:compile |     +- com.carrotsearch:hppc:jar:0.7.1:compile |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.8.1:compile |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.8.1:compile |     +- io.netty:netty:jar:3.10.6.Final:compile |     +- com.ning:compress-lzf:jar:1.0.2:compile |     +- com.tdunning:t-digest:jar:3.0:compile |     +- org.hdrhistogram:HdrHistogram:jar:2.1.6:compile |     \- com.twitter:jsr166e:jar:1.1.0:compile +- com.van:logback-utils:jar:0.001-SNAPSHOT:compile |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile |  |  \- ch.qos.logback:logback-core:jar:1.2.3:compile |  +- com.van:common:jar:0.001-SNAPSHOT:compile |  |  +- com.koloboke:koloboke-api-jdk8:jar:1.0.0:compile |  |  +- com.koloboke:koloboke-impl-jdk8:jar:1.0.0:runtime |  |  |  \- com.koloboke:koloboke-impl-common-jdk8:jar:1.0.0:runtime |  |  +- it.unimi.dsi:fastutil:jar:8.1.0:compile |  |  +- com.amazonaws:aws-java-sdk:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-pinpoint:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-xray:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-opsworkscm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-support:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-simpledb:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-servicecatalog:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-servermigration:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-simpleworkflow:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-storagegateway:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-route53:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-s3:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-importexport:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sts:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sqs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-rds:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-redshift:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticbeanstalk:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-glacier:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-iam:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-datapipeline:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticloadbalancing:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticloadbalancingv2:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-emr:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticache:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elastictranscoder:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ec2:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-dynamodb:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-sns:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-budgets:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudtrail:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudwatch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-logs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-events:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitoidentity:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitosync:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-directconnect:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudformation:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudfront:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-kinesis:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-opsworks:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-autoscaling:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudsearch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudwatchmetrics:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codedeploy:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codepipeline:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-kms:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-config:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-lambda:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ecs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ecr:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cloudhsm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-ssm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-workspaces:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-machinelearning:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-directory:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-efs:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codecommit:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-devicefarm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-elasticsearch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-waf:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-marketplacecommerceanalytics:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-inspector:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-iot:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-api-gateway:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-acm:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-gamelift:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-dms:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-marketplacemeteringservice:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-cognitoidp:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-discovery:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-applicationautoscaling:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-snowball:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-rekognition:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-polly:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-lightsail:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-stepfunctions:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-health:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-codebuild:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-appstream:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-shield:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-batch:jar:1.11.77:compile |  |  |  +- com.amazonaws:aws-java-sdk-models:jar:1.11.77:compile |  |  |  \- com.amazonaws:aws-java-sdk-swf-libraries:jar:1.11.22:compile |  |  +- com.van:utility:jar:0.001-SNAPSHOT:compile |  |  +- com.ning:async-http-client:jar:1.9.38:compile |  |  +- com.esotericsoftware:kryo-shaded:jar:3.0.0:compile |  |  |  \- com.esotericsoftware:minlog:jar:1.3.0:compile |  |  +- com.codahale.metrics:metrics-graphite:jar:3.0.1:compile |  |  +- com.librato.metrics:metrics-librato:jar:4.1.2.4:compile |  |  |  \- com.librato.metrics:librato-java:jar:1.0.13:compile |  |  +- org.mockito:mockito-all:jar:1.10.19:compile |  |  +- org.powermock:powermock-module-junit4:jar:1.6.4:compile |  |  |  \- org.powermock:powermock-module-junit4-common:jar:1.6.4:compile |  |  |     +- org.powermock:powermock-core:jar:1.6.4:compile |  |  |     \- org.powermock:powermock-reflect:jar:1.6.4:compile |  |  +- com.vmw.vli:licensecheck:jar:1.4-RELEASE:compile |  |  +- org.bouncycastle:bcprov-jdk15on:jar:1.57:compile |  |  +- org.bouncycastle:bcpkix-jdk15on:jar:1.57:compile |  |  +- org.apache.hadoop:hadoop-common:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.commons:commons-math3:jar:3.1.1:compile |  |  |  +- xmlenc:xmlenc:jar:0.52:compile |  |  |  +- commons-httpclient:commons-httpclient:jar:3.1:compile |  |  |  +- tomcat:jasper-compiler:jar:5.5.23:compile |  |  |  +- tomcat:jasper-runtime:jar:5.5.23:compile |  |  |  +- javax.servlet.jsp:jsp-api:jar:2.1:compile |  |  |  +- commons-el:commons-el:jar:1.0:compile |  |  |  +- net.java.dev.jets3t:jets3t:jar:0.9.0:compile |  |  |  |  \- com.jamesmurty.utils:java-xmlbuilder:jar:0.4:compile |  |  |  +- org.apache.avro:avro:jar:1.7.6-cdh5.7.1:compile |  |  |  +- org.apache.curator:curator-client:jar:2.7.1:compile |  |  |  +- org.apache.curator:curator-recipes:jar:2.7.1:compile |  |  |  +- org.apache.htrace:htrace-core4:jar:4.0.1-incubating:compile |  |  |  \- org.apache.commons:commons-compress:jar:1.4.1:compile |  |  |     \- org.tukaani:xz:jar:1.0:compile |  |  +- org.apache.hadoop:hadoop-client:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-hdfs:jar:2.6.0-cdh5.7.1:compile |  |  |  |  +- xerces:xercesImpl:jar:2.9.1:compile |  |  |  |  \- org.fusesource.leveldbjni:leveldbjni-all:jar:1.8:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-app:jar:2.6.0-cdh5.7.1:compile |  |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |  |  +- org.apache.hadoop:hadoop-yarn-client:jar:2.6.0-cdh5.7.1:compile |  |  |  |  |  \- org.apache.hadoop:hadoop-yarn-server-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |  \- org.apache.hadoop:hadoop-mapreduce-client-shuffle:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-yarn-api:jar:2.6.0-cdh5.7.1:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-core:jar:2.6.0-cdh5.7.1:compile |  |  |  |  \- org.apache.hadoop:hadoop-yarn-common:jar:2.6.0-cdh5.7.1:compile |  |  |  |     +- javax.xml.bind:jaxb-api:jar:2.2.2:compile |  |  |  |     |  \- javax.xml.stream:stax-api:jar:1.0-2:compile |  |  |  |     +- org.codehaus.jackson:jackson-jaxrs:jar:1.8.8:compile |  |  |  |     \- org.codehaus.jackson:jackson-xc:jar:1.8.8:compile |  |  |  +- org.apache.hadoop:hadoop-mapreduce-client-jobclient:jar:2.6.0-cdh5.7.1:compile |  |  |  \- org.apache.hadoop:hadoop-aws:jar:2.6.0-cdh5.7.1:compile |  |  +- org.coursera:metrics-datadog:jar:1.1.13:compile |  |  |  +- org.apache.httpcomponents:fluent-hc:jar:4.3.6:compile |  |  |  \- com.datadoghq:java-dogstatsd-client:jar:2.3:compile |  |  \- com.van:reg-common:jar:0.001-SNAPSHOT:compile |  \- org.slf4j:log4j-over-slf4j:jar:1.7.25:compile +- io.dropwizard:dropwizard-validation:jar:1.2.4:compile |  +- org.hibernate:hibernate-validator:jar:5.4.2.Final:compile |  |  +- org.jboss.logging:jboss-logging:jar:3.3.0.Final:compile |  |  \- com.fasterxml:classmate:jar:1.3.1:compile |  \- org.glassfish:javax.el:jar:3.0.0:compile +- io.dropwizard:dropwizard-core:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-configuration:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-logging:jar:1.2.4:compile |  |  +- io.dropwizard.metrics:metrics-logback:jar:3.2.5:compile |  |  +- org.slf4j:jul-to-slf4j:jar:1.7.25:compile |  |  +- org.slf4j:jcl-over-slf4j:jar:1.7.25:compile |  |  \- org.eclipse.jetty:jetty-util:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-metrics:jar:1.2.4:compile |  +- io.dropwizard:dropwizard-jersey:jar:1.2.4:compile |  |  +- org.glassfish.jersey.core:jersey-server:jar:2.25.1:compile |  |  |  \- org.glassfish.jersey.media:jersey-media-jaxb:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-metainf-services:jar:2.25.1:compile |  |  +- org.glassfish.jersey.ext:jersey-bean-validation:jar:2.25.1:compile |  |  +- io.dropwizard.metrics:metrics-jersey2:jar:3.2.5:compile |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.9.4:compile |  |  |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.9.4:compile |  |  |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.9.4:compile |  |  +- org.glassfish.jersey.containers:jersey-container-servlet:jar:2.25.1:compile |  |  |  \- org.glassfish.jersey.containers:jersey-container-servlet-core:jar:2.25.1:compile |  |  +- org.eclipse.jetty:jetty-server:jar:9.4.8.v20171121:compile |  |  |  +- javax.servlet:javax.servlet-api:jar:3.1.0:compile |  |  |  \- org.eclipse.jetty:jetty-io:jar:9.4.8.v20171121:compile |  |  +- org.eclipse.jetty:jetty-webapp:jar:9.4.8.v20171121:compile |  |  |  \- org.eclipse.jetty:jetty-xml:jar:9.4.8.v20171121:compile |  |  \- org.eclipse.jetty:jetty-continuation:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-servlets:jar:1.2.4:compile |  |  \- io.dropwizard.metrics:metrics-annotation:jar:3.2.5:compile |  +- io.dropwizard:dropwizard-jetty:jar:1.2.4:compile |  |  +- io.dropwizard.metrics:metrics-jetty9:jar:3.2.5:compile |  |  +- org.eclipse.jetty:jetty-servlet:jar:9.4.8.v20171121:compile |  |  |  \- org.eclipse.jetty:jetty-security:jar:9.4.8.v20171121:compile |  |  +- org.eclipse.jetty:jetty-servlets:jar:9.4.8.v20171121:compile |  |  \- org.eclipse.jetty:jetty-http:jar:9.4.8.v20171121:compile |  +- io.dropwizard:dropwizard-lifecycle:jar:1.2.4:compile |  +- io.dropwizard.metrics:metrics-core:jar:3.2.5:compile |  +- io.dropwizard.metrics:metrics-jvm:jar:3.2.5:compile |  +- io.dropwizard.metrics:metrics-servlets:jar:3.2.5:compile |  |  +- io.dropwizard.metrics:metrics-json:jar:3.2.5:compile |  |  \- com.papertrail:profiler:jar:1.0.2:compile |  +- io.dropwizard.metrics:metrics-healthchecks:jar:3.2.5:compile |  +- io.dropwizard:dropwizard-request-logging:jar:1.2.4:compile |  |  \- ch.qos.logback:logback-access:jar:1.2.3:compile |  +- net.sourceforge.argparse4j:argparse4j:jar:0.7.0:compile |  \- org.eclipse.jetty.toolchain.setuid:jetty-setuid-java:jar:1.0.3:compile +- commons-fileupload:commons-fileupload:jar:1.3.3:compile |  \- commons-io:commons-io:jar:2.2:compile +- io.dropwizard:dropwizard-testing:jar:1.2.4:test |  +- org.objenesis:objenesis:jar:2.6:compile |  \- org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:jar:2.25.1:test |     \- org.glassfish.jersey.test-framework:jersey-test-framework-core:jar:2.25.1:test +- org.apache.shiro:shiro-core:jar:1.3.0:compile |  \- commons-beanutils:commons-beanutils:jar:1.8.3:compile +- io.swagger:swagger-core:jar:1.5.0:compile |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.4.2:compile |  +- io.swagger:swagger-models:jar:1.5.0:compile |  \- javax.validation:validation-api:jar:1.1.0.Final:compile +- io.swagger:swagger-annotations:jar:1.5.0:compile +- org.apache.shiro:shiro-web:jar:1.2.3:compile +- org.apache.commons:commons-lang3:jar:3.4:compile +- com.van:contracts:jar:0.001-SNAPSHOT:compile |  +- com.van:base-model:jar:0.001-SNAPSHOT:compile |  +- com.van:core-model:jar:0.001-SNAPSHOT:compile |  |  +- org.reflections:reflections:jar:0.9.9-RC1:compile |  |  |  \- dom4j:dom4j:jar:1.6.1:compile |  |  |     \- xml-apis:xml-apis:jar:1.0.b2:compile |  |  \- commons-validator:commons-validator:jar:1.6:compile |  +- com.van:vshield-model:jar:0.001-SNAPSHOT:compile |  +- com.van:nsx-model:jar:0.001-SNAPSHOT:compile |  +- com.van:cisco-model:jar:0.001-SNAPSHOT:compile |  +- com.van:vcenter-model:jar:0.001-SNAPSHOT:compile |  +- com.van:force10-model:jar:0.001-SNAPSHOT:compile |  +- com.van:flow-model:jar:0.001-SNAPSHOT:compile |  +- com.van:openstack-model:jar:0.001-SNAPSHOT:compile |  +- com.van:juniper-model:jar:0.001-SNAPSHOT:compile |  \- com.van:pan-model:jar:0.001-SNAPSHOT:compile +- com.van:rpc-saasinterface:jar:0.001-SNAPSHOT:compile +- com.van:storage-common:jar:0.001-SNAPSHOT:compile |  +- com.van:data-model:jar:0.001-SNAPSHOT:compile |  +- net.spy:spymemcached:jar:2.11.4:compile |  +- org.xerial.snappy:snappy-java:jar:1.1.2.6:compile |  +- com.opencsv:opencsv:jar:3.7:compile |  \- org.codehaus.groovy:groovy-all:jar:2.4.4:compile +- com.van:ark-storage-metrics:jar:0.001-SNAPSHOT:compile |  +- org.apache.hbase:hbase-client:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.hbase:hbase-annotations:jar:1.2.0-cdh5.7.0:compile |  |  +- org.apache.hbase:hbase-common:jar:1.2.0-cdh5.7.0:compile |  |  |  \- org.apache.hadoop:hadoop-core:jar:2.6.0-mr1-cdh5.7.0:compile |  |  |     +- hsqldb:hsqldb:jar:1.8.0.10:compile |  |  |     \- org.eclipse.jdt:core:jar:3.1.1:compile |  |  +- org.apache.hbase:hbase-protocol:jar:1.2.0-cdh5.7.0:compile |  |  +- io.netty:netty-all:jar:4.0.23.Final:compile |  |  +- org.apache.zookeeper:zookeeper:jar:3.4.5-cdh5.7.0:compile |  |  |  \- org.slf4j:slf4j-log4j12:jar:1.7.5:compile |  |  +- org.apache.htrace:htrace-core:jar:3.2.0-incubating:compile |  |  +- org.jruby.jcodings:jcodings:jar:1.0.8:compile |  |  +- org.jruby.joni:joni:jar:2.1.2:compile |  |  +- com.yammer.metrics:metrics-core:jar:2.2.0:compile |  |  +- org.apache.hadoop:hadoop-annotations:jar:2.6.0-cdh5.7.0:compile |  |  +- org.apache.hadoop:hadoop-auth:jar:2.6.0-cdh5.7.0:compile |  |  |  +- org.apache.directory.server:apacheds-kerberos-codec:jar:2.0.0-M15:compile |  |  |  |  +- org.apache.directory.server:apacheds-i18n:jar:2.0.0-M15:compile |  |  |  |  +- org.apache.directory.api:api-asn1-api:jar:1.0.0-M20:compile |  |  |  |  \- org.apache.directory.api:api-util:jar:1.0.0-M20:compile |  |  |  \- org.apache.curator:curator-framework:jar:2.7.1:compile |  |  \- com.github.stephenc.findbugs:findbugs-annotations:jar:1.3.9-1:compile |  \- com.jcraft:jsch:jar:0.1.54:compile +- org.apache.httpcomponents:httpcore:jar:4.4.5:compile +- com.van:storage-config:jar:0.001-SNAPSHOT:compile |  +- org.postgresql:postgresql:jar:9.4.1208.jre7:compile |  +- commons-dbcp:commons-dbcp:jar:1.4:compile |  |  \- commons-pool:commons-pool:jar:1.5.4:compile |  +- com.van:dedup:jar:0.001-SNAPSHOT:compile |  \- org.elasticsearch.module:lang-groovy:jar:2.3.1:compile |     \- org.codehaus.groovy:groovy:jar:indy:2.4.6:compile +- com.van:programs:jar:0.001-SNAPSHOT:compile |  +- com.googlecode.javaewah:JavaEWAH:jar:1.1.3:compile |  +- com.van:model-utils:jar:0.001-SNAPSHOT:compile |  +- com.van:event-manager:jar:0.001-SNAPSHOT:compile |  +- com.van:storage-flowstore:jar:0.001-SNAPSHOT:compile |  +- com.van:aws-model:jar:0.001-SNAPSHOT:compile |  +- com.van:nsxt-model:jar:0.001-SNAPSHOT:compile |  +- com.van:firewall-model:jar:0.001-SNAPSHOT:compile |  +- com.van:genericdevice-model:jar:0.001-SNAPSHOT:compile |  +- com.van:mapper:jar:0.001-SNAPSHOT:compile |  +- ma.glasnost.orika:orika-core:jar:1.4.2:compile |  |  +- com.thoughtworks.paranamer:paranamer:jar:2.3:compile |  |  \- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.2_jdk5:compile |  +- org.javassist:javassist:jar:3.20.0-GA:compile |  +- com.van:denorm-model:jar:0.001-SNAPSHOT:compile |  +- com.van:hp-model:jar:0.001-SNAPSHOT:compile |  +- com.vmw.vapi:vapi-runtime:jar:2.7.0:compile |  \- com.vmw.nsx.sdk:nsx-language-bindings:jar:2.0.0:compile +- com.van:denorm-programs:jar:0.001-SNAPSHOT:test |  \- com.van:impact:jar:0.001-SNAPSHOT:test +- com.van:app:jar:0.001-SNAPSHOT:compile |  \- com.van:meta-model:jar:0.001-SNAPSHOT:compile +- com.van:resourcemanager:jar:0.001-SNAPSHOT:compile +- com.van:ui-model:jar:0.001-SNAPSHOT:compile |  +- commons-collections:commons-collections:jar:3.2.2:compile |  \- org.unitils:unitils-core:jar:3.3:compile |     \- ognl:ognl:jar:2.6.9:compile +- com.van:query:jar:0.001-SNAPSHOT:compile |  +- org.antlr:antlr4-maven-plugin:jar:4.5.3:compile |  |  +- org.apache.maven:maven-plugin-api:jar:3.0.5:compile |  |  |  +- org.apache.maven:maven-model:jar:3.0.5:compile |  |  |  +- org.apache.maven:maven-artifact:jar:3.0.5:compile |  |  |  \- org.sonatype.sisu:sisu-inject-plexus:jar:2.3.0:compile |  |  |     +- org.codehaus.plexus:plexus-component-annotations:jar:1.5.5:compile |  |  |     +- org.codehaus.plexus:plexus-classworlds:jar:2.4:compile |  |  |     \- org.sonatype.sisu:sisu-inject-bean:jar:2.3.0:compile |  |  |        \- org.sonatype.sisu:sisu-guice:jar:no_aop:3.1.0:compile |  |  +- org.apache.maven:maven-project:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-settings:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-profile:jar:2.2.1:compile |  |  |  +- org.apache.maven:maven-artifact-manager:jar:2.2.1:compile |  |  |  |  +- org.apache.maven:maven-repository-metadata:jar:2.2.1:compile |  |  |  |  +- org.apache.maven.wagon:wagon-provider-api:jar:1.0-beta-6:compile |  |  |  |  \- backport-util-concurrent:backport-util-concurrent:jar:3.1:compile |  |  |  +- org.apache.maven:maven-plugin-registry:jar:2.2.1:compile |  |  |  +- org.codehaus.plexus:plexus-interpolation:jar:1.11:compile |  |  |  +- org.codehaus.plexus:plexus-utils:jar:1.5.15:compile |  |  |  \- org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1:compile |  |  |     \- classworlds:classworlds:jar:1.1-alpha-2:compile |  |  +- org.codehaus.plexus:plexus-compiler-api:jar:2.2:compile |  |  \- org.sonatype.plexus:plexus-build-api:jar:0.0.7:compile |  +- org.antlr:antlr4:jar:4.5.3:compile |  \- org.ardverk:patricia-trie:jar:0.7-SNAPSHOT:compile +- com.van.grid:sdmgraph:jar:0.001-SNAPSHOT:compile |  +- commons-configuration:commons-configuration:jar:1.6:compile |  |  +- commons-digester:commons-digester:jar:1.8:compile |  |  \- commons-beanutils:commons-beanutils-core:jar:1.8.0:compile |  +- commons-cli:commons-cli:jar:1.3.1:compile |  +- org.yaml:snakeyaml:jar:1.13:compile |  +- commons-logging:commons-logging:jar:1.2:compile |  \- commons-logging:commons-logging-api:jar:1.1:compile +- com.van:programs:jar:tests:0.001-SNAPSHOT:test +- com.van:snmp:jar:0.001-SNAPSHOT:compile |  +- org.snmp4j:snmp4j:jar:2.4.3:compile |  |  \- log4j:log4j:jar:1.2.14:compile |  \- org.snmp4j:snmp4j-agent:jar:2.4.2:compile +- com.van:components:jar:0.001-SNAPSHOT:compile |  +- javax.mail:javax.mail-api:jar:1.5.6:compile |  \- com.sun.mail:javax.mail:jar:1.5.6:compile |     \- javax.activation:activation:jar:1.1:compile +- com.amazonaws:aws-java-sdk-ses:jar:1.11.77:compile |  +- com.amazonaws:aws-java-sdk-core:jar:1.11.77:compile |  |  \- software.amazon.ion:ion-java:jar:1.0.1:compile |  \- com.amazonaws:jmespath-java:jar:1.11.77:compile +- com.van:metrics-eval:jar:0.001-SNAPSHOT:compile +- org.freemarker:freemarker:jar:2.3.20:compile +- com.van:remote-control:jar:0.001-SNAPSHOT:compile |  \- com.van:version-control:jar:0.001-SNAPSHOT:compile +- com.codahale.metrics:metrics-core:jar:3.0.1:compile +- com.codahale.metrics:metrics-healthchecks:jar:3.0.1:compile +- com.icegreen:greenmail:jar:1.5.5:test +- com.van:support-request:jar:0.001-SNAPSHOT:compile |  \- com.van:storage-utils:jar:0.001-SNAPSHOT:compile |     \- com.github.fge:json-patch:jar:1.9:compile |        \- com.github.fge:jackson-coreutils:jar:1.6:compile |           \- com.github.fge:msg-simple:jar:1.1:compile |              \- com.github.fge:btf:jar:1.2:compile +- com.van:dns-request:jar:0.001-SNAPSHOT:compile +- com.van:service-health:jar:0.001-SNAPSHOT:compile +- org.apache.httpcomponents:httpclient:jar:4.5.2:compile +- joda-time:joda-time:jar:2.9.4:compile +- commons-codec:commons-codec:jar:1.10:compile +- org.slf4j:slf4j-api:jar:1.7.5:compile +- org.jsoup:jsoup:jar:1.10.1:compile +- com.van:syslog:jar:0.001-SNAPSHOT:compile +- com.van.external-clients:csp:jar:0.001-SNAPSHOT:compile |  +- org.springframework:spring-web:jar:4.3.9.RELEASE:compile |  |  \- org.springframework:spring-aop:jar:4.3.9.RELEASE:compile |  +- org.springframework:spring-beans:jar:4.3.9.RELEASE:compile |  +- org.springframework:spring-context:jar:4.3.9.RELEASE:compile |  |  \- org.springframework:spring-expression:jar:4.3.9.RELEASE:compile |  \- com.auth0:java-jwt:jar:3.2.0:compile +- com.van.external-clients:discovery:jar:0.001-SNAPSHOT:compile +- dnsjava:dnsjava:jar:2.1.7:compile +- com.univocity:univocity-parsers:jar:2.5.9:compile +- org.springframework:spring-test:jar:4.3.9.RELEASE:test |  \- org.springframework:spring-core:jar:4.3.9.RELEASE:compile +- org.codehaus.jettison:jettison:jar:1.3.8:compile |  \- stax:stax-api:jar:1.0.1:compile +- com.jayway.jsonpath:json-path:jar:0.9.1:compile |  \- net.minidev:json-smart:jar:1.2:compile +- com.google.guava:guava:jar:23.5-jre:compile |  +- org.checkerframework:checker-qual:jar:2.0.0:compile |  +- com.google.errorprone:error_prone_annotations:jar:2.0.18:compile |  +- com.google.j2objc:j2objc-annotations:jar:1.1:compile |  \- org.codehaus.mojo:animal-sniffer-annotations:jar:1.14:compile +- com.google.code.findbugs:jsr305:jar:2.0.3:provided +- org.glassfish.jersey.core:jersey-client:jar:2.23.2:compile |  +- javax.ws.rs:javax.ws.rs-api:jar:2.0.1:compile |  +- org.glassfish.jersey.core:jersey-common:jar:2.23.2:compile |  |  +- javax.annotation:javax.annotation-api:jar:1.2:compile |  |  +- org.glassfish.jersey.bundles.repackaged:jersey-guava:jar:2.23.2:compile |  |  \- org.glassfish.hk2:osgi-resource-locator:jar:1.0.1:compile |  +- org.glassfish.hk2:hk2-api:jar:2.5.0-b05:compile |  |  +- org.glassfish.hk2:hk2-utils:jar:2.5.0-b05:compile |  |  \- org.glassfish.hk2.external:aopalliance-repackaged:jar:2.5.0-b05:compile |  +- org.glassfish.hk2.external:javax.inject:jar:2.5.0-b05:compile |  \- org.glassfish.hk2:hk2-locator:jar:2.5.0-b05:compile +- commons-net:commons-net:jar:3.1:compile +- commons-lang:commons-lang:jar:2.6:compile +- com.google.code.gson:gson:jar:2.2.4:compile +- org.apache.commons:commons-jexl:jar:2.1.1:compile +- com.google.inject:guice:jar:3.0:compile +- com.google.protobuf:protobuf-java:jar:2.5.0:compile +- com.googlecode.protobuf-java-format:protobuf-java-format:jar:1.2:compile +- org.apache.thrift:libthrift:jar:0.9.1:compile +- com.typesafe.akka:akka-actor_2.11:jar:2.5.8:compile |  +- com.typesafe:config:jar:1.3.2:compile |  \- org.scala-lang.modules:scala-java8-compat_2.11:jar:0.7.0:compile +- org.quartz-scheduler:quartz:jar:2.2.1:compile |  \- c3p0:c3p0:jar:0.9.1.1:compile +- com.github.rholder:guava-retrying:jar:1.0.5:compile +- org.scala-lang:scala-library:jar:2.11.8:compile +- junit:junit:jar:4.12:test |  \- org.hamcrest:hamcrest-core:jar:1.3:test \- org.assertj:assertj-core:jar:3.5.2:test ``` It looks like wrong version of `hibernate-validator` used in `dropwizard-validation`.","closed","","debraj-manna","2018-03-07T06:56:16Z","2018-03-07T10:23:53Z"
"","2442","Jetty Timeout Exception while uploading a file via MULTIPART HTTP POST request","Cross-posting from [user group](https://groups.google.com/forum/#!topic/dropwizard-user/5uY6s4PV6hU) to ascertain this is not any issue with dropwizard.  I am trying to upload a file (about 5 GB) via MULTIPART HTTP POST request. Some times I am seeing an exception like below  ```ERROR [2018-07-20 07:51:46,726] [U:224,F:832,T:1,056,M:1,820] vnera.restapilayer.CustomerResource:[ManagementResource:uploadBundle:2434] - [dw-103 - POST /management/upgrade/uploadbundle] - Error occurred during file handling.. java.io.IOException: java.util.concurrent.TimeoutException: Idle timeout expired: 1200000/1200000 ms         at org.eclipse.jetty.server.HttpInput$ErrorState.noContent(HttpInput.java:1075)         at org.eclipse.jetty.server.HttpInput.read(HttpInput.java:313)         at org.apache.commons.fileupload.MultipartStream$ItemInputStream.makeAvailable(MultipartStream.java:999)         at org.apache.commons.fileupload.MultipartStream$ItemInputStream.read(MultipartStream.java:903)         at java.io.InputStream.read(InputStream.java:101)         at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1488)         at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1465)         at com.vnera.restapilayer.ManagementResource.flushFileToDisk(ManagementResource.java:2538)         at com.vnera.restapilayer.ManagementResource.storeFileToDisk(ManagementResource.java:2464)         at com.vnera.restapilayer.ManagementResource.uploadBundle(ManagementResource.java:2389)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.lang.reflect.Method.invoke(Method.java:498)         at org.glassfish.jersey.server.model.internal.ResourceMethodInvocationHandlerFactory$1.invoke(ResourceMethodInvocationHandlerFactory.java:81)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher$1.run(AbstractJavaResourceMethodDispatcher.java:144)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.invoke(AbstractJavaResourceMethodDispatcher.java:161)         at org.glassfish.jersey.server.model.internal.JavaResourceMethodDispatcherProvider$TypeOutInvoker.doDispatch(JavaResourceMethodDispatcherProvider.java:205)         at org.glassfish.jersey.server.model.internal.AbstractJavaResourceMethodDispatcher.dispatch(AbstractJavaResourceMethodDispatcher.java:99)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:389)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:347)         at org.glassfish.jersey.server.model.ResourceMethodInvoker.apply(ResourceMethodInvoker.java:102)         at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:326)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271)         at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267)         at org.glassfish.jersey.internal.Errors.process(Errors.java:315)         at org.glassfish.jersey.internal.Errors.process(Errors.java:297)         at org.glassfish.jersey.internal.Errors.process(Errors.java:267)         at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317)         at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305)         at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154)         at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473)         at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341)         at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228)         at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1655)         at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)         at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:45)         at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)         at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:311)         at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:265)         at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1642)         at org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)         at org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)         at org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)         at org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)         at org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)         at org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362) ```  I am using dropwizard 1.2.6. A similar issue is discussed [here](https://github.com/eclipse/jetty.project/issues/1062).  I am not sure if this is issue related to dropwizard or jetty?","closed","stale,","debraj-manna","2018-07-23T08:45:08Z","2019-08-19T14:01:50Z"
"","2321","Upgrade Jackson version to 2.9.5","Could you please upgrade the Jackson version used in the BOM to 2.9.5 to address the following security issue: https://nvd.nist.gov/vuln/detail/CVE-2018-7489","closed","security,","suryatej16","2018-04-02T21:13:29Z","2018-06-22T21:50:55Z"
"","2075","Logging with logstash-console appender","Could you please provide a detailed documentation on how to configure logging using a console appender (json / logstash format).  Why?  - jars are deployed into simple docker containers - Following 12factor app manifesto we need to log everything into STDOUT/STDERR, where an agent can listen, transform, forward log messages to whatever log-aggregation-service. - json / logstash format allows structuring log messages into a simple machine readable format.  After googleing for 2 days, I just gave up. It's much easier to get this run using spring-boot in favour of dropwizard. Since, I would like continue using dropwizard, please provide a complete documentation on how to achieve that. Thanks a lot :)","closed","","bastman","2017-06-13T05:18:13Z","2018-06-13T03:18:27Z"
"","1818","could i replace jetty with another servlet container?","could i use tomcat as the servlet container?","closed","","maobulang","2016-11-14T02:35:14Z","2016-11-18T08:33:07Z"
"","1777","Issue#1757 Possible documentation bug or confusing documentation","Corrected the documentation. Replaced the UserDAO class reference with PersonDAO.","closed","documentation,","anandagarwaal-zz","2016-10-19T06:20:27Z","2016-10-19T11:51:12Z"
"","2058","Logging clears the current Thread's interrupted flag","Consider the code ```java Logger logger = LoggerFactory.getLogger(""logger""); logger.info(""msg1 {}-"" + Thread.currentThread().isInterrupted(), Thread.currentThread().isInterrupted()); Thread.currentThread().interrupt(); logger.info(""msg2 {}-"" + Thread.currentThread().isInterrupted(), Thread.currentThread().isInterrupted()); logger.info(""msg3 {}-"" + Thread.currentThread().isInterrupted(), Thread.currentThread().isInterrupted()); Thread.interrupted(); ``` When putting it into the `public static void main(String[] args)` method of the Dropwizard application's main Application class, it correctly prints ``` 09:29:29.764 [main] INFO  logger - msg1 false-false 09:29:29.777 [main] INFO  logger - msg2 true-true 09:29:29.778 [main] INFO  logger - msg3 true-true ``` However, when putting it into the same class' `public void run(AppConfiguration, Environment)` method (or anywhere else later in the whole server application), it prints ``` INFO  [2017-05-12 07:24:38,072][main][] logger: msg1 false-false INFO  [2017-05-12 07:24:38,072][main][] logger: msg3 false-false ```  As you see, when the thread's `interrupted` flag is set, one logging call is not written to the log, and what is much worse: the logging call clears the `interrupted` flag!  This can for example lead to background jobs not stopping (and the Dropwizard application hanging forever on shutdown), because the jobs don't notice they're interrupted.  This is against Dropwizard 0.9.2, but unfortunately, I cannot test it on the current 1.1.0 version now. However, I did not find an issue describing this bug, so I guess it may well be still present.","closed","","dllx","2017-05-12T07:41:11Z","2018-05-31T17:33:46Z"
"","1886","Update README.md","Command in README.md is outdated. Version is 1.1.0 now.","closed","documentation,","urisavka","2017-01-13T22:07:14Z","2017-01-13T22:23:40Z"
"","1631","Integrate with Code Climate","Code Climate recently added the ability to run [Checkstyle](https://github.com/checkstyle/checkstyle) and [PMD](http://pmd.github.io/) against projects. This can be done against pull requests, allowing the system to quickly flag style and static analysis issues in pull requests before we even start reviewing.  I noticed @arteam already has two CLs ( #1065 and #1371 ) where he's gone back and done this manually and retroactively. If we'd had Code Climate in place the person submitting the code would have been notified to fix the issue before the PR would have been accepted.  I haven't specified a custom Checkstyle config (here's [an example](https://github.com/mrb/kafka/blob/trunk/.codeclimate.yml) for the Kafka project). We'd probably want to settle on a style and check it in prior to or as part of this commit. If there's no objections to this, I can get it submitted and we can get the webhook integration working.  @dropwizard/committers","closed","improvement,","ryankennedy","2016-07-12T05:12:05Z","2016-07-29T13:30:27Z"
"","2082","Document log filters","Closes #2064 by documenting that the feature","closed","documentation,","nickbabcock","2017-06-20T19:22:24Z","2017-06-28T12:06:30Z"
"","2301","Allow customizing Hibernate Configuration in DAOTest","Closes #2053","closed","improvement,","joschi","2018-03-10T12:10:18Z","2018-03-11T00:22:13Z"
"","1909","Enable deeper jackson deserialization of enums","Closes #1888  Returning a `null` JsonDeserializer will make Jackson look elsewhere, which is preferable in all cases when we shouldn't or can't handle the deserialization.","closed","bug,","nickbabcock","2017-02-02T00:11:22Z","2017-02-02T14:45:08Z"
"","1912","Default WebExceptionMapper preserves exception HTTP headers","Closes #1866  Technically, the code doesn't need to try and detect for redirection (introduced in #1452) as the `Location` header gets through now (and all tests would pass), but I didn't remove it because redirect responses would contain a JSON payload, which some people may or may not like.","closed","bug,","nickbabcock","2017-02-02T18:15:46Z","2017-02-03T07:06:59Z"
"","1908","Register Jackson parameter names module","Closes #1852  Addresses @arteam's concern about users who don't compile with `-parameters`, as only the `dropwizard-jackson` test module is compiled with `-parameters` and the other modules don't fail.","closed","improvement,","nickbabcock","2017-02-01T16:43:01Z","2017-02-01T22:02:01Z"
"","1843","Document template exception mapper customization","Closes #1841","closed","documentation,","nickbabcock","2016-11-28T00:52:23Z","2016-11-28T01:10:37Z"
"","1840","Move ViewExceptionMapper to an ExtendedExceptionMapper","Closes #1837","closed","improvement,","nickbabcock","2016-11-26T22:08:43Z","2016-11-27T00:00:20Z"
"","1741","Update extending validation error messages docs","Closes #1740","closed","documentation,","nickbabcock","2016-09-26T15:36:42Z","2016-09-26T17:09:10Z"
"","1718","Fix NPE of non-resource sub-resource methods","Closes #1716 Supersedes #1717  Whether it is a good idea to have a method return `Object` can be left up to discussion, but the code should not throw a NPE.","closed","improvement,","nickbabcock","2016-09-02T17:25:33Z","2016-09-02T18:02:45Z"
"","1552","Add customizable constructors to JodaDateTimeMapper","Closes #1548","closed","improvement,","joschi","2016-05-21T10:24:54Z","2016-06-17T10:28:12Z"
"","1549","Allow file appender infinite log files","Closes #1491  I think there is no reason not to allow dropwizard users the ability to keep infinite files as long as it is warned and the default remains something sensible.  This also fixes the erroneous description that the number of archived files have a maximum (they don't)","closed","improvement,","nickbabcock","2016-05-19T17:24:54Z","2016-05-20T08:29:23Z"
"","2095","Fix 'GenericsTest' to compile in IntelliJ (#2089)","Class now compiles in both IntelliJ and Eclipse (as well as with Maven directly).","closed","","FredDeschenes","2017-07-03T14:50:08Z","2017-07-04T18:15:48Z"
"","2286","Migrate to Circle CI 2.0","Circle 1.0 is going to be deprecated on August 31, 2018. See https://circleci.com/blog/sunsetting-1-0/","closed","improvement,","arteam","2018-02-28T13:42:25Z","2018-02-28T14:05:25Z"
"","1897","added JsonConfigurationFactory to support all JSON files","changed YAMLConfigurationFactory to support JSON files with different whitespaces  added JSON version of ConfigurationFactoryTest  fixes #1896","closed","feature,","manuel-hegner","2017-01-19T16:53:29Z","2017-01-30T14:16:29Z"
"","1559","Update ReaDME.md for dropwizard-example/README.md","change version as its defined in pom.xml:     1.0.0-rc3-SNAPSHOT, otherwise jar wont be found.","closed","documentation,","mabuthraa","2016-05-24T18:02:33Z","2016-05-24T18:31:29Z"
"","1895","Can't find DAOTestRule.java  at dropwizard-testing maven 1.0.5 version jar","Can't find DAOTestRule.java  at dropwizard-testing maven 1.0.5 version jar.","closed","","mutaherul","2017-01-19T11:11:12Z","2017-01-20T09:52:53Z"
"","1626","Dependency Injection frameworks","Can you provide any advice on what DI framework works best with Dropwizard?  I've tried both Guice and Dagger plugins yet they always seem to have integration issues with the core Dropwizard framework. I'm surprised that in the Dropwizard tool chain a DI container isn't recommended.  Any thoughts? Do you assume teams will hand roll DI as you're focusing on teams producing smaller APIs?","closed","stale,","darrenhaken","2016-07-08T23:37:04Z","2020-10-14T21:13:34Z"
"","1904","DAOTestRule integration in next minor release?","Can we get [DAOTestRule.java](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-testing/src/main/java/io/dropwizard/testing/junit/DAOTestRule.java) in dropwizard-testing in the next minor release?","closed","","jshort","2017-01-30T04:12:50Z","2017-02-01T16:43:42Z"
"","2089","GenericstTest failing to compile","Can not compile the application due to this Error. the class is GenericsTest  `Error:(59, 28) java: method getTypeParameter in class io.dropwizard.util.Generics cannot be applied to given types;   required: java.lang.Class,java.lang.Class   found: java.lang.Class,java.lang.Class   reason: cannot infer type-variable(s) T     (argument mismatch; java.lang.Class cannot be converted to java.lang.Class)`","closed","","rubencgt","2017-06-26T22:55:13Z","2017-07-04T18:38:09Z"
"","2433","How to start a executable dropwizard jar as a Windows Service / Linux Service","can anyone help me? thanks","closed","","iotech-longtran","2018-07-16T04:46:54Z","2018-07-19T11:37:56Z"
"","2324","Fix jersey attempting to resolve auth filter fields","By removing `@Nullable` annotation on `AuthDynamicFeature` fields. In the process we had to supress null away in the constructor, else that would fail builds.  Fixes the warning that I and some others have seen in #2307  ``` WARN  [2018-04-06 18:30:49,644] org.glassfish.jersey.internal.Errors: The following warnings have been detected: WARNING: Parameter authFilterClass of type java.lang.Class from private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass is not resolvable to a concrete type. WARNING: Parameter authFilterClass of type java.lang.Class from private final java.lang.Class io.dropwizard.auth.AuthDynamicFeature.authFilterClass is not resolvable to a concrete type. ```  Still unresolved:  - Why is this happening now (Dropwizard 1.3)? Seems entirely Jersey related but we haven't bumped Jersey versions in quite some time. - Doesn't fix the issue seen in OP in #2307 revolving around Kotlin resource class.","closed","bug,","nickbabcock","2018-04-06T20:00:30Z","2018-06-22T21:50:55Z"
"","1620","Commit a database transaction in the `RESP_FILTERS_START` stage","But close the session during the `FINISHED` stage. This allows to the user to catch errors during commiting transactions (constraint violations, e.g) and map them to HTTP error with an exception mapper.  This approach also is compatible with lazy loading, because the session remain open during serializing Hibernate entities.  Fix #1604","closed","","arteam","2016-07-07T07:37:23Z","2016-07-08T07:26:44Z"
"","2017","mvn clean install failed during upgrade from version 1.0.7 to version 1.1.0","Build successful on v1.0.7 but fails when upgrading to v1.1.0  build log attached.  [build.txt](https://github.com/dropwizard/dropwizard/files/946807/build.txt)  pom.xml  ```   	4.0.0  	com.bitbosh 	dropwizard-heroku 	Dropwizard Heroku Application 	1.0.5  	 		UTF-8 		UTF-8 		1.1.0 		com.bitbosh.DropwizardHeroku.DropwizardHerokuApplication 	  	 		 			org.jmockit 			jmockit 			1.8 		 		 			io.dropwizard 			dropwizard-jdbi 			${dropwizard.version} 		 		 			io.dropwizard 			dropwizard-core 			${dropwizard.version} 		 		 			io.dropwizard 			dropwizard-testing 			${dropwizard.version} 		 		 			postgresql 			postgresql 			9.1-901.jdbc4 		 	  	 		 			 				maven-compiler-plugin 				3.6.0 				 					1.8 					1.8 				 			 			 				org.apache.maven.plugins 				maven-shade-plugin 				2.3 				 					true 					 						 							*:* 							 								META-INF/*.SF 								META-INF/*.DSA 								META-INF/*.RSA 							 						 					 				 				 					 						package 						 							shade 						 						 							 								 								 									${mainClass} 								 							 						 					 				 			 			 				org.eluder.coveralls 				coveralls-maven-plugin 				4.3.0 			 			 				org.jacoco 				jacoco-maven-plugin 				0.7.9 				 					 					 						pre-unit-test 						 							prepare-agent 						 						 							 							surefireArgLine 						 					 					 					 						post-unit-test 						test 						 							report 						 					 				 			 			 			 				org.apache.maven.plugins 				maven-surefire-plugin 				2.19.1 				 					 					${surefireArgLine} 					 					 						**/*IT.java 					 				 			 		 	  ```","closed","","uxdxdev","2017-04-21T10:42:49Z","2017-04-21T11:09:21Z"
"","2289","Update Jdbi3 to 3.1.0","Better switch to the latest version before 1.3.0 release.","closed","improvement,","FredDeschenes","2018-03-01T15:58:54Z","2019-03-12T13:58:26Z"
"","1625","Add a way to delegate the proxy creation to the user","Because of dependency injection frameworks, I need to create the proxy by myself. Using Objenesis is the way to go. This pull request lets `UnitOfWorkAwareProxyFactory` inject my javassist-created proxy with the factory's custom `MethodHandler` really easily.  Design choices: 1. It is preferrable that `UnitOfWorkAwareProxyFactory` performs the injection rather than exposing its `MethodHandler`. This way, the interface doesn't depend on javassist. 2. I think it's preferable to accept a `java.lang.Object` rather than a `javassist.util.proxy.Proxy` as the user code will be more readable. 3. If a non-proxy object is provided, an `IllegalArgumentException` is thrown rather than a `ClassCastException` to insist on the fact that the argument is incorrect and hide the implementation details.","closed","improvement,","ogregoire","2016-07-08T12:24:01Z","2016-08-02T09:14:10Z"
"","1702","Document that only TLSv1.2 is enabled by default","Based on my edits in https://github.com/eclipse/jetty.project/issues/860, Jetty 9.3.7+ only supports TLS 1.2, which needs to be documented as there are poor souls (myself included) that must cater to Java 6/7 clients, which don't support the default Jetty cipher suites.  Closes #1700","closed","documentation,","nickbabcock","2016-08-21T21:16:57Z","2016-08-21T22:18:48Z"
"","1749","Jackson 2.8 Redux","Based on joschi's work in #1647 - Rebased on current master - Bump to latest 2.8 (2.8.3) - Maintain compatibility with how we treat errors resulting from JSON input being the wrong type. They should be treated as client errors, not server errors. The current heuristics were not sufficient enough for Jackson 2.8, so another heuristic was added via a straightforward regex.  Can squash/rebase on request.  Can update release notes on merge.","closed","improvement,","nickbabcock","2016-09-28T14:49:24Z","2016-10-02T00:45:07Z"
"","1837","Move ViewRenderExceptionMapper to ExtendedExceptionMapper","Based on [this comment](https://github.com/dropwizard/dropwizard/pull/1788#issuecomment-261807141), `ViewRenderExceptionMapper` should derive from `ExtendedExceptionMapper` as to not override `LoggingExceptionMapper` with respects to `WebApplicationException` behavior when `dropwizard-views` is imported  cc @acwwat","closed","","nickbabcock","2016-11-21T20:56:05Z","2016-11-27T00:00:20Z"
"","1841","Document New Custom Template Error Behavior","Based on #1820 and #1840","closed","documentation,","nickbabcock","2016-11-26T22:11:46Z","2016-11-28T01:10:37Z"
"","1905","DAOTestRule backport","Backport of `DAOTestRule` (#1669).  Closes #1904","closed","","joschi","2017-01-30T06:34:48Z","2017-01-30T19:27:46Z"
"","2043","Update auth.rst","Authenticator.authenticate returns a java.util.Optional a not Guava optional.","closed","documentation,","hugogoncalves","2017-05-03T11:25:59Z","2017-05-03T11:48:29Z"
"","2173","AUDIT facility missing in io.dropwizard.logging.SyslogAppenderFactory.Facility enum","AUDIT facility missing in io.dropwizard.logging.SyslogAppenderFactory.Facility enum, even though logback supports it. AUDIT facility is used for logging user access in many devices.","closed","","ashishs","2017-10-13T07:07:40Z","2018-06-09T18:25:06Z"
"","1865","Dependency updates","Assorted dependency updates.","closed","improvement,","joschi","2016-12-24T18:20:25Z","2017-01-17T08:03:12Z"
"","2226","'@CacheControl' annotation can be added to types and methods, but only works on methods","As the title says, the [`@CacheControl`](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/caching/CacheControl.java#L15) annotation defines the 'TYPE' and 'METHOD' targets, but [`CacheControlledResponseFeature`](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-jersey/src/main/java/io/dropwizard/jersey/caching/CacheControlledResponseFeature.java#L20) only checks if the annotation is present on methods. Should it work for both methods and types or only methods?","closed","","FredDeschenes","2017-12-07T22:20:57Z","2017-12-14T15:20:02Z"
"","1853","HTTPS Connector doc does not accurately reflect Jetty 9.3 default value for excludedCipherSuites","As per #1700 only TLS 1.2 is supported out-of-the-box with Dropwizard 1.0+ due to a code change in Jetty 9.3 (see https://github.com/eclipse/jetty.project/commit/0a1b0b2bc69ea7e7f5f44992f47a84f926cdeebb) that sets a very restrictive default `excludedCipherSuites` value, but the HTTPS Connector documentation shows the default value for `excludedCipherSuites` as being `(none)`. The documentation should accurately reflect the default, which is `^.*_RSA_.*_(MD5|SHA|SHA1)$`. (I guess regular expressions are supported, which the doc should also indicate.)","closed","documentation,","rondagostino","2016-12-10T04:12:17Z","2016-12-12T08:49:30Z"
"","1852","Should jackson ParameterNamesModule be supplied?","As part of the uplift to Java 8 for 1.x should the jackson parameter names module have been supplied by default?  https://github.com/FasterXML/jackson-modules-java8/tree/master/parameter-names","closed","","mattnelson","2016-12-09T20:43:05Z","2017-02-01T21:41:11Z"
"","2281","Add support to configure SessionDataStore","As of now, there is no way to configure the SessionDataStore in dropwizard. Though jetty provides some useful implementation of SessionDataStore (like jdbc, file & etc), dropwizard doesn't allow these configurations.  It will be really useful, if dropwizard adds support for this.","closed","stale,","ramsrib","2018-02-22T18:24:14Z","2019-08-19T14:02:19Z"
"","1583","Remove OptionalValidatedValueUnwrapper","As now that Hibernate validator implements it internally, ours is no longer needed (or even used, as Hibernate prefers its own).  I'm marking this as for the 1.1, let me know if anyone disagrees (ie. don't merge this until at least 1.0 is out (or create 1.1 branch?))","closed","improvement,","nickbabcock","2016-06-03T13:45:16Z","2016-07-27T12:45:19Z"
"","1965","Enable setting context path programmatically","As mentioned in #1546, setting the context path programmatically in an application's `run` method is being ignored. `environment.getApplicationContext().setContextPath(somePath);`  This is due to DefaultServerFactory's `build` method (which executes after the application's `run`) reapplying the default (`/`). However, since #1504, the context path information has been getting set prior to the application's run method being invoked, so the configuration being performed in `build` is redundant. Here's the execution flow:  [EnvironmentCommand.run](https://github.com/dropwizard/dropwizard/blob/v1.0.6/dropwizard-core/src/main/java/io/dropwizard/cli/EnvironmentCommand.java#L40-L44) 1. calls `configure` which sets the context paths 2. calls the application's `run` method (where I'm attempting to set context path) 3. calls `run` which ends up executing ServerCommand's `run` method  [ServerCommand's `run` method]( https://github.com/dropwizard/dropwizard/blob/v1.0.6/dropwizard-core/src/main/java/io/dropwizard/cli/ServerCommand.java#L49) 1. calls ServerFactory's `build` method which calls `configure` again, wiping out the what the application set.  I'm proposing removing the call to `configure` in DefaultServerFactory's `build` method, as it is redundant and overwrites attempts to set the context path.","closed","improvement,","ghenkes","2017-03-15T16:55:18Z","2017-04-13T19:01:34Z"
"","1845","dropwizard-forms: No injection source found for a parameter of type public...","As i used dropwizard1.0.5 or 1.0.3, added dropwizard-forms for multipart data, and i have configured MultipartBundle , but i still caused  No injection source found for a parameter of type public... exception ```     @POST     @Path(""uploadFile"")     @Consumes(MediaType.MULTIPART_FORM_DATA)     @Produces(MediaType.TEXT_HTML)     public String uploadFile(@FormDataParam(""file"") InputStream file,             @FormDataParam(""file"") FormDataContentDisposition fileDisposition, ```  but if i use  ```     @POST     @Path(""uploadFile"")     @Consumes(MediaType.MULTIPART_FORM_DATA)     @Produces(MediaType.TEXT_HTML)     public String uploadFile(FormDataMultiPart multiPart ``` it works , so i don't understand why, maybe jersey should support both, can anyone help me? i thinks dropwizard does not  have clear docs about multipart data, so i'm confusing.  thanks!","closed","","249043822","2016-12-01T06:36:16Z","2017-02-01T15:41:19Z"
"","2482","EarlyEofExceptionMapper doesn't seem to work (<=Dropwizard 1.3.5)","As I see so far, dropwizard registers by standard some Exception Mappers, one of the is the EarlyEofExceptionMapper. Unfortunately though this mapper never seems to get called, as I'm seeing lots of those messages when a client aborts the transfer:  ! java.io.IOException: Broken pipe ! at java.base/sun.nio.ch.FileDispatcherImpl.writev0(Native Method) ! at java.base/sun.nio.ch.SocketDispatcher.writev(SocketDispatcher.java:51) ! at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:185) ! at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:132) ! at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:506) ! at org.eclipse.jetty.io.ChannelEndPoint.flush(ChannelEndPoint.java:266) ! ... 73 common frames omitted ! Causing: org.eclipse.jetty.io.EofException: null ...aso.  But this should be catched right? (org.eclipse.jetty.io.EofException)   Am I missing something or is this a bug?","closed","","winklehner","2018-09-06T12:28:32Z","2020-07-17T11:01:28Z"
"","2294","CVE-2006-0550 for jersey-apache-connector in dropwizard-client","As I can see [here](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-client/pom.xml), no version for jersey-apache-connector is specified.   Using the OWASP dependency check I get the indication that there is a CVE-2006-0550 for automatically resolved version 2.25.1.  Maybe update to 2.26?","closed","","synergiator","2018-03-06T09:56:39Z","2018-03-06T12:14:37Z"
"","2096","Use LoadingCache in CachingAuthorizer","As done in #1615 for CachingAuthenticator. Since `Authorizer::authorize` doesn't have a `throws` clause, I've only handled `UncheckedExecutionException`s.  Result when `null` is returned by the authorizer will differ from previously, where a `NullPointerException` would have been thrown by the cache's `put` method, whereas now a `InvalidCacheLoadException` will be thrown by the cache itself when the loader returns null. There might be a way to have the same result as previously, let me know if you want me to look into it (but personally I don't think it really matters as most users won't be catching those exceptions anyway, and it might even be clearer as to what happened).  EDIT: Looking at this again, `Authorizer::authorize` returns a `boolean` and not a `Boolean` so null returns shouldn't happen anyway.","closed","improvement,","FredDeschenes","2017-07-05T15:09:38Z","2017-07-05T17:49:22Z"
"","2424","How can I monitor the InstrumentedQueuedThreadPool (""dw"")","As described, I would like to have access to the threadpool which is used to handle the incoming requests for the application endpoint.  This is needed as I would like to use Prometheus [`QueuedThreadPoolStatisticsCollector`](https://github.com/prometheus/client_java/blob/master/simpleclient_jetty_jdk8/src/main/java/io/prometheus/client/jetty/QueuedThreadPoolStatisticsCollector.java#L23).  Is there any non-intrusive way of capturing the metrics from this thread pool, without having access to it ?","closed","","patrox","2018-07-06T10:29:52Z","2018-07-12T06:43:39Z"
"","1643","Offer pool size increasing ExecutorService through ExecutorServiceBuilder","As described in #834, the situation of the ThreadPoolExecutor and its configuration `maximumPoolSize` is strange. Someone would assume, that new threads are spawn until `maximumPoolSize` is reached, but it does not behave this way. It only spawns new threads if the queue's bound is reached. This is counterintuitive.  Since it would be nice to a thread pool with incrementing number of threads based on load, I'd like to suggest to embed this into `ExecutorServiceBuilder`.  There are already a number of ways (some call them hacks ;)) to achieve this: http://stackoverflow.com/questions/19528304/how-to-get-the-threadpoolexecutor-to-increase-threads-to-max-before-queueing  If this is something, the dropwizard community would like to see, I would go ahead and try out the one of the solutions described in the SO post.  Of course, any feedback is highly appreciated.","closed","stale,","scho","2016-07-25T09:04:19Z","2019-09-03T00:00:56Z"
"","2179","Add possibility to instrument admin threadpool just like application threadpool","Application threadpool is `com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool` and it gives some valuable metrics. But sometimes in microservice-oriented infrastructure you have quite a number of different things calling your admin endpoints. In that case developers may want to configure `adminMinThreads` and `adminMaxThreads`, but to do that properly, they need information about number of non-idle threads. So would be nice to use `com.codahale.metrics.jetty9.InstrumentedQueuedThreadPool` for admin threadpool too.","closed","","mgtriffid","2017-10-19T10:50:40Z","2017-10-26T15:01:18Z"
"","2343","Form based authentication","Any chance of having form based authentication added to dropwizard-auth?","closed","","richmidwinter","2018-05-03T09:37:05Z","2019-02-09T00:11:41Z"
"","1784","Empty optional exception mapper","Another implementation of #1732, but using exceptionmappers, which now have a lower code tax due to #1768. By default, backwards compatibility is preserved with the ability to easily remap it to a 204.  The shape of the custom exception (`EmptyOptionalException`) inspired by netty's [ReadTimeoutException](https://github.com/netty/netty/blob/cfa5b85075f9f3a74e7eb46e344f44775dbcea57/handler/src/main/java/io/netty/handler/timeout/ReadTimeoutException.java) to be a lightweight exception, as 204's may be a normal state and shouldn't be treated exceptionally.  Maybe controversial, but I've decided to add another submodule, dropwizard-e2e (end-to-end). It's like dropwizard-example except that it is meant to hold multiple `Applications`, as it's possible that a single example application can't represent all options especially if some are conflicting. It also presents another avenue for tests that ensure unit + integration tests work. If others want to verify it looks correct, it'd be much appreciated.  Closes #1727  cc original author: @qinfchen   I can update the release notes once this is merged.","closed","improvement,","nickbabcock","2016-10-23T00:56:02Z","2016-10-25T15:21:28Z"
"","1774","Documentation for polymorphic config testing","Also includes minor doc fixes","closed","documentation,","nickbabcock","2016-10-13T02:40:51Z","2016-10-14T18:20:11Z"
"","1597","Default showDetails in JsonProcessingExceptionMapper to true","After using Dropwizard for 5 months at work now, I discovered this option recently and it's saved hours of debugging and digging through stack traces since then.  It doesn't look like anything is gained by _not_ providing the error field and what the validation issue is, so I think showDetails should be set to true by default.    Here is the class: https://github.com/dropwizard/dropwizard/blob/ae9844a80a1ab273b7ccdb35d86fa624ee915d7a/dropwizard-jersey/src/main/java/io/dropwizard/jersey/jackson/JsonProcessingExceptionMapper.java  The same theme might also might apply to LoggingExceptionMapper, but I'm less sure that exposing e.getMessage() or something similar to the client would be the desired behavior.","closed","","jeremygehrshg","2016-06-15T20:49:12Z","2016-08-29T21:14:17Z"
"","2206","Constraint Violation Exception after upgrading to dropwizard 1.2.0","After upgrading to Dropwizard 1.2.0 from 1.1.3, I'm facing this ConstraintViolationException when persisting few entities (with parent-child relation). After analyzing for sometime, I found that the bug was with hibernate 5.2.11.Final version.  >> When a parent entity being referenced by 2 child entites, SQL insert statement of child entity gets issued first before parent entity, resulting in Referential integrity constrain violation.   Issue: https://hibernate.atlassian.net/browse/HHH-11996  I manually bumped the hibernate version to 5.2.12.Final which solved the issue for me.  It would be better if `dropwizard-core` module upgrades the hibernate version to 5.2.12.Final to avoid the issue for other users.","closed","bug,","ramsrib","2017-11-13T05:15:41Z","2017-11-13T14:31:42Z"
"","2434","CLOB Error in io dropwizard migrations liquibase 1.3.5","After upgrading io dropwizard migrations version from 1.3.2 to 1.3.5, I get the below error when I try to insert seed data for a CLOB column  ERROR [2018-07-17 10:47:20,619] liquibase.changelog.ChangeSet: Change Set migrations.xml::1:: failed.  Error: CLOB resource not found: [] liquibase.exception.MigrationFailedException: Migration failed for change set migrations.xml::1:::      Reason: liquibase.exception.DatabaseException: CLOB resource not found: [] 	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:637) 	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:53) 	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:78) 	at liquibase.Liquibase.update(Liquibase.java:202) 	at liquibase.Liquibase.update(Liquibase.java:179) 	at liquibase.Liquibase.update(Liquibase.java:175) 	at liquibase.Liquibase.update(Liquibase.java:168) 	at io.dropwizard.migrations.DbMigrateCommand.run(DbMigrateCommand.java:68) 	at io.dropwizard.migrations.DbCommand.run(DbCommand.java:55) 	at io.dropwizard.migrations.AbstractLiquibaseCommand.run(AbstractLiquibaseCommand.java:68) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:87) 	at io.dropwizard.cli.Cli.run(Cli.java:78) 	at io.dropwizard.Application.run(Application.java:93)","closed","stale,","shashank-devisetty","2018-07-17T10:50:50Z","2019-08-19T14:02:06Z"
"","1984","Remove a logback warning for the classic request logging","After the last update Logback issues the following warning when an application uses the classic request logging: `LOGBACK: No context given for io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory$RequestLogLayout(""null"")`  A fix is assign the context to the layout after its construction.","closed","improvement,","arteam","2017-03-27T15:31:24Z","2017-03-27T16:18:38Z"
"","2101","dropwizard-util still imports old jackson-annotations version","After the bump to jackson 2.8.9 in dropwizard 1.1.2, whenever i run `mvn dependency:tree`, I still get `jackson-annotations` with version 2.8.0. Is this supposed to be?  (cut) Output from `mvn dependency:tree`:  ``` [INFO] com.myapp:jar:1.0.0-SNAPSHOT [INFO] +- io.dropwizard:dropwizard-core:jar:1.1.2:compile [INFO] |  +- io.dropwizard:dropwizard-util:jar:1.1.2:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:**2.8.0**:compile [INFO] |  |  +- com.google.guava:guava:jar:21.0:compile [INFO] |  |  +- com.google.code.findbugs:jsr305:jar:3.0.1:compile [INFO] |  |  \- joda-time:joda-time:jar:2.9.7:compile [INFO] |  +- io.dropwizard:dropwizard-jackson:jar:1.1.2:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-core:jar:2.8.9:compile [INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.8.9:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-guava:jar:2.8.9:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.8.9:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.8.9:compile [INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.8.9:compile [INFO] |  |  +- com.fasterxml.jackson.module:jackson-module-afterburner:jar:2.8.9:compile [INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:**2.8.9**:compile [INFO] |  |  \- ch.qos.logback:logback-classic:jar:1.2.1:compile ```  Why is not the version specified in the dependency management used for `dropiwzard-util` as well?  The reason I'm asking is because Owasp dependency check is giving me a bit of trouble for `jackson-annotations - 2.8.0`  (namely CVE-2016-3720). I guess newer versions still have that, but just curious of why the old version gets used","closed","","robinjhector","2017-07-11T09:56:52Z","2017-07-11T11:00:18Z"
"","2106","PolymorphicAuthDynamicFeature is incompatible with environment.servlets().addFilter","After I have upgraded to the 1.1.2 version and started to use PolymorphicAuthDynamicFeature for Multiple Principals and Authenticators use-case, my servlet filter (a simple filter watching gzip-errors) does not work anymore.  Set-up of (to be simple just one) authenticator: ```     private static void setupAuth(Environment environment, AppIdProvider appIdProvider) {          final AuthFilter oauthApp = new OAuthCredentialAuthFilter.Builder()                 .setAuthenticator(new AppAuthAuthenticator(appIdProvider))                 .setAuthorizer(new AppAuthorizer())                 .setPrefix(""Bearer"")                 .buildAuthFilter();          final PolymorphicAuthDynamicFeature feature = new PolymorphicAuthDynamicFeature<>(                 ImmutableMap.of(                         App.class, oauthApp));          final AbstractBinder binder = new PolymorphicAuthValueFactoryProvider.Binder<>(                 ImmutableSet.of(App.class));          environment.jersey().register(feature);         environment.jersey().register(binder);      } ```  And then an attempt to register a servlet filter: ``` environment.servlets().addFilter(""gzip-error-filter"",                 new ZipExceptionFilter()).addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, ""/*""); ```   The result is that the ""gzip-error-filter"" servlet filter is not registered.  My suspicion is that it has something to do with the last paragraph with the note ""The polymorphic auth feature SHOULD NOT be used with any other AuthDynamicFeature. Doing so may have undesired effects."" on the bottom of http://www.dropwizard.io/1.1.2/docs/manual/auth.html.  It looks like a bug which prevents registering servlet filters when the PolymorphicAuthDynamicFeature is used.","closed","","petr-bazant","2017-07-14T20:13:17Z","2018-06-22T12:40:06Z"
"","1754","Dependency convergence error when upgrading to 1.0 or 1.0.2","After I change the version and run mvn clean install I got this error message Seems the dropwizard-jackson and dropwizard-jersey is in wrong configuration.  Dependency convergence error for com.fasterxml.jackson.core:jackson-annotations:2.7.6 paths to dependency are: +-com.idf:admin:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:1.0.0     +-io.dropwizard:dropwizard-util:1.0.0       +-com.fasterxml.jackson.core:jackson-annotations:2.7.6 and +-com.idf:admin:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:1.0.0     +-io.dropwizard:dropwizard-jackson:1.0.0       +-com.fasterxml.jackson.core:jackson-annotations:2.7.6 and +-com.idf:admin:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:1.0.0     +-io.dropwizard:dropwizard-jackson:1.0.0       +-com.fasterxml.jackson.core:jackson-databind:2.7.6         +-com.fasterxml.jackson.core:jackson-annotations:2.7.0 and +-com.idf:admin:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:1.0.0     +-io.dropwizard:dropwizard-jackson:1.0.0       +-com.fasterxml.jackson.datatype:jackson-datatype-joda:2.7.6         +-com.fasterxml.jackson.core:jackson-annotations:2.7.0 and +-com.idf:admin:0.0.1-SNAPSHOT   +-io.dropwizard:dropwizard-core:1.0.0     +-io.dropwizard:dropwizard-jersey:1.0.0       +-com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.7.6         +-com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.7.6           +-com.fasterxml.jackson.core:jackson-annotations:2.7.0  How to solve this please? And is there a documentation about how to configure the request log in the new version?","closed","","Wstunes","2016-09-30T12:39:02Z","2017-02-07T19:00:51Z"
"","2499","Database connections active after database disconnected/reconnected","After a database went down and was restarted, the database pool was almost completely in use. Typically, the stats are `pool_size: 9; active: 1`; however, after the restart they were `pool_size: 9, active: 8`. The actual workload had not changed.  I have tried various combinations of the `checkConnection...` parameters, but all of them consistently leave `pool_size: N; active: N-1` after a database restart. The `checkConnection...` parameters do impact the stats by reducing N, often below the minimum threshold.   We observed this with Oracle DB; however, I have also reproduced it with PostgreSQL.  I have created a [minimal reproduction](https://github.com/shterrett/dropwizard-db-test) that can be used to observe this behavior.","closed","stale,","shterrett","2018-09-18T20:04:18Z","2019-08-19T14:01:42Z"
"","1622","Add Google Error Prone checks","Adds Google Error Prone (http://errorprone.info) compiler checks  Also updates the plugin dependencies to their latest versions.","closed","improvement,","jplock","2016-07-08T00:31:49Z","2016-07-08T07:25:33Z"
"","2001","Add support for specifying specific client certificate","Adds certAlias configuration parameter to TLS configuration of HTTP clients. This allows a specific certificate in a keystore to be specified as the one to use when authenticating to servers.  Fixes #2000","closed","improvement,","tbartley","2017-04-10T19:42:57Z","2017-04-12T21:10:23Z"
"","2292","Add CodeTriage badge to dropwizard/dropwizard","Adds a badge showing the number of people helping this repo on CodeTriage.  [![Open Source Helpers](https://www.codetriage.com/dropwizard/dropwizard/badges/users.svg)](https://www.codetriage.com/dropwizard/dropwizard)   ## What is CodeTriage?  CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed  [Read more about the CodeTriage project](https://www.codetriage.com/what).  ## Why am I getting this PR?  Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to [CodeTriage](https://www.codetriage.com/what)? Roughly over 1 year ago, [basifat](https://github.com/basifat) added this project to CodeTriage in order to start contributing. Since then, 28 people have subscribed to help this repo.  ## What does adding a badge accomplish?  Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.  You can see an example of a CodeTriage badge on these popular OSS READMEs:  - [![Email clients like GMAIL do not render SVG images](https://www.codetriage.com/rails/rails/badges/users.svg)](https://www.codetriage.com/rails/rails) https://github.com/rails/rails - [![Email clients like GMAIL do not render SVG images](https://www.codetriage.com/crystal-lang/crystal/badges/users.svg)](https://www.codetriage.com/crystal-lang/crystal) https://github.com/crystal-lang/crystal  ## Have a question or comment?  While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.  If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.  Thanks for making your project Open Source! Any feedback is greatly appreciated.","closed","documentation,","codetriage-readme-bot","2018-03-05T18:42:25Z","2018-03-06T15:07:48Z"
"","2151","Update getting started archetype version reference","Addresses #2146","closed","documentation,","mveitas","2017-09-13T10:22:49Z","2017-09-14T02:27:46Z"
"","1854","Document SSL protocol/cipher suite defaults inherited from the JVM and Jetty","Addresses #1853  This change updates the user manual and the Javadoc of `io.dropwizard.jetty.HttpsConnectorFactory` to call out the fact that the lists of supported and excluded protocols and cipher suites are inherited from the JVM and Jetty. Specifically, the supported lists fall back to JVM defaults and the excluded lists to defaults [hardcoded in Jetty](https://github.com/eclipse/jetty.project/blob/14611d2f76be9ebd955bff6cdd38fde4a008a4c3/jetty-util/src/main/java/org/eclipse/jetty/util/ssl/SslContextFactory.java#L202-L203).  Note that this change replaces the values of `supportedProtocols` and `supportedCipherSuites` documented in the user manual. Based on my reading of the Jetty code linked above (at the version currently used in Dropwizard, 9.3.14.v20161028), SSLv3 is explicitly excluded, so it doesn't make sense that it would be a supported protocol. Also if the default list of supported cipher suites is [pulled from the JVM](https://github.com/eclipse/jetty.project/blob/14611d2f76be9ebd955bff6cdd38fde4a008a4c3/jetty-util/src/main/java/org/eclipse/jetty/util/ssl/SslContextFactory.java#L319), then I'm unsure how we arrived at the specified default of TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256. Please advise here.","closed","documentation,","evnm","2016-12-10T06:14:10Z","2016-12-12T08:47:51Z"
"","1678","Fix request attribute-related race condition in Logback request logging","Addresses #1672   `i.d.request.logging.async.AsyncAccessEventAppenderFactory` invokes `AccessEvent. prepareForDeferredProcessing`, which triggers a race with an identical invocation [within Logback itself](https://github.com/qos-ch/logback/blob/658963544cc08059fc3cec48f5d35f650de5f6df/logback-core/src/main/java/ch/qos/logback/core/OutputStreamAppender.java#L205). The reported issue indicates that the race manifests in inconsistent logging behavior when request attributes are set within a resource class.  This change removes the `prepareForDeferredProcessing` call from dropwizard-request-logging. As far as I know, all `IAccessEvent`s encountered by this class will be of concrete type `AccessEvent` and all non-async appenders extend `OutputStreamAppender`, so the `prepareForDeferredProcessing` method should always be invoked exactly once.","closed","bug,","evnm","2016-08-07T00:22:11Z","2016-08-13T17:01:25Z"
"","1676","Gracefully shut down default ExecutorService used by JerseyClientBuilder","Addresses #1671 & #1679  This change introduces a package-private `ExecutorService` decorator which is used to signal to `DropwizardExecutorProvider` that the executor should be shut down upon its disposal by the Jersey runtime. This enables graceful shutdown of the default `ExecutorService`s created within `JerseyClientBuilder` if the builder isn't configured with one.  Included tests for this graceful shutdown behavior, as well as its absence in the case where a ""non-disposable"" `ExecutorService` is used.","closed","bug,","evnm","2016-08-05T23:57:50Z","2016-08-09T06:09:08Z"
"","1662","Overridable log level during application bootstrap process","Addresses #1658   This change adds a non-final `Level` getter method within `io.dropwizard.Application` that is used to set the log level during the logging configuration bootstrap process.  Not sure how to add a test for this. Because `BootstrapLogging` doesn't set the root logger's level, AFAICT it's not possible to inspect the log level from within an `Application` subclass.","closed","improvement,","evnm","2016-08-02T17:35:55Z","2016-08-04T20:05:32Z"
"","1639","dropwizard-auth: Introduce CachingAuthorizer","Addresses #1638  The boolean authorization state of principal+role pairs are cached individually using [`ImmutablePair`s](https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/tuple/ImmutablePair.html) internally as cache keys. This unfortunately leads to more allocation-prone `invalidate` methods than those of `CachingAuthenticator`.  I assumed that `CachingAuthorizer` wouldn't be subject to [the negative-result-caching issue](https://github.com/dropwizard/dropwizard/issues/947) that was dealt with in `CachingAuthenticator`. If this is incorrect, then we could instead cache an `ImmutableSet` of role associations for each principal and always pass negative cache results through to the underlying authorizer.","closed","feature,","evnm","2016-07-16T23:18:01Z","2016-07-27T12:43:01Z"
"","1858","Add logging configuration options to documentation","Adding the queueSize and discardingThreshold logging configuration options to the documentation. This is related to https://github.com/dropwizard/dropwizard/issues/1856","closed","documentation,","dennyac","2016-12-12T17:54:32Z","2016-12-12T19:59:07Z"
"","1861","Include logging options in config","Adding the queueSize and discardingThreshold logging configuration options to the documentation.  This is related to https://github.com/dropwizard/dropwizard/issues/1856.  A formatting issue in https://github.com/dropwizard/dropwizard/pull/1858 caused the table to disappear and I realized I had forgotten to include the config options in the example. This is fixed with this PR.","closed","documentation,","dennyac","2016-12-15T19:30:45Z","2016-12-15T19:45:15Z"
"","2215","Add documentation for v1.1.6","Adding documentation for v1.1.6","closed","","sankate","2017-11-21T21:39:38Z","2017-11-22T14:44:51Z"
"","2155","Fixed violation of Comparable contract in Size","Added unit test to verify comparable contract.  This addresses the bug alluded to in #2153. It turns out that the reporter of the issue uncovered a violation of a rule set forth when implementing the Comparable interface.","closed","bug,","isaki","2017-09-16T18:10:17Z","2017-09-18T19:44:44Z"
"","2052","adding test case for issue2049","Added the test case for the below scenario  if a resource method parameter is annotated with @Valid @Validated(abc.class) and @NotNull, it throws a 500 instead of a 422","closed","","anujkumar04","2017-05-10T00:46:31Z","2017-05-15T17:55:25Z"
"","2291","Add a TCP and UDP log appenders to Dropwizard","Add support for sending log events to a log management server via TCP or UDP. This is useful for applications that want ship logs to a remote machine for processing/alerting. We recently have added support for formatting messages as JSON and in combination with TCP/UDP logging it can be an interesting solution for a direct log shipping from Dropwizard without 3rd-party modules.   From the implementation side `TcpSocketAppenderFactory` and `UdpSocketAppenderFactory` are both discoverable and work with generic logging events. That means they can be configured in a YAML config file for general and request logging. ```yaml logging:   level: INFO   appenders:     - type: tcp       host: localhost       port: 24562 ```  ```yaml server:   requestLog:     appenders:       - type: tcp         host: localhost         port: 24562 ```  From the reliability side, the appenders extend `ResilientOutputStreamBase`. That means in case if the connections drops because of network glitch or a DNS failure, it will back off and try to reopen a new connection automatically.","closed","feature,","arteam","2018-03-03T17:29:25Z","2018-03-07T12:19:40Z"
"","1883","Evaluate CircleCI","Add support for running tests on CircleCI. The idea is too have an additional CI sever for running tests on the Linux environment, because in recent times we have had some issues with Travis CI.  The reason for that is PR #1875. Currently we have a CircleCI integration set up for the Dropwizard repository, but without a `circle.yml` config file all other pull requests fail. So I would like to merge it to master, so #1875 doesn't block other pull requests, but still allows to run tests in TravisCI and CircleCI.","closed","","arteam","2017-01-13T11:26:07Z","2017-01-13T12:25:51Z"
"","1596","Document using @UnitOfWork outside Jersey resources","Add a section in the docs about how to use declarative transactions in authenticators. It's not really obvious and many users expect they will work out of box.  See #1334, #1361.","closed","documentation,","arteam","2016-06-15T06:39:45Z","2016-06-15T11:49:12Z"
"","1828","Fix request logs with request parameter in layout pattern","Add a safe version of `RequestParameterConverter` which works with async appenders. It loads request parameters from a cached map rather than trying to load request data from the original request, which may be closed during the time of a call.  The map is cached by the  `prepareForDefferedProcessing` method, which invokes before invoking appenders, so in theory the call to the map should be safe.  As a result, Dropwizard users can use `%reqParameter{something}` in their request logging patterns.  References #1827, #1672, #1686.","closed","bug,","arteam","2016-11-16T16:09:06Z","2016-11-18T10:54:33Z"
"","1997","Jetty refusing to start - Min and max threads to use for requests configuration","According to [the docs](http://www.dropwizard.io/1.1.0/docs/manual/configuration.html#all) and [the source](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java#L218-L222) one should be able to configure the `minThreads` to 1 and `maxThreads` to 2. But using this exact configuration `Jetty` will refuse to start with the following message:  ``` INFO  [2017-04-08 16:55:02,043] org.eclipse.jetty.server.Server: jetty-9.4.z-SNAPSHOT ERROR [2017-04-08 16:55:02,124] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down ! java.lang.IllegalStateException: Insufficient threads: max=2 < needed(acceptors=1 + selectors=2 + request=1) ! at org.eclipse.jetty.server.Server.doStart(Server.java:414) ! at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68) ! at io.dropwizard.cli.ServerCommand.run(ServerCommand.java:53) ! at io.dropwizard.cli.EnvironmentCommand.run(EnvironmentCommand.java:44) ! at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:85) ! at io.dropwizard.cli.Cli.run(Cli.java:74) ! at io.dropwizard.Application.run(Application.java:89) ! at com.example.helloworld.HelloWorldService.main(HelloWorldService.java:31) Insufficient threads: max=2 < needed(acceptors=1 + selectors=2 + request=1) ```  It seems that the HTTP connectors thread count configuration are connected with the `maxThreads` parameter. Jetty is adding the number of `acceptor` and `selector` threads and then calculates the acceptable minimum. This is the place where the [exception is thrown](https://github.com/eclipse/jetty.project/blob/4a674b9cc96de3e28d4fddf9abb8e7d1a456db96/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java#L414).  Update 2: In [this branch](https://github.com/dropwizard/dropwizard/compare/master...zloster:jetty-threads-config) I've added a simple test to illustrate the problem. The build in `dropwizard-core` will fail with:  ``` Running io.dropwizard.server.ThreadConfigTest Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.182 sec <<< FAILURE! - in io.dropwizard.server.ThreadConfigTest testBuild(io.dropwizard.server.ThreadConfigTest)  Time elapsed: 0.166 sec  <<< ERROR! java.lang.IllegalStateException: Insufficient threads: max=2 < needed(acceptors=1 + selectors=2 + request=1)         at io.dropwizard.server.ThreadConfigTest.testBuild(ThreadConfigTest.java:59) ```  Update: tested with Dropwizard 1.1.0 and Dropwizard 1.0.3","closed","","zloster","2017-04-08T19:04:42Z","2017-04-12T13:27:47Z"
"","1950","Add test for javax.ws.rs annotations in interfaces","A test to ensure that we don't regress on our validation messages for resources which have all their annotations on their implemented interface. Reference: #1932","closed","improvement,","nickbabcock","2017-03-07T02:53:07Z","2017-03-07T14:37:37Z"
"","1688","Use a List instead an array in YamlConfigurationFactory","A minor improvement to the escaping code in `YamlConfigurationFactory`.  A good practice is to avoid manipulating arrays in favour of Java collections, because arrays are relatively dangerous to operate and provide a less convenient API.  See ""Effective Java Item 25: Prefer lists to arrays"".","closed","improvement,","arteam","2016-08-13T08:10:59Z","2016-08-13T17:00:44Z"
"","2167","Add exclusive mode to MinDuration and MaxDuration annotations","A lot of the configurations with a `@MinDuration` seem to actually need to validate that a duration has been set and is greater than zero, but were stuck to use some kind of arbitrary minimum value (some of them used 1 millisecond, which should be good enough for most cases, but some used 1 second which is pretty high). I don't think Dropwizard should be forcing minimum durations on its configurations, just as no `@MaxDuration` is used anywhere.  I've changed the ones in `DataSourceFactory` as mentioned in the issue, but 6 more remain throughout the project. I wasn't comfortable enough with these configurations to change them myself, but I can update the PR if you feel like they can also be changed to a `@PositiveDuration`.  I'm also not totally sold on the name 'PositiveDuration', but I feel like it's clearer than the 'NonZeroDuration' I proposed in #2130 (which would imply that ""-1 nanoseconds"" is valid).","closed","improvement,","FredDeschenes","2017-10-03T19:59:30Z","2017-11-22T12:14:08Z"
"","2085","Update Jackson to address Deserializer security vulnerability","A Jackson Deserializer security vulnerability is detailed by:  FasterXML/jackson-databind#1599 https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.8.9  Fixed by  ‚Ä¢	2.7.9.1 (for dropwizard 1.0.x branch) ‚Ä¢	2.8.9 (for dropwizard 1.1.x branch) ‚Ä¢	2.9.0.pr3","closed","security,","msymons","2017-06-26T18:22:29Z","2017-07-04T19:26:28Z"
"","1816","Polish disabling caching for Mustache view renderer","A follow-up for #1814.  * Add a couple of unit tests to preserve coverage; * Fix checkstyle warnings","closed","improvement,","arteam","2016-11-11T08:38:39Z","2016-11-11T15:35:05Z"
"","1714","Local build fails on mac","A day is spent trying to understand WTF.  dw-core module build fails with test failure.  `DefaultServerFactoryTest.testGracefulShutdown()` somehow affects `SimpleServerFactoryTest.testBuild()`.  Both maven and idea cases produce the same.  If I switch order of those tests, they are green.  `testBuild` fails trying to execute the task, essentially, because of query parameters collection of the request is not parsed (for the unknown reason):  ``` assertThat(httpRequest(""POST"", ""http://localhost:"" + port + ""/secret/tasks/hello?name=test_user""))      .isEqualTo(""Hello, test_user!""); ```  Debugging of that reveals... strange stuff (see attached image):    (Here, `_metaData` field of `org.eclipse.jetty.server.Request` is not null, however, the local variable assigned is `null`, and the parsing of the task request is failed)  This occurs _almost_ in any case, so the issue is... well, floating.  Anybody, any ideas how to fix or resolve that?:) Java version is: 1.8.0_92-b14","closed","","ruilch","2016-08-30T14:50:21Z","2016-08-30T15:00:26Z"
"","1891","Add support for HTTP client managed by DropwizardAppRule","A common use case for the users of `DropwizardAppRule` is creating an HTTP client which performs requests against the tested server. I think we could make it little bit easier by providing a method for `DropwizardAppRule`which creates a new Jersey HTTP client client managed by the rule. The user doesn't need to care about creating own client and shutting it down. The created is also have default sane timeouts in contrary to the default Jersey client. In the end, this allows to write tests like that:  ```java RULE.client().target(""http://localhost:"" + RULE.getLocalPort() + ""/hello-world"")     .queryParam(""name"", name.get())     .request()     .get(Saying.class); ```  It makes testing easy for users who don't use the `dropwizard-client` module or find it excessive for testing.","closed","improvement,","arteam","2017-01-17T19:25:57Z","2017-01-23T21:15:08Z"
"","2429","acceptQueueSize defaults to an incomplete value from somaxconn on Linux","A call to io.dropwizard.jetty.NetUtil.getTcpBacklog() reads just the first digit of /proc/sys/net/core/somaxconn on Linux, effectively making the default acceptQueueSize just 1 or 2 (depending on the actual value of somaxconn; verified with 128 and 2048). This in turn results in increased number of failed connections to DW (connection timeouts) when the server is under stress. This seems to be a regression between 0.9.x. and 1.0.x (because in 0.9.x, somaxconn was not explicitly used as a source of a default value).  The issue seems to be specifically in Files.readAllBytes(paths.get('/proc/sys/net/core/somaxconn')), in that the SeekableByteChannel in readAllBytes is treating the /proc fs as a regular file, which it is not (seeks aren't possible, nor filesize can be read ahead). Thus, in effect it only reads the first byte of somaxconn (instead of the entire string value), passing it without any further warning into acceptQueueSize as a default.","closed","bug,","donicek","2018-07-12T12:03:07Z","2018-07-13T05:00:46Z"
"","2543","Update travis settings","`sudo: false` is now the default on Travis CI - https://changelog.travis-ci.com/linux-builds-run-on-vms-by-default-77106","closed","improvement,","jplock","2018-11-09T14:41:54Z","2018-11-09T17:20:16Z"
"","1550","dropwizard-testing: extract a resource testing helper class from ResourceTestRule","`ResourceTestRule` is an excellent and easy way to test resources in Dropwizard, but sometimes JUnit rules aren't as convenient or flexible as ""normal"" helper classes might be in tests.  For example, I wanted most of the semantics of `ResourceTestRule`, but I wanted each test in the class to have a slightly different configuration. This is kind of a problem when using `ResourceTestRule` as you're basically ""locked in"" to the configuration passed to its constructor for entire test case/class.  I've got a rough implementation over in https://github.com/thomaslee/dropwizard/tree/tom_rsrc_test_helper but am opening this ticket for discussion (shame on me for starting on the patch before reading the guidelines for contributing).  The strategy taken is: 1. Extract `ResourceTestHelper` from `ResourceTestRule`. 2. Reimplement `ResourceTestRule` using the new `ResourceTestHelper` class. 3. Now `dropwizard-testing` users can choose the class most appropriate to their test(s).  Example usage winds up looking something like this:  https://github.com/thomaslee/dropwizard/blob/4e758c773631c5401af6e7a45b5d427b240dd66a/dropwizard-testing/src/test/java/io/dropwizard/testing/app/ResourceTestHelperTest.java#L11-L19","closed","needs code,","thomaslee","2016-05-20T05:16:58Z","2019-02-08T23:53:24Z"
"","1735","Merge Release/1.0.x into master","`master` was missing https://github.com/dropwizard/dropwizard/pull/1664","closed","","jplock","2016-09-21T23:21:22Z","2016-09-24T13:34:58Z"
"","2063","Update the URL's for grizzly and jax-rs-spec","`java.net` has closed.  Update the URL's for `grizzly` and `jax-rs-spec` Unfortunately, `jax-rs-spec` API Docs are no longer published on their site.","closed","","sankate","2017-05-18T23:51:31Z","2017-05-19T07:12:54Z"
"","1977","Exclude duplicated JTA 1.1 from dropwizard-hibernate dependencies","`jackson-datatype-hibernate5` pulls a `javax.transaction.jta` artifact and Jadira pulls `geronimo-jta_1.1_spec`. They are outdated, because Hibernate already pulls JTA1.2.  This exclude affords to avoid warnings about duplicated classes from the `maven-shade-plugin` during assembling a fat jar.","closed","improvement,","arteam","2017-03-23T11:03:46Z","2017-03-27T15:25:17Z"
"","2153","equality on different units","`Assertion.assertThat( reason, CoreMatchers.equalTo( Size.terabytes( 0 ) ), Size.parse( ""0M"" ) ) java.lang.AssertionError: parse( '0M' ) matches :<0 terabytes> Expected: <0 terabytes>      but: was <0 megabytes>`  `Assertion.assertThat( reason, CoreMatchers.equalTo( Size.bytes( 0 ) ), Size.terabytes( 0 ) ); java.lang.AssertionError: Size.bytes( 0 ) matches :<0 terabytes> Expected: <0 bytes>      but: was <0 terabytes> `  looks like 0 ( zero ) no equals to 0 zero.........","closed","bug,","daniv","2017-09-15T03:57:56Z","2017-09-18T06:41:28Z"
"","1892","dropwizard-jackson lead to jvm clash","``` Stack: [0x00007f402036c000,0x00007f402046d000],  sp=0x00007f4020469e28,  free space=1015k Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code) C  [libc.so.6+0x8995b]  memcpy+0x15b C  [libzip.so+0x1218f]  ZIP_GetEntry2+0xff C  [libzip.so+0x3ec0]  Java_java_util_zip_ZipFile_getEntry+0xf0 J 187  java.util.zip.ZipFile.getEntry(J[BZ)J (0 bytes) @ 0x00007f40211702ce [0x00007f4021170200+0xce] J 4462 C2 java.util.jar.JarFile.getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry; (22 bytes) @ 0x00007f4021beffd4 [0x00007f4021befc80+0x354] J 15782 C2 sun.misc.URLClassPath$1.next()Z (63 bytes) @ 0x00007f4023a37dc8 [0x00007f4023a379a0+0x428] J 16189 C2 java.net.URLClassLoader$3$1.run()Ljava/lang/Object; (5 bytes) @ 0x00007f40226ba04c [0x00007f40226ba000+0x4c] v  ~StubRoutines::call_stub V  [libjvm.so+0x68f6b6]  JavaCalls::call_helper(JavaValue*, methodHandle*, JavaCallArguments*, Thread*)+0x1056 V  [libjvm.so+0x72851c]  JVM_DoPrivileged+0x27c J 1919  java.security.AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object; (0 bytes) @ 0x00007f4021602855 [0x00007f4021602780+0xd5] J 15563 C2 java.net.URLClassLoader$3.hasMoreElements()Z (5 bytes) @ 0x00007f4021117fe4 [0x00007f4021117f40+0xa4] J 16155 C2 sun.misc.CompoundEnumeration.hasMoreElements()Z (5 bytes) @ 0x00007f4021e3b988 [0x00007f4021e3b920+0x68] J 12328 C1 io.dropwizard.jackson.DiscoverableSubtypeResolver.discoverServices(Ljava/lang/Class;)Ljava/util/List; (430 bytes) @ 0x00007f4023082895 [0x00007f4023081b60+0xd35] J 15921 C1 io.dropwizard.jackson.DiscoverableSubtypeResolver.(Ljava/lang/Class;)V (109 bytes) @ 0x00007f4023a647fa [0x00007f4023a64540+0x2ba] J 15917 C1 io.dropwizard.jackson.Jackson.configure(Lcom/fasterxml/jackson/databind/ObjectMapper;)Lcom/fasterxml/jackson/databind/ObjectMapper; (110 bytes) @ 0x00007f4023a945eb [0x00007f4023a93440+0x11ab] J 16699 C1 com.wantu.zhengxin.spider.server.rpc.discovery.ClientRpcDiscovery.queryGroupServers()V (197 bytes) @ 0x00007f402382bbe6 [0x00007f402382a280+0x1966] J 15999 C1 com.wantu.zhengxin.spider.server.rpc.discovery.ClientRpcDiscovery$3.run()V (23 bytes) @ 0x00007f4021fd6002 [0x00007f4021fd5f40+0xc2] J 16045 C2 java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V (59 bytes) @ 0x00007f40227e7d64 [0x00007f40227e7c60+0x104] j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+95 j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 j  java.lang.Thread.run()V+11 v  ~StubRoutines::call_stub V  [libjvm.so+0x68f6b6]  JavaCalls::call_helper(JavaValue*, methodHandle*, JavaCallArguments*, Thread*)+0x1056 V  [libjvm.so+0x68fbc1]  JavaCalls::call_virtual(JavaValue*, KlassHandle, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x321 V  [libjvm.so+0x690067]  JavaCalls::call_virtual(JavaValue*, Handle, KlassHandle, Symbol*, Symbol*, Thread*)+0x47 V  [libjvm.so+0x726fc0]  thread_entry(JavaThread*, Thread*)+0xa0 V  [libjvm.so+0xa7343f]  JavaThread::thread_main_inner()+0xdf V  [libjvm.so+0xa7356c]  JavaThread::run()+0x11c V  [libjvm.so+0x924698]  java_start(Thread*)+0x108 C  [libpthread.so.0+0x7aa1] ```","closed","","itgo067","2017-01-18T04:15:54Z","2017-01-18T09:30:24Z"
"","1598","* Unrecognized field at: logging.type","``` logging:   level: INFO   loggers:     ""io.dropwizard"": INFO     ""org.hibernate.SQL"":       level: DEBUG       additive: false       appenders:         - type: file           currentLogFilename: /var/log/myapplication-sql.log           archivedLogFilenamePattern: /var/log/myapplication-sql-%d.log.gz           archivedFileCount: 5   appenders:     - type: console ```  When i have added the above configuration in yaml file i am getting the below error.  ``` * Unrecognized field at: logging.type     Did you mean?:       - level       - loggers       - appenders ```","closed","","Madhukar07565","2016-06-16T14:39:15Z","2016-06-18T07:40:18Z"
"","2187","Cannot figure out type parameterization","``` Exception in thread ""main"" java.lang.IllegalStateException: Cannot figure out type parameterization for com.bossanova.core.bag.commands.IndexSetupCommand 	at io.dropwizard.util.Generics.getTypeParameter(Generics.java:65) 	at io.dropwizard.cli.ConfiguredCommand.getConfigurationClass(ConfiguredCommand.java:45) 	at io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:68) 	at io.dropwizard.cli.Cli.run(Cli.java:70) 	at io.dropwizard.Application.run(Application.java:80) 	at com.bossanova.core.bag.application.Main.main(Main.java:13) ```  My command signature looks like  ``` public class IndexSetupCommand extends ConfiguredCommand> { ```  I'm assuming the next generics is confusing this.","closed","","bearrito","2017-10-26T17:52:37Z","2017-11-08T18:25:03Z"
"","1697","@POST method with @Auth parameter can not use a JSON bean as another method parameter","``` @POST @Consumes(MediaType.APPLICATION_JSON) public Response receivePost(@Auth ExtendedPrincipal principal, @Valid ResourceSet resourceSet) ```  I have a resource that I am trying to protect with my auth filter that I have. The AuthFilter should resolve the principal and not factor into this. The ResourceSet is being passed in the Post's body.  Sending a valid ResourceSet object causes an immediate ""400: Bad Request"" response before hitting my code. Sending a Post without a body though, makes it to my code with a null ResourceSet.  Is there a known workaround for this? Is this something that can be fixed?","closed","","Rwprice","2016-08-18T18:25:38Z","2016-08-19T16:35:21Z"
"","1636","Validation not done with @FormParam NonEmptyStringParam","``` @POST @Consumes(MediaType.APPLICATION_FORM_URLENCODED) public Response addCard(@FormParam(""title"") @UnwrapValidatedValue NonEmptyStringParam  title,                         @FormParam(""latitude"") @NotNull Double latitude,                         @FormParam(""longitude"") @NotNull Double longitude,                         @FormParam(""public"") @UnwrapValidatedValue BooleanParam publicCard,                         @FormParam(""user_id"") @NotNull Integer userId) { ```  The @NotNull notations are unnecessary because they don't work with Double, Boolean or Integer for @FormParams.  We are using Dropwizard version 0.9.3 and we are trying to validate String, double, boolean and int parameters for POST requests. Documentation states the following: ""If you have an Optional field or parameter that needs validation, add the @UnwrapValidatedValue annotation on it."" and ""If you want q to evaluate to Optional.absent() in this situation, change the type to NonEmptyStringParam"".  I've tried this but the parameters are not being evaluated. If I pass empty string or no value at all, no evaluation is being made. I expect a 400 Bad request returned to client. But instead I get 500 internal server error because null values are passed on to the method.  Am I missing something or is this a real issue?  Also, @UnwrapValidatedValue BooleanParam does not get evaluated.  Best Regards, Marcus","closed","","mskager","2016-07-14T10:04:20Z","2016-07-22T13:47:39Z"
"","2351","Custom ExceptionMappers not working properly. (dropwizard version - 1.3.1)","``` @Data @AllArgsConstructor public class ExceptionResponse {   private ApplicationException.ApplicationExceptionCode errorCode;   private String errorMessage; } ``` ``` @Provider public class ApplicationExceptionMapper implements ExceptionMapper {    @Override   public Response toResponse(ApplicationException ex) {     return Response.status(ex.getCode().getCode())         .entity(new ExceptionResponse(ex.getCode(), ex.getMessage()))         .type(MediaType.APPLICATION_JSON_TYPE)         .build();   }  } ``` ``` @Getter public class ApplicationException extends Exception {    /**    *     */   private static final long serialVersionUID = 9060461350080152830L;    @Getter   public static enum ApplicationExceptionCode {     UNAUTHORIZED_401(401, ""Unauthorized Access""), INVALID_USER_404(404,         ""User not found""), BAD_REQUEST_400(400,             ""Some of the input fields may be incorrect""), INTERNAL_SERVER_ERROR_500(500,                 ""Something went wrong"");      private int code;     private String defaultMessage;      private ApplicationExceptionCode(int code, String defaultMessage) {       this.defaultMessage = defaultMessage;     }   }    private ApplicationExceptionCode code;    public ApplicationException(ApplicationExceptionCode code) {     this(code, code.getDefaultMessage());   }    public ApplicationException(ApplicationExceptionCode code, String message) {     super(message);     this.code = code;   } } ``` ``` @Path(""/v2/test"") public class TestResource {    @GET   public Response throwError() throws ApplicationException {     throw new ApplicationException(ApplicationExceptionCode.INTERNAL_SERVER_ERROR_500);   }  } ``` And then registered the exception mapper with jersey. `env.jersey().register(ApplicationExceptionMapper.class);` `env.jersey().register(TestResource.class);` When doing `curl http://localhost:8090/v2/test` I got  ```    Error 500 insufficient content written  HTTP ERROR 500 Problem accessing /v2/test. Reason:     insufficient content written   ``` And console logs for the same: ``` 2018-05-09 12:02:42,495 [dw-17 - GET /v2/test] ERROR o.g.j.s.ServerRuntime$Responder - [Request-Id: ] - Error while closing the output stream in order to commit response. ! java.lang.IllegalArgumentException: null ! at org.eclipse.jetty.server.Response.setStatusWithReason(Response.java:788) ! at org.eclipse.jetty.server.Response.setStatus(Response.java:782) ! at org.glassfish.jersey.servlet.internal.ResponseWriter.writeResponseStatusAndHeaders(ResponseWriter.java:171) ! at org.glassfish.jersey.server.ServerRuntime$Responder$1.getOutputStream(ServerRuntime.java:701) ! at org.glassfish.jersey.message.internal.CommittingOutputStream.commitStream(CommittingOutputStream.java:200) ! at org.glassfish.jersey.message.internal.CommittingOutputStream.flushBuffer(CommittingOutputStream.java:305) ! at org.glassfish.jersey.message.internal.CommittingOutputStream.commit(CommittingOutputStream.java:261) ! at org.glassfish.jersey.message.internal.CommittingOutputStream.close(CommittingOutputStream.java:276) ! at org.glassfish.jersey.message.internal.OutboundMessageContext.close(OutboundMessageContext.java:877) ! at org.glassfish.jersey.server.ContainerResponse.close(ContainerResponse.java:412) ! at org.glassfish.jersey.server.ServerRuntime$Responder.writeResponse(ServerRuntime.java:784) ! at org.glassfish.jersey.server.ServerRuntime$Responder.processResponse(ServerRuntime.java:444) ! at org.glassfish.jersey.server.ServerRuntime$Responder.process(ServerRuntime.java:490) ! at org.glassfish.jersey.server.ServerRuntime$2.run(ServerRuntime.java:334) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:271) ! at org.glassfish.jersey.internal.Errors$1.call(Errors.java:267) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:315) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:297) ! at org.glassfish.jersey.internal.Errors.process(Errors.java:267) ! at org.glassfish.jersey.process.internal.RequestScope.runInScope(RequestScope.java:317) ! at org.glassfish.jersey.server.ServerRuntime.process(ServerRuntime.java:305) ! at org.glassfish.jersey.server.ApplicationHandler.handle(ApplicationHandler.java:1154) ! at org.glassfish.jersey.servlet.WebComponent.serviceImpl(WebComponent.java:473) ! at org.glassfish.jersey.servlet.WebComponent.service(WebComponent.java:427) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:388) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:341) ! at org.glassfish.jersey.servlet.ServletContainer.service(ServletContainer.java:228) ! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1634) ! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:34) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1621) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:50) ! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:44) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1621) ! at com.serviceenabled.dropwizardrequesttracker.RequestTrackerServletFilter.doFilter(RequestTrackerServletFilter.java:49) ! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1621) ! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:541) ! at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:188) ! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1239) ! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:168) ! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:481) ! at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:166) ! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1141) ! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:241) ! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) ! at org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:561) ! at io.dropwizard.jetty.BiDiGzipHandler.handle(BiDiGzipHandler.java:68) ! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:56) ! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:169) ! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ! at org.eclipse.jetty.server.Server.handle(Server.java:564) ! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320) ! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251) ! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:279) ! at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:110) ! at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:124) ! at org.eclipse.jetty.util.thread.Invocable.invokePreferred(Invocable.java:122) ! at org.eclipse.jetty.util.thread.strategy.ExecutingExecutionStrategy.invoke(ExecutingExecutionStrategy.java:58) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:201) ! at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:133) ! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:672) ! at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:590) ! at java.lang.Thread.run(Thread.java:748) 0:0:0:0:0:0:0:1 - - [09/May/2018:06:32:42 +0000] ""GET /v2/test HTTP/1.1"" 500 277 ""-"" ""curl/7.54.0"" 7  ```","closed","","vishal-kedia","2018-05-09T06:39:52Z","2018-05-10T02:07:46Z"
"","2366","DropwizardSSLConnectionSocketFactory not honoring custom provider?","```    private static KeyStore loadKeyStore(String type, File path, String password) throws Exception {         final KeyStore keyStore = KeyStore.getInstance(type);         try (InputStream inputStream = new FileInputStream(path)) {             keyStore.load(inputStream, password.toCharArray());         }         return keyStore;     } ``` Using : Dropwizard 1.3.2  The above code is used to load the trust store associated with the tls config for an SSL client.  However, this ignores the provider (eg, ""BC"") that might be required to read a PKCS12 store properly.  I believe this should be  ```   final KeyStore keyStore = KeyStore.getInstance(type, """"); ```  Note:  using ""BC"" as a provider works on the server side when listening on an SSL port.  EDIT:  I've discovered a ""workaround"", which involves hardwiring BouncyCastle as a higher priority provider to the Sun JCE.  Whilst this works, it immediately imposes the performance penalty of using BouncyCastle where optimised AES is better in the SunJCE.  Whilst it could be possible to go to every location and specify the provider by name, I believe the better solution is to offer the truststore/keytore provider option for the dropwizard tls client.","closed","bug,","nheitz","2018-05-23T16:54:18Z","2018-06-26T08:58:43Z"
"","2415","Getting an Logging exception with getLong not implemented error","```     @SqlUpdate(""INSERT INTO test7 (namespaceID, vendorIdJson, vendorIdJsonMd5) VALUES (:ns, :vendorJson, :vendorMd5)"")     @GetGeneratedKeys        long insertIdentifier(@Bind(""ns"") int ns, @Bind(""vendorJson"") String vendorJson, @Bind(""vendorMd5"") String vendorMd5); ``` ```         for (VendorID vendorId: newVendors) {             Long catId = this.mappedIdentsDAO.insertIdentifier(namespace.get(), vendorId.toJson(), vendorId.toMd5());             ImmutableMap.Builder builder = ImmutableMap.builder();              builder.put(""RADS Category"", catId);             builder.put(""Vendor ID"", vendorId.getMap());             identifierMaps.add(builder.build());         } ``` ```            com.oracle       ojdbc6       11.2.0.3      ``` ``` ERROR [2018-06-27 08:38:53,878] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: d0eb6b93a56f975d ! java.sql.SQLException: Invalid column type: getLong not implemented for class oracle.jdbc.driver.T4CRowidAccessor ! at oracle.jdbc.driver.Accessor.unimpl(Accessor.java:412) ! at oracle.jdbc.driver.Accessor.getLong(Accessor.java:551) ! at oracle.jdbc.driver.OracleReturnResultSet.getLong(OracleReturnResultSet.java:425) ! at org.skife.jdbi.v2.util.LongColumnMapper.mapColumn(LongColumnMapper.java:34) ! at org.skife.jdbi.v2.util.LongColumnMapper.mapColumn(LongColumnMapper.java:22) ! at org.skife.jdbi.v2.sqlobject.FigureItOutResultSetMapper.map(FigureItOutResultSetMapper.java:35) ! at org.skife.jdbi.v2.GeneratedKeys.first(GeneratedKeys.java:73) ! ... 65 common frames omitted ```","closed","","MurahariVadapalli","2018-06-27T09:20:56Z","2018-06-27T21:22:36Z"
"","2322","Space after log level","`[23:00:26 2018-04-04] [INFO ] Started @2689ms`  Is there supposed to be a space after the log level? If this is the case is there anyway of removing it?  `logFormat: ""[%d{HH:mm:ss yyyy-MM-dd}] [%-5level] %msg%n""`  This is my logging format in the `config.yml`.","closed","","henryeason","2018-04-04T22:05:36Z","2018-04-05T08:05:20Z"
"","2418","Jersey 2.27 new warnings","_this only affects master_ ``` mvn clean package | grep org.glassfish.jersey.internal.inject.Providers ```  will return many instances like  ``` org.glassfish.jersey.internal.inject.Providers: A provider com.example.helloworld.resources.PeopleResource registered in SERVER runtime does not implement any provider interfaces applicable in the SERVER runtime. Due to constraint configuration problems the provider com.example.helloworld.resources.PeopleResource will be ignored. ```  reverting Jersey 2.27 (https://github.com/dropwizard/dropwizard/pull/2395) removes these warnings. Currently there is no known workaround: https://github.com/eclipse-ee4j/jersey/issues/3700. But there is a PR in the mix: https://github.com/eclipse-ee4j/jersey/pull/3817  We should not release Jersey 2.27 in a dropwizard version until this is fixed, else we're going to get a lot of complaints üòÑ","closed","blocked,","nickbabcock","2018-06-28T00:14:33Z","2018-09-07T21:09:28Z"
"","1713","Authenticator always called after AuthValueFactoryProvider","_In droupwizard:1.0.0_  1) I use classes  ``` @RolesAllowed(""*"") @Path(""/myResouce"") class MyResource {     @Inject MyService service; } class MyService {     @Auth MyPrincipal principal; } ```  registrations  ```     environment.jersey().register(MyResource.class);      environment.jersey().register(new AbstractBinder() {         @Override         protected void configure() {             this.bind(MyService.class).to(MyService.class)                     .proxy(false).proxyForSameScope(false).in(RequestScoped.class);     });     AuthFilter basicCredentialAuthFilter = new BasicCredentialAuthFilter.Builder()             .setAuthenticator(new BasicAuthenticator())             .setAuthorizer(new MyServiceAuthorizer())             .buildAuthFilter();     AuthFilter cookieAuthFilter = new CookieAuthFilter.Builder()             .setAuthenticator(new CookieAuthenticator())             .setAuthorizer(new MyServiceAuthorizer())             .buildAuthFilter();      AuthFilter chainedFilters = new ChainedAuthFilter(Lists.newArrayList(basicCredentialAuthFilter, cookieAuthFilter));      environment.jersey().register(new AuthDynamicFeature(chainedFilters));     environment.jersey().register(RolesAllowedDynamicFeature.class);     environment.jersey().register(new AuthValueFactoryProvider.Binder<>(MyServicePrincipal.class)); ```  And i got always  > java.lang.IllegalStateException: Cannot inject a custom principal into unauthenticated request  2) If i change @Auth to @Inject  ``` class MyService {     @Inject MyPrincipal principal; } ```  Add factory  ``` public class PrincipalFactory implements Factory {     private ContainerRequestContext requestContext;      @Inject     public PrincipalFactory(@Context ContainerRequestContext requestContext) {         this.requestContext = requestContext;     }      @Override     public Principal provide() {         return requestContext.getSecurityContext().getUserPrincipal();     }      @Override     public void dispose(Principal instance) {     } } ```  with additional registration in binder  ```             this.bindFactory(PrincipalFactory.class).to(Principal.class)                     .proxy(false).proxyForSameScope(false); ```  principal is always `null`  Both about `Authenticator` still not called.  what to do?","closed","stale,","ggrnd0","2016-08-30T12:06:28Z","2019-09-03T00:00:56Z"
"","2542","Fix Travis CI CVE Report (dom4j)","[Travis CI is failing with](https://travis-ci.org/dropwizard/dropwizard/jobs/452517897#L4127)  ``` [ERROR] One or more dependencies were identified with vulnerabilities:  [ERROR]  [ERROR] dom4j-1.6.1.jar: CVE-2018-1000632 ```  I'm away from a dev machine, so I can't check to see if there is an update for this transitive dependency, or if it is better to ignore it. Either way, it is bothersome to see PRs fail","closed","","nickbabcock","2018-11-09T02:48:06Z","2018-11-10T16:57:54Z"
"","2181","Add possibility to configure Jetty's minRequestDataRate","[This parameter](https://github.com/eclipse/jetty.project/blob/4236f14955e828946c33f447fed3e65dfa8bfc1e/jetty-server/src/main/java/org/eclipse/jetty/server/HttpConfiguration.java#L493) can be useful if we want to protect our server from slow http DOS attacks.","closed","improvement,","mgtriffid","2017-10-22T09:34:13Z","2017-10-25T07:57:16Z"
"","1866","405 Method Not Allowed doesn't include Allow headers","[The definition for the 405 response code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html) indicates that it must include a list of valid methods for the requested resource. When I make a request using a method that's not the allowedMethods list in the configuration, I get a response with these headers: Cache-Control ‚Üímust-revalidate,no-cache,no-store Content-Length ‚Üí275 Content-Type ‚Üítext/html;charset=iso-8859-1 Date ‚ÜíWed, 28 Dec 2016 00:57:24 GMT  Conversely, making a request using a method that isn't in allowedMethods and isn't supported by my API returns these headers: Content-Length ‚Üí52 Content-Type ‚Üíapplication/json Date ‚ÜíWed, 28 Dec 2016 00:54:28 GMT  This is with version 1.0.2 of Dropwizard.  Using 0.8.2 of Dropwizard, making a request using an forbidden method responds with the expected headers: Allow ‚ÜíGET,OPTIONS Cache-Control ‚Üímust-revalidate,no-cache,no-store Content-Length ‚Üí327 Content-Type ‚Üítext/html; charset=ISO-8859-1 Date ‚ÜíFri, 23 Dec 2016 16:54:43 GMT  Can we add back functionality to include the Allow header as required by w3?","closed","bug,","jaredkosanovic","2016-12-28T01:11:43Z","2017-02-02T19:54:18Z"
"","1640","ResourceConfigurationSourceProvider: process a path to the resource in the more sophisticated way","[ResourceConfigurationSourceProvider](https://github.com/dropwizard/dropwizard/blob/3d746d21c6e6656a59b26c2a7e92f19e1bb2e9b1/dropwizard-configuration/src/main/java/io/dropwizard/configuration/ResourceConfigurationSourceProvider.java) uses `ClassLoader#getResourceAsStream()` to get a stream to the resource from the class path.  A path to the resource can't  begin from the leading `/`. It can  confuse, because, for example,  it is need to use leading `/`  while using `Class#getResourceAsStream()` for the same resourse path.  My proposal is to use a Hibernate `ClassLoaderService` approach: removing the leading slash, if an attempt to get a stream for a resource is failed: [ClassLoaderServiceImpl.java#L254](https://github.com/hibernate/hibernate-orm/blob/ec4f20a5fba79444dbd704f1305f961c339dd7d1/hibernate-core/src/main/java/org/hibernate/boot/registry/classloading/internal/ClassLoaderServiceImpl.java#L254).","closed","","v-ladynev","2016-07-19T15:22:09Z","2016-11-08T02:54:30Z"
"","1766","Update to mustache.java 0.9.4","[Based on the forums](https://groups.google.com/forum/#!msg/mustachejava/84_oxOao8hM/0d4PW1L7AgAJ) closes #1696  I think this PR should be considered for 1.0.3 (0.9.2 -> 0.9.4), if that's available.","closed","improvement,","nickbabcock","2016-10-07T14:37:23Z","2016-10-31T08:15:13Z"
"","2018","Add allowCoreThreadTimeOut option to ExecutorServiceBuilder.","[allowCoreThreadTimeOut](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html#allowCoreThreadTimeOut(boolean))  Today it's only possible to do this by casting: ``` ThreadPoolExecutor executor = (ThreadPoolExecutor) environment.lifecycle().executorService(""test"").....build(); executor .allowCoreThreadTimeOut(true); ```","closed","improvement,","natnan","2017-04-21T14:11:32Z","2017-04-25T13:39:45Z"
"","1632","PolymorphicAuthDynamicFeature Usage/Improvement","[`PolymorphicAuthDynamicFeature`](https://github.com/dropwizard/dropwizard/blob/v1.0.0-rc4/dropwizard-auth/src/main/java/io/dropwizard/auth/PolymorphicAuthDynamicFeature.java) was added in an earlier 1.0 RC, and it seems to cover use cases in [#1579](https://github.com/dropwizard/dropwizard/issues/1579), but I'm looking at the code, and there seems to be a flaw in the feature. In the Javadoc it states  > Note that this feature only pertains to _authentication_. To enable authorization, use `AuthDynamicFeature`.  This sounds like the author would like us to use the `PolymorphicAuthDynamicFeature` in concert _with_ `AuthDynamicFeature`. This doesn't really make much sense. The `AuthDynamicFeature` registers a filter that handles both authentication _and_ authorization. It is not used _only_ for authorization. Using both features would end up registering the filters twice, and having them called twice.   And also how are we expected to register `AuthDynamicFeature`. Say we have two filters for polymorphic feature  ``` final BasicCredentialAuthFilter filterOne = new BasicCredentialAuthFilter.Builder()         .setAuthenticator(authenticatorOne)         .buildAuthFilter();  final BasicCredentialAuthFilter filterTwo = new BasicCredentialAuthFilter.Builder()         .setAuthenticator(authenticatorTwo)         .buildAuthFilter();  register(new PolymorphicAuthDynamicFeature<>(ImmutableMap.of(          PrincipalOne.class, filterOne,          PrincipalTwo.class, filterTwo ))); ```  What do we do now with the `AuthDynamicFeature`? It only takes one filter. Are we supposed to register _two_ `AuthDynamicFeature`s? There's isn't any documentation on intended usage.   @evnm It looks like you were the author of this. Did you have an intended usage for this being used along side authorization, or did your javadoc comment mean that if you need authorization don't use this, instead use the other auth feature?  With the current implementation of the `PolymorphicAuthDynamicFeature`, was there something stopping you from simply using the same registration algorithm used in the `AuthDymamicFeature`, where the filter registration handle both authentication and authorization.  Without testing anything out, it seems to me that we _can_ use the poly feature for both authentication and authorization. We just need to use the same registration algo used in the `AuthDynamicFeature`. I'll check out the possibility later, but I'd like to hear what @evnm has to say. Maybe I am missing something.","closed","","psamsotha","2016-07-12T08:20:52Z","2016-07-15T00:13:53Z"
"","1968","Chinese characters garbled, where can you set up?","@GET     @Timed     public Response test() {             return Response.ok(""ËøîÂõû‰∏≠ÊñáÊ±âÂ≠ó"").build();     }  Chinese characters garbled, where can you set up?","closed","","gggitpl","2017-03-20T09:42:34Z","2017-03-21T01:54:09Z"
"","2312","JPMS builds fail due to split package (logback.core) in dropwizard-logging:1.3.0","1.3.0 exposes the `ch.qos.logback.core` package in the jar.  JPMS builds will fail for most use cases because of this as `logback-core` is used widely by other libraries.","closed","","christopher-johnson","2018-03-20T18:03:03Z","2019-09-16T21:24:28Z"
"","2189","Close PackageNamesScanner in ScanningHibernateBundle","... in order to close the referenced resource.  Resolves #2188.","closed","improvement,","patrox","2017-10-26T18:58:46Z","2017-10-26T22:46:12Z"
"","1553","Dependency updates","- Upgrade to Hibernate 5.1.0 - Upgrade to Mockito 2.0.53-beta - Upgrade to tomcat-jdbc 8.5.2 - Upgrade to JMH 1.12 - Upgrade to HSQLDB 2.3.4 - Upgrade to Objenesis 2.3 - Upgrade to Liquibase 3.5.1 - Upgrade to Jetty 9.3.9.v20160517 - Upgrade to Jersey 2.23","closed","","joschi","2016-05-21T13:08:40Z","2016-05-21T16:14:14Z"
"","2453","Rewrite of throttling logging appender testing","- Renamed test class to match the class it is testing (ThrottlingAppenderWrapper). - Rewrote class to play nicer with slower processing and to improve long term supportability. - Relied on system property for line seperation instead of hardcoded regex. - Removed unused imports (and in the class being tested as well).  ###### Problem: When CI takes awhile, the unit test fails. Also, I like cleaning up compiler warnings.  ###### Solution: I've rewritten key pieces of the original unit test to be less dependent on the test finishing in a certain time window.  These changes aim to dynamically address the assertion targets based on how long the test took to run.  ###### Result: The unit test passes even if the CI machine is running slow.","closed","","isaki","2018-08-03T19:37:32Z","2018-08-03T20:22:32Z"
"","2458","Rewrite of throttling logging appender testing","- Renamed test class to match the class it is testing (ThrottlingAppenderWrapper). - Rewrote class to play nicer with slower processing and to improve long term supportability. - Relied on system property for line seperation instead of hardcoded regex. - Removed unused imports (and in the class being tested as well).  ###### Problem: The current unit test relies on wall clock timings which can cause issues during CI builds on slow machines.  ###### Solution: I've done my best to eliminate wall clock where possible and added calculations where that wasn't possible to dynamically calculate the expected result for slow machines.  ###### Result: The tests should be far more reliable.","closed","improvement,","isaki","2018-08-17T19:06:30Z","2018-08-18T00:46:45Z"
"","2034","Minor code cleanup","- Fix some deprecations - Bind to a random port instead of 8080 for a test case - Simplify a line using Map::forEach","closed","improvement,","nickbabcock","2017-04-28T15:17:26Z","2017-04-28T15:38:28Z"
"","1652","Minor Code Fixes","- Fix or comment deprecation usage in tests/docs - Remove redundant try-catch in TaskServlet - Prefer java8 mechanisms in CachingAuthorizer (cc @evnm)","closed","improvement,","nickbabcock","2016-07-28T19:10:32Z","2016-07-28T21:52:43Z"
"","1871","Upgrade to Hibernate 5.2","- fix deprecation notices where type isn't exposed on DW public API (AbstractDAO API doesn't change)  - upgrade Jadira usertypes to compatible version  - Hibernate removes hibernate-entitymanager with 5.2 and merges JPA support into core  - one side effect of this is wrapping previous SQL exceptions in a PersistenceException, tests needed an additional ExceptionMapper to pass","closed","improvement,","vvondra","2017-01-07T18:19:12Z","2017-02-22T11:04:08Z"
"","1570","Enhancements to lifecycle-setup classes.","- Added constructors for executor service builders to allow specifying a   thread factory so that a thread factory is not built only to be thrown   away by a later call to the method to set the thread factory; the   ability to override the thread factory has not been removed for backward   compatibility. - Exposed factory methods that create the builders based on already   existing thread factories, thus invoking the new constructors created in   the above comment. - Issue #1563","closed","improvement,","isaki","2016-05-28T16:22:18Z","2016-05-30T09:48:33Z"
"","1604","Hibernate insert/update exceptions not being returned to the client","**Version: 1.0.0RC3**  The fix to allow lazy loading of POJOs during serialization has introduced a key issue. We are no longer seeing SQLExceptions during an insert/update//delete being reported back to the client.  In 1.0.0RC3, the session will be closed and the transaction committed only after the serialization has happened. If there are any database exceptions during the transaction commit (column val exceed/constraints etc..), they now happen only after the serialized response has been sent back. So the client assumes things are fine, but actually the server logs show the exception.  I guess we will still need to end the transaction or commit it in the RESP_FILTERS_START event. And session can be closed in FINISHED event.   Here's the pull that introduced this issue, https://github.com/dropwizard/dropwizard/pull/1466","closed","bug,","apgeorge","2016-06-22T11:06:21Z","2016-07-08T07:26:43Z"
"","1745","@UnwrapValidatedValue is required for all *Param resource parameters","**The Issue**  Since the upgrade to Hibernate 5.x in dropwizard 1.0 the following code now fails at runtime:  ``` java @GET @Path(""/long"") public Response receiveLong(@NotNull @QueryParam(""long"") LongParam longParam) {     return Response.ok().build(); } ```  Hitting this endpoint with a null value causes the following runtime exception:  `HV000186: The constraint of type 'javax.validation.constraints.NotNull' defined on 'receiveLong.query param long' has multiple matching constraint validators which is due to an additional value handler of type 'io.dropwizard.jersey.validation.ParamValidatorUnwrapper'. It is unclear which value needs validating. Clarify configuration via @UnwrapValidatedValue.`  This happens because Hibernate Validator doesn't know if you want to apply `@NotNull` to `longParam` or the value inside of `LongParam`, since dropwizard has provided an unwrapper for that type. To fix this, you have to use `@UnwrapValidatedValue` to tell Hibernate Validator to which value the validation should be applied:  ``` java @GET @Path(""/long"") public Response receiveLong(@UnwrapValidatedValue @NotNull @QueryParam(""long"") LongParam longParam) {     return Response.ok().build(); } ```  In practice this means that you have to add this annotation to every `*Param` you use that also is required. This is required, but unnecessary, because you really **always** want the `@NotNull` to apply to the `LongParam` and not the value inside, because the `*Param` classes will throw the right validation exceptions if the value is null.  **Our Solution**  This was a breaking change for us when upgrading dropwizard from 0.8.x to 1.0, as we use the `*Param` classes a lot. Putting `@UnwrapValidatedValue` on every parameter felt very verbose and made things harder to read.  We added 2 things: 1. A maven plugin that scans for parameters not annotated post-compilation and adds the annotations using javaassist if they are missing. 2. A startup check to ensure every usage of `*Param` includes this annotation and fails if not. This at least prevents starting up with something that will fail at runtime.  I would be happy to submit this as a PR, but I have a few concerns. 1. The use of a maven plugin + javaassist is a little hacky. It's worked great for us, but feels like not the best solution. 2. [@UnwrapValidatedValue](https://docs.jboss.org/hibernate/stable/validator/api/org/hibernate/validator/valuehandling/UnwrapValidatedValue.html) is marked as experiemental, and unclear if this is something we should be handling like this long-term 3. The right solution is probably to add to Hibernate Validator a way to set a default for the unwrapping behavior for specific classes. So in this case, default to `unwrap=false` for all *Param classes. This is not possible today.","closed","blocked,","cmicali","2016-09-27T14:01:34Z","2018-06-24T22:16:25Z"
"","2041","Cannot inject a custom principal into unauthenticated request","**The Goal** Use the @Auth annotation in resource methods to validate that a specific **authenticated** user has explicit permission to **authorize** a particular resource.   This involves accepting a token from the client, mapping that token to the user to which it belongs and ensuring that the identified user has the required permission to view the requested endpoint.   This seems pretty straight forward in my mind, but I'm having some issues integrating this in the latest version of DropWizard as a first time user, with most online resources no longer being relevant to Jersey() 2.0.  **Console:**  > ERROR  [2017-05-02 11:34:41,302] io.dropwizard.jersey.errors.LoggingExceptionMapper: Error handling a request: 72ab3581d1fd9815.  java.lang.IllegalStateException: Cannot inject a custom principal into unauthenticated request  **Application Setup**  ```java DashboardAuthenticator authenticator = new UnitOfWorkAwareProxyFactory(hibernateBundle).create(DashboardAuthenticator.class, new Class[]{SessionDAO.class, UserDAO.class}, new Object[]{sessionDAO, userDAO});  DashboardAuthorizer authorizer = new DashboardAuthorizer(sessionDAO);  DashboardAuthFilter authFilter = new DashboardAuthFilter(authenticator, authorizer);  environment.jersey().register(new AuthDynamicFeature(authFilter)); environment.jersey().register(new AuthValueFactoryProvider.Binder<>(DashboardCredentials.class)); ```  **Flow Of Request**  Path: http://localhost:8080/students  DashboardCredentials.java (Implements Principal) - Constructor DashboardAuthenticator(SessionDAO, UserDAO).authenticate() Method (Does authentication of user based on provided Authentication header token) Exception Thrown Here.  **StudentsResource [Sample]**  ```java @Path(""/students"") @PermitAll @Produces(MediaType.APPLICATION_JSON) public class StudentsResource {      private final StudentDAO studentDAO;      public StudentsResource(StudentDAO studentDAO) {         this.studentDAO = studentDAO;     }     @GET     @UnitOfWork     public List getAllStudents(@Auth DashboardCredentials credentials) {         // Validate Authorization Here         return studentDAO.getAll();     } ```  **Notes** I have tried several iterations and modifications of the above. I cannot seem to piece together what DropWizard expects and how this works. Every example online only uses BasicAuthentication in the most simple way and isn't painting a clear picture as to how to accomplish this.","closed","","Gaudon","2017-05-02T11:51:34Z","2017-05-02T18:17:36Z"
"","2012","java.lang.UnsupportedClassVersionError: io/dropwizard/testing/junit/ResourceTestRule : Unsupported major.minor version 52.0","**ISSUE 1 :  **When I run the project using intellij Idea :****  java.lang.UnsupportedClassVersionError: io/dropwizard/testing/junit/ResourceTestRule : Unsupported major.minor version 52.0  I need to run this with openjdk-7.  it works if I installed jdk 8.  I am on ubuntu 14.04 my java version is  java version ""1.7.0_121"" OpenJDK Runtime Environment (IcedTea 2.6.8) (7u121-2.6.8-1ubuntu0.14.04.3) OpenJDK 64-Bit Server VM (build 24.121-b00, mixed mode)  -------------------------------------------------------------------------------------------------------------------------------------- **ISSUE 2 :  **When I run the test cases with Mvn test:**** Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project  Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test failed: The forked VM terminated without properly saying goodbye. VM crash or System.exit called? [ERROR] Command was /bin/sh -c cd /{project location} && ""${}/bin/javac"" -jar /{project location}/target/surefire/surefirebooter6114235873568686676.jar /{project location}/target/surefire/surefire968074016071936762tmp  /{project location}/target/surefire/surefire_08111057350409621610tmp","closed","","ghost","2017-04-17T12:02:54Z","2017-04-18T06:55:04Z"
"","1627","Jackson + Afterburner Module preventing the serialization of null properties","**[Repository with tests to reproduce the issue:](https://github.com/cchacin/jackson-afterburner-dw-issue)** Having this pojo:  ``` java public final class PojoResponse {      private final String        string;     private final UUID          uuid;     private final LocalDateTime localDateTime;     private final boolean       aBoolean;     private final Boolean       aBooleanT;      @JsonCreator     public PojoResponse(@JsonProperty(""string"") final String string,                         @JsonProperty(""uuid"") final UUID uuid,                         @JsonProperty(""localDateTime"") final LocalDateTime localDateTime,                         @JsonProperty(""aBoolean"") final boolean aBoolean,                         @JsonProperty(""aBooleanT"") final Boolean aBooleanT) {         this.string = string;         this.uuid = uuid;         this.localDateTime = localDateTime;         this.aBoolean = aBoolean;         this.aBooleanT = aBooleanT;     }      public String getString() {         return this.string;     }      public UUID getUuid() {         return this.uuid;     }      public LocalDateTime getLocalDateTime() {         return this.localDateTime;     }      public boolean isaBoolean() {         return this.aBoolean;     }      public Boolean getaBooleanT() {         return this.aBooleanT;     } } ```  When we serialize it, with and without the afterburner module we expect this json on both cases:  ``` json {   ""string"":null,   ""uuid"":null,   ""localDateTime"":null,   ""aBoolean"":true,   ""aBooleanT"":false } ```  But with the afterburner module this json is the output:  ``` json {   ""string"":null,   ""aBoolean"":true,   ""aBooleanT"":false } ```","closed","bug,","cchacin","2016-07-09T00:33:14Z","2016-07-26T10:30:17Z"
"","2202","Polish SelfValidatingValidator","* Use Stream API * Add curly brackets to if blocks * Avoid nested if blocks and keep the main line of execution * Reorder imports  References #2150","closed","improvement,","arteam","2017-11-10T21:53:07Z","2017-11-10T23:27:32Z"
"","1942","Dependency updates","* Upgrade to SLF4J 1.7.24 * Upgrade to jDBI 2.78 * Upgrade to Jetty 9.4.2.v20170220 * Upgrade to AssertJ 3.6.2 * Upgrade to Hibernate 5.2.8.Final * Upgrade to Mockito 2.7.12 * Upgrade to Objenesis 2.5.1","closed","","joschi","2017-02-27T12:43:11Z","2017-02-27T14:31:58Z"
"","1884","Dependency updates","* Jackson 2.8.6 * Guava 21.0 * Mockito 2.6.1 * Jetty 9.3.15.v20161220 (although this one might make problems, as usual)","closed","","joschi","2017-01-13T11:48:06Z","2017-01-13T13:11:07Z"
"","2445","Upgrade dependencies and Maven plugins","* Guava 25.1: https://github.com/google/guava/releases/tag/v25.1 * Dropwizard Metrics 4.03: https://github.com/dropwizard/metrics/releases/tag/v4.0.3 * Apache Commons Text 1.4: https://commons.apache.org/proper/commons-text/release-notes/RELEASE-NOTES-1.4.txt * Joda-Time 2.10: http://www.joda.org/joda-time/changes-report.html#a2.10 * Apache HttpClient 4.5.6: http://www.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES-4.5.x.txt * Apache Tomcat JDBC 9.0.10 * Hibernate ORM 5.3.3.Final: https://planet.jboss.org/post/hibernate_orm_5_3_3_final_released * HSQLDB 2.4.1 * Liquibase 3.6.2: https://github.com/liquibase/liquibase/releases/tag/liquibase-parent-3.6.2 * Freemarker 2.3.28: https://freemarker.apache.org/docs/versions_2_3_28.html * BouncyCastle 1.60: https://bouncycastle.org/releasenotes.html * AssertJ 3.10.0: https://joel-costigliola.github.io/assertj/assertj-core-news.html#assertj-core-3.10.0 * Mockito 2.20.1: https://github.com/mockito/mockito/blob/v2.20.1/doc/release-notes/official.md * NullAway: https://github.com/uber/NullAway/blob/v0.5.0/CHANGELOG.md","closed","improvement,","joschi","2018-07-27T11:01:24Z","2018-07-27T13:28:01Z"
"","2177","Add the default logging format to the docs.","* Add the default logging format to the docs. * Spelling correction for threshold","closed","","lightswitch05","2017-10-17T19:19:58Z","2017-10-18T10:22:50Z"
"","2519","Dependency updates","* Add ByteBuddy 1.8.21 to dependency management * Upgrade to ClassMate 1.4.0   * https://github.com/FasterXML/java-classmate/blob/949000c18cc471007a730acc6e3f213ca18f3efc/VERSION.txt * Upgrade to Hibernate ORM 5.3.6.Final   * http://hibernate.org/orm/releases/5.3/#releases * Upgrade to Apache Tomcat JDBC 9.0.12   * https://tomcat.apache.org/tomcat-9.0-doc/changelog.html#Tomcat_9.0.12_(markt) * Upgrade to Apache Commons Lang3 3.8.1   * https://commons.apache.org/proper/commons-lang/release-notes/RELEASE-NOTES-3.8.txt   * https://commons.apache.org/proper/commons-lang/release-notes/RELEASE-NOTES-3.8.1.txt *Upgrade to Jackson 2.9.7   * https://github.com/FasterXML/jackson-core/blob/jackson-core-2.9.7/release-notes/VERSION-2.x * Upgrade to Mockito 2.22.0   * https://github.com/mockito/mockito/blob/release/2.x/doc/release-notes/official.md#2220 * Upgrade to AssertJ 3.11.1   * http://joel-costigliola.github.io/assertj/assertj-core-news.html#assertj-core-3.11.0   * http://joel-costigliola.github.io/assertj/assertj-core-news.html#assertj-core-3.11.1","closed","","joschi","2018-10-03T19:53:45Z","2018-10-03T20:25:53Z"
"","1948","Add some commonly used and useful jersey request/response filters","* `X-Request-Id` filter is based upon https://devcenter.heroku.com/articles/http-request-id * `X-Runtime` filter is based upon https://github.com/rack/rack/blob/master/lib/rack/runtime.rb  These are not registered by default.  They are merely provide for convenience if people want to opt-in to using them.","closed","feature,","jplock","2017-03-05T21:54:03Z","2017-03-08T20:18:36Z"
"","1645","Fix a test(-only) problem to work with both Jackson 2.7 and 2.8","(for background, see https://github.com/FasterXML/jackson-databind/issues/1311 on Jackson side)  So: there is a small problem with couple of tests cases, leading to test failures with Jackson 2.8, but not earlier versions, as earlier versions did not check type assignments wrt `defaultImpl` of `@JsonTypeInfo` annotation.  Problem here is that some tests explicitly ask for binding to `SimpleServerFactory` (instead of base type `ServerFactory`); but as per annotations in `ServerFactory`, default implementation is `DefaultServerFactory`. Since `DefaultServerFactory` is NOT a subtype of `SimpleServerFactory` (but only `ServerFactory`), such a request could return an instance of `DefaultServerFactory` and result in a class cast exception. Because of this, Jackson's type handling code throws exception instead.  It is possible that some improvements would make sense on Jackson side (for example, improved error messaging if and as possible); but on short term it would make sense to ensure that test failure is prevented since as far as I can see, this is test-only problem and normal running of a DropWizard service would not hit the same problem. Conversely if there are other problems for actual code, it'd be necessary to get a good reproduction of such usage: I don't think test case as-is reproduces real problem.  So: this patch should remove 5 test failures related to using Jackson 2.8.1 with DW. (I will try to work on other remaining problems that relate to exception message checking next)","closed","","cowtowncoder","2016-07-26T05:57:53Z","2016-07-26T07:15:47Z"
"","1952","Flush loggers on cleanup, don't destroy (back-port for Dropwizard 1.1.0)","(cherry picked from commit 6c76c27c0cf637073dc7a72ae63a97dc5ff9b78f)  Refs #1947","closed","improvement,","joschi","2017-03-08T11:38:40Z","2017-03-08T20:00:21Z"
"","2532","Jersey configuration has a null Temp Dir?","> WARN  [2018-10-17 13:10:23,882] org.glassfish.jersey.media.multipart.internal.MultiPartReaderClientSide: Cannot create temporary files. Multipart attachments will be limited to ""4,096"" bytes.  The path being provided to File.createTempFile is ""C:\WINDOWS\MIME###########.tmp""  MultiPartReaderClientSide [tempDir is null] ``` if (properties.getBufferThreshold() != -1) {     try {         File.createTempFile(""MIME"", (String)null, tempDir != null ? new File(tempDir) : null).delete();     } catch (IOException var5) {         LOGGER.log(Level.WARNING, LocalizationMessages.TEMP_FILE_CANNOT_BE_CREATED(properties.getBufferThreshold()), var5);     } } ```  I don't remember this happening before , is this something I'm supposed to have configured in dropwizard to be passed to jersey? Is it an IDE/System property that dropwizard looks for (IntelliJ IDE).  Cheers","closed","","Gaudon","2018-10-17T13:22:43Z","2019-02-08T02:55:14Z"
"","2484","Register InjectValidatorBundle by Default","#2432 solves #2234, but it is a bundle that has to be registered for users that want the context injection in constraint validators. The bundle doesn't appear to have any downsides (backwards compatible, no new dependencies), so I am of the mind that the bundle should be registered by default. However, no other dropwizard bundles are registered by default (does that mean this bundle can be implemented in another way?). So I think there are a couple outcomes possible:  1. Register the bundle by default 2. Keep current method of having users register the bundle 3. Implement the feature not via a bundle and register it by default  Thoughts?","closed","","nickbabcock","2018-09-07T02:22:53Z","2018-10-17T01:15:09Z"
"","2408","[Tests] InvalidKeyException: Illegal key size","#2390 introduced a keystore that appears can only be loaded if unlimited crypto strength is enabled. As a result, one of my machine's is no longer able to run dropwizard's test suite. @nheitz is there a way to decrease the key length to fit so that we don't require unlimited crypto strength.  ``` ERROR [2018-06-22 22:17:46,949] io.dropwizard.cli.ServerCommand: Unable to start server, shutting down ! java.io.IOException: exception decrypting data - java.security.InvalidKeyException: Illegal key size ! at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.cryptData(Unknown Source) ! at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.engineLoad(Unknown Source) ! at java.security.KeyStore.load(KeyStore.java:1445) ```","closed","","nickbabcock","2018-06-23T17:53:50Z","2018-06-25T19:49:24Z"
"","2375","Support expirable log level configurations","###### Problem: With the log configuration task. My typical use case is to temporarily change the log level, get the relevant information, then revert the change. I would like the option to set a duration at which the log change reverts to the previous state. The example below takes in an ISO8601 duration as optional parameter.  https://www.dropwizard.io/1.3.2/docs/manual/core.html#logging-configuration-via-http https://github.com/dropwizard/dropwizard/blob/v1.3.2/dropwizard-servlets/src/main/java/io/dropwizard/servlets/tasks/LogConfigurationTask.java  ###### Solution: Support an optional ISO 8601 duration on the log level task.  ``` curl -X POST -d ""logger=com.example.helloworld&level=INFO&duration=PT10M"" http://localhost:8081/tasks/log-level ```  ###### Result: Log level configuration will support automatic reverting to the default level.","closed","feature,","mattnelson","2018-06-01T21:37:57Z","2018-07-05T18:33:19Z"
"","2504","Request Uri event should not contain params in tests","###### Problem: While preparing a response for #2497, I glanced at the tests for the JSON access logs, and assumed that query parameters were part of the uri, they is not (confirmed with some of the e2e tests).  ###### Solution: Change the test mock to exclude query params when asked for the URI to avoid misleading others.  ###### Result: Mock better represents true events.","closed","improvement,","nickbabcock","2018-09-24T21:55:21Z","2018-09-25T13:17:17Z"
"","2335","Fix bug when using @SelfValidating with @BeanParam (#2334)","###### Problem: When using the new [@SelfValidating](https://github.com/dropwizard/dropwizard/blob/v1.3.1/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java) annotation on a class that is used as a `@BeanParam`, a 500 error is raised instead of 400/422.  This is described in more detail in #2334.   ###### Solution: Handle [@SelfValidating](https://github.com/dropwizard/dropwizard/blob/v1.3.1/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java) violations like [@ValidationMethod](https://github.com/dropwizard/dropwizard/blob/v1.3.1/dropwizard-validation/src/main/java/io/dropwizard/validation/ValidationMethod.java).","closed","","matt-snider","2018-04-28T11:23:30Z","2018-05-06T16:46:14Z"
"","2410","Add support for PATCH request to ResourceTestRule client when using Grizzly","###### Problem: When using the client from ResourceTestRule with the Grizzly container it is not possible to use PATCH via the custom annotation io.dropwizard.jersey.PATCH. (It seems to work with  the in-memory container) Similar to: #2287  ###### Solution: Since the builder takes a `Consumer`  instead of a property, like in #2287  I choose to set it in the Resource instead of manipulating the builder. This solution is up for discussion.   ```    protected Resource buildResource() {    ...    Consumer extendedConfigurator = config -> {                 clientConfigurator.accept(config);                 config.property(HttpUrlConnectorProvider.SET_METHOD_WORKAROUND, true);             }; ```  ###### Result: Now possible to use the client and make a PATCH reuqest client.target(...).request(...).method(""PATCH"", Entity.text(""Patch is working""), String.class)","closed","improvement,","danpeter","2018-06-25T14:00:57Z","2018-06-26T11:15:49Z"
"","2342","Fix shared metrics race with multiple environments","###### Problem: When creating environments in parallel (like when executing tests in parallel). Two threads may try to get the default metric registry (only to see it does not exist) and both of them try to set the default. One will succeed, the other will fail. This issue was foretold by @arteam in #1938  ###### Solution: Always try and atomically set the default registry and ignore the exception that one already exists. Keeps the same look and feel of the logic.  ###### Result: Behaviorally the same (set the default registry if not already set else ignore). Now race free!","closed","improvement,","nickbabcock","2018-05-02T19:16:00Z","2018-06-22T21:50:57Z"
"","2346","Upgrade Jetty to 9.4.10.v20180503","###### Problem: We use not the latest version of Jetty in the upstream  ###### Solution: Bump the version  ###### Result: We take advantage of many small bugfixes in Jetty, especially in the HTTP/2 module. See  https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.9.v20180320 https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.10.v20180503","closed","improvement,","arteam","2018-05-06T12:13:05Z","2018-06-22T21:50:57Z"
"","2505","Try to fix problems with deploying snapshots to Sonatype OSS repo","###### Problem: We use HTTP and the the build fails from time to time. Sonatype automatically redirects traffic to HTTPS, so it may cause problems for the client, because it has to perform 2 HTTP requests.  ###### Solution:  Let's try to use HTTPS straight away.  ###### Result: Hopefully the Travis build will be more stable","closed","security,","arteam","2018-09-25T06:53:34Z","2018-09-25T13:17:57Z"
"","2347","Upgrade to JUnit5 5.2.0","###### Problem: We use an outdated version of JUnit 5 dependencies.  ###### Solution: Upgrade the JUnit5 dependencies and `maven-surefire-plugin` to the latest versions.  ###### Result: It adds some new features for parametrized tests and provides better Java 9/10 comparability. Suprisingly enough, we used a very old version of `junit-vintage-engine`","closed","improvement,","arteam","2018-05-06T12:37:38Z","2018-06-22T21:50:58Z"
"","2326","Use Java Stream API in DbDumpCommandTest","###### Problem: We have some imperative collection operations in `DbDumpCommandTest`.  ###### Solution: Move them to the Stream API.  ###### Result: It allows us to convert the list of attributes to a map of attributes in a declarative way without using loops and variables","closed","improvement,","arteam","2018-04-08T19:13:26Z","2018-06-22T21:50:55Z"
"","2272","Upgrade Jadira to 7.0.0-rc1","###### Problem: We depend on a Jadira fork instead of an official release, because we want to run Dropwizard apps with Hibernate under JDK 9.  ###### Solution: There has been a new release of Jadira which supports running under JDK 9. That means we can remove a dependency on my fork via jitpack.  This new release also now picks up the database timezone from the `hibernate.jdbc.time_zone` property, so we should specify it in our tests, otherwise Hibernates reads timestamps in the host's timezone.  Theoretically, it can break applications which run databases and application servers in different timezones, but one could argue that such systems should explicitly specify the database timezone. See: * https://github.com/JadiraOrg/jadira/issues/58 * http://in.relation.to/2016/09/12/jdbc-time-zone-configuration-property/  ###### Result: No 3rd party dependencies in Dropwizard.","closed","improvement,","arteam","2018-02-11T12:32:49Z","2018-02-11T13:42:43Z"
"","2249","Switch to JaCoCo for Code coverage","###### Problem: We currently use Cobertura for code coverage, which is not actively developed and doesn't support JDK9.  ###### Solution: Switch to JaCoCo which supports JDK9 and is currently actively maintained.  ###### Result: In the future we can our primary build with test coverage on JDK9.","closed","improvement,","arteam","2018-01-20T21:22:03Z","2018-02-02T15:25:22Z"
"","2239","Remove metrics-ganglia","###### Problem: We can't update Dropwizard to Metrics 4.0.* with the Ganglia module.  ###### Solution: Metrics 4.0 doesn't support Ganglia, and AFAIK the project itself not very actively developed. I had a look at the stats from Maven Central, and the module is barely downloaded from Central (around 100 downloads per month). For example, the metrics-graphite module has around 10,000 downloads per month. I think this warrants removing maintenance of this module. If anyone it still using Ganglia with Dropwizard, it should be relatively easy to copy `GangliaReporterFactory` to own project.  ###### Result: We can update Dropwizard to Metrics 4.0.*","closed","","arteam","2018-01-05T20:28:40Z","2018-02-09T16:33:59Z"
"","2242","Fix typo in core.rst","###### Problem: Typo  ###### Solution: Correct spelling  ###### Result:","closed","documentation,","brian-vosburgh","2018-01-12T20:21:01Z","2018-01-12T20:47:28Z"
"","2395","Update to Jersey 2.27","###### Problem: Took another crack at updating jersey. I've gotten most of the way there, the only issue remaining is that the Jersey update has a couple of outstanding issues:  https://github.com/jersey/jersey/issues/3670 https://github.com/jersey/jersey/issues/3675  Also, weirdly I had to play around with switching out `Feature` and `AbstractBinders`  EDIT: All tests are now passing","closed","improvement,","nickbabcock","2018-06-15T01:20:16Z","2018-07-10T07:04:14Z"
"","2235","Add e2e test for eof exception mapper","###### Problem: There is no end to end (e2e) test that ensures that a exception mapper registered for Jetty's EofException (ex. `ExceptionMapper` / `EarlyEofExceptionMapper`) is triggered when an `EofException` occurs. This is in effort to track down the cause of #2195  ###### Solution: Add e2e test that simulates a client disconnecting before sending all the data  ###### Result: The exception mapper is hit, so there may be another case that is triggering #2195, but this test is still good.","closed","improvement,","nickbabcock","2017-12-20T15:33:13Z","2017-12-20T19:34:09Z"
"","2502","Add totalSizeCap to file log appender","###### Problem: There are several scenarios when configuring the file log appender when one might think they have capped the upper bound of their logging (but it's not the case), for example:  ```yaml archivedLogFilenamePattern: ./logs/example-%d-%i.log.gz archivedFileCount: 5 maxFileSize: ""10mb"" ```  One may think this config states ""keep 5 files that are a max of 10mb. On slow weeks, there will be 5 files representing 5 days, and on busy weeks there will be 5 files representing the most current date"". What's confusing is that `archivedFileCount` is for how many days (in this example) of logs to keep and the `10mb` is when to trigger a rollover, which will not count for the `archivedFileCount`, resulting in an unbounded size for logs.  ###### Solution: The scenario desired warrants [`totalSizeCap`](https://logback.qos.ch/manual/appenders.html#tbrpTotalSizeCap), so the example earlier should be rewritten:  ```yaml archivedLogFilenamePattern: ./logs/example-%d-%i.log.gz archivedFileCount: 5 maxFileSize: ""10mb"" totalSizeCap: ""50mb"" ```  - totalSizeCap will ensure that the upper bound is not reached for a log files. - totalSizeCap has no effect when using maxFileSize and an archivedLogFilenamePattern without %d, as archivedFileCount implicitly controls the total size cap (this is a configuration validation error)   ###### Result: Closes #2435","closed","feature,","nickbabcock","2018-09-23T00:22:40Z","2018-09-23T19:30:09Z"
"","2407","Logging throttle tests now CI friendly","###### Problem: The logging throttle tests are flaky on CI, due to a combination of sleeps, file logs (file IO can be slow in CI) , and asserting on exact lines that are logged.  ###### Solution: - Log into `System.out` to avoid file IO - Use a ratelimiter instead of a sleep to simulate an application logging at an average rate - Don't assert on the contents on the log lines, but assert how approximately how many should have been logged and that there are no duplicates.  ###### Result: No more flakiness!","closed","improvement,","nickbabcock","2018-06-23T16:11:44Z","2018-06-23T21:12:11Z"
"","2229","deps: Upgrade jetty to 9.4.8.v20171121","###### Problem: The jetty version is outdated  ###### Solution: Upgrade to the latest one.  ###### Result: Dropwizard use can take advantage of new features like support of native SSL via [Conscrypt](https://github.com/google/conscrypt/):  https://webtide.com/conscrypting-native-ssl-for-jetty/","closed","improvement,","arteam","2017-12-13T21:46:33Z","2017-12-15T18:16:30Z"
"","2278","Run code coverage only if needed","###### Problem: The jacoco agent runs by default alongs with the tests which creates additional overhead. We need only on Travis CI, where we measure code coverage, we don't in another CI or during local development.  ###### Solution: Move the jacoco agent to a separate profile which is invoked by the build script at Travis.  ###### Result: More fast tests during development.","closed","improvement,","arteam","2018-02-19T19:01:08Z","2018-02-19T19:18:50Z"
"","2305","Link to SSL docs in the HTTP/2 config section","###### Problem: The HTTP/2 section in the configuration manual only mentions adding `alpn-boot` library to the JVM bootpath for the connector to work with the ALPN protocol. The same can be achieved by using Google's Conscrypt as described in the core manual, which was modified in #2230.  ###### Solution: Interlink the two sections.  Please let me know if things can be worded/organized better.","closed","documentation,","GautamGupta","2018-03-13T17:51:15Z","2018-03-13T18:17:20Z"
"","2331","Fix javadoc for ViewBundle","###### Problem: The formatting of [ViewBundle's JavaDoc](http://www.dropwizard.io/1.3.1/dropwizard-views/apidocs/index.html) is broken.  The formatting breaks after the @see Link to the FreeMarker reference. The rest of the javadoc relating to Mustache is totally broken.  ###### Solution: @see may not be used for inline links, but will always start a new section at the end of the javadoc ([reference](https://docs.oracle.com/javase/6/docs/technotes/tools/windows/javadoc.html#@see)). @link in turn is used to link to other classes and thus is also no good substitute ([reference](https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#link)).   Inline links should thus be created with plain HTML ([stackoverflow](https://stackoverflow.com/questions/1082050/linking-to-an-external-url-in-javadoc)).  ###### Result: Javadoc is properly formatted.","closed","documentation,","PeterWippermann","2018-04-18T15:07:24Z","2018-06-22T21:50:56Z"
"","2279","Correctly handle the default context path when logging endpoints","###### Problem: The default context path is not an empty string, but slash. Currently, a slash is considered as a custom context path and printed out along with the endpoint with a slash. So, for a typical endpoint we output two slashes, which is not great.  ###### Solution: A fix is to consider a slash as a default context path and don't print it out.  ###### Result: Logged endpoints without a double slash for applications which uses a root context (i.e. default server configuration).  This is a follow-up for #2254","closed","improvement,","arteam","2018-02-20T14:15:19Z","2018-02-21T23:36:30Z"
"","2462","Fixed deprecated class usage (Apache StrSubstitutor)","###### Problem: The `StrSubstitutor` class is deprecated as of Apache commons-text 1.3. This will be removed in 2.0. See: https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/StrSubstitutor.html  **NOTE:** This is a breaking change.  ###### Solution: I have replaced the deprecated classes with their replacements as per the Apache documentation (with the exception of `StrLookup`; its documentation states to use `StringLookupFactory` but in our case, we needed to instead implement `StringLookup` which is the interface that replaced the abstract `StrLookup` class).  ###### Result: This eliminates compiler warnings related to using a deprecated class. It also will allow a smooth upgrade path for commons-text when the time comes.","closed","improvement,","isaki","2018-08-20T21:58:00Z","2018-08-23T22:55:44Z"
"","2404","Clean up tests in jersey.params","###### Problem: Tests in the jersey.params class are a bit verbose, contain duplicate code, and unnecessary exception modifiers  ###### Solution: - Remove unused exception modifier - Prefer `assertThatThrownBy` to `failBecauseExceptionWasNotThrown`  ###### Result: jersey.params tests are now more concise and written in a consistent style","closed","improvement,","nickbabcock","2018-06-21T12:31:18Z","2018-06-22T21:51:01Z"
"","2474","Updated documentation and comments that mentioned StrSubstitutor.","###### Problem: StrSubstitutor was recently replaced by StringSubstitutor in the code, but some mentions in the comments and documentation were not updated.  ###### Solution: Replaced mentions, including naming of library that the replacement came from.  ###### Result: Docs a little more up to date with the code.","closed","documentation,","Sounie","2018-08-28T20:53:26Z","2018-08-29T05:24:10Z"
"","2360","Add support for multiple session factories at the same time","###### Problem: Sometimes we need to use multiple Hibernate bundles on a resource endpoint at the same time. In some projects, this is a requirement and we can't refactor the code to use only one. We found that in the current code we are able to register multiple Hibernate bundles but we can only use one at a time (With the `@UnitOfWork` annotation). This PR is to add the ability to use more than one bundle in the same `@UnitOfWork` context.  ###### Solution: We changed the `@UnitOfWork` annotation to accept multiple values for the bundle name. Also, we changed the `UnitOfWorkAspect` to process all the selected bundles (instead of processing only one) in the same way as before. So when we perform any operation in the aspect we execute it in all the selected bundles.   This allows us to see all the selected bundles as a group in the way that if an error occurs and the transaction needs to be reverted they are going to be rollbacked in all the selected bundles, the same happens with the commit and clean operations.  ###### Result: The result is that we can select multiple bundles in the same `@UnitOfWork` by passing the values as follow:  `@UnitOfWork(value={'bundle1', 'bundle2'})` or just `@UnitOfWork({'bundle1', 'bundle2'})`  The change is totally retro-compatible and we can specify only one bundle by:  `@UnitOfWork('bundle')` or use the default one (if we only register one bundle) by not passing any value. `@UnitOfWork`  The rest of the system will remain exactly the same and also the use of Hibernate will not change at all.","closed","stale,","damagode","2018-05-18T16:41:44Z","2019-12-01T00:09:18Z"
"","2220","Add possibility to possibility to extend `DropwizardApacheConnector`","###### Problem: Some users want to have more fine-grained Jersey-Apache HTTP client integration. For example, more elaborate behavior during retrying of with the chunked encoding enabled.   ###### Solution: Make the `getEntity` method of `DropwizardApacheConnector` protected and provide a new method for creating an own implementation of `DropwizardApacheConnector` in `JerseyClientBuilder`.  ###### Result: Powerful users are more happy with Dropwizard and don't need to copy-past classes to customize them.","closed","improvement,","arteam","2017-11-24T17:27:29Z","2017-11-24T20:44:00Z"
"","2228","Update dependencies","###### Problem: Some dependencies have outdated versions.  ###### Solution: Upgrade them to the latest ones.  ###### Result: Dropwizard users are less affect by bugs in the dependencies.","closed","improvement,","arteam","2017-12-13T21:08:43Z","2017-12-20T13:21:46Z"
"","2219","Fixed typo. Lister -> Listener","###### Problem: Slight typo in private method name  ###### Solution: Fixed the typo  ###### Result: Not much. I just stumbled upon that and thought I'd fix it ;)","closed","bug,","GuiSim","2017-11-24T12:24:20Z","2017-11-24T19:38:33Z"
"","2266","Upgrade handling an unknown value in FuzzyEnumModule","###### Problem: Since Jackson 2.9, the `mappingException` method has been deprecated in favour of more specific methods  ###### Solution: Use the `weirdStringException` method for our case when we can't map a string value to a an enum value.  ###### Result: No compilation warnings and easier migration to newer Jackson versions.","closed","bug,","arteam","2018-02-09T19:18:30Z","2018-02-09T20:07:25Z"
"","2521","Enable validator injection by default #1","###### Problem: See https://github.com/dropwizard/dropwizard/issues/2484  ###### Solution: This PR changes constructor in `Environment` to accept `ValidatorBundle` instead of `Validator` and register validator injection by default.  ###### Result:  - Validator Injection enabled by default.  - `InjectValidatorBundle` removed Closes https://github.com/dropwizard/dropwizard/issues/2484, https://github.com/dropwizard/dropwizard/pull/2522","closed","","alex-shpak","2018-10-05T13:00:53Z","2018-10-17T01:15:32Z"
"","2522","Enable validator injection by default #2","###### Problem: See https://github.com/dropwizard/dropwizard/issues/2484  ###### Solution: This PR add new constructor in `Environment` that accepts `ValidatorBundle` and register validator injection by default  ###### Result:  - Validator Injection enabled by default.  - `InjectValidatorBundle` removed Closes https://github.com/dropwizard/dropwizard/issues/2484, https://github.com/dropwizard/dropwizard/pull/2521","closed","improvement,","alex-shpak","2018-10-05T13:01:09Z","2018-10-17T01:15:09Z"
"","2512","Merge Bundle and ConfiguredBundle","###### Problem: Right now there are two types of bundles `Bundle` and `ConfiguredBundle` and it looks like former was added to maintain backward compatability. As of approaching `2.0.0` release I would like to propose to merge them and keep only `ConfiguredBundle`  There are few related discussions: https://github.com/dropwizard/dropwizard/issues/1701#issuecomment-399083210 and https://github.com/dropwizard/dropwizard/pull/1360  **Note that change is breaking to all existing bundles**  ###### Solution: In short terms: 1. `Bundle` interface is gone 2. `ConfiguredBundle` interface is renamed to `Bundle` 3. Related code adjusted  ###### Result: There will be only one bundle to extend from which will make bundles simpler, This will also fix bundle run ordering.  ##### TODO: - [ ] Update documentation","closed","","alex-shpak","2018-09-30T21:36:18Z","2018-10-03T20:26:37Z"
"","2514","Remove redundant ""the""","###### Problem: Redundant the  ###### Solution: Remove it  ###### Result:   Signed-off-by: Benny Zlotnik","closed","documentation,","bennyz","2018-10-02T15:15:31Z","2018-10-02T18:34:42Z"
"","2411","Fix for Issue 2408 (InvalidKeyException: Illegal key size)","###### Problem: Previous development that introduced BouncyCastle as an ""alternate"" provider for PKCS12 handling also introduced the need for an unlimited strength key provider.    ###### Solution: I've replaced the stronger keystore/truststore vairant with a weaker set, which should comply with Oracle key strength policy restrictions.  ###### Result: Unit tests should be able to run successfully in key strength-constrained environments.","closed","bug,","nheitz","2018-06-25T14:30:39Z","2018-06-25T17:18:50Z"
"","2428","Seperate readonly session","###### Problem: Our company uses dropwizard with hibernate, but our production database is actually a cluster with a write master and read replicas. We want our dropwizard app to be able to connect to either the master or the replicas on a per-request basis depending on the endpoint.  Someone from our company previously opened #2248 which was basically a version of the internal fork of dropwizard hibernate we maintain, and works by decoupling the DAO from a specific session factory.  After some changes we've made internally, we realized the problem with that approach is that it breaks an existing workflow that allows you to have multiple datasources in your app for totally different databases, and have different DAOs connect to those.   ###### Solution: This is a second attempt to solve the problem stated above with a different approach. Instead of decoupling the DAO from the session factory, we replace the session factory provided to DAOs with a Dropwizard class that can hold two different connections, one to a write master and one to a read replica. That class also has a `ThreadLocal` that is set based on the `readOnly` property on the `UnitOfWork`, and if it is true, returns the reader connection.   This is all configured at the datasource configuration level, where `PooledDataSourceFactory` now has an optional parameter for a read only URL. If that property is specified, two managed data sources will be created instead of one, and the second will be connected to the read URL.  ###### Result: For projects using dropwizard-hibernate, you can now specify a `readOnlyUrl` property on your database configuration, and add `readOnly=true` to the `UnitOfWork` annotations on your endpoints to have those endpoints hit a read replica connection you specify.   If you do not specify a `readOnlyUrl`, it will only make one connection and use that regardless of the `readOnly` setting (as it does currently). So there should be no performance or resource overhead added if you do not use this feature.  Unfortunately, this is a breaking change, because the signature of `AbstractDAO` has changed to take in a different class. The migration should be pretty easy for most projects, unless they are manually doing something with the hibernate session factory that used to get passed in there. I could not think of a way to accomplish this change without changing the AbstractDAO.  Other changes:  Since I changed the base database configuration that is shared by hibernate, liquibase, and JDBI, I also made some minor changes to the latter two integrations.  *Liquibase:* No real change, but always uses the write connection and never a read one you specify.  *JDBI and JDBI3:* Added a `buildReadOnly` method to both factory classes that will build a instance using the `readOnlyUrl` if it exists.","closed","stale,","scottaj","2018-07-10T23:32:13Z","2021-03-23T22:43:06Z"
"","2341","Checkout all freemarker templates with lf line endings","###### Problem: On Windows machines with git crlf auto convert turned on, `rendersViewsWithAbsoluteTemplatePaths` will fail as `example.ftlh` is committed with lf line endings but will be checked out with crlf endings. Our Windows CI (appveyor) doesn't suffer from this issue as this git feature is turned off.  ###### Solution: Set all extensions that we use for freemarker templates to explicitly keep the line ending as lf.  ###### Result: Can run this test on Windows.","closed","improvement,","nickbabcock","2018-05-02T12:27:43Z","2018-06-22T21:50:57Z"
"","2405","Overhaul https logging of supported protocols and cipher suites","###### Problem: On application startup for an https service we'll see something like:  ``` INFO  [...] ....HttpsConnectorFactory: Supported protocols: [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2] ```  While not technically wrong, displaying the protocols that *could* be enabled is misleading as it makes one believe that Dropwizard employs extremely unsafe defaults.  In fact, the logging of configuration values for included / excluded, protocols / cipher suites also doesn't fit with the rest of Dropwizard (ie, we don't log configuration values for other classes)  ###### Solution: Log only the protocols and cipher suites that Jetty will expose. And log the protocols and cipher suites that Jetty will reject (though it could expose them if configured to do so).  This will make a clean break from the previous https configuration logging by adopting Jetty's logic for determining what protocols and cipher suites are included vs excluded (code comments contain link to Jetty's implementation)  ###### Result: Dropwizard https apps will print the following by default:  ``` INFO HttpsConnectorFactory: Enabled protocols: [TLSv1, TLSv1.1, TLSv1.2] INFO HttpsConnectorFactory: Disabled protocols: [SSLv2Hello, SSLv3] ```  And if someone excludes TLSv1 in their config, it will move from enabled to disabled  Side note, even though Jetty will expose TLSv1 and TLSv1.1, the cipher suites compatible with them eliminate 99% of clients so TLSv1.2 is seemingly the only available protocol (a follow-up discussion that I have planned)","closed","feature,","nickbabcock","2018-06-22T22:17:27Z","2018-06-23T11:14:03Z"
"","2293","Add configuration option to EventJsonLayoutBaseFactory to flatten MDC","###### Problem: My logging needs are to have the MDC in the root JSON object, not nested under the key `mdc`.   ###### Solution: A configuration option (defaulting to false) that allows the user the flatten MDC into the root object.","closed","improvement,","toadzky","2018-03-06T01:30:47Z","2018-03-06T15:10:42Z"
"","2316","Remove expected exceptions from tests","###### Problem: Modern testing libraries seems to favour an approach with explicit testing for errors where tested code is wrapped in a lambda expression, because it provides flexibility in verifying the cause of the error. For example, JUnit5 doesn't support it anymore the `expected` attribute in the `Test` annotation and the `ExpectedException` rule.  ###### Solution: Replace them with AssertJ's `assertThrown`.   ###### Result:  If we ever switch to JUnit5 for testing, migration would be easier.","closed","improvement,","arteam","2018-03-24T16:47:20Z","2018-06-22T21:50:54Z"
"","2310","Remove metrics-ganglia completely","###### Problem: metrics-ganglia was removed in #2239, but it is still referenced from BOM and documentation.  ###### Solution: Remove metrics-ganglia completely.","closed","documentation,","ghost","2018-03-16T19:46:16Z","2018-06-22T21:50:54Z"
"","2240","Upgrade to Metrics 4.0.2","###### Problem: Metrics 3.2.* is now not actively developed, only bugfixes are ported. It would be nice to depend on an actively developed version of Metrics.  ###### Solution: Upgrade Metrics to 4.0.2  ###### Result: Dropwizard users can use a Metrics version which targets JDK8 and 9, polished internally and actively developed. A potential upgrade to Metrics 5.x will be easier.","closed","improvement,","arteam","2018-01-08T19:46:32Z","2018-01-09T10:41:02Z"
"","2317","Add TLS socket logging appender","###### Problem: Many organizations mandate using of SSL/TLS for communications between applications to make sure that no sensitive data is sent over the wire in plain text. Currently, Dropwizard supports sending logs only via plain TCP.  ###### Solution: Add support for sending logs to a server that requires a secure means of communication via SSL/TLS. This change adds a new logging factory `TlsSocketAppenderFactory` which produces a new socket factory for creating secure client SSL/TLS sockets.  * The default configuration allows to communicate with a server with a certificate signed by a CA. In that case the administrator only need to change the port and the type of the appender.  ```yaml appenders:   - type: tls     host: ${tls.public_server_host}     port: ${tls.public_server_port} ```  * If the server is deployed in a internal network with a self-signed certificate, the factory allows to specify a path to a trust store with the server certificate.  ```yaml appenders:   - type: tls     host: ${tls.server_host}     port: ${tls.server_port}     trustStorePath: ${tls.trust_store.path}     trustStorePassword: ${tls.trust_store.pass} ```  * If the server requires the client to authenticate itself, the factory allows to specify a path to a key store with a client certificate that will be sent to the server during negotiation.  ```yaml appenders:   - type: tls     host: ${tls.server_host}     port: ${tls.server_port}     keyStorePath: ${tls.client_key_store.path}     keyStorePassword: ${tls.client_key_store.pass} ```  * The factory allows to configure allowed cipher suites and SSL/TLS protocols.  ###### Result: Dropwizard users should be able to send logs to log servers with enabled SSL/TLS.","closed","feature,","arteam","2018-03-26T12:45:04Z","2018-06-22T21:50:54Z"
"","2325","Upgrade Liquibase from 3.5.5 to 3.6.0, to be compatible with Jdk10.","###### Problem: Liquibase 3.5.5 cannot run on Jdk10, due to its JDK version check failure. The issue was fixed in 3.6.0.   ###### Solution: Bump up version of Liquibase from 3.5.5 to newest 3.6.0.   ###### Result: Dropwizard could run on Jdk10.","closed","improvement,","xiaodong-xie","2018-04-06T20:23:13Z","2018-06-22T21:50:55Z"
"","2501","Support configuration of exception details with JSON logging","###### Problem: JSON logging is missing some features that standard logging supplies due to the lack of a format override.  ###### Solution: Support configuration of exception cause placement, depth and package filtering with JSON logging.  See also #2488 and #2489","closed","improvement,","mattnelson","2018-09-22T01:00:03Z","2018-09-24T14:20:59Z"
"","2506","Convert to lazy evaluation for json event creation","###### Problem: json event creation calls into the I*Event objects to get the value before it is known if the value should be included in the log message.  ###### Solution: * Convert to lazy evaluation for json event creation * Initialize maps to the size of the includes list.  ###### Result: json log message creation should be more performant by delaying method invocations until necessary.","closed","improvement,","mattnelson","2018-09-25T21:59:09Z","2018-09-27T19:50:09Z"
"","2230","Add an example of using Dropwizard with Conscrypt","###### Problem: Jetty 9.4.8 supports native SSL via [Conscrypt](https://github.com/google/conscrypt), but it's not clear how to use it in Dropwizard.  ###### Solution: Add an integration test and upgrade the SSL documentation.  ###### Result: Dropwizard users can see how they can take advantage of native SSL.","closed","improvement,","arteam","2017-12-13T23:46:25Z","2018-03-13T17:51:36Z"
"","2315","Switch the build to run on JDK 10 from JDK 9","###### Problem: JDK 9 has been deprecated in favour of JDK 10.  ###### Solution: Switch the build to run on JDK 10. Unfortunately, Travis doesn't support Oracle JDK 10 yet, but we can download OpenJDK 10.  ###### Result: Test Dropwizard on the latest JDK release.","closed","improvement,","arteam","2018-03-24T16:39:53Z","2018-06-22T21:50:54Z"
"","2243","Add 'dropwizard-jdbi3' module","###### Problem: jDBI3 as been released for a couple of months and with the recent update to Metrics 4.X Dropwizard can now use it without losing any of the features from jDBI2. This should of course not be a forced upgrade and allow users to decide which jDBI version they wish to use in their project. jDBI now also supports most of the custom mappers that were in `dropwizard-jdbi` out of the box or in a separate module, removing some code from Dropwizard.  ###### Solution: Create a `dropwizard-jdbi3` module alongside the existing `dropwizard-jdbi` module.  ###### Result: Added a basic implementation of `dropwizard-jdbi3`, without any of the previous mappers or documentation.  TODO:  - [x] Add documentation (how should this be approached? a new page for the module? have documentation for both modules in the current page?) - [x] Check if any existing mappers need to be implemented for jDBI3 (jDBI has a module for Guava which seems to cover every mapper Dropwizard had, Joda time is effectively deprecated, we might need the OptionalInt/Long/Double/etc) - [x] Add unit tests for `JdbiFactory`","closed","feature,","FredDeschenes","2018-01-16T18:46:15Z","2018-01-19T16:09:27Z"
"","2451","Upgrade JDBI3 to 3.4.0","###### Problem: JDBI3 3.2.1 has a few bugs/issues that have been fixed in later versions.  ###### Solution: Updated dependencies to depend on 3.4.0.  ###### Result: Dropwizard will have the latest and greatest JDBI3.","closed","improvement,","isaki","2018-08-02T22:09:45Z","2018-08-17T19:36:28Z"
"","2491","Rework resource config test for resilient CI","###### Problem: It is not uncommon for a DropwizardResourceConfigTest.java test to fail on Appveyor with a complaint about ""Address already in use: bind""  ###### Solution: - Only teardown the jersey test after the test has finished instead of immediately after startup. This would avoid a race condition that may exist in the underlying test container - Switch to `AbstractJerseyTest` instead of plain `JerseyTest` for conformity. Even though `DropwizardResourceConfig.forTesting` will have the port sent to the next available, so to will `AbstractJerseyTest` (which is used in other tests), so this is just another measure to ensure the next available port is used. Side benefit of this, is we get to remove `BootstrapLogging` as `AbstractJerseyTest` already incorporates that.  ###### Result: - Appveyor passed on the first time prepping this PR.","closed","improvement,","nickbabcock","2018-09-15T16:59:10Z","2018-09-23T19:28:28Z"
"","2349","Fix javadoc errors","###### Problem: Intellij found some issues with our javadocs:  - Improper escaping of annotations - Broken `@see` reference.  ###### Solution: Fix the issues. The javadoc annotation issue was created with #2331, so this should be a once-and-for-all fix for that üòâ   ###### Result: Removed those javadoc warnings and those pages are properly displayed when I generate the api docs with maven site. And intellij no longer gives the warnings.","closed","documentation,","nickbabcock","2018-05-08T21:48:51Z","2018-06-22T21:50:58Z"
"","2258","Fix Graphite reporter documentation","###### Problem: Incorrect default value for port was used, ""transport"" was missing when comparing with the actual [configuration class](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-metrics-graphite/src/main/java/io/dropwizard/metrics/graphite/GraphiteReporterFactory.java).  ###### Solution: Changed default value for port, added ""transport""  ###### Result: Doc now displays the correct configuration options for the Graphite reporter.","closed","documentation,","FredDeschenes","2018-02-02T19:06:24Z","2018-03-05T15:15:11Z"
"","2337","Skip an OWASP dependency check in the dev profile","###### Problem: In the dev profile we want to build and install artifacts as fast as possible, and an OWASP check is quite slow.  ###### Solution: Disable the dependency-check plugin in the dev profile.  ###### Result: Faster builds during development","closed","improvement,","arteam","2018-05-01T20:23:23Z","2018-06-22T21:50:56Z"
"","2509","Add support for pathQuery json access log attribute","###### Problem: Implementation from #2497   > The standard request access logs default[1] to request URL. The JSON access logs introduced in #2232 default[3] to request URI. While it could be argued that a different output format doesn't have to remain passive to the previous layout. It did take a bit to trace down the issue as I assumed switching the format would produce logs with the same composite parts. What this change between uri/url intentional?  ###### Design:  Been thinking about this quite a bit more trying to reason about the differences between uri/url. It isn't very clear from the [spec](https://tools.ietf.org/html/rfc3986#section-3) if there is a canonical name for the path+query part. The current dropwizard namings seem misleading according to spec, not sure if it was intended to align or if it carried over the logback naming conventions. [Logback](https://github.com/qos-ch/logback/blob/v_1.2.3/logback-access/src/main/java/ch/qos/logback/access/spi/AccessEvent.java#L147) appears to mostly align with [javax.servlet](https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getRequestURI--).  ```          foo://example.com:8042/over/there?name=ferret#nose          \_/   \______________/\_________/ \_________/ \__/           |           |            |            |        |        scheme     authority       path        query   fragment           |   _____________________|__          / \ /                        \          urn:example:animal:ferret:nose ```  p.s. sorry for the bikeshedding...  ###### Solution: Introduce `pathQuery` attribute that includes the path/query segments as defined in RFC3986. Left all the existing attributes unchanged for passivity reasons and the possibility of backpatching depending on projected 2.0 release date.  Will defer to the maintainers if any more drastic resolutions should be considered for 2.x up to and including: * Deprecate uri/url * Change default of uri to pathQuery * Rename uri to path * Rename params to query  ###### Result: JSON access logs can include the combined path/query in a single named parameter.","closed","improvement,","mattnelson","2018-09-27T20:12:11Z","2018-10-02T19:34:13Z"
"","2300","Make ignoreExceptionOnPreLoadon on PoolProperties configurable","###### Problem: If Dropwizard starts when the database is down, the application will shutdown. This is caused by org.apache.tomcat.jdbc.pool.ConnectionPool where there is an explicit check on ignoreExceptionOnPreLoadon property. If this is set to ""true"" Dropwizard will still be able to start without a database present.  ###### Solution: Make ignoreExceptionOnPreLoadon on PoolProperties configurable","closed","improvement,","oscarnalin","2018-03-09T09:22:14Z","2018-03-09T10:14:28Z"
"","2221","Don't shut down asynchronous executor in Jersey","###### Problem: If a user customized a Jersey client, Jersey creates a new copy of the instance. Jersey has a mechanism for detecting leaks, and Jetty will invoke the `dispose` method on the old client. Unfortunately, during a copy the executor is shared. Therefore, the user will not be able to perform async requests anymore.  ###### Solution: Remove the code for shutting down the executor from `DropwizardExecutorProvider`.  ###### Result: Users can use the Jersey client to perform async requests with customizing.  Fixes #2218.","closed","bug,","arteam","2017-11-24T17:46:07Z","2017-11-24T20:44:26Z"
"","2269","Upgrade Jackson to 2.9.4 in 1.2.* to address a CVE","###### Problem: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17485  According to the CVE, maliciously crafted JSON input can allow a remote code execution, if it's passed directly to the `readValue` method of `√íbjectMapper`. The blacklist of deserialized types is ignored if the Spring libraries are available in the classpath.  ###### Solution: Upgrade Jackson to 2.9.4 with a fix to the CVE.  ###### Result: Dropwizard doesn't use Spring, but some end users use Spring along with Dropwizard, so we should give them a simple way to protect their applications.","closed","security,","arteam","2018-02-09T22:02:31Z","2018-02-10T14:42:24Z"
"","2270","Upgrade Jackson to 2.8.11 in 1.1.* to address a CVE","###### Problem: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17485  According to the CVE, maliciously crafted JSON input can allow a remote code execution, if it's passed directly to the `readValue` method of `√íbjectMapper`. The blacklist of deserialized types is ignored if the Spring libraries are available in the classpath.  ###### Solution: Upgrade Jackson to 2.8.11  ###### Result: Dropwizard doesn't use Spring, but some end users use Spring along with Dropwizard, so we should give them a simple way to protect their applications.","closed","security,","arteam","2018-02-09T22:08:00Z","2018-02-10T17:19:31Z"
"","2273","Deprecate the native Hibernate criteria API in AbstractDAO","###### Problem: Hibernate has deprecated the native Criteria API and since Hibernate 5.2 it's advised to use the JPA Criteria API.   ###### Solution: To deprecate the `criteria` method in `AbstractDao` and advice to use `criteriaQuery` implemented in Dropwizard 1.2  ###### Result: Drowizard users are encouraged to use the new API, so have fewer issues when upgrading to newer Dropwizard/Hibernate versions.","closed","improvement,","arteam","2018-02-11T15:36:56Z","2018-02-11T16:31:31Z"
"","2443","Upgraded Hamcrest to 2.0.0.0 release","###### Problem: Hamcrest 1.3 is an old release that is not maintained anymore. It makes writing Java 7+ code that generates no warnings (e.g. SonarQube ones) not  easy.    ###### Solution: I propose migrating to Java-Hamcrest 2.0.0.0:  ```      org.hamcrest     java-hamcrest     2.0.0.0     test  ```  I have verified that all tests in Dropwizard's code base still pass after the upgrade.  ###### Result: Better support Java 7+ syntax","closed","blocked,","volphy","2018-07-24T20:57:12Z","2018-07-27T07:41:00Z"
"","2267","Remove usage of the deprecated Guava Files API","###### Problem: Guava's `Files` API has been deprecated in Guava 24.  ###### Solution: Use the standard java.nio.Files API for reading the content of a file.  ###### Result: No compilation warnings and an easier upgrade to newer Guava versions","closed","improvement,","arteam","2018-02-09T19:58:11Z","2018-02-09T20:11:57Z"
"","2257","Upgrade to Guava 24.0-jre","###### Problem: Guava 24.0-jre was recently released, and Dropwizard's 1.3.0 release candidates are using 23.5-jre still. There is no specific issue driving this, just a general keeping up to date sort of thing.  ###### Solution: I updated the Guava version in the dropwizard-bom  ###### Result: Guava will be up to date in the next minor version release of Dropwizard","closed","improvement,","ianferguson","2018-02-02T14:36:43Z","2018-02-02T15:23:36Z"
"","2275","Adding a sample Integrationtest using junit5 to reproduce issue #2274","###### Problem: Explained in issue #2274 ###### Solution: No Solution. ###### Result: I put my junit5 integration test but for some reason I can't get maven to pick up any tests.","closed","","edovale","2018-02-15T16:36:13Z","2018-07-27T13:33:01Z"
"","2399","Fix errorpone warnings","###### Problem: Errorprone warnings during builds are irksome.  ###### Solution: Fix the errors:  - Most of them in tests - The ones involving generic return types are suppressed (`TypeParameterUnusedInFormals`) as they are part of our public API and I don't think we're changing that now - Switched ConsoleReporterFactory.ConsoleStream enum from containing a non-immutable type (`PrintStream`) to a function returning that printstream (stdout or stderr) - [Use Guava's `Splitter` instead of `String.split`](https://github.com/google/error-prone/blob/fc16cc53b8a05cc410f1cea1fcdd98a3fcb9e614/docs/bugpattern/StringSplit.md) in the `ByteRange` and `AssetServlet` classes - errorpone detected that the futures were unused in the `JerseyClientIntegrationTest.java` test, so I collected them as `CompletableFutures` using jersey rx client (which is backwards incompatible in 2.27, but I can take care of that üëå ) -- and thus queried for successful completion.  ###### Result: No more errorprone warnings! No behavior should be changed.","closed","improvement,","nickbabcock","2018-06-18T21:52:03Z","2018-06-22T21:51:01Z"
"","2254","Add context path to logged endpoints","###### Problem: Endpoints logged out take into consideration jersey's URL pattern, but not the context path. ``` GET /endpointA POST /endpointA ``` Copy pasting this URL gives 404s if you have context-path  ###### Solution: Append context path if present to the end points along with jersey URL pattern  ###### Result: ``` GET /context-path/endpointA POST /context-path/endpointA ```","closed","improvement,","afrin216","2018-01-26T00:23:33Z","2018-02-20T14:15:45Z"
"","2466","Compiler Warning Cleanup","###### Problem: Eclipse logs over 300 compiler warnings.  ###### Solution: This branch was done in two commits. The first was addressing POM based warnings. The second, here is the commit message:  ```     This commit addresses the following compiler warnings:          - Unncessary @SuppressWarnings     - Unused imports     - Unused local variables     - Missing serialization long     - Parameterized type warnings     - Unchecked casts     - Raw type usage          This commit did not touch:          - @SuppressWarnings not understood by Eclipse     - Deprecated code     - Restricted code access ```  Note that all of these changes were made by hand. My personal auto-cleanup setup is too aggressive for DropWizard coding conventions and touched too much code (like marking nearly every parameter in a method declaration final). I experimented briefly with trying to set something up that was DropWizard specific and was unhappy with the results (it removed all of the unsupported `@SuppressWarnings` declarations even with the least aggressive setup). As such, by hand was the only way I could ensure the bare minimum was changed to meet my goal, which was to eliminate the easiest warnings to fix.  ###### Result: DropWizard now has a little over 150 warnings remaining. Some of these are from annotations that my barebones Eclipse did not understand (so may or may not be valid warnings). However, the ones referring to deprecated method and class usage and the restricted access to JRE internals will need to be addressed at some point.","closed","improvement,","isaki","2018-08-24T16:19:21Z","2018-08-24T20:06:15Z"
"","2381","Add additional syslog logging facilities","###### Problem: Dropwizard's syslog appender doesn't support all facility levels. [See wiki for possible values](https://en.wikipedia.org/wiki/Syslog#Facility). In addition, [Logback supports these additional values](https://github.com/qos-ch/logback/blob/4dd08e68321548cd85251ec389f5a832505e1268/logback-core/src/main/java/ch/qos/logback/core/net/SyslogAppenderBase.java#L125-L177), so there is no reason to not include them. There was some talk of the interaction with slf4j in #2173, but since Dropwizard's syslog appender only deals with logback, slf4j doesn't enter the picture.  ###### Solution: Add the missing facilities to the configuration. These facilities are then tested against logback's string-to-int syslog resolution function to ensure that we don't allow any faulty configuration options.  ###### Result: Closes #2173","closed","improvement,","nickbabcock","2018-06-09T13:59:27Z","2018-06-22T21:50:59Z"
"","2260","Add support for providing a custom layout during logging bootstrap","###### Problem: Dropwizard users have the ability to configure their application to use JSON as the logging format. Unfortunately, the default logging bootstrap mechanism which kicks off before Dropwizard logging configuration, uses the default logging layout. As a result, some internal logging messages (Jetty, Hibernate initialization) are produced in a not recognized format.  ###### Solution: This change add possibility to specify a layout factory during the bootstrap process. Users can override the bootstrap method of `Application` and provide an own layout format. For example,  ```java BootstrapLogging.bootstrap(Level.INFO, new EventJsonLayoutBaseFactory()); ```  ###### Result: As a result, the all applications logs will produced in the JSON format. Resolves #2250","closed","bug,","arteam","2018-02-08T12:32:41Z","2018-10-12T01:45:26Z"
"","2288","Add support for PATCH request to Jersey test client","###### Problem: Dropwizard supports PATCH method via a custom annotation io.dropwizard.jersey.PATCH. The io.dropwizard.client.io.dropwizard.client.JerseyClientBuilder also allows to submit patch requests. However test client from `DropwizardAppRule`,  uses org.glassfish.jersey.client.JerseyClientBuilder which does not support `PATCH` requests by default. See issue #2287  ###### Solution: A simple workaround however is to set JerseyClientBuilder.property(HttpUrlConnectorProvider.SET_METHOD_WORKAROUND, true)  ###### Result: Jersey test client can now be used to submit patch requests via `client.target(...).request(...).method(""PATCH"", Entity.text(""Patch is working""), String.class)`","closed","improvement,","aharin","2018-03-01T13:27:55Z","2018-03-01T16:30:16Z"
"","2389","Overhaul logging resource endpoints","###### Problem: Dropwizard logs resource endpoints on startup like so:  ```     GET     / (io.dropwizard.jersey.dummy.DummyResource)     GET     /another (io.dropwizard.jersey.DropwizardResourceConfigTest.ImplementingResource) ```  It's very nice, but the current implementation only caters to resources registered directly through `DropwizardResourceConfig` and may fail to log endpoints that have been registered through a DI tool or some other mechanism. See #2244  ###### Solution: Use the jersey application event hooks so that after jersey has finished initializing the application we can query jersey's (more accurate) state than our own. The result is an implementation that is more accurate and simple (imo).  This does require us to start a jersey instance so that it has a chance to collect all the information, which did cause some modifications to the tests (but not much!). This is technically a breaking change for those dropwizard users who have unit tests using `DropwizardResourceConfig::getEndpointsInfo`, as they'll now see no endpoints logged until jersey is started. I estimate the number of users impacted to be minimal to nil.  I also added an endpoint logging test that asserts the effects of `urlPattern`, as I noticed that is missing in the current implementation.  As consequence of querying jersey's state, we see more endpoints available. Jersey exposes an `OPTIONS` endpoint for all registered resources, which I have decided to filter out to maintain compatibility. If desired, I can include a parameter to log these as well.  `forTesting` in `DropwizardResourceConfig` is now defunct. There may, at one time, been a use for it. But I'm not sure why logging of endpoints would be disabled for tests. Additionally, the comment ""create a subclass to pin it to Throwable"" refers to a bygone era.  Lastly, for sub resource locators where the response type is not a resource, the log line has been improve from this  ```     UNKNOWN /obj/{it} (java.lang.Object)     UNKNOWN /customers/{id}/address (java.lang.String) ```  to  ```     UNKNOWN /obj/{it} (io.dropwizard.jersey.DropwizardResourceConfigTest.WrapperResource)     UNKNOWN /customers/{id}/address (io.dropwizard.jersey.DropwizardResourceConfigTest.Customer) ```  Instead of printing the response type's class, it prints the handling class type (imo, much better)  ###### Result: Closes #2244","closed","improvement,","nickbabcock","2018-06-13T02:38:22Z","2018-06-22T21:51:00Z"
"","2430","Fix incorrect reading of somaxconn for tcp backlog on linux","###### Problem: Dropwizard drops connections during a burst of short lived connections, as the accept queue is set to (most commonly) 1 or 2 due to `Files.readAllBytes` unable to work with pseudo files like somaxconn  ###### Solution: [Adopt Netty's implementation](https://github.com/netty/netty/blob/77ec8397927e3ceb9b9a447a74e718f625ed9976/common/src/main/java/io/netty/util/NetUtil.java#L261-L269)  ###### Result: Test passed and dropwizard should be more burst resistant. Closes #2429  Dropwizard users currently afflicted by this bug, can override this default behavior by specifying an `acceptQueueSize` in their configuration.","closed","bug,","nickbabcock","2018-07-12T13:09:59Z","2018-07-13T07:36:31Z"
"","2299","Allow to use some custom security provider in HTTP client","###### Problem: Dropwizard allows to configure JCE provider for server side, passing `jceProvider` property to Jetty. This allows to use some non-standard provider, like Conscrypt. But there is no such setting on client side.  ###### Solution: Add new field `provider` to `TlsConfiguration` and pass it to Apache HTTP client builder.","closed","improvement,","mgtriffid","2018-03-08T16:30:31Z","2018-03-09T07:38:27Z"
"","2256","Doc fix: h2 conscrypt pom update","###### Problem: Docs needs a little fixin' up when mentioning HTTP2 support and conscrypt.  ###### Solution: Updated docs. Don't need to specify jetty version as it in brought in with our bom. Also one doesn't want it as only a test dependency üòâ","closed","documentation,","nickbabcock","2018-02-02T14:29:03Z","2018-02-02T15:23:56Z"
"","2338","Add possibility to disable logging bootstrap for ResourceTestRule","###### Problem: Currently, users who don't have Logback in the classpath can't use `ResourceTestRule`, because it automatically tries to configure logging with Logback. We should provide a configuration parameter which allows users to disable it.  ###### Solution: Add a configuration parameter `bootstrapLogging` to `Resource.Builder`  ###### Result: Fixes #2333","closed","bug,","arteam","2018-05-01T20:28:43Z","2018-06-22T21:50:56Z"
"","2323","Add owasp dependency check.","###### Problem: Currently, the dropwizard project does not run a check for security vulnerabilities during its build process. This results in dependencies being included that contain security risks (e.g. Jackson versions below 2.9.5)  ###### Solution: I have added the dependency-check plugin to the maven build process (https://jeremylong.github.io/DependencyCheck/) so CVEs can be identified.  ###### Result:","closed","security,","suryatej16","2018-04-05T23:52:07Z","2018-06-22T21:50:55Z"
"","2222","Return a 400 when a request body can't be decompressed","###### Problem: Currently, making a request with `content-encoding` set to `gzip` (or `deflate`) with content that's either not gziped, corrupt, or truncated results in a 500 because the exception from `GZipInputStream` is never handled.  ###### Solution: Gzip request decompression is handled by `BiDiGzipHandler`. This change decorates the GZipInputStream it creates so that `ZipException` and `EORException` are handled, and the exception is propagated as a Jersey BadMessageException. Similar changes were made to handle deflate.  ###### Result: Making a request like  ``` echo plaintext | curl -X POST -d @- http://localhost:8080/endpoint ``` will return a 400 rather than a 500. Additionally, `ZipExceptions` won't be logged as unhandled exceptions.","closed","bug,","ehrmann","2017-11-29T02:29:17Z","2017-11-29T20:03:16Z"
"","2217","jersey-client: Add possibility to mark an HTTP entity as repeatable","###### Problem: Currently, `DropwizardApacheConnector` when configured with the chuncked encoding always assumes that the source entity from the Jersey client is not repeatable. That's true in the default case when we don't know from where the source of the input. Unfortunately, the Apache HTTP client can't retry unrepeatable entities, which poses challenges in environments where retries are common (e.g. microservices). The only alternative is to disable the chunked encoding which is not always desirable, because it requires additional buffering of the entity in memory.  ###### Solution: The solution of this issue to add a parameter which allows to configure the connector to use chunked encoding, but mark them as repeatable. In this case the caller is responsible to make sure that entites are coming from a retriable source (e.g memory array, file on disk).  ###### Result: As a result users can use the Jersey client for sending POST requests with retries and chunked encoding.","closed","improvement,","arteam","2017-11-22T18:38:06Z","2017-11-27T08:05:37Z"
"","2277","Make sure test Jersey test client uses Dropwizard's ObjectMapper","###### Problem: Currently the Jersey client produced by `DropwizardAppRule` uses a simple Jackson's ObjectMapper. This could be an issue when a serialized/deserialized entity requires additional modules (Java 8 `Optional`, `DateTime`, `ParamaterNames` module etc...), which are added automatically in Dropwizard's `√íbjectMapper` and used for the server side.  ###### Solution: Produce a client with a Jackson binder which uses the `ObjectMapper` instance from the test environment.  ###### Result: Less surprises for users and discrepancies between the client and server JSON serialization.","closed","bug,","arteam","2018-02-19T12:28:38Z","2018-02-19T13:09:07Z"
"","2253","Add a new Maven profile to support Jetty ALPN on jdk8u161","###### Problem: Currently the HTTP2 tests fail on Travis CI, because they use jdk-8u161.  ###### Solution: Add a new profile which links to the corresponding Jetty ALPN library.  ###### Result: The HTTP2 test correctly run on Travis CI.","closed","improvement,","arteam","2018-01-25T18:23:48Z","2018-02-02T15:25:05Z"
"","2427","Allow constraint validators access to context types","###### Problem: Currently one can't use `@Context` injection in constraint validators (and other hooks in hibernate validator). (#2234)  ###### Solution: Everytime Jersey requests a new `ConfiguredValidator` we create a new one with the current context:  ```java final ValidatorContext context = factory.usingContext(); context.constraintValidatorFactory(resourceContext.getResource(InjectingConstraintValidatorFactory.class)); return new DropwizardConfiguredValidator(context.getValidator()); ```  And just like that, our constraint validator receive context injections!  Not so fast.  For every request, a validator will need to be newly instantiated with the request context. The issue is that Dropwizard already sends in a fully configured validator that can't be used across multiple requests simultaneously for context injection to work. This required changing the `Environment` and `JerseyClientBuilder` public APIs which I am loathe to do (but had to).  ###### Result: Can use `@Context` inside constraint validators  public APIs that have had their signature changed (breaking changes):  ``` JerseyClientBuilder::using(Validator) -> JerseyClientBuilder::using(ValidatorFactory) Environment::new(..., Validator, ...) -> Environment::new(..., ValidatorFactory, ...) Environment::setValidator(Validator) -> Environment::setValidatorFactory(ValidatorFactory) Resource::setValidator(Validator) -> Resource::setValidatorFactory(ValidatorFactory) ```  To help those who may not care about context injection and just want a validator, I have decided to keep `Environment::getValidator`. It returns a single instance of a validator that created by the validator factory in `Environment` constructor or when a new factory is passed to `Environment::setValidatorFactory`  Closes #2234","closed","","nickbabcock","2018-07-10T23:27:19Z","2018-08-17T22:42:51Z"
"","2409","Improve validation message for min/max duration","###### Problem: Currently max/min duration will give errors like:  ``` messageRate must be less than (or equal to, if in 'inclusive' mode) 1 MINUTES ```  From the user's point of view, they don't know if inclusive is true or not, so it can be a bit misleading  ###### Solution: Hibernate allows a bit of logic in the error templates!  ###### Result: The new error messages one will see:  if inclusive is true  ``` messageRate must be less than or equal to 1 MINUTES ```  if inclusive is false:  ``` messageRate must be less than 1 MINUTES ```","closed","improvement,","nickbabcock","2018-06-24T15:10:57Z","2018-06-24T16:03:24Z"
"","2475","#2459 Include all apache ConnectionPoolMetrics","###### Problem: Current metrics in JDBI and Hibernate modules include some of the available metrics in apache connection pool, It would be useful to have all available metrics, ###### Solution:  Add the missing metrics ###### Result: The metrics, when including dropwizard-db module, will now include created, borrowed, reconnected, released, releasedIdle, returned and removeAbandoned counts.   Closes #2459","closed","improvement,","leoconco","2018-08-28T22:47:28Z","2018-08-29T05:31:32Z"
"","2390","Add Custom JCE support for Client side TLS connections (keystore and truststore)","###### Problem: Client side TLS support in Dropwizard currently only supports custom providers equivalent to SunJSSE (secure socket implementations) but not for JCE pieces (eg keystore, key implementations).  The default SunJCE implementation implement weak password protection for PKCS12 keystores, and it might be preferable to upgrade to BouncyCastle in such situations.  ###### Solution: TlsConfiguration now supports specifying providers for keystore and truststore by named provider string.   ###### Result: This should have no impact on business as usual code execution, but if you use stronger keystores, you now have the option of using alternate providers.","closed","improvement,","nheitz","2018-06-13T20:44:16Z","2018-06-22T21:51:00Z"
"","2507","Update broken and old links in configuration.rst","###### Problem: Broken and outdated links in the documentation:   - The link to JavaDoc for ForwardedRequestCustomizer was broken (HTTP 404).  - The link to JavaDoc for java.net.Socket was outdated (Java 7, which is no longer supported by Dropwizard).  ###### Solution: Updated a couple of broken and outdated links.","closed","documentation,","minisu","2018-09-27T09:15:04Z","2018-09-27T13:30:00Z"
"","2344","improved self validation #2336","###### Problem: As stated in #2336 the SelfValidation system did not handle class hierarchies as one would expect.  ###### Solution: This pull request: - discoveres @SelfValidation annotated methods on superclasses - handles overriding these methods as expected - adds tests for these cases - extends the testing to test the logged errors and warnings in case of incorrectly used annotations","closed","improvement,","manuel-hegner","2018-05-03T12:48:49Z","2018-06-22T21:50:57Z"
"","2238","Add documentation for `@Priority` for polymorphic auth","###### Problem: Any custom `AuthFilter` needs to have the `@Priority` annotation set otherwise authorization will run before the auth filters and will use the default security context set by Jersey.  I was having issues with authorization always allowing my `@RolesAllowed` annotated methods to be called and my auth filter not running (was basing my code on #1632, which has a test case that worked perfectly fine).  Not sure if this is specific to polymorphic auth as I've never used `@RolesAllowed` with custom `AuthFilter`s before. Should we also add documentation about adding the annotation to all custom `AuthFilter`s (there doesn't seem to be anything about this at the moment)?  ###### Solution: Added documentation.  ###### Result: Clearer documentation.","closed","documentation,","FredDeschenes","2018-01-05T14:20:06Z","2018-01-07T19:45:34Z"
"","2382","UUID param to length check input","###### Problem: `UUID::fromString` does not length check the input to be 32 in length, which violates UUID RFC 4122 spec. Consequently,  This can be seen in the example where one UUID has a `0` appended  ```java assertThat(UUID.fromString(""067e6162-3b6f-4ae2-a171-2470b63dff000"")).isEqualTo(            UUID.fromString(""067e6162-3b6f-4ae2-a171-2470b63dff00"") ); ```  Fails with:  ``` Expected :067e6162-3b6f-4ae2-a171-2470b63dff00 Actual   :067e6162-3b6f-4ae2-a173-470b63dff000 ```  While `UUID::fromString` does not care about length when validating, it's clearly an issue as it shifts the internal representation.  ###### Solution: Some UUID implementations are lenient and allow absent dashes (thus making the total length 32), but since fromString requires dashes we don't need to worry about supporting a range of lengths and may only check against 32.  Backwards compatibility shouldn't be an issue as any other length would either result in an exception from `UUID::fromString` or a corrupted UUID that isn't equivalent with the input anyways.  ###### Result: Previously UUIDs that were too long are now rejected. Closes #2374","closed","bug,","nickbabcock","2018-06-10T13:52:12Z","2018-06-22T21:50:59Z"
"","2368","httpclient: Try to load keystore with the specified JCE provider","###### Problem: `DropwizardSSLConnectionSocketFactory` does not honor a custom JCE provider from the configuration for keystores.   ###### Solution: If the user configured the HTTP client to use a JCE provider, we should try to load the keystore with it, so the users can load handle complex keystore formats not support by the standard JCE providers or to take advantage of better performance characteristics of the custom provider. In case the new provider doesn't support the keystore format, we fallback to the default discovery algorithm.  ###### Result: Users don't to register a custom security provider statically for the whole application.","closed","","arteam","2018-05-24T21:15:23Z","2018-05-24T21:35:12Z"
"","2271","Strip the Content-Length header after decompressing HTTP requests","###### Problem: `BiDiGzipHandler` decompresses HTTP requests with compressed data, so for the handlers down the stack the content looks like plain-text data and they don't need to bother with decompressing in the application level logic. Unfortunately, the handler doesn't strip the original `Content-Length` header from requests, and requests return the content length of compressed content instead of uncompressed. This can create confusing situations for applications that check the length of requests for future processing. A classic example is a reverse proxy handler which parses a request, enriches it, and sends it to an origin server for processing. In this case, the proxy handler will send plain data to the origin server, but with a misleading `Content-Length` header and the origin will reject the request as malformed.  ###### Solution: A solution is to strip the `Content-Length` header from the request and override the `getContentLength` method of `HttpServletRequest` to specify it as an unknown. In this case the proxy handler will pass the request as chunked to the origin server (albeit without the `Transfer-Encoding` header), and it will be correctly handled. This seems to be a correct behaviour, because we don't know the length of decoded content beforehand.  ###### Result: Transparent handling of compressed HTTP requests in Dropwizard applications. Resolves #2268","closed","bug,","arteam","2018-02-10T11:51:38Z","2018-02-10T14:45:33Z"
"","2339","Fix deprecation usage of argparse4j","###### Problem: `ArgumentParsers.newArgumentParser` is deprecated.  ###### Solution: Replace it with the equivalent `ArgumentParsers.newFor`  ###### Result: Behaviorally the same üôÜ","closed","improvement,","nickbabcock","2018-05-02T03:25:00Z","2018-06-22T21:50:56Z"
"","2231","Remove the type target from the `@CacheControl` annotation","###### Problem: `@CacheControl` can be applied at the resource level, but actually handled only at the method level,  ###### Solution: Remove the type target from the `@CacheControl` annotation.  It doesn't seem useful to specify it at the resource level, because resources typically contain methods with different caching behavior.  ###### Result: Less confusion for Dropwizard users who use `@CacheControl` Fixes #2226","closed","improvement,","arteam","2017-12-14T13:49:41Z","2017-12-15T18:16:13Z"
"","2340","Http2 ALPN and bootclasspath update","###### Problem: - JDK 171 & 172 have missing alpn values, so add them to the pom - I have a machine that contains special characters in `${user.home}`, so quotes are necessary to reference the ALPN jar correctly. @arteam I see that you reverted this behavior in 3b8c255d929e and I just want to make sure I'm not missing something.  ###### Result: I can run http2 tests on this machine again üòÑ","closed","improvement,","nickbabcock","2018-05-02T12:13:36Z","2018-06-22T21:50:56Z"
"","2397","Move dependency check to maven verify","###### Problem:  A significant amount of time spent in `mvn test` is in checking the dependency for vulnerabilities. Running `mvn test` takes upwards of 13 mins for me when the vulnerability database needs to be updated. While extremely important to check for vulnerabilities, it is bizarre to have it as part of the `validate` stage in maven, which is the very first stage executed for ""validating the project is correct and all necessary information is available"". Additionally running mvn test on a submodule fails due to the vuln check (I think because it searches for the suppressed warnings, but I'm not 100% sure)  I know we have the dev profile, which will skip the dependency check, but I'm still working on some test concurrency issues brought on by the dev profile.  ###### Solution: - Move the vulnerability check to the `verify` phase (which is the default) - Have travis run verify, so we still get the vulnerability check on CI  ###### Result: - `mvn test` drops down to 3mins - `mvn test` can work on individual submodules.","closed","improvement,","nickbabcock","2018-06-17T01:57:42Z","2018-06-22T21:51:00Z"
"","2464","Use default maven repo on travis","###### Problem:  Travis CI provides a default `~/.m2/settings.xml` which is using repository.apache.org which can become slow.  ###### Solution:  Remove default settings and use the Maven default of repo.maven.apache.org.  GRPC made a similar change in https://github.com/grpc/grpc-java/pull/4782  ###### Result:  Builds are faster when it needs to fetch resources from Maven.","closed","improvement,","jplock","2018-08-22T23:03:00Z","2018-08-27T21:04:53Z"
"","2414","Document that the Timed and Metered can't be used at the same time.","###### Problem:  The documentation didn't tell me that I can't annotate a method with `@Timed` and `@Meterd` at the same time.  ###### Solution:  I added an Important box that says that `@Timed` includes `@Metered` and that an `IllegalArgumentException` is thrown when both are used at the same time.   ###### Result:  It is easier for a user to understand that `@Timed` and `@Meterd` can't be used at the same time.","closed","documentation,","tsundberg","2018-06-27T06:36:19Z","2018-06-28T10:43:41Z"
"","2367","Add JUnit 5 Example to Testing Clients","###### Problem:  Testing client implementations in JUnit 5 looks a lot different, and I had to dig through the source code to get it to work.   ###### Solution:  This PR adds documentation for testing client implementations with JUnit 5 so that it is easier to achieve.  ###### Result:  New documentation example.","closed","documentation,","RohanNagar","2018-05-24T19:25:55Z","2018-06-22T21:50:59Z"
"","2394","Upgrade to JDBI 3.3.0","###### Problem:  JDBI 3.2.1 has an issue when using `@BindMethods` with generic return types.  ###### Solution:  JDBI 3.3.0 has a fix for this issue. Hence, my request to upgrade.  ###### Result:  DropWizard will depend on a fixed version of JDBI3.","closed","","isaki","2018-06-14T15:12:56Z","2018-06-14T17:21:55Z"
"","2469","ConnectorProvider Not Set Silently","###### Problem:  I wanted to build two different clients with the same builder, so I had some code sort of like this:  ``` final private JerseyClientConfiguration clientConfigA = new JerseyClientConfiguration(); final private JerseyClientConfiguration clientConfigB = new JerseyClientConfiguration(); ... JerseyClientBuilder jerseyClientBuilder = new JerseyClientBuilder(environment); Client a = jerseyClientBuilder.using(clientConfigA).build(""client-A"")); Client b = jerseyClientBuilder.using(clientConfigB).build(""client-B"")); ```  I ran into these problems: 1. Only metrics for ""client-A"" were being reported 2. The connection timeout I set for client-A was the same for client-B. This especially confused me because client B's config had a different timeout value.    I realized when `connectorProvider` is not explicitly set in the builder, then it gets silently set on the first build. From then on that builder will use the same `connectorProvider`.   Current solutions to this are: - instantiating a new builder for every client - creating a unique `connectorProvider` for each client.   However, I thought people might want to reuse the same builder without explicitly setting the `connectorProvider`. I'm not sure if this is a worthy change, as the current process may be the desired state. I think you all will know better.    ###### Solution:  When `connectorProvider` is null in the `JerseyClientBuilder`, build will not auto set it. Instead, a new `connectorProvider` will be instantiated on each build. If users want to use the same `connectorProvider` across builds, they only need to explicitly set it once.","closed","improvement,","ipropper","2018-08-27T18:58:05Z","2018-08-27T21:04:38Z"
"","2248","Support dynamic current session to allow separate read and write connections","###### Problem:  I am working on a project which utilizes Dropwizard Hibernate. My current mission is to distribute database operations across two endpoints, one for reads and another for writes. DW Hibernate is great because it provides the UnitOfWork framework which allows for multiple bundles to be configured and for those bundles to be specified on an individual basis by using `UnitOfWork#value`. This accomplishes exactly what I need - I will setup a bundle for reading, a bundle for writing, then on my read-only resources throw a `@UnitOfWork(‚Äúread-only‚Äù)` and then the resources that require writing `@UnitOfWork(‚Äúwrite‚Äù)`.  Currently, UnitOfWorkAspect will determine the appropriate session factory based on the current UnitOfWork (see [UnitOfWork:62](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/UnitOfWorkAspect.java#L62)), which is great. The problem is, the session factory and session are then set privately inside of the aspect and made unavailable to other components. This is particularly a problem inside of [AbstractDAO](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/AbstractDAO.java), where the session factory is required as an instance parameter. This presents limitations in client code outside of Dropwizard, such as in event listeners that perform database operations.  In summary, I propose two things inside of this PR: 1. The context determined inside of UnitOfWorkAspect be made publicly available to other Dropwizard and non-Dropwizard client components 2. AbstractDAO be modified (a breaking change unfortunately) to not require a SessionFactory for construction, and instead use the UnitOfWork context  ###### Solution:  The primary modification includes adding a UnitOfWorkContext class with ThreadLocals to store the context that is determined inside of `UnitOfWorkAspect#beforeStart`. This context is then used to determine the current session AbstractDAO, rather than the injected property that it previously depended on.  ###### Result:  The change to UnitOfWorkAspect alone is non-breaking. It simply makes internal context publicly available. The proposed change for AbstractDAO is, unfortunately, breaking. It will be a potentially tedious change but hopefully not complicated. Clients that are only using one bundle currently (I imagine this is the majority case otherwise this issue would have been hit) will have to update their app configuration, or wherever they instantiate their DAOs, to no longer provide a session factory. In my project we have over 100 DAOs and this was a smooth transition that took about 20 minutes.","closed","improvement,","sam-berry","2018-01-19T15:33:49Z","2018-07-26T16:17:57Z"
"","2350","Provide class that returns a 204 for Optional.empty()","###### Problem:  https://github.com/dropwizard/dropwizard/issues/1727 points out that returning a 204 for Optional.empty() is usually a more reasonable server response, but a dangerous change to default behavior. https://github.com/dropwizard/dropwizard/pull/1784 addressed the issue by showing how to override the default behavior. However, overriding the default behavior requires implementing a new class (i.e. EmptyOptionalNoContentExceptionMapper). It would be nice if users didn't have to implement this class every time they want to override the default behavior. Although, the implementation is really small, so I understand if this is rejected.  ###### Solution:  Uses the same solution presented in https://github.com/dropwizard/dropwizard/pull/1784, but includes the implementation in dropwizard-jersey  ###### Result:  An additional class in the public API","closed","improvement,","EthanLozano","2018-05-09T01:57:13Z","2018-06-22T21:50:58Z"
"","2456","Fix typo in Views doc","###### Problem:  Fixes #2454. There was a typo.  ###### Solution:  Fixed the typo.  ###### Result:  Typo-free docs!","closed","documentation,","RohanNagar","2018-08-14T23:00:58Z","2018-08-29T11:51:49Z"
"","2236","add console command","###### Problem:  Currently to start a Dropwizard application, you do: ``` java -jar server app.jar```, this in turn reads the config.yml and setups all the environment niceties.  There are cases I would like to not run the application in server mode, while still enjoy the config and environment bootstrapping.  ###### Solution:  Add a new command type: ```console```, so you can do: ```java -jar console myapp.jar```  ###### Result:  No changes in current behavior. Just a new command type.","closed","","javasoze","2017-12-27T19:07:03Z","2018-01-07T19:19:47Z"
"","2517","Release/1.2.x","###### Problem:   ###### Solution:   ###### Result:","closed","","mmadhaiyan","2018-10-03T16:59:51Z","2018-10-03T17:14:22Z"
"","2467","Minor documentation typo fixes.","###### Problem:   ###### Solution:   ###### Result:","closed","","Sounie","2018-08-26T13:21:47Z","2018-08-26T13:23:55Z"
"","2354","Release/1.3.x","###### Problem:   ###### Solution:   ###### Result:","closed","","awaisshibli","2018-05-10T15:12:19Z","2018-05-10T15:31:01Z"
"","2276","Split archetype example command to multiple lines","###### Problem:   ###### Solution:   ###### Result:","closed","documentation,","bdemers","2018-02-18T19:20:14Z","2018-02-18T21:14:00Z"
"","2192","Create PULL_REQUEST_TEMPLATE.md","###### Explanation About What Code Achieves:    - Adds a pull request template so code review are easier for maintainers  ###### Steps To Test:    - When you create a pull request this template will show up automatically  ###### TODOs:    - None","closed","","clickthisnick","2017-10-31T14:19:03Z","2017-11-22T14:53:09Z"
"","2541","Fix EofException spamming of logs","##### Problem:  This change is made to address https://github.com/dropwizard/dropwizard/issues/2482. When a client disconnects before the response is written, or the full response has already been written, an `EofException` is thrown. An exception mapper can't be used because this error arises when the response is attempting to be written. This causes a lot of `ERROR` logs which clutters logging.  ##### Solution:  The solution that has been implemented is to catch and ignore the `EofException` during the response write. The ideal solution would be to catch the `EofException` and accept configuration to log at different levels. This is a much more involved change and can be implemented if there is want for it. This implementation shouldn't preclude such an effort.  ##### Result:  No more `EofException` errors in logs","closed","bug,","shail","2018-11-08T18:11:47Z","2018-11-15T22:54:06Z"
"","2121","Hibernate - Allow unregistering session factories from the unit of work listener","### Summary  `UnitOfWorkApplicationListener` provides a `registerSessionFactory()` method but doesn't provide an `unregister()` method. Can that be added? If yes, I'm willing to submit a PR.  ### Use case  I created an HK2 factory for providing Hibernate session factory in a manner similar to how they are provided through the `HibernateBundle`. The difference is that by implementing this as an HK2 factory, I'm allowing HK2 to provide scoping and injection.  As part of providing the session factory, I register it through the `environment.healthChecks()` service and through the `UnitOfWorkApplicationListener`. This works fine, but as part of the `dispose()` implementation, I've to reverse that. The `environment.healthChecks()` provides an `unregister()` method but the `UnitOfWorkApplicationListener` doesn't, so I'm unable to cleanly dispose of the session factory.","closed","","amr","2017-08-02T18:39:31Z","2017-08-03T14:54:20Z"
"","2251","Enable auto escaping of strings in Freemarker templates","## Problem Output was not being auto escaped by Freemarker  ## Solution Freemarker output format was not set [as HTML] which meant that auto escaping was not enabled. With this change it is enabled by default.    This might affect users who are using formats other than HTML, but  there should be enough benefit of making this a default.  The current method for getting the output format setting through to the underlying freemarker library is not very pleasant.  Users relying on the existing behaviour may need to set individual freemarker values as `?unsafe`  ## Question I couldn't find security contact information - is that something you are planning on adding?","closed","improvement,","willp-bl","2018-01-22T10:21:58Z","2018-01-24T21:48:04Z"
"","2159","Could not resolve type id 'http' into a subtype of [simple type, class io.dropwizard.jetty.ConnectorFactory]: known type ids = [ConnectorFactory]","# I am using the gradle to build the Dropwizard Application, it works fine until I run it.  # My build.gradle is here:  ```groovy apply plugin: 'java' apply plugin: 'application'  project.ext {     title = 'DWSample'     baseName = 'DWSample'     mainClass = 'com.hjess.dwsample.MainApp'     version = '1.0.0' }  task copyData(type:Copy) {     from 'src/main/conf'     into 'build/libs' }  task release(type: Jar, dependsOn: 'copyData') {     manifest {         attributes 'Implementation-Title': project.ext.title,                 'Implementation-Version': project.ext.version,                 'Main-Class': project.ext.mainClass     }     baseName = project.ext.baseName + project.ext.version     from {         configurations.compile.collect {             it.isDirectory() ? it : zipTree(it)         }     }     with jar } repositories {     mavenCentral() } dependencies {     compile fileTree(dir: 'libs', include: ['*.jar'])     compile group: 'io.dropwizard', name: 'dropwizard-core', version: '1.1.4' } tasks.withType(JavaCompile) {     options.encoding = ""UTF-8"" } ```  # My yaml:  ``` server:   applicationConnectors:     - type: http       port: 8080 ```  # the release task can build a fatJar, then I run it, got an error:  ``` E:\DWSample\server\build\libs>java -jar DWSample1.0.0.jar server main.yaml main.yaml has an error:   * Failed to parse configuration at: server.applicationConnectors.[0]; Could not resolve type id 'http' into a subtype of [simple type, class io.dropwizard.jetty.ConnectorFactory]: known type ids = [ConnectorFactory]  at [Source: N/A; line: -1, column: -1] (through reference chain: com.hjess.dwsample.MainConf[""server""]->io.dropwizard.server.DefaultServerFactory[""applicationConnectors""]->java.util.ArrayList[0]) ```  # BTW, It works fine on Dropwizard 0.9.2 but got this error on v1.1.4","closed","","wejoy","2017-09-21T03:39:32Z","2018-09-02T19:04:35Z"
"","2529","We're using OpenJDK now","","closed","improvement,","jplock","2018-10-17T01:34:52Z","2018-10-17T06:14:40Z"
"","2473","Upgrade nullaway, jacoco, maven-checkstyle-plugin and dependency-check-maven","","closed","improvement,","jplock","2018-08-28T20:05:12Z","2018-08-28T21:02:16Z"
"","2471","Upgrade to the latest Maven Wrapper scripts","","closed","improvement,","jplock","2018-08-28T19:56:42Z","2018-08-28T21:04:03Z"
"","2330","Upgrade sphinx-maven-plugin","","closed","documentation,","joschi","2018-04-16T14:02:10Z","2018-06-22T21:50:56Z"
"","2223","y that?","","closed","","henryso","2017-12-01T21:10:28Z","2017-12-01T23:22:18Z"
"","2211","Fixed typo in Javadoc markup","","closed","documentation,","maffe","2017-11-15T11:54:03Z","2017-11-20T13:50:41Z"
"","2168","Dependency updates","","closed","","joschi","2017-10-05T12:50:43Z","2017-10-05T13:21:13Z"
"","2156","Upgrade Jetty to 9.4.7.v20170914","","closed","improvement,","tjcutajar","2017-09-19T14:27:14Z","2017-09-19T15:26:51Z"
"","2145","Documentation/manual/internal small fix: correct code snippet by removing Kotlin's val","","closed","documentation,","baronlior","2017-09-03T08:06:56Z","2017-09-03T12:01:22Z"
"","2123","Update release notes for 1.2.0","","closed","documentation,","jplock","2017-08-04T00:44:15Z","2017-08-12T00:07:58Z"
"","2100","Issue #2098: Add ""immediateFlush"" configuration for FileAppenderFactory","","closed","feature,","pavelkokush","2017-07-10T13:54:45Z","2017-11-03T19:56:32Z"
"","2073","Deep","","closed","","itsdeep","2017-06-07T21:03:53Z","2017-06-07T21:20:50Z"
"","2061","Release/1.1.x","","closed","","pkumarsh","2017-05-18T06:45:42Z","2017-05-18T07:17:45Z"
"","2039","Add JDBI support for Period data types","","closed","improvement,","jplock","2017-05-01T02:06:39Z","2017-05-03T11:31:45Z"
"","2021","Dependency updates","","closed","","joschi","2017-04-22T15:02:30Z","2017-04-27T12:38:58Z"
"","2010","use SizeAndTimeBasedRollingPolicy instead of deprecated SizeAndTimeBasedFNATP","","closed","improvement,","qinfchen","2017-04-13T18:02:34Z","2017-04-18T16:57:58Z"
"","2009","use SizeAndTimeBasedRollingPolicy instead of decrecated SizeAndTimeBasedFNATP","","closed","","qinfchen","2017-04-13T15:58:56Z","2017-04-13T17:48:41Z"
"","1958","Set the default shared health check registry","","closed","improvement,","jplock","2017-03-13T00:24:14Z","2017-03-13T12:05:27Z"
"","1949","Add support for Instant parameters","","closed","feature,","jplock","2017-03-05T22:17:11Z","2017-03-06T12:58:48Z"
"","1929","Upgrade to http client 4.5.3","","closed","improvement,","tjcutajar","2017-02-13T23:39:29Z","2017-02-14T01:01:25Z"
"","1928","Upgrade to jersey 2.25.1","","closed","improvement,","tjcutajar","2017-02-13T22:59:13Z","2017-02-14T01:00:58Z"
"","1927","Upgrade to logback 1.2.1","","closed","improvement,","tjcutajar","2017-02-13T22:33:34Z","2017-02-14T03:12:42Z"
"","1923","-","","closed","","bearrito","2017-02-11T00:05:16Z","2017-02-11T00:08:27Z"
"","1918","Upgrade logback (fixes #1699)","","closed","improvement,","markelliot","2017-02-06T23:30:26Z","2017-02-14T17:22:51Z"
"","1898","Fix speling of 'reference'","","closed","documentation,","seanbright","2017-01-19T19:36:38Z","2017-01-19T19:40:10Z"
"","1797","Upgrade jersey to 2.24","","closed","","tjcutajar","2016-11-02T17:05:55Z","2016-11-02T17:07:00Z"
"","1796","Upgrade jetty to 9.3.14.v20161028","","closed","","tjcutajar","2016-11-02T16:37:33Z","2016-11-02T17:12:00Z"
"","1776","Uncritical dependency updates","","closed","improvement,","joschi","2016-10-14T11:06:21Z","2016-10-14T14:00:24Z"
"","1771","Update JerseyClientConfiguration link to dropwizard 1.0.1","","closed","documentation,","rwwarren","2016-10-11T19:19:37Z","2016-10-11T20:28:35Z"
"","1762","Also point to metrics-scala module.","","closed","documentation,","erikvanoosten","2016-10-06T19:16:04Z","2016-10-07T15:24:39Z"
"","1730","Add endpoint about revisions for Report","","closed","","bruce-genhot","2016-09-16T09:59:19Z","2016-10-13T12:31:07Z"
"","1689","Added missing escape for escape character in core docs page","","closed","documentation,","draakhan","2016-08-14T16:47:27Z","2016-08-14T18:00:46Z"
"","1682","Update maven archetype version in getting started","","closed","documentation,","danielbcorreia","2016-08-10T13:24:45Z","2016-08-13T17:01:14Z"
"","1675","Release/1.0.x","","closed","","muqing1980","2016-08-05T23:28:04Z","2016-08-06T08:26:57Z"
"","1651","Add missing release notes for 1.1.0","","closed","documentation,","jplock","2016-07-28T13:01:43Z","2016-07-28T13:30:00Z"
"","1644","Add metrics to Configuration toString","","closed","improvement,","MatthewDolan","2016-07-25T18:41:55Z","2016-07-26T07:13:47Z"
"","1641","Fix #1640: ResourceConfigurationSourceProvider - process a path to the resource in the more sophisticated way","","closed","improvement,","v-ladynev","2016-07-19T17:27:57Z","2016-11-08T02:54:23Z"
"","1637","Add documentation for polymorphic auth feature (#1632)","","closed","documentation,","psamsotha","2016-07-14T12:27:38Z","2016-07-14T16:10:44Z"
"","1587","Add a limitation section to validation","","closed","documentation,","nickbabcock","2016-06-05T20:06:02Z","2016-06-06T10:33:56Z"
"","1585","allow setting a custom health check registry per #1584","","closed","improvement,","gjesse","2016-06-03T16:22:47Z","2016-06-03T20:56:36Z"
"","1581","Add testing commands section to documentation","","closed","documentation,","nickbabcock","2016-06-02T17:19:36Z","2016-06-02T18:14:22Z"
"","1577","Minor doc updates","","closed","documentation,","nickbabcock","2016-06-01T15:04:05Z","2016-06-01T15:28:11Z"